ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"queue.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvIsQueueFull,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	prvIsQueueFull, %function
  24              	prvIsQueueFull:
  25              	.LFB24:
  26              		.file 1 "..\\..\\..\\..\\..\\..\\FreeRTOS\\FreeRTOS\\FreeRTOS\\Source\\queue.c"
   1:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*
   2:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * FreeRTOS Kernel V10.4.0
   3:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  *
   5:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * subject to the following conditions:
  11:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  *
  12:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * copies or substantial portions of the Software.
  14:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  *
  15:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  *
  22:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * https://www.FreeRTOS.org
  23:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * https://github.com/FreeRTOS
  24:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  *
  25:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  */
  26:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
  27:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #include <stdlib.h>
  28:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #include <string.h>
  29:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
  30:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  31:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 2


  32:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * task.h is included from an application file. */
  33:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  34:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
  35:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #include "FreeRTOS.h"
  36:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #include "task.h"
  37:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #include "queue.h"
  38:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
  39:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  40:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #include "croutine.h"
  41:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif
  42:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
  43:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * for the header files above, but not in this file, in order to generate the
  46:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * correct privileged Vs unprivileged linkage and placement. */
  47:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
  49:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
  50:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  51:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #define queueUNLOCKED             ( ( int8_t ) -1 )
  52:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #define queueLOCKED_UNMODIFIED    ( ( int8_t ) 0 )
  53:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #define queueINT8_MAX             ( ( int8_t ) 127 )
  54:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
  55:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * pcTail members are used as pointers into the queue storage area.  When the
  57:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * structure instead holds a pointer to the mutex holder (if any).  Map alternative
  60:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * names to the pcHead and structure member to ensure the readability of the code
  61:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  62:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * a union as their usage is mutually exclusive dependent on what the queue is
  63:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * being used for. */
  64:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #define uxQueueType               pcHead
  65:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #define queueQUEUE_IS_MUTEX       NULL
  66:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
  67:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** typedef struct QueuePointers
  68:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
  69:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     int8_t * pcTail;     /*< Points to the byte at the end of the queue storage area.  Once more by
  70:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     int8_t * pcReadFrom; /*< Points to the last place that a queued item was read from when the str
  71:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** } QueuePointers_t;
  72:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
  73:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** typedef struct SemaphoreData
  74:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
  75:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     TaskHandle_t xMutexHolder;        /*< The handle of the task that holds the mutex. */
  76:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     UBaseType_t uxRecursiveCallCount; /*< Maintains a count of the number of times a recursive mute
  77:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** } SemaphoreData_t;
  78:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
  79:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  80:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * zero. */
  81:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH    ( ( UBaseType_t ) 0 )
  82:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME          ( ( TickType_t ) 0U )
  83:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
  84:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configUSE_PREEMPTION == 0 )
  85:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
  86:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /* If the cooperative scheduler is being used then a yield should not be
  87:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * performed just because a higher priority task has been woken. */
  88:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 3


  89:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #else
  90:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  91:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif
  92:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
  93:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*
  94:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * Definition of the queue used by the scheduler.
  95:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  96:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * rationale: https://www.FreeRTOS.org/Embedded-RTOS-Queues.html
  97:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  */
  98:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** typedef struct QueueDefinition /* The old naming convention is used to prevent breaking kernel awar
  99:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
 100:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     int8_t * pcHead;           /*< Points to the beginning of the queue storage area. */
 101:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     int8_t * pcWriteTo;        /*< Points to the free next place in the storage area. */
 102:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 103:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     union
 104:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 105:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         QueuePointers_t xQueue;     /*< Data required exclusively when this structure is used as a 
 106:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a 
 107:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     } u;
 108:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 109:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     List_t xTasksWaitingToSend;             /*< List of tasks that are blocked waiting to post onto
 110:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     List_t xTasksWaitingToReceive;          /*< List of tasks that are blocked waiting to read from
 111:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 112:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     volatile UBaseType_t uxMessagesWaiting; /*< The number of items currently in the queue. */
 113:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     UBaseType_t uxLength;                   /*< The length of the queue defined as the number of it
 114:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     UBaseType_t uxItemSize;                 /*< The size of each items that the queue will hold. */
 115:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 116:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     volatile int8_t cRxLock;                /*< Stores the number of items received from the queue 
 117:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     volatile int8_t cTxLock;                /*< Stores the number of items transmitted to the queue
 118:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 119:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 120:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the memory used by the queue was static
 121:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #endif
 122:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 123:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 124:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         struct QueueDefinition * pxQueueSetContainer;
 125:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #endif
 126:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 127:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 128:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         UBaseType_t uxQueueNumber;
 129:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         uint8_t ucQueueType;
 130:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #endif
 131:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** } xQUEUE;
 132:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 133:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 134:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * name below to enable the use of older kernel aware debuggers. */
 135:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** typedef xQUEUE Queue_t;
 136:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 137:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 138:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 139:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*
 140:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 141:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 142:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  */
 143:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 144:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 145:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /* The type stored within the queue registry array.  This allows a name
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 4


 146:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * to be assigned to each queue making kernel aware debugging a little
 147:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * more user friendly. */
 148:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     typedef struct QUEUE_REGISTRY_ITEM
 149:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 150:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         const char * pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and s
 151:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         QueueHandle_t xHandle;
 152:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     } xQueueRegistryItem;
 153:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 154:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /* The old xQueueRegistryItem name is maintained above then typedefed to the
 155:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * new xQueueRegistryItem name below to enable the use of older kernel aware
 156:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * debuggers. */
 157:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     typedef xQueueRegistryItem QueueRegistryItem_t;
 158:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 159:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /* The queue registry is simply an array of QueueRegistryItem_t structures.
 160:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * The pcQueueName member of a structure being NULL is indicative of the
 161:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * array position being vacant. */
 162:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 163:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 164:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 165:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 166:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*
 167:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 168:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 169:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 170:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 171:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 172:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 173:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  */
 174:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 175:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 176:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*
 177:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 178:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  *
 179:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 180:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  */
 181:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 182:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 183:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*
 184:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 185:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  *
 186:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 187:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  */
 188:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 189:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 190:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*
 191:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 192:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * back of the queue.
 193:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  */
 194:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
 195:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                       const void * pvItemToQueue,
 196:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                       const BaseType_t xPosition ) PRIVILEGED_FUNCTION;
 197:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 198:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*
 199:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * Copies an item out of a queue.
 200:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  */
 201:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
 202:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                   void * const pvBuffer ) PRIVILEGED_FUNCTION;
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 5


 203:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 204:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 205:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 206:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*
 207:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * Checks to see if a queue is a member of a queue set, and if so, notifies
 208:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * the queue set that the queue contains data.
 209:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  */
 210:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue ) PRIVILEGED_FUNCTI
 211:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif
 212:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 213:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*
 214:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 215:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * dynamically to fill in the structure's members.
 216:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  */
 217:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 218:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                    const UBaseType_t uxItemSize,
 219:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                    uint8_t * pucQueueStorage,
 220:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                    const uint8_t ucQueueType,
 221:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                    Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 222:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 223:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*
 224:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 225:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 226:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * as a mutex.
 227:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  */
 228:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configUSE_MUTEXES == 1 )
 229:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 230:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif
 231:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 232:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configUSE_MUTEXES == 1 )
 233:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 234:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*
 235:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * If a task waiting for a mutex causes the mutex holder to inherit a
 236:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * priority, but the waiting task times out, then the holder should
 237:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * disinherit the priority - but only down to the highest priority of any
 238:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * other tasks that are waiting for the same mutex.  This function returns
 239:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * that priority.
 240:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  */
 241:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVIL
 242:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif
 243:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 244:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 245:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*
 246:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 247:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  * accessing the queue event lists.
 248:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****  */
 249:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #define prvLockQueue( pxQueue )                            \
 250:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     taskENTER_CRITICAL();                                  \
 251:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {                                                      \
 252:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( ( pxQueue )->cRxLock == queueUNLOCKED )        \
 253:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {                                                  \
 254:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             ( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED; \
 255:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }                                                  \
 256:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( ( pxQueue )->cTxLock == queueUNLOCKED )        \
 257:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {                                                  \
 258:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             ( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED; \
 259:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }                                                  \
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 6


 260:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }                                                      \
 261:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     taskEXIT_CRITICAL()
 262:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 263:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 264:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
 265:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                BaseType_t xNewQueue )
 266:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
 267:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
 268:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 269:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
 270:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 271:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     taskENTER_CRITICAL();
 272:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 273:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /
 274:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 275:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxQueue->pcWriteTo = pxQueue->pcHead;
 276:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->ux
 277:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxQueue->cRxLock = queueUNLOCKED;
 278:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxQueue->cTxLock = queueUNLOCKED;
 279:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 280:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( xNewQueue == pdFALSE )
 281:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 282:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* If there are tasks blocked waiting to read from the queue, then
 283:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * the tasks will remain blocked as after this function exits the queue
 284:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * will still be empty.  If there are tasks blocked waiting to write to
 285:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * the queue, then one should be unblocked as after this function exits
 286:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * it will be possible to write to it. */
 287:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 288:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 289:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 290:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 291:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     queueYIELD_IF_USING_PREEMPTION();
 292:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
 293:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else
 294:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 295:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
 296:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
 297:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 298:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
 299:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 300:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 301:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 302:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 303:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
 304:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 305:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* Ensure the event queues start in the correct state. */
 306:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 307:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 308:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 309:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
 310:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     taskEXIT_CRITICAL();
 311:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 312:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* A value is returned for calling semantic consistency with previous
 313:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * versions. */
 314:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     return pdPASS;
 315:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** }
 316:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 7


 317:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 318:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 319:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 320:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
 321:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                              const UBaseType_t uxItemSize,
 322:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                              uint8_t * pucQueueStorage,
 323:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                              StaticQueue_t * pxStaticQueue,
 324:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                              const uint8_t ucQueueType )
 325:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 326:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         Queue_t * pxNewQueue;
 327:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 328:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 329:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 330:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* The StaticQueue_t structure and the queue storage area must be
 331:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * supplied. */
 332:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         configASSERT( pxStaticQueue != NULL );
 333:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 334:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* A queue storage area should be provided if the item size is not 0, and
 335:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * should not be provided if the item size is 0. */
 336:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 337:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 338:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 339:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         #if ( configASSERT_DEFINED == 1 )
 340:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 341:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* Sanity check that the size of the structure used to declare a
 342:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 343:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * the real queue and semaphore structures. */
 344:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 volatile size_t xSize = sizeof( StaticQueue_t );
 345:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 configASSERT( xSize == sizeof( Queue_t ) );
 346:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 347:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 348:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         #endif /* configASSERT_DEFINED */
 349:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 350:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* The address of a statically allocated queue was passed in, use it.
 351:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * The address of a statically allocated storage area was also passed in
 352:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * but is already set. */
 353:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the str
 354:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 355:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( pxNewQueue != NULL )
 356:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 357:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 358:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 359:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* Queues can be allocated wither statically or dynamically, so
 360:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * note this queue was allocated statically in case the queue is
 361:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * later deleted. */
 362:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     pxNewQueue->ucStaticallyAllocated = pdTRUE;
 363:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
 364:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 365:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 366:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQu
 367:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 368:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
 369:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 370:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             traceQUEUE_CREATE_FAILED( ucQueueType );
 371:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             mtCOVERAGE_TEST_MARKER();
 372:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 373:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 8


 374:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         return pxNewQueue;
 375:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
 376:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 377:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 378:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 379:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 380:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 381:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 382:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
 383:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                        const UBaseType_t uxItemSize,
 384:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                        const uint8_t ucQueueType )
 385:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 386:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         Queue_t * pxNewQueue;
 387:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         size_t xQueueSizeInBytes;
 388:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         uint8_t * pucQueueStorage;
 389:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 390:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 391:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 392:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* Allocate enough space to hold the maximum number of items that
 393:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * can be in the queue at any time.  It is valid for uxItemSize to be
 394:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * zero in the case the queue is used as a semaphore. */
 395:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception
 396:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 397:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* Check for multiplication overflow. */
 398:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) 
 399:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 400:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* Allocate the queue and storage area.  Justification for MISRA
 401:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * deviation as follows:  pvPortMalloc() always ensures returned memory
 402:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * blocks are aligned per the requirements of the MCU stack.  In this case
 403:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * pvPortMalloc() must return a pointer that is guaranteed to meet the
 404:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * alignment requirements of the Queue_t structure - which in this case
 405:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * is an int8_t *.  Therefore, whenever the stack alignment requirements
 406:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * are greater than or equal to the pointer to char requirements the cast
 407:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * is safe.  In other cases alignment requirements are not strict (one or
 408:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * two bytes). */
 409:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e
 410:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 411:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( pxNewQueue != NULL )
 412:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 413:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* Jump past the queue structure to find the location of the queue
 414:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * storage area. */
 415:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             pucQueueStorage = ( uint8_t * ) pxNewQueue;
 416:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char 
 417:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 418:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 419:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 420:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* Queues can be created either statically or dynamically, so
 421:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * note this task was created dynamically in case it is later
 422:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * deleted. */
 423:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     pxNewQueue->ucStaticallyAllocated = pdFALSE;
 424:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
 425:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             #endif /* configSUPPORT_STATIC_ALLOCATION */
 426:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 427:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQu
 428:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 429:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
 430:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 9


 431:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             traceQUEUE_CREATE_FAILED( ucQueueType );
 432:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             mtCOVERAGE_TEST_MARKER();
 433:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 434:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 435:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         return pxNewQueue;
 436:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
 437:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 438:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 439:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 440:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 441:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 442:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                    const UBaseType_t uxItemSize,
 443:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                    uint8_t * pucQueueStorage,
 444:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                    const uint8_t ucQueueType,
 445:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                    Queue_t * pxNewQueue )
 446:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
 447:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* Remove compiler warnings about unused parameters should
 448:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * configUSE_TRACE_FACILITY not be set to 1. */
 449:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     ( void ) ucQueueType;
 450:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 451:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     if( uxItemSize == ( UBaseType_t ) 0 )
 452:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 453:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* No RAM was allocated for the queue storage area, but PC head cannot
 454:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * be set to NULL because NULL is used as a key to say the queue is used as
 455:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * a mutex.  Therefore just set pcHead to point to the queue as a benign
 456:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * value that is known to be within the memory map. */
 457:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 458:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
 459:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     else
 460:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 461:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* Set the head to the start of the queue storage area. */
 462:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 463:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
 464:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 465:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* Initialise the queue members as described where the queue type is
 466:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * defined. */
 467:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     pxNewQueue->uxLength = uxQueueLength;
 468:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 469:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 470:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 471:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 472:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 473:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             pxNewQueue->ucQueueType = ucQueueType;
 474:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 475:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #endif /* configUSE_TRACE_FACILITY */
 476:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 477:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 478:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 479:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             pxNewQueue->pxQueueSetContainer = NULL;
 480:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 481:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #endif /* configUSE_QUEUE_SETS */
 482:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 483:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     traceQUEUE_CREATE( pxNewQueue );
 484:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** }
 485:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 486:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 487:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configUSE_MUTEXES == 1 )
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 10


 488:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 489:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue )
 490:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 491:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( pxNewQueue != NULL )
 492:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 493:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* The queue create function will set all the queue structure members
 494:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             * correctly for a generic queue, but this function is creating a
 495:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             * mutex.  Overwrite those members that need to be set differently -
 496:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             * in particular the information required for priority inheritance. */
 497:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 498:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 499:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 500:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* In case this is a recursive mutex. */
 501:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 502:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 503:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             traceCREATE_MUTEX( pxNewQueue );
 504:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 505:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* Start with the semaphore in the expected state. */
 506:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 507:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 508:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
 509:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 510:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             traceCREATE_MUTEX_FAILED();
 511:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 512:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
 513:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 514:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* configUSE_MUTEXES */
 515:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 516:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 517:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 518:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 519:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 520:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 521:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         QueueHandle_t xNewQueue;
 522:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 523:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 524:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 525:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 526:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 527:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         return xNewQueue;
 528:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
 529:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 530:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* configUSE_MUTEXES */
 531:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 532:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 533:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 534:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 535:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
 536:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                            StaticQueue_t * pxStaticQueue )
 537:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 538:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         QueueHandle_t xNewQueue;
 539:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 540:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 541:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* Prevent compiler warnings about unused parameters if
 542:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * configUSE_TRACE_FACILITY does not equal 1. */
 543:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         ( void ) ucQueueType;
 544:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 11


 545:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQ
 546:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 547:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 548:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         return xNewQueue;
 549:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
 550:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 551:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* configUSE_MUTEXES */
 552:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 553:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 554:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 555:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 556:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 557:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 558:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         TaskHandle_t pxReturn;
 559:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 560:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 561:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* This function is called by xSemaphoreGetMutexHolder(), and should not
 562:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * be called directly.  Note:  This is a good way of determining if the
 563:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * calling task is the mutex holder, but not a good way of determining the
 564:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * identity of the mutex holder, as the holder may change between the
 565:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * following critical section exiting and the function returning. */
 566:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         taskENTER_CRITICAL();
 567:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 568:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 569:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 570:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 571:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 572:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
 573:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 574:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 pxReturn = NULL;
 575:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 576:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 577:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         taskEXIT_CRITICAL();
 578:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 579:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         return pxReturn;
 580:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 581:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 582:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 583:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 584:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 585:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 586:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 587:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 588:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 589:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         TaskHandle_t pxReturn;
 590:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 591:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         configASSERT( xSemaphore );
 592:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 593:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* Mutexes cannot be used in interrupt service routines, so the mutex
 594:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * holder should not change in an ISR, and therefore a critical section is
 595:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * not required here. */
 596:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 597:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 598:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 599:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 600:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
 601:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 12


 602:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             pxReturn = NULL;
 603:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 604:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 605:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         return pxReturn;
 606:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 607:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 608:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 609:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 610:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 611:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 612:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 613:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 614:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 615:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         BaseType_t xReturn;
 616:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 617:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 618:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         configASSERT( pxMutex );
 619:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 620:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* If this is the task that holds the mutex then xMutexHolder will not
 621:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * change outside of this task.  If this task does not hold the mutex then
 622:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * pxMutexHolder can never coincidentally equal the tasks handle, and as
 623:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * this is the only condition we are interested in it does not matter if
 624:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * pxMutexHolder is accessed simultaneously by another task.  Therefore no
 625:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * mutual exclusion is required to test the pxMutexHolder variable. */
 626:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 627:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 628:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             traceGIVE_MUTEX_RECURSIVE( pxMutex );
 629:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 630:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 631:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * the task handle, therefore no underflow check is required.  Also,
 632:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * uxRecursiveCallCount is only modified by the mutex holder, and as
 633:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * there can only be one, no mutual exclusion is required to modify the
 634:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * uxRecursiveCallCount member. */
 635:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 636:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 637:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* Has the recursive call count unwound to 0? */
 638:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 639:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 640:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* Return the mutex.  This will automatically unblock any other
 641:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * task that might be waiting to access the mutex. */
 642:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO
 643:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 644:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
 645:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 646:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 647:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 648:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 649:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             xReturn = pdPASS;
 650:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 651:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
 652:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 653:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* The mutex cannot be given because the calling task is not the
 654:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * holder. */
 655:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             xReturn = pdFAIL;
 656:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 657:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 658:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 13


 659:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 660:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         return xReturn;
 661:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
 662:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 663:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 664:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 665:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 666:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 667:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 668:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
 669:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                          TickType_t xTicksToWait )
 670:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 671:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         BaseType_t xReturn;
 672:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 673:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 674:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         configASSERT( pxMutex );
 675:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 676:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* Comments regarding mutual exclusion as per those within
 677:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * xQueueGiveMutexRecursive(). */
 678:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 679:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         traceTAKE_MUTEX_RECURSIVE( pxMutex );
 680:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 681:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 682:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 683:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 684:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             xReturn = pdPASS;
 685:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 686:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
 687:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 688:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 689:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 690:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* pdPASS will only be returned if the mutex was successfully
 691:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * obtained.  The calling task may have entered the Blocked state
 692:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * before reaching here. */
 693:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( xReturn != pdFAIL )
 694:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 695:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 696:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 697:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
 698:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 699:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 700:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 701:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 702:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 703:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         return xReturn;
 704:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
 705:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 706:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 707:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 708:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 709:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 710:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 711:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
 712:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                                        const UBaseType_t uxInitialCount,
 713:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                                        StaticQueue_t * pxStaticQueue )
 714:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 715:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         QueueHandle_t xHandle;
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 14


 716:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 717:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         configASSERT( uxMaxCount != 0 );
 718:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         configASSERT( uxInitialCount <= uxMaxCount );
 719:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 720:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, px
 721:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 722:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( xHandle != NULL )
 723:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 724:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 725:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 726:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             traceCREATE_COUNTING_SEMAPHORE();
 727:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 728:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
 729:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 730:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             traceCREATE_COUNTING_SEMAPHORE_FAILED();
 731:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 732:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 733:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         return xHandle;
 734:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
 735:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 736:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 737:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 738:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 739:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 740:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 741:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
 742:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                                  const UBaseType_t uxInitialCount )
 743:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 744:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         QueueHandle_t xHandle;
 745:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 746:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         configASSERT( uxMaxCount != 0 );
 747:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         configASSERT( uxInitialCount <= uxMaxCount );
 748:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 749:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYP
 750:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 751:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( xHandle != NULL )
 752:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 753:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 754:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 755:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             traceCREATE_COUNTING_SEMAPHORE();
 756:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 757:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
 758:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 759:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             traceCREATE_COUNTING_SEMAPHORE_FAILED();
 760:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 761:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 762:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         return xHandle;
 763:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
 764:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 765:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 766:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 767:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 768:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
 769:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                               const void * const pvItemToQueue,
 770:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                               TickType_t xTicksToWait,
 771:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                               const BaseType_t xCopyPosition )
 772:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 15


 773:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 774:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     TimeOut_t xTimeOut;
 775:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
 776:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 777:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
 778:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 779:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 780:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 781:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 782:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 783:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 784:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #endif
 785:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 786:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /*lint -save -e904 This function relaxes the coding standard somewhat to
 787:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * allow return statements within the function itself.  This is done in the
 788:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * interest of execution time efficiency. */
 789:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     for( ; ; )
 790:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 791:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         taskENTER_CRITICAL();
 792:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 793:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* Is there room on the queue now?  The running task must be the
 794:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * highest priority task wanting to access the queue.  If the head item
 795:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * in the queue is to be overwritten then it does not matter if the
 796:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * queue is full. */
 797:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERW
 798:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 799:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 traceQUEUE_SEND( pxQueue );
 800:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 801:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
 802:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
 803:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 804:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 805:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition 
 806:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 807:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         if( pxQueue->pxQueueSetContainer != NULL )
 808:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
 809:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting 
 810:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
 811:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 /* Do not notify the queue set as an existing item
 812:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * was overwritten in the queue so the number of items
 813:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * in the queue has not changed. */
 814:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 815:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
 816:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 817:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
 818:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 /* The queue is a member of a queue set, and posting
 819:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * to the queue set caused a higher priority task to
 820:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * unblock. A context switch is required. */
 821:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 822:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
 823:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             else
 824:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
 825:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 826:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
 827:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
 828:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         else
 829:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 16


 830:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             /* If there was a task waiting for data to arrive on the
 831:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                              * queue then unblock it now. */
 832:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
 833:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
 834:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
 835:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 {
 836:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     /* The unblocked task has a priority higher than
 837:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                      * our own so yield immediately.  Yes it is ok to
 838:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                      * do this from within the critical section - the
 839:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                      * kernel takes care of that. */
 840:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     queueYIELD_IF_USING_PREEMPTION();
 841:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 }
 842:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 else
 843:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 {
 844:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
 845:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 }
 846:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
 847:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             else if( xYieldRequired != pdFALSE )
 848:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
 849:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 /* This path is a special case that will only get
 850:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * executed if the task was holding multiple mutexes
 851:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * and the mutexes were given back in an order that is
 852:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * different to that in which they were taken. */
 853:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 854:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
 855:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             else
 856:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
 857:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 858:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
 859:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
 860:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
 861:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 #else /* configUSE_QUEUE_SETS */
 862:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
 863:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition 
 864:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 865:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         /* If there was a task waiting for data to arrive on the
 866:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                          * queue then unblock it now. */
 867:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 868:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
 869:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
 870:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
 871:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 /* The unblocked task has a priority higher than
 872:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * our own so yield immediately.  Yes it is ok to do
 873:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * this from within the critical section - the kernel
 874:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * takes care of that. */
 875:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 876:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
 877:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             else
 878:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
 879:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 880:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
 881:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
 882:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         else if( xYieldRequired != pdFALSE )
 883:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
 884:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             /* This path is a special case that will only get
 885:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                              * executed if the task was holding multiple mutexes and
 886:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                              * the mutexes were given back in an order that is
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 17


 887:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                              * different to that in which they were taken. */
 888:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
 889:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
 890:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         else
 891:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
 892:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 893:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
 894:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
 895:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
 896:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 897:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 taskEXIT_CRITICAL();
 898:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 return pdPASS;
 899:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 900:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
 901:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 902:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
 903:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 904:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* The queue was full and no block time is specified (or
 905:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * the block time has expired) so leave now. */
 906:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     taskEXIT_CRITICAL();
 907:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 908:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* Return to the original privilege level before exiting
 909:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * the function. */
 910:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     traceQUEUE_SEND_FAILED( pxQueue );
 911:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     return errQUEUE_FULL;
 912:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
 913:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
 914:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 915:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* The queue was full and a block time was specified so
 916:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * configure the timeout structure. */
 917:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 918:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     xEntryTimeSet = pdTRUE;
 919:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
 920:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else
 921:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 922:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* Entry time was already set. */
 923:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
 924:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
 925:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 926:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 927:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         taskEXIT_CRITICAL();
 928:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 929:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
 930:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * now the critical section has been exited. */
 931:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 932:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         vTaskSuspendAll();
 933:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         prvLockQueue( pxQueue );
 934:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 935:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* Update the timeout state to see if it has expired yet. */
 936:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 937:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 938:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
 939:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 940:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 941:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 942:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 943:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* Unlocking the queue means queue events can effect the
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 18


 944:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * event list.  It is possible that interrupts occurring now
 945:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * remove this task from the event list again - but as the
 946:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * scheduler is suspended the task will go onto the pending
 947:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * ready last instead of the actual ready list. */
 948:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
 949:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 950:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* Resuming the scheduler will move tasks from the pending
 951:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * ready list into the ready list - so it is feasible that this
 952:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * task is already in a ready list before it yields - in which
 953:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * case the yield will not cause a context switch unless there
 954:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * is also a higher priority task in the pending ready list. */
 955:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
 956:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 957:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     portYIELD_WITHIN_API();
 958:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
 959:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 960:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
 961:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 962:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* Try again. */
 963:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
 964:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 ( void ) xTaskResumeAll();
 965:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 966:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 967:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
 968:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 969:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* The timeout has expired. */
 970:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             prvUnlockQueue( pxQueue );
 971:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             ( void ) xTaskResumeAll();
 972:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 973:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             traceQUEUE_SEND_FAILED( pxQueue );
 974:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             return errQUEUE_FULL;
 975:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 976:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     } /*lint -restore */
 977:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** }
 978:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 979:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 980:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
 981:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                      const void * const pvItemToQueue,
 982:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                      BaseType_t * const pxHigherPriorityTaskWoken,
 983:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                      const BaseType_t xCopyPosition )
 984:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
 985:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
 986:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     UBaseType_t uxSavedInterruptStatus;
 987:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
 988:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 989:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
 990:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 991:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 992:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 993:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
 994:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
 995:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
 996:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
 997:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 998:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 999:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1000:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * assigned a priority above the configured maximum system call priority.
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 19


1001:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1002:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1003:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1004:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1005:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1006:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1007:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1008:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1009:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* Similar to xQueueGenericSend, except without blocking if there is no room
1010:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * in the queue.  Also don't directly wake a task that was blocked on a queue
1011:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1012:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1013:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * post). */
1014:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1015:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
1016:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE
1017:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
1018:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
1019:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
1020:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1021:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1022:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1023:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
1024:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
1025:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              *  in a task disinheriting a priority and prvCopyDataToQueue() can be
1026:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              *  called here even though the disinherit function does not check if
1027:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              *  the scheduler is suspended before accessing the ready lists. */
1028:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1029:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1030:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1031:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * be done when the queue is unlocked later. */
1032:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( cTxLock == queueUNLOCKED )
1033:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1034:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1035:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
1036:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         if( pxQueue->pxQueueSetContainer != NULL )
1037:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
1038:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting 
1039:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
1040:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 /* Do not notify the queue set as an existing item
1041:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * was overwritten in the queue so the number of items
1042:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * in the queue has not changed. */
1043:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1044:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
1045:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1046:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
1047:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 /* The queue is a member of a queue set, and posting
1048:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * to the queue set caused a higher priority task to
1049:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * unblock.  A context switch is required. */
1050:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1051:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 {
1052:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1053:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 }
1054:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 else
1055:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 {
1056:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1057:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 20


1058:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
1059:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             else
1060:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
1061:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1062:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
1063:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
1064:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         else
1065:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
1066:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
1067:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
1068:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
1069:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 {
1070:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     /* The task waiting has a higher priority so
1071:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                      *  record that a context switch is required. */
1072:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     if( pxHigherPriorityTaskWoken != NULL )
1073:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     {
1074:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                         *pxHigherPriorityTaskWoken = pdTRUE;
1075:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     }
1076:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     else
1077:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     {
1078:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                         mtCOVERAGE_TEST_MARKER();
1079:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     }
1080:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 }
1081:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 else
1082:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 {
1083:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1084:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 }
1085:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
1086:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             else
1087:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
1088:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1089:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
1090:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
1091:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
1092:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1093:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
1094:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1095:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
1096:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1097:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
1098:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 /* The task waiting has a higher priority so record that a
1099:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * context switch is required. */
1100:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1101:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 {
1102:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1103:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 }
1104:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 else
1105:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 {
1106:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1107:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 }
1108:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
1109:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             else
1110:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
1111:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1112:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
1113:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
1114:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         else
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 21


1115:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
1116:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1117:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
1118:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1119:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         /* Not used in this path. */
1120:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         ( void ) uxPreviousMessagesWaiting;
1121:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
1122:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1123:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
1124:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
1125:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1126:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1127:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * knows that data was posted while it was locked. */
1128:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 configASSERT( cTxLock != queueINT8_MAX );
1129:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1130:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1131:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
1132:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1133:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             xReturn = pdPASS;
1134:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
1135:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
1136:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
1137:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1138:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             xReturn = errQUEUE_FULL;
1139:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
1140:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
1141:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1142:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1143:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     return xReturn;
1144:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** }
1145:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1146:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1147:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
1148:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                               BaseType_t * const pxHigherPriorityTaskWoken )
1149:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
1150:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
1151:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1152:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
1153:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1154:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1155:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * item size is 0.  Don't directly wake a task that was blocked on a queue
1156:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1157:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1158:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * post). */
1159:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1160:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
1161:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1162:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1163:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * if the item size is not 0. */
1164:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
1165:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1166:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* Normally a mutex would not be given from an interrupt, especially if
1167:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * there is a mutex holder, as priority inheritance makes no sense for an
1168:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * interrupts, only tasks. */
1169:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMu
1170:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1171:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 22


1172:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1173:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1174:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1175:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1176:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1177:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1178:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * assigned a priority above the configured maximum system call priority.
1179:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1180:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1181:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1182:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1183:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1184:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1185:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1186:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1187:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1188:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
1189:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1190:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1191:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* When the queue is used to implement a semaphore no data is ever
1192:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * moved through the queue but it is still valid to see if the queue 'has
1193:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * space'. */
1194:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( uxMessagesWaiting < pxQueue->uxLength )
1195:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
1196:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
1197:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1198:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1199:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1200:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* A task can only have an inherited priority if it is a mutex
1201:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * holder - and if there is a mutex holder then the mutex cannot be
1202:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * given from an ISR.  As this is the ISR version of the function it
1203:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * can be assumed there is no mutex holder and no need to determine if
1204:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * priority disinheritance is needed.  Simply increase the count of
1205:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * messages (semaphores) available. */
1206:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1207:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1208:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1209:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * be done when the queue is unlocked later. */
1210:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( cTxLock == queueUNLOCKED )
1211:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1212:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1213:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
1214:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         if( pxQueue->pxQueueSetContainer != NULL )
1215:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
1216:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1217:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
1218:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 /* The semaphore is a member of a queue set, and
1219:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * posting to the queue set caused a higher priority
1220:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * task to unblock.  A context switch is required. */
1221:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1222:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 {
1223:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1224:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 }
1225:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 else
1226:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 {
1227:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1228:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 23


1229:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
1230:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             else
1231:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
1232:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1233:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
1234:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
1235:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         else
1236:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
1237:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
1238:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
1239:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
1240:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 {
1241:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     /* The task waiting has a higher priority so
1242:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                      *  record that a context switch is required. */
1243:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     if( pxHigherPriorityTaskWoken != NULL )
1244:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     {
1245:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                         *pxHigherPriorityTaskWoken = pdTRUE;
1246:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     }
1247:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     else
1248:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     {
1249:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                         mtCOVERAGE_TEST_MARKER();
1250:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     }
1251:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 }
1252:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 else
1253:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 {
1254:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1255:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 }
1256:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
1257:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             else
1258:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
1259:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1260:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
1261:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
1262:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
1263:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1264:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
1265:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1266:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
1267:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1268:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
1269:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 /* The task waiting has a higher priority so record that a
1270:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * context switch is required. */
1271:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1272:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 {
1273:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1274:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 }
1275:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 else
1276:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 {
1277:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1278:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 }
1279:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
1280:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             else
1281:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
1282:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1283:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
1284:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
1285:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         else
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 24


1286:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
1287:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1288:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
1289:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
1290:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1291:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
1292:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
1293:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1294:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1295:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * knows that data was posted while it was locked. */
1296:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 configASSERT( cTxLock != queueINT8_MAX );
1297:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1298:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1299:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
1300:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1301:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             xReturn = pdPASS;
1302:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
1303:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
1304:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
1305:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1306:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             xReturn = errQUEUE_FULL;
1307:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
1308:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
1309:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1310:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1311:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     return xReturn;
1312:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** }
1313:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1314:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1315:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue,
1316:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                           void * const pvBuffer,
1317:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                           TickType_t xTicksToWait )
1318:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
1319:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1320:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     TimeOut_t xTimeOut;
1321:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
1322:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1323:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* Check the pointer is not NULL. */
1324:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( ( pxQueue ) );
1325:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1326:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1327:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * is zero (so no data is copied into the buffer). */
1328:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
1329:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1330:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* Cannot block if the scheduler is suspended. */
1331:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1332:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
1333:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
1334:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
1335:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #endif
1336:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1337:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1338:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * allow return statements within the function itself.  This is done in the
1339:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * interest of execution time efficiency. */
1340:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     for( ; ; )
1341:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
1342:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         taskENTER_CRITICAL();
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 25


1343:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
1344:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1345:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1346:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1347:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * must be the highest priority task wanting to access the queue. */
1348:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1349:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1350:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* Data available, remove one item. */
1351:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
1352:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1353:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1354:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1355:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* There is now space in the queue, were any tasks waiting to
1356:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * post to the queue?  If so, unblock the highest priority waiting
1357:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * task. */
1358:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1359:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1360:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1361:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
1362:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1363:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
1364:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     else
1365:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
1366:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1367:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
1368:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
1369:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else
1370:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1371:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1372:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
1373:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1374:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 taskEXIT_CRITICAL();
1375:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 return pdPASS;
1376:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
1377:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
1378:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1379:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1380:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1381:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* The queue was empty and no block time is specified (or
1382:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * the block time has expired) so leave now. */
1383:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     taskEXIT_CRITICAL();
1384:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1385:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     return errQUEUE_EMPTY;
1386:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
1387:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1388:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1389:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* The queue was empty and a block time was specified so
1390:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * configure the timeout structure. */
1391:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1392:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     xEntryTimeSet = pdTRUE;
1393:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
1394:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else
1395:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1396:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* Entry time was already set. */
1397:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1398:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
1399:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 26


1400:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
1401:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         taskEXIT_CRITICAL();
1402:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1403:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1404:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * now the critical section has been exited. */
1405:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1406:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         vTaskSuspendAll();
1407:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         prvLockQueue( pxQueue );
1408:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1409:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1410:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1411:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
1412:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* The timeout has not expired.  If the queue is still empty place
1413:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * the task on the list of tasks waiting to receive from the queue. */
1414:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1415:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1416:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1417:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1418:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
1419:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1420:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1421:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1422:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     portYIELD_WITHIN_API();
1423:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
1424:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else
1425:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1426:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1427:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
1428:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
1429:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
1430:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1431:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* The queue contains data again.  Loop back to try and read the
1432:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * data. */
1433:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
1434:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 ( void ) xTaskResumeAll();
1435:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
1436:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
1437:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
1438:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
1439:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* Timed out.  If there is no data in the queue exit, otherwise loop
1440:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * back and attempt to read the data. */
1441:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             prvUnlockQueue( pxQueue );
1442:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             ( void ) xTaskResumeAll();
1443:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1444:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1445:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1446:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1447:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 return errQUEUE_EMPTY;
1448:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
1449:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
1450:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1451:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1452:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
1453:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
1454:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     } /*lint -restore */
1455:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** }
1456:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 27


1457:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1458:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
1459:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 TickType_t xTicksToWait )
1460:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
1461:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1462:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     TimeOut_t xTimeOut;
1463:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
1464:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1465:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #if ( configUSE_MUTEXES == 1 )
1466:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         BaseType_t xInheritanceOccurred = pdFALSE;
1467:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #endif
1468:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1469:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* Check the queue pointer is not NULL. */
1470:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( ( pxQueue ) );
1471:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1472:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* Check this really is a semaphore, in which case the item size will be
1473:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * 0. */
1474:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
1475:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1476:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* Cannot block if the scheduler is suspended. */
1477:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1478:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
1479:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
1480:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
1481:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #endif
1482:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1483:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1484:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * statements within the function itself.  This is done in the interest
1485:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * of execution time efficiency. */
1486:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     for( ; ; )
1487:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
1488:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         taskENTER_CRITICAL();
1489:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
1490:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* Semaphores are queues with an item size of 0, and where the
1491:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * number of messages in the queue is the semaphore's count value. */
1492:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1493:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1494:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1495:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * must be the highest priority task wanting to access the queue. */
1496:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1497:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1498:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1499:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1500:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* Semaphores are queues with a data size of zero and where the
1501:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * messages waiting is the semaphore's count.  Reduce the count. */
1502:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1503:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1504:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1505:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
1506:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1507:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
1508:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             /* Record the information required to implement
1509:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                              * priority inheritance should it become necessary. */
1510:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
1511:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
1512:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         else
1513:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 28


1514:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1515:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
1516:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
1517:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 #endif /* configUSE_MUTEXES */
1518:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1519:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* Check to see if other tasks are blocked waiting to give the
1520:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * semaphore, and if so, unblock the highest priority such task. */
1521:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1522:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1523:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1524:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
1525:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1526:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
1527:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     else
1528:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
1529:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1530:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
1531:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
1532:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else
1533:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1534:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1535:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
1536:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1537:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 taskEXIT_CRITICAL();
1538:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 return pdPASS;
1539:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
1540:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
1541:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1542:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1543:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1544:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* For inheritance to have occurred there must have been an
1545:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * initial timeout, and an adjusted timeout cannot become 0, as
1546:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * if it were 0 the function would have exited. */
1547:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     #if ( configUSE_MUTEXES == 1 )
1548:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
1549:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             configASSERT( xInheritanceOccurred == pdFALSE );
1550:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
1551:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     #endif /* configUSE_MUTEXES */
1552:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1553:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* The semaphore count was 0 and no block time is specified
1554:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * (or the block time has expired) so exit now. */
1555:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     taskEXIT_CRITICAL();
1556:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1557:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     return errQUEUE_EMPTY;
1558:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
1559:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1560:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1561:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* The semaphore count was 0 and a block time was specified
1562:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * so configure the timeout structure ready to block. */
1563:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1564:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     xEntryTimeSet = pdTRUE;
1565:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
1566:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else
1567:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1568:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* Entry time was already set. */
1569:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1570:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 29


1571:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
1572:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
1573:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         taskEXIT_CRITICAL();
1574:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1575:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* Interrupts and other tasks can give to and take from the semaphore
1576:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * now the critical section has been exited. */
1577:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1578:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         vTaskSuspendAll();
1579:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         prvLockQueue( pxQueue );
1580:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1581:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1582:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1583:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
1584:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* A block time is specified and not expired.  If the semaphore
1585:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * count is 0 then enter the Blocked state to wait for a semaphore to
1586:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * become available.  As semaphores are implemented with queues the
1587:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1588:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1589:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1590:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1591:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1592:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1593:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
1594:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1595:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
1596:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             taskENTER_CRITICAL();
1597:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
1598:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.
1599:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
1600:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             taskEXIT_CRITICAL();
1601:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
1602:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         else
1603:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
1604:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1605:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
1606:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
1607:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1608:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1609:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1610:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
1611:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1612:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1613:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1614:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     portYIELD_WITHIN_API();
1615:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
1616:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else
1617:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1618:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1619:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
1620:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
1621:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
1622:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1623:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* There was no timeout and the semaphore count was not 0, so
1624:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * attempt to take the semaphore again. */
1625:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
1626:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 ( void ) xTaskResumeAll();
1627:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 30


1628:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
1629:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
1630:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
1631:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* Timed out. */
1632:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             prvUnlockQueue( pxQueue );
1633:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             ( void ) xTaskResumeAll();
1634:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1635:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* If the semaphore count is 0 exit now as the timeout has
1636:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * expired.  Otherwise return to attempt to take the semaphore that is
1637:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * known to be available.  As semaphores are implemented by queues the
1638:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1639:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1640:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1641:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1642:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
1643:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         /* xInheritanceOccurred could only have be set if
1644:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                          * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1645:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                          * test the mutex type again to check it is actually a mutex. */
1646:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         if( xInheritanceOccurred != pdFALSE )
1647:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
1648:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             taskENTER_CRITICAL();
1649:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
1650:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 UBaseType_t uxHighestWaitingPriority;
1651:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1652:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 /* This task blocking on the mutex caused another
1653:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * task to inherit this task's priority.  Now this task
1654:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * has timed out the priority should be disinherited
1655:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * again, but only as low as the next highest priority
1656:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * task that is waiting for the same mutex. */
1657:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( px
1658:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHo
1659:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
1660:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             taskEXIT_CRITICAL();
1661:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
1662:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
1663:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 #endif /* configUSE_MUTEXES */
1664:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1665:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1666:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 return errQUEUE_EMPTY;
1667:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
1668:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
1669:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1670:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1671:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
1672:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
1673:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     } /*lint -restore */
1674:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** }
1675:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1676:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1677:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue,
1678:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                        void * const pvBuffer,
1679:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                        TickType_t xTicksToWait )
1680:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
1681:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1682:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     TimeOut_t xTimeOut;
1683:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     int8_t * pcOriginalReadPosition;
1684:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 31


1685:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1686:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* Check the pointer is not NULL. */
1687:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( ( pxQueue ) );
1688:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1689:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1690:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * is zero (so no data is copied into the buffer. */
1691:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
1692:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1693:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* Cannot block if the scheduler is suspended. */
1694:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1695:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
1696:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
1697:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
1698:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #endif
1699:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1700:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1701:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * allow return statements within the function itself.  This is done in the
1702:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * interest of execution time efficiency. */
1703:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     for( ; ; )
1704:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
1705:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         taskENTER_CRITICAL();
1706:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
1707:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1708:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1709:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1710:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * must be the highest priority task wanting to access the queue. */
1711:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1712:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1713:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* Remember the read position so it can be reset after the data
1714:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * is read from the queue as this function is only peeking the
1715:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * data, not removing it. */
1716:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1717:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1718:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
1719:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 traceQUEUE_PEEK( pxQueue );
1720:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1721:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* The data is not being removed, so reset the read pointer. */
1722:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1723:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1724:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* The data is being left in the queue, so see if there are
1725:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * any other tasks waiting for the data. */
1726:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1727:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1728:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE
1729:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
1730:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         /* The task waiting has a higher priority than this task. */
1731:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1732:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
1733:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     else
1734:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
1735:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1736:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
1737:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
1738:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else
1739:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1740:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1741:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 32


1742:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1743:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 taskEXIT_CRITICAL();
1744:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 return pdPASS;
1745:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
1746:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
1747:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1748:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1749:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1750:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* The queue was empty and no block time is specified (or
1751:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * the block time has expired) so leave now. */
1752:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     taskEXIT_CRITICAL();
1753:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     traceQUEUE_PEEK_FAILED( pxQueue );
1754:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     return errQUEUE_EMPTY;
1755:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
1756:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1757:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1758:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* The queue was empty and a block time was specified so
1759:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * configure the timeout structure ready to enter the blocked
1760:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * state. */
1761:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1762:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     xEntryTimeSet = pdTRUE;
1763:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
1764:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else
1765:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1766:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* Entry time was already set. */
1767:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1768:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
1769:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
1770:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
1771:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         taskEXIT_CRITICAL();
1772:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1773:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1774:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * now the critical section has been exited. */
1775:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1776:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         vTaskSuspendAll();
1777:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         prvLockQueue( pxQueue );
1778:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1779:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1780:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1781:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
1782:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* Timeout has not expired yet, check to see if there is data in the
1783:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             * queue now, and if not enter the Blocked state to wait for data. */
1784:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1785:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1786:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1787:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1788:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
1789:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1790:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1791:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1792:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     portYIELD_WITHIN_API();
1793:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
1794:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else
1795:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1796:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1797:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
1798:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 33


1799:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
1800:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1801:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* There is data in the queue now, so don't enter the blocked
1802:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * state, instead return to try and obtain the data. */
1803:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
1804:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 ( void ) xTaskResumeAll();
1805:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
1806:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
1807:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
1808:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
1809:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* The timeout has expired.  If there is still no data in the queue
1810:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * exit, otherwise go back and try to read the data again. */
1811:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             prvUnlockQueue( pxQueue );
1812:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             ( void ) xTaskResumeAll();
1813:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1814:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1815:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1816:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 traceQUEUE_PEEK_FAILED( pxQueue );
1817:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 return errQUEUE_EMPTY;
1818:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
1819:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
1820:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1821:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1822:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
1823:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
1824:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     } /*lint -restore */
1825:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** }
1826:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1827:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1828:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
1829:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  void * const pvBuffer,
1830:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  BaseType_t * const pxHigherPriorityTaskWoken )
1831:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
1832:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
1833:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1834:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
1835:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1836:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
1837:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1838:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1839:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1840:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1841:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1842:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1843:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1844:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1845:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1846:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * assigned a priority above the configured maximum system call priority.
1847:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1848:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1849:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1850:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1851:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1852:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1853:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1854:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1855:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 34


1856:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
1857:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1858:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1859:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
1860:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1861:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
1862:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             const int8_t cRxLock = pxQueue->cRxLock;
1863:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1864:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1865:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1866:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
1867:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1868:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1869:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* If the queue is locked the event list will not be modified.
1870:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * Instead update the lock count so the task that unlocks the queue
1871:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * will know that an ISR has removed data while the queue was
1872:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * locked. */
1873:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( cRxLock == queueUNLOCKED )
1874:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1875:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1876:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1877:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1878:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
1879:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         /* The task waiting has a higher priority than us so
1880:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                          * force a context switch. */
1881:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         if( pxHigherPriorityTaskWoken != NULL )
1882:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
1883:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             *pxHigherPriorityTaskWoken = pdTRUE;
1884:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
1885:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         else
1886:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
1887:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1888:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
1889:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
1890:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     else
1891:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
1892:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1893:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
1894:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
1895:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else
1896:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
1897:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1898:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
1899:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
1900:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
1901:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
1902:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1903:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * knows that data was removed while it was locked. */
1904:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 configASSERT( cRxLock != queueINT8_MAX );
1905:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1906:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1907:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
1908:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1909:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             xReturn = pdPASS;
1910:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
1911:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
1912:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 35


1913:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             xReturn = pdFAIL;
1914:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1915:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
1916:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
1917:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1918:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1919:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     return xReturn;
1920:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** }
1921:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1922:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1923:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
1924:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                               void * const pvBuffer )
1925:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
1926:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
1927:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1928:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     int8_t * pcOriginalReadPosition;
1929:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
1930:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1931:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
1932:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1933:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1934:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1935:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1936:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1937:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1938:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1939:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1940:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1941:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1942:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * assigned a priority above the configured maximum system call priority.
1943:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1944:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1945:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1946:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1947:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1948:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1949:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1950:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1951:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1952:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
1953:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
1954:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1955:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
1956:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             traceQUEUE_PEEK_FROM_ISR( pxQueue );
1957:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1958:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* Remember the read position so it can be reset as nothing is
1959:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * actually being removed from the queue. */
1960:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1961:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
1962:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1963:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1964:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             xReturn = pdPASS;
1965:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
1966:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
1967:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
1968:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             xReturn = pdFAIL;
1969:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 36


1970:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
1971:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
1972:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1973:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1974:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     return xReturn;
1975:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** }
1976:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1977:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1978:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1979:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
1980:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     UBaseType_t uxReturn;
1981:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1982:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( xQueue );
1983:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1984:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     taskENTER_CRITICAL();
1985:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
1986:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1987:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
1988:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     taskEXIT_CRITICAL();
1989:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1990:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     return uxReturn;
1991:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1992:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1993:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1994:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1995:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
1996:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     UBaseType_t uxReturn;
1997:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
1998:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
1999:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
2000:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2001:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     taskENTER_CRITICAL();
2002:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
2003:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
2004:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2005:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     taskEXIT_CRITICAL();
2006:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2007:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     return uxReturn;
2008:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
2009:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2010:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2011:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
2012:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
2013:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     UBaseType_t uxReturn;
2014:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
2015:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2016:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
2017:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
2018:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2019:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     return uxReturn;
2020:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
2021:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2022:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2023:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
2024:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
2025:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
2026:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 37


2027:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
2028:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     traceQUEUE_DELETE( pxQueue );
2029:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2030:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #if ( configQUEUE_REGISTRY_SIZE > 0 )
2031:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2032:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             vQueueUnregisterQueue( pxQueue );
2033:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2034:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #endif
2035:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2036:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
2037:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2038:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* The queue can only have been allocated dynamically - free it
2039:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * again. */
2040:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             vPortFree( pxQueue );
2041:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2042:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
2043:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2044:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* The queue could have been allocated statically or dynamically, so
2045:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * check before attempting to free the memory. */
2046:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
2047:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2048:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 vPortFree( pxQueue );
2049:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2050:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
2051:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2052:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2053:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2054:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2055:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #else /* if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION ==
2056:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2057:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* The queue must have been statically allocated, so is not going to be
2058:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * deleted.  Avoid compiler warnings about the unused parameter. */
2059:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             ( void ) pxQueue;
2060:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2061:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2062:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** }
2063:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2064:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2065:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2066:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2067:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2068:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
2069:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         return ( ( Queue_t * ) xQueue )->uxQueueNumber;
2070:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2071:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2072:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2073:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2074:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2075:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2076:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2077:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     void vQueueSetQueueNumber( QueueHandle_t xQueue,
2078:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                UBaseType_t uxQueueNumber )
2079:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
2080:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2081:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2082:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2083:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 38


2084:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2085:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2086:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2087:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2088:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2089:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
2090:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         return ( ( Queue_t * ) xQueue )->ucQueueType;
2091:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2092:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2093:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2094:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2095:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2096:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configUSE_MUTEXES == 1 )
2097:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2098:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2099:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
2100:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         UBaseType_t uxHighestPriorityOfWaitingTasks;
2101:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2102:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* If a task waiting for a mutex causes the mutex holder to inherit a
2103:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * priority, but the waiting task times out, then the holder should
2104:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * disinherit the priority - but only down to the highest priority of any
2105:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * other tasks that are waiting for the same mutex.  For this purpose,
2106:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * return the priority of the highest priority task that is waiting for the
2107:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * mutex. */
2108:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
2109:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2110:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t 
2111:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2112:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
2113:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2114:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
2115:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2116:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2117:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         return uxHighestPriorityOfWaitingTasks;
2118:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2119:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2120:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* configUSE_MUTEXES */
2121:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2122:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2123:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
2124:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                       const void * pvItemToQueue,
2125:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                       const BaseType_t xPosition )
2126:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
2127:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xReturn = pdFALSE;
2128:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     UBaseType_t uxMessagesWaiting;
2129:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2130:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* This function is called from a critical section. */
2131:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2132:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2133:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2134:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2135:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
2136:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         #if ( configUSE_MUTEXES == 1 )
2137:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2138:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2139:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
2140:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* The mutex is no longer being held. */
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 39


2141:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
2142:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     pxQueue->u.xSemaphore.xMutexHolder = NULL;
2143:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
2144:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else
2145:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
2146:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2147:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
2148:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2149:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         #endif /* configUSE_MUTEXES */
2150:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2151:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     else if( xPosition == queueSEND_TO_BACK )
2152:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
2153:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSi
2154:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
2155:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2156:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                       
2157:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2158:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
2159:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2160:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
2161:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2162:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             mtCOVERAGE_TEST_MARKER();
2163:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2164:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2165:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     else
2166:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
2167:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue
2168:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2169:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2170:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified
2171:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2172:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
2173:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2174:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
2175:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2176:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             mtCOVERAGE_TEST_MARKER();
2177:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2178:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2179:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( xPosition == queueOVERWRITE )
2180:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2181:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2182:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2183:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* An item is not being added but overwritten, so subtract
2184:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * one from the recorded number of items in the queue so when
2185:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * one is added again below the number of recorded items remains
2186:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * correct. */
2187:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 --uxMessagesWaiting;
2188:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2189:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
2190:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2191:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2192:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2193:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2194:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
2195:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2196:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             mtCOVERAGE_TEST_MARKER();
2197:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 40


2198:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2199:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2200:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2201:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2202:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     return xReturn;
2203:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** }
2204:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2205:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2206:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
2207:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                   void * const pvBuffer )
2208:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
2209:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2210:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
2211:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithm
2212:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2213:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception
2214:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2215:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2216:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2217:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
2218:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2219:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             mtCOVERAGE_TEST_MARKER();
2220:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2221:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2222:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) p
2223:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2224:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** }
2225:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2226:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2227:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2228:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
2229:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2230:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2231:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* The lock counts contains the number of extra data items placed or
2232:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * removed from the queue while the queue was locked.  When a queue is
2233:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * locked items can be added or removed, but the event lists cannot be
2234:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****      * updated. */
2235:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     taskENTER_CRITICAL();
2236:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
2237:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         int8_t cTxLock = pxQueue->cTxLock;
2238:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2239:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* See if data was added to the queue while it was locked. */
2240:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         while( cTxLock > queueLOCKED_UNMODIFIED )
2241:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2242:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* Data was posted while the queue was locked.  Are any tasks
2243:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * blocked waiting for data to become available? */
2244:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             #if ( configUSE_QUEUE_SETS == 1 )
2245:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
2246:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
2247:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
2248:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
2249:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
2250:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             /* The queue is a member of a queue set, and posting to
2251:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                              * the queue set caused a higher priority task to unblock.
2252:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                              * A context switch is required. */
2253:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             vTaskMissedYield();
2254:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 41


2255:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         else
2256:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
2257:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             mtCOVERAGE_TEST_MARKER();
2258:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
2259:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
2260:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     else
2261:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
2262:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         /* Tasks that are removed from the event list will get
2263:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                          * added to the pending ready list as the scheduler is still
2264:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                          * suspended. */
2265:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2266:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
2267:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
2268:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
2269:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 /* The task waiting has a higher priority so record that a
2270:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                  * context switch is required. */
2271:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 vTaskMissedYield();
2272:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
2273:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             else
2274:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
2275:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
2276:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
2277:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
2278:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         else
2279:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
2280:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             break;
2281:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
2282:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
2283:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
2284:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             #else /* configUSE_QUEUE_SETS */
2285:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
2286:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* Tasks that are removed from the event list will get added to
2287:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * the pending ready list as the scheduler is still suspended. */
2288:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2289:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
2290:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
2291:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
2292:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             /* The task waiting has a higher priority so record that
2293:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                              * a context switch is required. */
2294:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             vTaskMissedYield();
2295:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
2296:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         else
2297:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
2298:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             mtCOVERAGE_TEST_MARKER();
2299:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
2300:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
2301:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     else
2302:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
2303:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         break;
2304:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
2305:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
2306:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             #endif /* configUSE_QUEUE_SETS */
2307:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2308:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             --cTxLock;
2309:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2310:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2311:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxQueue->cTxLock = queueUNLOCKED;
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 42


2312:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2313:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     taskEXIT_CRITICAL();
2314:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2315:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* Do the same for the Rx lock. */
2316:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     taskENTER_CRITICAL();
2317:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
2318:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         int8_t cRxLock = pxQueue->cRxLock;
2319:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2320:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         while( cRxLock > queueLOCKED_UNMODIFIED )
2321:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2322:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2323:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2324:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2325:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
2326:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     vTaskMissedYield();
2327:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
2328:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else
2329:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
2330:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2331:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
2332:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2333:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 --cRxLock;
2334:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2335:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
2336:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2337:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 break;
2338:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2339:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2340:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2341:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxQueue->cRxLock = queueUNLOCKED;
2342:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2343:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     taskEXIT_CRITICAL();
2344:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** }
2345:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2346:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2347:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
2348:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
2349:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
2350:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2351:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     taskENTER_CRITICAL();
2352:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
2353:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2354:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2355:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             xReturn = pdTRUE;
2356:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2357:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
2358:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2359:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             xReturn = pdFALSE;
2360:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2361:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2362:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     taskEXIT_CRITICAL();
2363:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2364:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     return xReturn;
2365:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** }
2366:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2367:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2368:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 43


2369:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
2370:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
2371:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
2372:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2373:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
2374:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2375:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2376:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
2377:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         xReturn = pdTRUE;
2378:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2379:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     else
2380:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
2381:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         xReturn = pdFALSE;
2382:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2383:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2384:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     return xReturn;
2385:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2386:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2387:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2388:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
2389:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
  27              		.loc 1 2389 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 10B5     		push	{r4, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  36 0002 0446     		mov	r4, r0
2390:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
2391:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2392:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     taskENTER_CRITICAL();
  37              		.loc 1 2392 0
  38 0004 FFF7FEFF 		bl	vPortEnterCritical
  39              	.LVL1:
2393:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
2394:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  40              		.loc 1 2394 0
  41 0008 A26B     		ldr	r2, [r4, #56]
  42 000a E36B     		ldr	r3, [r4, #60]
  43 000c 9A42     		cmp	r2, r3
  44 000e 01D1     		bne	.L3
2395:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2396:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             xReturn = pdTRUE;
  45              		.loc 1 2396 0
  46 0010 0124     		movs	r4, #1
  47              	.LVL2:
  48 0012 00E0     		b	.L2
  49              	.LVL3:
  50              	.L3:
2397:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2398:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
2399:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2400:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             xReturn = pdFALSE;
  51              		.loc 1 2400 0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 44


  52 0014 0024     		movs	r4, #0
  53              	.LVL4:
  54              	.L2:
2401:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2402:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2403:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     taskEXIT_CRITICAL();
  55              		.loc 1 2403 0
  56 0016 FFF7FEFF 		bl	vPortExitCritical
  57              	.LVL5:
2404:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2405:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     return xReturn;
2406:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** }
  58              		.loc 1 2406 0
  59 001a 2046     		mov	r0, r4
  60 001c 10BD     		pop	{r4, pc}
  61              		.cfi_endproc
  62              	.LFE24:
  63              		.size	prvIsQueueFull, .-prvIsQueueFull
  64 001e 00BF     		.section	.text.prvIsQueueEmpty,"ax",%progbits
  65              		.align	2
  66              		.thumb
  67              		.thumb_func
  68              		.type	prvIsQueueEmpty, %function
  69              	prvIsQueueEmpty:
  70              	.LFB22:
2348:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
  71              		.loc 1 2348 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              	.LVL6:
  76 0000 10B5     		push	{r4, lr}
  77              		.cfi_def_cfa_offset 8
  78              		.cfi_offset 4, -8
  79              		.cfi_offset 14, -4
  80 0002 0446     		mov	r4, r0
2351:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
  81              		.loc 1 2351 0
  82 0004 FFF7FEFF 		bl	vPortEnterCritical
  83              	.LVL7:
2353:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
  84              		.loc 1 2353 0
  85 0008 A36B     		ldr	r3, [r4, #56]
  86 000a 0BB9     		cbnz	r3, .L7
2355:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
  87              		.loc 1 2355 0
  88 000c 0124     		movs	r4, #1
  89              	.LVL8:
  90 000e 00E0     		b	.L6
  91              	.LVL9:
  92              	.L7:
2359:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
  93              		.loc 1 2359 0
  94 0010 0024     		movs	r4, #0
  95              	.LVL10:
  96              	.L6:
2362:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 45


  97              		.loc 1 2362 0
  98 0012 FFF7FEFF 		bl	vPortExitCritical
  99              	.LVL11:
2365:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 100              		.loc 1 2365 0
 101 0016 2046     		mov	r0, r4
 102 0018 10BD     		pop	{r4, pc}
 103              		.cfi_endproc
 104              	.LFE22:
 105              		.size	prvIsQueueEmpty, .-prvIsQueueEmpty
 106 001a 00BF     		.section	.text.prvCopyDataToQueue,"ax",%progbits
 107              		.align	2
 108              		.thumb
 109              		.thumb_func
 110              		.type	prvCopyDataToQueue, %function
 111              	prvCopyDataToQueue:
 112              	.LFB19:
2126:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xReturn = pdFALSE;
 113              		.loc 1 2126 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              	.LVL12:
 118 0000 70B5     		push	{r4, r5, r6, lr}
 119              		.cfi_def_cfa_offset 16
 120              		.cfi_offset 4, -16
 121              		.cfi_offset 5, -12
 122              		.cfi_offset 6, -8
 123              		.cfi_offset 14, -4
 124 0002 0446     		mov	r4, r0
 125 0004 1646     		mov	r6, r2
 126              	.LVL13:
2132:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 127              		.loc 1 2132 0
 128 0006 856B     		ldr	r5, [r0, #56]
 129              	.LVL14:
2134:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 130              		.loc 1 2134 0
 131 0008 026C     		ldr	r2, [r0, #64]
 132              	.LVL15:
 133 000a FAB1     		cbz	r2, .L10
2151:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 134              		.loc 1 2151 0
 135 000c 66B9     		cbnz	r6, .L11
2153:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
 136              		.loc 1 2153 0
 137 000e 4068     		ldr	r0, [r0, #4]
 138              	.LVL16:
 139 0010 FFF7FEFF 		bl	memcpy
 140              	.LVL17:
2154:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 141              		.loc 1 2154 0
 142 0014 6268     		ldr	r2, [r4, #4]
 143 0016 236C     		ldr	r3, [r4, #64]
 144 0018 1344     		add	r3, r3, r2
 145 001a 6360     		str	r3, [r4, #4]
2156:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 46


 146              		.loc 1 2156 0
 147 001c A268     		ldr	r2, [r4, #8]
 148 001e 9342     		cmp	r3, r2
 149 0020 14D3     		bcc	.L10
2158:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 150              		.loc 1 2158 0
 151 0022 2368     		ldr	r3, [r4]
 152 0024 6360     		str	r3, [r4, #4]
 153 0026 11E0     		b	.L10
 154              	.LVL18:
 155              	.L11:
2167:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 156              		.loc 1 2167 0
 157 0028 C068     		ldr	r0, [r0, #12]
 158              	.LVL19:
 159 002a FFF7FEFF 		bl	memcpy
 160              	.LVL20:
2168:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 161              		.loc 1 2168 0
 162 002e 236C     		ldr	r3, [r4, #64]
 163 0030 5B42     		negs	r3, r3
 164 0032 E268     		ldr	r2, [r4, #12]
 165 0034 1A44     		add	r2, r2, r3
 166 0036 E260     		str	r2, [r4, #12]
2170:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 167              		.loc 1 2170 0
 168 0038 2168     		ldr	r1, [r4]
 169 003a 8A42     		cmp	r2, r1
 170 003c 02D2     		bcs	.L12
2172:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 171              		.loc 1 2172 0
 172 003e A268     		ldr	r2, [r4, #8]
 173 0040 1344     		add	r3, r3, r2
 174 0042 E360     		str	r3, [r4, #12]
 175              	.L12:
2179:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 176              		.loc 1 2179 0
 177 0044 022E     		cmp	r6, #2
 178 0046 01D1     		bne	.L10
2181:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 179              		.loc 1 2181 0
 180 0048 05B1     		cbz	r5, .L10
2187:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 181              		.loc 1 2187 0
 182 004a 013D     		subs	r5, r5, #1
 183              	.LVL21:
 184              	.L10:
2200:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 185              		.loc 1 2200 0
 186 004c 0135     		adds	r5, r5, #1
 187              	.LVL22:
 188 004e A563     		str	r5, [r4, #56]
2203:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 189              		.loc 1 2203 0
 190 0050 0020     		movs	r0, #0
 191 0052 70BD     		pop	{r4, r5, r6, pc}
 192              		.cfi_endproc
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 47


 193              	.LFE19:
 194              		.size	prvCopyDataToQueue, .-prvCopyDataToQueue
 195              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 196              		.align	2
 197              		.thumb
 198              		.thumb_func
 199              		.type	prvCopyDataFromQueue, %function
 200              	prvCopyDataFromQueue:
 201              	.LFB20:
2208:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 202              		.loc 1 2208 0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 0, uses_anonymous_args = 0
 206              	.LVL23:
2209:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 207              		.loc 1 2209 0
 208 0000 026C     		ldr	r2, [r0, #64]
 209 0002 72B1     		cbz	r2, .L18
2208:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 210              		.loc 1 2208 0
 211 0004 10B5     		push	{r4, lr}
 212              		.cfi_def_cfa_offset 8
 213              		.cfi_offset 4, -8
 214              		.cfi_offset 14, -4
2211:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 215              		.loc 1 2211 0
 216 0006 C368     		ldr	r3, [r0, #12]
 217 0008 1344     		add	r3, r3, r2
 218 000a C360     		str	r3, [r0, #12]
2213:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 219              		.loc 1 2213 0
 220 000c 8468     		ldr	r4, [r0, #8]
 221 000e A342     		cmp	r3, r4
 222 0010 01D3     		bcc	.L16
2215:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 223              		.loc 1 2215 0
 224 0012 0368     		ldr	r3, [r0]
 225 0014 C360     		str	r3, [r0, #12]
 226              	.L16:
 227 0016 0C46     		mov	r4, r1
2222:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
 228              		.loc 1 2222 0
 229 0018 C168     		ldr	r1, [r0, #12]
 230              	.LVL24:
 231 001a 2046     		mov	r0, r4
 232              	.LVL25:
 233 001c FFF7FEFF 		bl	memcpy
 234              	.LVL26:
 235 0020 10BD     		pop	{r4, pc}
 236              	.LVL27:
 237              	.L18:
 238              		.cfi_def_cfa_offset 0
 239              		.cfi_restore 4
 240              		.cfi_restore 14
 241 0022 7047     		bx	lr
 242              		.cfi_endproc
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 48


 243              	.LFE20:
 244              		.size	prvCopyDataFromQueue, .-prvCopyDataFromQueue
 245              		.section	.text.prvUnlockQueue,"ax",%progbits
 246              		.align	2
 247              		.thumb
 248              		.thumb_func
 249              		.type	prvUnlockQueue, %function
 250              	prvUnlockQueue:
 251              	.LFB21:
2228:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 252              		.loc 1 2228 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              	.LVL28:
 257 0000 38B5     		push	{r3, r4, r5, lr}
 258              		.cfi_def_cfa_offset 16
 259              		.cfi_offset 3, -16
 260              		.cfi_offset 4, -12
 261              		.cfi_offset 5, -8
 262              		.cfi_offset 14, -4
 263 0002 0546     		mov	r5, r0
2235:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 264              		.loc 1 2235 0
 265 0004 FFF7FEFF 		bl	vPortEnterCritical
 266              	.LVL29:
 267              	.LBB23:
2237:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 268              		.loc 1 2237 0
 269 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 270 000c 64B2     		sxtb	r4, r4
 271              	.LVL30:
2240:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 272              		.loc 1 2240 0
 273 000e 0AE0     		b	.L20
 274              	.L23:
2288:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
 275              		.loc 1 2288 0
 276 0010 6B6A     		ldr	r3, [r5, #36]
 277 0012 53B1     		cbz	r3, .L21
2290:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
 278              		.loc 1 2290 0
 279 0014 05F12400 		add	r0, r5, #36
 280 0018 FFF7FEFF 		bl	xTaskRemoveFromEventList
 281              	.LVL31:
 282 001c 08B1     		cbz	r0, .L22
2294:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
 283              		.loc 1 2294 0
 284 001e FFF7FEFF 		bl	vTaskMissedYield
 285              	.LVL32:
 286              	.L22:
2308:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 287              		.loc 1 2308 0
 288 0022 013C     		subs	r4, r4, #1
 289              	.LVL33:
 290 0024 64B2     		sxtb	r4, r4
 291              	.LVL34:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 49


 292              	.L20:
2240:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 293              		.loc 1 2240 0
 294 0026 002C     		cmp	r4, #0
 295 0028 F2DC     		bgt	.L23
 296              	.L21:
2311:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
 297              		.loc 1 2311 0
 298 002a FF23     		movs	r3, #255
 299 002c 85F84530 		strb	r3, [r5, #69]
 300              	.LBE23:
2313:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 301              		.loc 1 2313 0
 302 0030 FFF7FEFF 		bl	vPortExitCritical
 303              	.LVL35:
2316:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 304              		.loc 1 2316 0
 305 0034 FFF7FEFF 		bl	vPortEnterCritical
 306              	.LVL36:
 307              	.LBB24:
2318:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 308              		.loc 1 2318 0
 309 0038 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 310              	.LVL37:
 311 003c 64B2     		sxtb	r4, r4
 312              	.LVL38:
2320:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 313              		.loc 1 2320 0
 314 003e 0AE0     		b	.L24
 315              	.L27:
2322:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 316              		.loc 1 2322 0
 317 0040 2B69     		ldr	r3, [r5, #16]
 318 0042 53B1     		cbz	r3, .L25
2324:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 319              		.loc 1 2324 0
 320 0044 05F11000 		add	r0, r5, #16
 321 0048 FFF7FEFF 		bl	xTaskRemoveFromEventList
 322              	.LVL39:
 323 004c 08B1     		cbz	r0, .L26
2326:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
 324              		.loc 1 2326 0
 325 004e FFF7FEFF 		bl	vTaskMissedYield
 326              	.LVL40:
 327              	.L26:
2333:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 328              		.loc 1 2333 0
 329 0052 013C     		subs	r4, r4, #1
 330              	.LVL41:
 331 0054 64B2     		sxtb	r4, r4
 332              	.LVL42:
 333              	.L24:
2320:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 334              		.loc 1 2320 0
 335 0056 002C     		cmp	r4, #0
 336 0058 F2DC     		bgt	.L27
 337              	.L25:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 50


2341:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
 338              		.loc 1 2341 0
 339 005a FF23     		movs	r3, #255
 340 005c 85F84430 		strb	r3, [r5, #68]
 341              	.LBE24:
2343:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** }
 342              		.loc 1 2343 0
 343 0060 FFF7FEFF 		bl	vPortExitCritical
 344              	.LVL43:
 345 0064 38BD     		pop	{r3, r4, r5, pc}
 346              		.cfi_endproc
 347              	.LFE21:
 348              		.size	prvUnlockQueue, .-prvUnlockQueue
 349 0066 00BF     		.section	.text.xQueueGenericReset,"ax",%progbits
 350              		.align	2
 351              		.global	xQueueGenericReset
 352              		.thumb
 353              		.thumb_func
 354              		.type	xQueueGenericReset, %function
 355              	xQueueGenericReset:
 356              	.LFB4:
 266:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
 357              		.loc 1 266 0
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 0
 360              		@ frame_needed = 0, uses_anonymous_args = 0
 361              	.LVL44:
 362 0000 38B5     		push	{r3, r4, r5, lr}
 363              		.cfi_def_cfa_offset 16
 364              		.cfi_offset 3, -16
 365              		.cfi_offset 4, -12
 366              		.cfi_offset 5, -8
 367              		.cfi_offset 14, -4
 368 0002 0446     		mov	r4, r0
 369 0004 0D46     		mov	r5, r1
 370              	.LVL45:
 271:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 371              		.loc 1 271 0
 372 0006 FFF7FEFF 		bl	vPortEnterCritical
 373              	.LVL46:
 273:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 374              		.loc 1 273 0
 375 000a 2168     		ldr	r1, [r4]
 376 000c E26B     		ldr	r2, [r4, #60]
 377 000e 236C     		ldr	r3, [r4, #64]
 378 0010 03FB0210 		mla	r0, r3, r2, r1
 379 0014 A060     		str	r0, [r4, #8]
 274:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxQueue->pcWriteTo = pxQueue->pcHead;
 380              		.loc 1 274 0
 381 0016 0020     		movs	r0, #0
 382 0018 A063     		str	r0, [r4, #56]
 275:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->ux
 383              		.loc 1 275 0
 384 001a 6160     		str	r1, [r4, #4]
 276:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxQueue->cRxLock = queueUNLOCKED;
 385              		.loc 1 276 0
 386 001c 013A     		subs	r2, r2, #1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 51


 387 001e 02FB0313 		mla	r3, r2, r3, r1
 388 0022 E360     		str	r3, [r4, #12]
 277:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         pxQueue->cTxLock = queueUNLOCKED;
 389              		.loc 1 277 0
 390 0024 FF23     		movs	r3, #255
 391 0026 84F84430 		strb	r3, [r4, #68]
 278:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 392              		.loc 1 278 0
 393 002a 84F84530 		strb	r3, [r4, #69]
 280:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 394              		.loc 1 280 0
 395 002e 7DB9     		cbnz	r5, .L30
 287:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 396              		.loc 1 287 0
 397 0030 2369     		ldr	r3, [r4, #16]
 398 0032 ABB1     		cbz	r3, .L31
 289:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 399              		.loc 1 289 0
 400 0034 04F11000 		add	r0, r4, #16
 401 0038 FFF7FEFF 		bl	xTaskRemoveFromEventList
 402              	.LVL47:
 403 003c 80B1     		cbz	r0, .L31
 291:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
 404              		.loc 1 291 0
 405 003e 4FF08052 		mov	r2, #268435456
 406 0042 094B     		ldr	r3, .L33
 407 0044 1A60     		str	r2, [r3]
 408              		.syntax unified
 409              	@ 291 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\queue.c" 1
 410 0046 BFF34F8F 		dsb
 411              	@ 0 "" 2
 412              	@ 291 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\queue.c" 1
 413 004a BFF36F8F 		isb
 414              	@ 0 "" 2
 415              		.thumb
 416              		.syntax unified
 417 004e 07E0     		b	.L31
 418              	.L30:
 306:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 419              		.loc 1 306 0
 420 0050 04F11000 		add	r0, r4, #16
 421 0054 FFF7FEFF 		bl	vListInitialise
 422              	.LVL48:
 307:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 423              		.loc 1 307 0
 424 0058 04F12400 		add	r0, r4, #36
 425 005c FFF7FEFF 		bl	vListInitialise
 426              	.LVL49:
 427              	.L31:
 310:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 428              		.loc 1 310 0
 429 0060 FFF7FEFF 		bl	vPortExitCritical
 430              	.LVL50:
 315:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 431              		.loc 1 315 0
 432 0064 0120     		movs	r0, #1
 433 0066 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 52


 434              	.LVL51:
 435              	.L34:
 436              		.align	2
 437              	.L33:
 438 0068 04ED00E0 		.word	-536810236
 439              		.cfi_endproc
 440              	.LFE4:
 441              		.size	xQueueGenericReset, .-xQueueGenericReset
 442              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 443              		.align	2
 444              		.thumb
 445              		.thumb_func
 446              		.type	prvInitialiseNewQueue, %function
 447              	prvInitialiseNewQueue:
 448              	.LFB6:
 446:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     /* Remove compiler warnings about unused parameters should
 449              		.loc 1 446 0
 450              		.cfi_startproc
 451              		@ args = 4, pretend = 0, frame = 0
 452              		@ frame_needed = 0, uses_anonymous_args = 0
 453              	.LVL52:
 454 0000 10B5     		push	{r4, lr}
 455              		.cfi_def_cfa_offset 8
 456              		.cfi_offset 4, -8
 457              		.cfi_offset 14, -4
 458 0002 029B     		ldr	r3, [sp, #8]
 459              	.LVL53:
 451:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 460              		.loc 1 451 0
 461 0004 0C46     		mov	r4, r1
 462 0006 09B9     		cbnz	r1, .L36
 457:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
 463              		.loc 1 457 0
 464 0008 1B60     		str	r3, [r3]
 465 000a 00E0     		b	.L37
 466              	.L36:
 462:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
 467              		.loc 1 462 0
 468 000c 1A60     		str	r2, [r3]
 469              	.L37:
 467:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 470              		.loc 1 467 0
 471 000e D863     		str	r0, [r3, #60]
 468:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 472              		.loc 1 468 0
 473 0010 1C64     		str	r4, [r3, #64]
 469:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 474              		.loc 1 469 0
 475 0012 0121     		movs	r1, #1
 476              	.LVL54:
 477 0014 1846     		mov	r0, r3
 478              	.LVL55:
 479 0016 FFF7FEFF 		bl	xQueueGenericReset
 480              	.LVL56:
 481 001a 10BD     		pop	{r4, pc}
 482              		.cfi_endproc
 483              	.LFE6:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 53


 484              		.size	prvInitialiseNewQueue, .-prvInitialiseNewQueue
 485              		.section	.text.xQueueGenericCreate,"ax",%progbits
 486              		.align	2
 487              		.global	xQueueGenericCreate
 488              		.thumb
 489              		.thumb_func
 490              		.type	xQueueGenericCreate, %function
 491              	xQueueGenericCreate:
 492              	.LFB5:
 385:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         Queue_t * pxNewQueue;
 493              		.loc 1 385 0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 497              	.LVL57:
 498 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 499              		.cfi_def_cfa_offset 20
 500              		.cfi_offset 4, -20
 501              		.cfi_offset 5, -16
 502              		.cfi_offset 6, -12
 503              		.cfi_offset 7, -8
 504              		.cfi_offset 14, -4
 505 0002 83B0     		sub	sp, sp, #12
 506              		.cfi_def_cfa_offset 32
 507 0004 0546     		mov	r5, r0
 508 0006 0E46     		mov	r6, r1
 509 0008 1746     		mov	r7, r2
 395:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 510              		.loc 1 395 0
 511 000a 01FB00F0 		mul	r0, r1, r0
 512              	.LVL58:
 409:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 513              		.loc 1 409 0
 514 000e 4830     		adds	r0, r0, #72
 515              	.LVL59:
 516 0010 FFF7FEFF 		bl	pvPortMalloc
 517              	.LVL60:
 411:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 518              		.loc 1 411 0
 519 0014 0446     		mov	r4, r0
 520 0016 38B1     		cbz	r0, .L40
 521              	.LVL61:
 427:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 522              		.loc 1 427 0
 523 0018 0090     		str	r0, [sp]
 524 001a 3B46     		mov	r3, r7
 525 001c 00F14802 		add	r2, r0, #72
 526              	.LVL62:
 527 0020 3146     		mov	r1, r6
 528 0022 2846     		mov	r0, r5
 529              	.LVL63:
 530 0024 FFF7FEFF 		bl	prvInitialiseNewQueue
 531              	.LVL64:
 532              	.L40:
 436:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 533              		.loc 1 436 0
 534 0028 2046     		mov	r0, r4
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 54


 535 002a 03B0     		add	sp, sp, #12
 536              		.cfi_def_cfa_offset 20
 537              		@ sp needed
 538 002c F0BD     		pop	{r4, r5, r6, r7, pc}
 539              		.cfi_endproc
 540              	.LFE5:
 541              		.size	xQueueGenericCreate, .-xQueueGenericCreate
 542 002e 00BF     		.section	.text.xQueueGenericSend,"ax",%progbits
 543              		.align	2
 544              		.global	xQueueGenericSend
 545              		.thumb
 546              		.thumb_func
 547              		.type	xQueueGenericSend, %function
 548              	xQueueGenericSend:
 549              	.LFB7:
 772:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 550              		.loc 1 772 0
 551              		.cfi_startproc
 552              		@ args = 0, pretend = 0, frame = 16
 553              		@ frame_needed = 0, uses_anonymous_args = 0
 554              	.LVL65:
 555 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 556              		.cfi_def_cfa_offset 20
 557              		.cfi_offset 4, -20
 558              		.cfi_offset 5, -16
 559              		.cfi_offset 6, -12
 560              		.cfi_offset 7, -8
 561              		.cfi_offset 14, -4
 562 0002 85B0     		sub	sp, sp, #20
 563              		.cfi_def_cfa_offset 40
 564 0004 0446     		mov	r4, r0
 565 0006 0F46     		mov	r7, r1
 566 0008 0192     		str	r2, [sp, #4]
 567 000a 1E46     		mov	r6, r3
 568              	.LVL66:
 773:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     TimeOut_t xTimeOut;
 569              		.loc 1 773 0
 570 000c 0025     		movs	r5, #0
 571              	.LVL67:
 572              	.L43:
 791:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 573              		.loc 1 791 0
 574 000e FFF7FEFF 		bl	vPortEnterCritical
 575              	.LVL68:
 797:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 576              		.loc 1 797 0
 577 0012 A26B     		ldr	r2, [r4, #56]
 578 0014 E36B     		ldr	r3, [r4, #60]
 579 0016 9A42     		cmp	r2, r3
 580 0018 01D3     		bcc	.L44
 797:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 581              		.loc 1 797 0 is_stmt 0 discriminator 1
 582 001a 022E     		cmp	r6, #2
 583 001c 21D1     		bne	.L45
 584              	.L44:
 863:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 585              		.loc 1 863 0 is_stmt 1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 55


 586 001e 3246     		mov	r2, r6
 587 0020 3946     		mov	r1, r7
 588 0022 2046     		mov	r0, r4
 589 0024 FFF7FEFF 		bl	prvCopyDataToQueue
 590              	.LVL69:
 867:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
 591              		.loc 1 867 0
 592 0028 636A     		ldr	r3, [r4, #36]
 593 002a 6BB1     		cbz	r3, .L46
 869:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
 594              		.loc 1 869 0
 595 002c 04F12400 		add	r0, r4, #36
 596              	.LVL70:
 597 0030 FFF7FEFF 		bl	xTaskRemoveFromEventList
 598              	.LVL71:
 599 0034 88B1     		cbz	r0, .L47
 875:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             }
 600              		.loc 1 875 0
 601 0036 4FF08052 		mov	r2, #268435456
 602 003a 324B     		ldr	r3, .L57
 603 003c 1A60     		str	r2, [r3]
 604              		.syntax unified
 605              	@ 875 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\queue.c" 1
 606 003e BFF34F8F 		dsb
 607              	@ 0 "" 2
 608              	@ 875 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\queue.c" 1
 609 0042 BFF36F8F 		isb
 610              	@ 0 "" 2
 611              		.thumb
 612              		.syntax unified
 613 0046 08E0     		b	.L47
 614              	.LVL72:
 615              	.L46:
 882:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
 616              		.loc 1 882 0
 617 0048 38B1     		cbz	r0, .L47
 888:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
 618              		.loc 1 888 0
 619 004a 4FF08052 		mov	r2, #268435456
 620 004e 2D4B     		ldr	r3, .L57
 621 0050 1A60     		str	r2, [r3]
 622              		.syntax unified
 623              	@ 888 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\queue.c" 1
 624 0052 BFF34F8F 		dsb
 625              	@ 0 "" 2
 626              	@ 888 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\queue.c" 1
 627 0056 BFF36F8F 		isb
 628              	@ 0 "" 2
 629              	.LVL73:
 630              		.thumb
 631              		.syntax unified
 632              	.L47:
 897:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 return pdPASS;
 633              		.loc 1 897 0
 634 005a FFF7FEFF 		bl	vPortExitCritical
 635              	.LVL74:
 898:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 56


 636              		.loc 1 898 0
 637 005e 0120     		movs	r0, #1
 638 0060 4EE0     		b	.L48
 639              	.L45:
 902:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 640              		.loc 1 902 0
 641 0062 019B     		ldr	r3, [sp, #4]
 642 0064 1BB9     		cbnz	r3, .L49
 906:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 643              		.loc 1 906 0
 644 0066 FFF7FEFF 		bl	vPortExitCritical
 645              	.LVL75:
 911:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
 646              		.loc 1 911 0
 647 006a 0020     		movs	r0, #0
 648 006c 48E0     		b	.L48
 649              	.L49:
 913:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 650              		.loc 1 913 0
 651 006e 1DB9     		cbnz	r5, .L50
 917:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     xEntryTimeSet = pdTRUE;
 652              		.loc 1 917 0
 653 0070 02A8     		add	r0, sp, #8
 654 0072 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 655              	.LVL76:
 918:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
 656              		.loc 1 918 0
 657 0076 0125     		movs	r5, #1
 658              	.LVL77:
 659              	.L50:
 927:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 660              		.loc 1 927 0
 661 0078 FFF7FEFF 		bl	vPortExitCritical
 662              	.LVL78:
 932:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         prvLockQueue( pxQueue );
 663              		.loc 1 932 0
 664 007c FFF7FEFF 		bl	vTaskSuspendAll
 665              	.LVL79:
 933:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 666              		.loc 1 933 0
 667 0080 FFF7FEFF 		bl	vPortEnterCritical
 668              	.LVL80:
 669 0084 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 670 0088 5BB2     		sxtb	r3, r3
 671 008a B3F1FF3F 		cmp	r3, #-1
 672 008e 02D1     		bne	.L51
 933:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 673              		.loc 1 933 0 is_stmt 0 discriminator 1
 674 0090 0023     		movs	r3, #0
 675 0092 84F84430 		strb	r3, [r4, #68]
 676              	.L51:
 933:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 677              		.loc 1 933 0 discriminator 3
 678 0096 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 679 009a 5BB2     		sxtb	r3, r3
 680 009c B3F1FF3F 		cmp	r3, #-1
 681 00a0 02D1     		bne	.L52
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 57


 933:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 682              		.loc 1 933 0 discriminator 4
 683 00a2 0023     		movs	r3, #0
 684 00a4 84F84530 		strb	r3, [r4, #69]
 685              	.L52:
 933:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 686              		.loc 1 933 0 discriminator 6
 687 00a8 FFF7FEFF 		bl	vPortExitCritical
 688              	.LVL81:
 936:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 689              		.loc 1 936 0 is_stmt 1 discriminator 6
 690 00ac 01A9     		add	r1, sp, #4
 691              	.LVL82:
 692 00ae 02A8     		add	r0, sp, #8
 693 00b0 FFF7FEFF 		bl	xTaskCheckForTimeOut
 694              	.LVL83:
 695 00b4 F0B9     		cbnz	r0, .L53
 938:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 696              		.loc 1 938 0
 697 00b6 2046     		mov	r0, r4
 698 00b8 FFF7FEFF 		bl	prvIsQueueFull
 699              	.LVL84:
 700 00bc A0B1     		cbz	r0, .L54
 941:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 701              		.loc 1 941 0
 702 00be 0199     		ldr	r1, [sp, #4]
 703 00c0 04F11000 		add	r0, r4, #16
 704 00c4 FFF7FEFF 		bl	vTaskPlaceOnEventList
 705              	.LVL85:
 948:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 706              		.loc 1 948 0
 707 00c8 2046     		mov	r0, r4
 708 00ca FFF7FEFF 		bl	prvUnlockQueue
 709              	.LVL86:
 955:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 710              		.loc 1 955 0
 711 00ce FFF7FEFF 		bl	xTaskResumeAll
 712              	.LVL87:
 713 00d2 0028     		cmp	r0, #0
 714 00d4 9BD1     		bne	.L43
 957:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
 715              		.loc 1 957 0
 716 00d6 4FF08052 		mov	r2, #268435456
 717 00da 0A4B     		ldr	r3, .L57
 718 00dc 1A60     		str	r2, [r3]
 719              		.syntax unified
 720              	@ 957 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\queue.c" 1
 721 00de BFF34F8F 		dsb
 722              	@ 0 "" 2
 723              	@ 957 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\queue.c" 1
 724 00e2 BFF36F8F 		isb
 725              	@ 0 "" 2
 726              		.thumb
 727              		.syntax unified
 728 00e6 92E7     		b	.L43
 729              	.L54:
 963:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 ( void ) xTaskResumeAll();
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 58


 730              		.loc 1 963 0
 731 00e8 2046     		mov	r0, r4
 732 00ea FFF7FEFF 		bl	prvUnlockQueue
 733              	.LVL88:
 964:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 734              		.loc 1 964 0
 735 00ee FFF7FEFF 		bl	xTaskResumeAll
 736              	.LVL89:
 737 00f2 8CE7     		b	.L43
 738              	.L53:
 970:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             ( void ) xTaskResumeAll();
 739              		.loc 1 970 0
 740 00f4 2046     		mov	r0, r4
 741 00f6 FFF7FEFF 		bl	prvUnlockQueue
 742              	.LVL90:
 971:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 743              		.loc 1 971 0
 744 00fa FFF7FEFF 		bl	xTaskResumeAll
 745              	.LVL91:
 974:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 746              		.loc 1 974 0
 747 00fe 0020     		movs	r0, #0
 748              	.L48:
 977:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 749              		.loc 1 977 0
 750 0100 05B0     		add	sp, sp, #20
 751              		.cfi_def_cfa_offset 20
 752              		@ sp needed
 753 0102 F0BD     		pop	{r4, r5, r6, r7, pc}
 754              	.LVL92:
 755              	.L58:
 756              		.align	2
 757              	.L57:
 758 0104 04ED00E0 		.word	-536810236
 759              		.cfi_endproc
 760              	.LFE7:
 761              		.size	xQueueGenericSend, .-xQueueGenericSend
 762              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 763              		.align	2
 764              		.global	xQueueGenericSendFromISR
 765              		.thumb
 766              		.thumb_func
 767              		.type	xQueueGenericSendFromISR, %function
 768              	xQueueGenericSendFromISR:
 769              	.LFB8:
 984:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
 770              		.loc 1 984 0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 0
 773              		@ frame_needed = 0, uses_anonymous_args = 0
 774              	.LVL93:
 775 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 776              		.cfi_def_cfa_offset 24
 777              		.cfi_offset 3, -24
 778              		.cfi_offset 4, -20
 779              		.cfi_offset 5, -16
 780              		.cfi_offset 6, -12
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 59


 781              		.cfi_offset 7, -8
 782              		.cfi_offset 14, -4
 783              	.LVL94:
 784              	.LBB25:
 785              	.LBB26:
 786              		.file 2 "C:\\FreeRTOS\\FreeRTOS\\FreeRTOS\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*
   2:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * FreeRTOS Kernel V10.4.0
   3:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  *
   5:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * subject to the following conditions:
  11:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  *
  12:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * copies or substantial portions of the Software.
  14:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  *
  15:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  *
  22:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * https://www.FreeRTOS.org
  23:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * https://github.com/FreeRTOS
  24:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  *
  25:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * 1 tab == 4 spaces!
  26:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  */
  27:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  28:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  29:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** #ifndef PORTMACRO_H
  30:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define PORTMACRO_H
  31:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  32:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #ifdef __cplusplus
  33:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         extern "C" {
  34:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #endif
  35:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  36:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------
  37:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * Port specific definitions.
  38:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  *
  39:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * given hardware and compiler.
  41:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  *
  42:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * These settings should not be altered.
  43:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  *-----------------------------------------------------------
  44:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  */
  45:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  46:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* Type definitions. */
  47:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portCHAR          char
  48:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portFLOAT         float
  49:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portDOUBLE        double
  50:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portLONG          long
  51:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portSHORT         short
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 60


  52:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portSTACK_TYPE    uint32_t
  53:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portBASE_TYPE     long
  54:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  55:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  56:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     typedef long             BaseType_t;
  57:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     typedef unsigned long    UBaseType_t;
  58:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  59:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  60:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         typedef uint16_t     TickType_t;
  61:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  62:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #else
  63:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         typedef uint32_t     TickType_t;
  64:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  65:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  66:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * not need to be guarded with a critical section. */
  68:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  69:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #endif
  70:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
  71:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  72:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* Architecture specifics. */
  73:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  74:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portBYTE_ALIGNMENT    8
  76:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  77:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
  78:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  79:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* Scheduler utilities. */
  80:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portYIELD()                                 \
  81:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     {                                                   \
  82:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  83:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  84:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****                                                         \
  85:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  86:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****          * within the specified behaviour for the architecture. */ \
  87:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  88:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         __asm volatile ( "isb" );                                  \
  89:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     }
  90:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  91:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  92:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  93:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    if( xSwitchRequired != pdFALSE ) portYIELD(
  94:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  95:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
  96:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  97:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* Critical section management. */
  98:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     extern void vPortEnterCritical( void );
  99:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     extern void vPortExitCritical( void );
 100:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 101:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 102:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 103:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 104:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 105:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 106:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 107:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
 108:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 61


 109:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 110:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 111:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * (which build with all the ports) will build. */
 112:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 113:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 114:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
 115:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 116:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* Tickless idle/low power functionality. */
 117:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 118:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 119:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 120:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #endif
 121:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
 122:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 123:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* Architecture specific optimisations. */
 124:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 125:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 126:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #endif
 127:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 128:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 129:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 130:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* Generic helper function. */
 131:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 132:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         {
 133:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             uint8_t ucReturn;
 134:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 135:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 136:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 137:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             return ucReturn;
 138:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         }
 139:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 140:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* Check the configuration. */
 141:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 142:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 143:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #endif
 144:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 145:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 146:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 147:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 148:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 149:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
 150:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 151:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 152:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 153:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 154:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 155:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
 156:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 157:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #ifdef configASSERT
 158:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         void vPortValidateInterruptPriority( void );
 159:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 160:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #endif
 161:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 162:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* portNOP() is not required by this port. */
 163:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portNOP()
 164:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 165:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portINLINE              __inline
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 62


 166:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 167:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #ifndef portFORCE_INLINE
 168:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 169:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #endif
 170:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 171:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
 172:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 173:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 174:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     {
 175:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         uint32_t ulCurrentInterrupt;
 176:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         BaseType_t xReturn;
 177:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 178:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 179:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 180:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 181:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         if( ulCurrentInterrupt == 0 )
 182:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         {
 183:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             xReturn = pdFALSE;
 184:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         }
 185:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         else
 186:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         {
 187:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             xReturn = pdTRUE;
 188:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         }
 189:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 190:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         return xReturn;
 191:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     }
 192:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 193:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
 194:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 195:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 196:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     {
 197:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         uint32_t ulNewBASEPRI;
 198:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 199:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         __asm volatile
 200:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         (
 201:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             "	mov %0, %1												\n"\
 202:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             "	msr basepri, %0											\n"\
 203:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             "	isb														\n"\
 204:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             "	dsb														\n"\
 205:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 206:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         );
 207:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     }
 208:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 209:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
 210:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 211:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 212:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     {
 213:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 214:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 215:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         __asm volatile
 787              		.loc 2 215 0
 788              		.syntax unified
 789              	@ 215 "C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 790 0002 EFF31186 			mrs r6, basepri											
 791 0006 4FF00404 		mov r4, #4												
 792 000a 84F31188 		msr basepri, r4											
 793 000e BFF36F8F 		isb														
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 63


 794 0012 BFF34F8F 		dsb														
 795              	
 796              	@ 0 "" 2
 797              		.thumb
 798              		.syntax unified
 799              	.LBE26:
 800              	.LBE25:
1016:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 801              		.loc 1 1016 0
 802 0016 856B     		ldr	r5, [r0, #56]
 803 0018 C46B     		ldr	r4, [r0, #60]
 804 001a A542     		cmp	r5, r4
 805 001c 01D3     		bcc	.L60
1016:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 806              		.loc 1 1016 0 is_stmt 0 discriminator 1
 807 001e 022B     		cmp	r3, #2
 808 0020 1CD1     		bne	.L63
 809              	.L60:
 810 0022 1746     		mov	r7, r2
 811 0024 0546     		mov	r5, r0
 812              	.LBB27:
1018:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 813              		.loc 1 1018 0 is_stmt 1
 814 0026 90F84540 		ldrb	r4, [r0, #69]	@ zero_extendqisi2
 815 002a 64B2     		sxtb	r4, r4
 816              	.LVL95:
1019:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 817              		.loc 1 1019 0
 818 002c 826B     		ldr	r2, [r0, #56]
 819              	.LVL96:
1028:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 820              		.loc 1 1028 0
 821 002e 1A46     		mov	r2, r3
 822 0030 FFF7FEFF 		bl	prvCopyDataToQueue
 823              	.LVL97:
1032:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 824              		.loc 1 1032 0
 825 0034 B4F1FF3F 		cmp	r4, #-1
 826 0038 0AD1     		bne	.L62
1094:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
 827              		.loc 1 1094 0
 828 003a 6B6A     		ldr	r3, [r5, #36]
 829 003c 83B1     		cbz	r3, .L64
1096:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
 830              		.loc 1 1096 0
 831 003e 05F12400 		add	r0, r5, #36
 832 0042 FFF7FEFF 		bl	xTaskRemoveFromEventList
 833              	.LVL98:
 834 0046 68B1     		cbz	r0, .L65
1100:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 {
 835              		.loc 1 1100 0
 836 0048 77B1     		cbz	r7, .L66
1102:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 }
 837              		.loc 1 1102 0
 838 004a 0120     		movs	r0, #1
 839 004c 3860     		str	r0, [r7]
 840 004e 0CE0     		b	.L61
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 64


 841              	.L62:
1130:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 842              		.loc 1 1130 0
 843 0050 0134     		adds	r4, r4, #1
 844              	.LVL99:
 845 0052 64B2     		sxtb	r4, r4
 846              	.LVL100:
 847 0054 85F84540 		strb	r4, [r5, #69]
1133:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 848              		.loc 1 1133 0
 849 0058 0120     		movs	r0, #1
 850 005a 06E0     		b	.L61
 851              	.LVL101:
 852              	.L63:
 853              	.LBE27:
1138:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 854              		.loc 1 1138 0
 855 005c 0020     		movs	r0, #0
 856              	.LVL102:
 857 005e 04E0     		b	.L61
 858              	.LVL103:
 859              	.L64:
 860              	.LBB28:
1133:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 861              		.loc 1 1133 0
 862 0060 0120     		movs	r0, #1
 863 0062 02E0     		b	.L61
 864              	.L65:
 865 0064 0120     		movs	r0, #1
 866 0066 00E0     		b	.L61
 867              	.L66:
 868 0068 0120     		movs	r0, #1
 869              	.LVL104:
 870              	.L61:
 871              	.LBE28:
 872              	.LBB29:
 873              	.LBB30:
 216:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         (
 217:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             "	mrs %0, basepri											\n"\
 218:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             "	mov %1, %2												\n"\
 219:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             "	msr basepri, %1											\n"\
 220:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             "	isb														\n"\
 221:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             "	dsb														\n"\
 222:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 223:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         );
 224:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 225:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 226:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****          * warnings. */
 227:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         return ulOriginalBASEPRI;
 228:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     }
 229:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
 230:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 231:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 232:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     {
 233:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         __asm volatile
 874              		.loc 2 233 0
 875              		.syntax unified
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 65


 876              	@ 233 "C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 877 006a 86F31188 			msr basepri, r6	
 878              	@ 0 "" 2
 879              	.LVL105:
 880              		.thumb
 881              		.syntax unified
 882              	.LBE30:
 883              	.LBE29:
1144:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 884              		.loc 1 1144 0
 885 006e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 886              		.cfi_endproc
 887              	.LFE8:
 888              		.size	xQueueGenericSendFromISR, .-xQueueGenericSendFromISR
 889              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 890              		.align	2
 891              		.global	xQueueGiveFromISR
 892              		.thumb
 893              		.thumb_func
 894              		.type	xQueueGiveFromISR, %function
 895              	xQueueGiveFromISR:
 896              	.LFB9:
1149:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
 897              		.loc 1 1149 0
 898              		.cfi_startproc
 899              		@ args = 0, pretend = 0, frame = 0
 900              		@ frame_needed = 0, uses_anonymous_args = 0
 901              	.LVL106:
 902 0000 38B5     		push	{r3, r4, r5, lr}
 903              		.cfi_def_cfa_offset 16
 904              		.cfi_offset 3, -16
 905              		.cfi_offset 4, -12
 906              		.cfi_offset 5, -8
 907              		.cfi_offset 14, -4
 908              	.LVL107:
 909              	.LBB31:
 910              	.LBB32:
 215:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         (
 911              		.loc 2 215 0
 912              		.syntax unified
 913              	@ 215 "C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 914 0002 EFF31184 			mrs r4, basepri											
 915 0006 4FF00403 		mov r3, #4												
 916 000a 83F31188 		msr basepri, r3											
 917 000e BFF36F8F 		isb														
 918 0012 BFF34F8F 		dsb														
 919              	
 920              	@ 0 "" 2
 921              		.thumb
 922              		.syntax unified
 923              	.LBE32:
 924              	.LBE31:
 925              	.LBB33:
1189:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 926              		.loc 1 1189 0
 927 0016 826B     		ldr	r2, [r0, #56]
 928              	.LVL108:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 66


1194:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 929              		.loc 1 1194 0
 930 0018 C36B     		ldr	r3, [r0, #60]
 931 001a 9A42     		cmp	r2, r3
 932 001c 18D2     		bcs	.L71
 933              	.LBB34:
1196:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 934              		.loc 1 1196 0
 935 001e 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 936 0022 5BB2     		sxtb	r3, r3
 937              	.LVL109:
1206:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 938              		.loc 1 1206 0
 939 0024 0132     		adds	r2, r2, #1
 940              	.LVL110:
 941 0026 8263     		str	r2, [r0, #56]
1210:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 942              		.loc 1 1210 0
 943 0028 B3F1FF3F 		cmp	r3, #-1
 944 002c 0AD1     		bne	.L70
1265:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
 945              		.loc 1 1265 0
 946 002e 436A     		ldr	r3, [r0, #36]
 947              	.LVL111:
 948 0030 83B1     		cbz	r3, .L72
 949 0032 0D46     		mov	r5, r1
1267:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                             {
 950              		.loc 1 1267 0
 951 0034 2430     		adds	r0, r0, #36
 952              	.LVL112:
 953 0036 FFF7FEFF 		bl	xTaskRemoveFromEventList
 954              	.LVL113:
 955 003a 68B1     		cbz	r0, .L73
1271:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 {
 956              		.loc 1 1271 0
 957 003c 75B1     		cbz	r5, .L74
1273:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 }
 958              		.loc 1 1273 0
 959 003e 0120     		movs	r0, #1
 960 0040 2860     		str	r0, [r5]
 961 0042 0CE0     		b	.L69
 962              	.LVL114:
 963              	.L70:
1298:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 964              		.loc 1 1298 0
 965 0044 0133     		adds	r3, r3, #1
 966              	.LVL115:
 967 0046 5BB2     		sxtb	r3, r3
 968              	.LVL116:
 969 0048 80F84530 		strb	r3, [r0, #69]
1301:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 970              		.loc 1 1301 0
 971 004c 0120     		movs	r0, #1
 972              	.LVL117:
 973 004e 06E0     		b	.L69
 974              	.LVL118:
 975              	.L71:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 67


 976              	.LBE34:
1306:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 977              		.loc 1 1306 0
 978 0050 0020     		movs	r0, #0
 979              	.LVL119:
 980 0052 04E0     		b	.L69
 981              	.LVL120:
 982              	.L72:
 983              	.LBB35:
1301:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 984              		.loc 1 1301 0
 985 0054 0120     		movs	r0, #1
 986              	.LVL121:
 987 0056 02E0     		b	.L69
 988              	.LVL122:
 989              	.L73:
 990 0058 0120     		movs	r0, #1
 991 005a 00E0     		b	.L69
 992              	.L74:
 993 005c 0120     		movs	r0, #1
 994              	.LVL123:
 995              	.L69:
 996              	.LBE35:
 997              	.LBE33:
 998              	.LBB36:
 999              	.LBB37:
 1000              		.loc 2 233 0
 1001              		.syntax unified
 1002              	@ 233 "C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1003 005e 84F31188 			msr basepri, r4	
 1004              	@ 0 "" 2
 1005              	.LVL124:
 1006              		.thumb
 1007              		.syntax unified
 1008              	.LBE37:
 1009              	.LBE36:
1312:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 1010              		.loc 1 1312 0
 1011 0062 38BD     		pop	{r3, r4, r5, pc}
 1012              		.cfi_endproc
 1013              	.LFE9:
 1014              		.size	xQueueGiveFromISR, .-xQueueGiveFromISR
 1015              		.section	.text.xQueueReceive,"ax",%progbits
 1016              		.align	2
 1017              		.global	xQueueReceive
 1018              		.thumb
 1019              		.thumb_func
 1020              		.type	xQueueReceive, %function
 1021              	xQueueReceive:
 1022              	.LFB10:
1318:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 1023              		.loc 1 1318 0
 1024              		.cfi_startproc
 1025              		@ args = 0, pretend = 0, frame = 16
 1026              		@ frame_needed = 0, uses_anonymous_args = 0
 1027              	.LVL125:
 1028 0000 F0B5     		push	{r4, r5, r6, r7, lr}
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 68


 1029              		.cfi_def_cfa_offset 20
 1030              		.cfi_offset 4, -20
 1031              		.cfi_offset 5, -16
 1032              		.cfi_offset 6, -12
 1033              		.cfi_offset 7, -8
 1034              		.cfi_offset 14, -4
 1035 0002 85B0     		sub	sp, sp, #20
 1036              		.cfi_def_cfa_offset 40
 1037 0004 0446     		mov	r4, r0
 1038 0006 0F46     		mov	r7, r1
 1039 0008 0192     		str	r2, [sp, #4]
 1040              	.LVL126:
1319:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     TimeOut_t xTimeOut;
 1041              		.loc 1 1319 0
 1042 000a 0026     		movs	r6, #0
 1043              	.LVL127:
 1044              	.L77:
1342:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 1045              		.loc 1 1342 0
 1046 000c FFF7FEFF 		bl	vPortEnterCritical
 1047              	.LVL128:
 1048              	.LBB38:
1344:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1049              		.loc 1 1344 0
 1050 0010 A56B     		ldr	r5, [r4, #56]
 1051              	.LVL129:
1348:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 1052              		.loc 1 1348 0
 1053 0012 C5B1     		cbz	r5, .L78
1351:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
 1054              		.loc 1 1351 0
 1055 0014 3946     		mov	r1, r7
 1056 0016 2046     		mov	r0, r4
 1057 0018 FFF7FEFF 		bl	prvCopyDataFromQueue
 1058              	.LVL130:
1353:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1059              		.loc 1 1353 0
 1060 001c 013D     		subs	r5, r5, #1
 1061              	.LVL131:
 1062 001e A563     		str	r5, [r4, #56]
1358:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 1063              		.loc 1 1358 0
 1064 0020 2369     		ldr	r3, [r4, #16]
 1065 0022 63B1     		cbz	r3, .L79
1360:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
 1066              		.loc 1 1360 0
 1067 0024 04F11000 		add	r0, r4, #16
 1068 0028 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1069              	.LVL132:
 1070 002c 38B1     		cbz	r0, .L79
1362:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
 1071              		.loc 1 1362 0
 1072 002e 4FF08052 		mov	r2, #268435456
 1073 0032 304B     		ldr	r3, .L89
 1074 0034 1A60     		str	r2, [r3]
 1075              		.syntax unified
 1076              	@ 1362 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\queue.c" 1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 69


 1077 0036 BFF34F8F 		dsb
 1078              	@ 0 "" 2
 1079              	@ 1362 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\queue.c" 1
 1080 003a BFF36F8F 		isb
 1081              	@ 0 "" 2
 1082              		.thumb
 1083              		.syntax unified
 1084              	.L79:
1374:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 return pdPASS;
 1085              		.loc 1 1374 0
 1086 003e FFF7FEFF 		bl	vPortExitCritical
 1087              	.LVL133:
1375:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 1088              		.loc 1 1375 0
 1089 0042 0120     		movs	r0, #1
 1090 0044 53E0     		b	.L80
 1091              	.LVL134:
 1092              	.L78:
1379:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 1093              		.loc 1 1379 0
 1094 0046 019B     		ldr	r3, [sp, #4]
 1095 0048 1BB9     		cbnz	r3, .L81
1383:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
 1096              		.loc 1 1383 0
 1097 004a FFF7FEFF 		bl	vPortExitCritical
 1098              	.LVL135:
1385:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
 1099              		.loc 1 1385 0
 1100 004e 0020     		movs	r0, #0
 1101 0050 4DE0     		b	.L80
 1102              	.L81:
1387:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 1103              		.loc 1 1387 0
 1104 0052 1EB9     		cbnz	r6, .L82
1391:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     xEntryTimeSet = pdTRUE;
 1105              		.loc 1 1391 0
 1106 0054 02A8     		add	r0, sp, #8
 1107 0056 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1108              	.LVL136:
1392:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
 1109              		.loc 1 1392 0
 1110 005a 0126     		movs	r6, #1
 1111              	.LVL137:
 1112              	.L82:
 1113              	.LBE38:
1401:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1114              		.loc 1 1401 0
 1115 005c FFF7FEFF 		bl	vPortExitCritical
 1116              	.LVL138:
1406:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         prvLockQueue( pxQueue );
 1117              		.loc 1 1406 0
 1118 0060 FFF7FEFF 		bl	vTaskSuspendAll
 1119              	.LVL139:
1407:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1120              		.loc 1 1407 0
 1121 0064 FFF7FEFF 		bl	vPortEnterCritical
 1122              	.LVL140:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 70


 1123 0068 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1124 006c 5BB2     		sxtb	r3, r3
 1125 006e B3F1FF3F 		cmp	r3, #-1
 1126 0072 02D1     		bne	.L83
1407:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1127              		.loc 1 1407 0 is_stmt 0 discriminator 1
 1128 0074 0023     		movs	r3, #0
 1129 0076 84F84430 		strb	r3, [r4, #68]
 1130              	.L83:
1407:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1131              		.loc 1 1407 0 discriminator 3
 1132 007a 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1133 007e 5BB2     		sxtb	r3, r3
 1134 0080 B3F1FF3F 		cmp	r3, #-1
 1135 0084 02D1     		bne	.L84
1407:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1136              		.loc 1 1407 0 discriminator 4
 1137 0086 0023     		movs	r3, #0
 1138 0088 84F84530 		strb	r3, [r4, #69]
 1139              	.L84:
1407:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1140              		.loc 1 1407 0 discriminator 6
 1141 008c FFF7FEFF 		bl	vPortExitCritical
 1142              	.LVL141:
1410:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 1143              		.loc 1 1410 0 is_stmt 1 discriminator 6
 1144 0090 01A9     		add	r1, sp, #4
 1145              	.LVL142:
 1146 0092 02A8     		add	r0, sp, #8
 1147 0094 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1148              	.LVL143:
 1149 0098 F0B9     		cbnz	r0, .L85
1414:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 1150              		.loc 1 1414 0
 1151 009a 2046     		mov	r0, r4
 1152 009c FFF7FEFF 		bl	prvIsQueueEmpty
 1153              	.LVL144:
 1154 00a0 A0B1     		cbz	r0, .L86
1417:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
 1155              		.loc 1 1417 0
 1156 00a2 0199     		ldr	r1, [sp, #4]
 1157 00a4 04F12400 		add	r0, r4, #36
 1158 00a8 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1159              	.LVL145:
1418:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1160              		.loc 1 1418 0
 1161 00ac 2046     		mov	r0, r4
 1162 00ae FFF7FEFF 		bl	prvUnlockQueue
 1163              	.LVL146:
1420:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 1164              		.loc 1 1420 0
 1165 00b2 FFF7FEFF 		bl	xTaskResumeAll
 1166              	.LVL147:
 1167 00b6 0028     		cmp	r0, #0
 1168 00b8 A8D1     		bne	.L77
1422:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
 1169              		.loc 1 1422 0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 71


 1170 00ba 4FF08052 		mov	r2, #268435456
 1171 00be 0D4B     		ldr	r3, .L89
 1172 00c0 1A60     		str	r2, [r3]
 1173              		.syntax unified
 1174              	@ 1422 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\queue.c" 1
 1175 00c2 BFF34F8F 		dsb
 1176              	@ 0 "" 2
 1177              	@ 1422 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\queue.c" 1
 1178 00c6 BFF36F8F 		isb
 1179              	@ 0 "" 2
 1180              		.thumb
 1181              		.syntax unified
 1182 00ca 9FE7     		b	.L77
 1183              	.L86:
1433:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 ( void ) xTaskResumeAll();
 1184              		.loc 1 1433 0
 1185 00cc 2046     		mov	r0, r4
 1186 00ce FFF7FEFF 		bl	prvUnlockQueue
 1187              	.LVL148:
1434:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 1188              		.loc 1 1434 0
 1189 00d2 FFF7FEFF 		bl	xTaskResumeAll
 1190              	.LVL149:
 1191 00d6 99E7     		b	.L77
 1192              	.L85:
1441:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             ( void ) xTaskResumeAll();
 1193              		.loc 1 1441 0
 1194 00d8 2046     		mov	r0, r4
 1195 00da FFF7FEFF 		bl	prvUnlockQueue
 1196              	.LVL150:
1442:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1197              		.loc 1 1442 0
 1198 00de FFF7FEFF 		bl	xTaskResumeAll
 1199              	.LVL151:
1444:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 1200              		.loc 1 1444 0
 1201 00e2 2046     		mov	r0, r4
 1202 00e4 FFF7FEFF 		bl	prvIsQueueEmpty
 1203              	.LVL152:
 1204 00e8 0028     		cmp	r0, #0
 1205 00ea 8FD0     		beq	.L77
1447:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 1206              		.loc 1 1447 0
 1207 00ec 0020     		movs	r0, #0
 1208              	.LVL153:
 1209              	.L80:
1455:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 1210              		.loc 1 1455 0
 1211 00ee 05B0     		add	sp, sp, #20
 1212              		.cfi_def_cfa_offset 20
 1213              		@ sp needed
 1214 00f0 F0BD     		pop	{r4, r5, r6, r7, pc}
 1215              	.LVL154:
 1216              	.L90:
 1217 00f2 00BF     		.align	2
 1218              	.L89:
 1219 00f4 04ED00E0 		.word	-536810236
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 72


 1220              		.cfi_endproc
 1221              	.LFE10:
 1222              		.size	xQueueReceive, .-xQueueReceive
 1223              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 1224              		.align	2
 1225              		.global	xQueueSemaphoreTake
 1226              		.thumb
 1227              		.thumb_func
 1228              		.type	xQueueSemaphoreTake, %function
 1229              	xQueueSemaphoreTake:
 1230              	.LFB11:
1460:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 1231              		.loc 1 1460 0
 1232              		.cfi_startproc
 1233              		@ args = 0, pretend = 0, frame = 16
 1234              		@ frame_needed = 0, uses_anonymous_args = 0
 1235              	.LVL155:
 1236 0000 30B5     		push	{r4, r5, lr}
 1237              		.cfi_def_cfa_offset 12
 1238              		.cfi_offset 4, -12
 1239              		.cfi_offset 5, -8
 1240              		.cfi_offset 14, -4
 1241 0002 85B0     		sub	sp, sp, #20
 1242              		.cfi_def_cfa_offset 32
 1243 0004 0446     		mov	r4, r0
 1244 0006 0191     		str	r1, [sp, #4]
 1245              	.LVL156:
1461:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     TimeOut_t xTimeOut;
 1246              		.loc 1 1461 0
 1247 0008 0025     		movs	r5, #0
 1248              	.LVL157:
 1249              	.L92:
1488:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 1250              		.loc 1 1488 0
 1251 000a FFF7FEFF 		bl	vPortEnterCritical
 1252              	.LVL158:
 1253              	.LBB39:
1492:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1254              		.loc 1 1492 0
 1255 000e A36B     		ldr	r3, [r4, #56]
 1256              	.LVL159:
1496:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 1257              		.loc 1 1496 0
 1258 0010 A3B1     		cbz	r3, .L93
1502:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1259              		.loc 1 1502 0
 1260 0012 013B     		subs	r3, r3, #1
 1261              	.LVL160:
 1262 0014 A363     		str	r3, [r4, #56]
1521:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 1263              		.loc 1 1521 0
 1264 0016 2369     		ldr	r3, [r4, #16]
 1265              	.LVL161:
 1266 0018 63B1     		cbz	r3, .L94
1523:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
 1267              		.loc 1 1523 0
 1268 001a 04F11000 		add	r0, r4, #16
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 73


 1269 001e FFF7FEFF 		bl	xTaskRemoveFromEventList
 1270              	.LVL162:
 1271 0022 38B1     		cbz	r0, .L94
1525:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
 1272              		.loc 1 1525 0
 1273 0024 4FF08052 		mov	r2, #268435456
 1274 0028 2F4B     		ldr	r3, .L104
 1275 002a 1A60     		str	r2, [r3]
 1276              		.syntax unified
 1277              	@ 1525 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\queue.c" 1
 1278 002c BFF34F8F 		dsb
 1279              	@ 0 "" 2
 1280              	@ 1525 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\queue.c" 1
 1281 0030 BFF36F8F 		isb
 1282              	@ 0 "" 2
 1283              		.thumb
 1284              		.syntax unified
 1285              	.L94:
1537:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 return pdPASS;
 1286              		.loc 1 1537 0
 1287 0034 FFF7FEFF 		bl	vPortExitCritical
 1288              	.LVL163:
1538:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 1289              		.loc 1 1538 0
 1290 0038 0120     		movs	r0, #1
 1291 003a 53E0     		b	.L95
 1292              	.LVL164:
 1293              	.L93:
1542:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 1294              		.loc 1 1542 0
 1295 003c 019B     		ldr	r3, [sp, #4]
 1296              	.LVL165:
 1297 003e 1BB9     		cbnz	r3, .L96
1555:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
 1298              		.loc 1 1555 0
 1299 0040 FFF7FEFF 		bl	vPortExitCritical
 1300              	.LVL166:
1557:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
 1301              		.loc 1 1557 0
 1302 0044 0020     		movs	r0, #0
 1303 0046 4DE0     		b	.L95
 1304              	.L96:
1559:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 1305              		.loc 1 1559 0
 1306 0048 1DB9     		cbnz	r5, .L97
1563:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     xEntryTimeSet = pdTRUE;
 1307              		.loc 1 1563 0
 1308 004a 02A8     		add	r0, sp, #8
 1309 004c FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1310              	.LVL167:
1564:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
 1311              		.loc 1 1564 0
 1312 0050 0125     		movs	r5, #1
 1313              	.LVL168:
 1314              	.L97:
 1315              	.LBE39:
1573:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 74


 1316              		.loc 1 1573 0
 1317 0052 FFF7FEFF 		bl	vPortExitCritical
 1318              	.LVL169:
1578:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         prvLockQueue( pxQueue );
 1319              		.loc 1 1578 0
 1320 0056 FFF7FEFF 		bl	vTaskSuspendAll
 1321              	.LVL170:
1579:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1322              		.loc 1 1579 0
 1323 005a FFF7FEFF 		bl	vPortEnterCritical
 1324              	.LVL171:
 1325 005e 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1326 0062 5BB2     		sxtb	r3, r3
 1327 0064 B3F1FF3F 		cmp	r3, #-1
 1328 0068 02D1     		bne	.L98
1579:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1329              		.loc 1 1579 0 is_stmt 0 discriminator 1
 1330 006a 0023     		movs	r3, #0
 1331 006c 84F84430 		strb	r3, [r4, #68]
 1332              	.L98:
1579:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1333              		.loc 1 1579 0 discriminator 3
 1334 0070 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1335 0074 5BB2     		sxtb	r3, r3
 1336 0076 B3F1FF3F 		cmp	r3, #-1
 1337 007a 02D1     		bne	.L99
1579:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1338              		.loc 1 1579 0 discriminator 4
 1339 007c 0023     		movs	r3, #0
 1340 007e 84F84530 		strb	r3, [r4, #69]
 1341              	.L99:
1579:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1342              		.loc 1 1579 0 discriminator 6
 1343 0082 FFF7FEFF 		bl	vPortExitCritical
 1344              	.LVL172:
1582:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 1345              		.loc 1 1582 0 is_stmt 1 discriminator 6
 1346 0086 01A9     		add	r1, sp, #4
 1347              	.LVL173:
 1348 0088 02A8     		add	r0, sp, #8
 1349 008a FFF7FEFF 		bl	xTaskCheckForTimeOut
 1350              	.LVL174:
 1351 008e F0B9     		cbnz	r0, .L100
1588:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 1352              		.loc 1 1588 0
 1353 0090 2046     		mov	r0, r4
 1354 0092 FFF7FEFF 		bl	prvIsQueueEmpty
 1355              	.LVL175:
 1356 0096 A0B1     		cbz	r0, .L101
1609:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
 1357              		.loc 1 1609 0
 1358 0098 0199     		ldr	r1, [sp, #4]
 1359 009a 04F12400 		add	r0, r4, #36
 1360 009e FFF7FEFF 		bl	vTaskPlaceOnEventList
 1361              	.LVL176:
1610:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1362              		.loc 1 1610 0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 75


 1363 00a2 2046     		mov	r0, r4
 1364 00a4 FFF7FEFF 		bl	prvUnlockQueue
 1365              	.LVL177:
1612:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 1366              		.loc 1 1612 0
 1367 00a8 FFF7FEFF 		bl	xTaskResumeAll
 1368              	.LVL178:
 1369 00ac 0028     		cmp	r0, #0
 1370 00ae ACD1     		bne	.L92
1614:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
 1371              		.loc 1 1614 0
 1372 00b0 4FF08052 		mov	r2, #268435456
 1373 00b4 0C4B     		ldr	r3, .L104
 1374 00b6 1A60     		str	r2, [r3]
 1375              		.syntax unified
 1376              	@ 1614 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\queue.c" 1
 1377 00b8 BFF34F8F 		dsb
 1378              	@ 0 "" 2
 1379              	@ 1614 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\queue.c" 1
 1380 00bc BFF36F8F 		isb
 1381              	@ 0 "" 2
 1382              		.thumb
 1383              		.syntax unified
 1384 00c0 A3E7     		b	.L92
 1385              	.L101:
1625:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 ( void ) xTaskResumeAll();
 1386              		.loc 1 1625 0
 1387 00c2 2046     		mov	r0, r4
 1388 00c4 FFF7FEFF 		bl	prvUnlockQueue
 1389              	.LVL179:
1626:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 1390              		.loc 1 1626 0
 1391 00c8 FFF7FEFF 		bl	xTaskResumeAll
 1392              	.LVL180:
 1393 00cc 9DE7     		b	.L92
 1394              	.L100:
1632:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             ( void ) xTaskResumeAll();
 1395              		.loc 1 1632 0
 1396 00ce 2046     		mov	r0, r4
 1397 00d0 FFF7FEFF 		bl	prvUnlockQueue
 1398              	.LVL181:
1633:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1399              		.loc 1 1633 0
 1400 00d4 FFF7FEFF 		bl	xTaskResumeAll
 1401              	.LVL182:
1639:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 1402              		.loc 1 1639 0
 1403 00d8 2046     		mov	r0, r4
 1404 00da FFF7FEFF 		bl	prvIsQueueEmpty
 1405              	.LVL183:
 1406 00de 0028     		cmp	r0, #0
 1407 00e0 93D0     		beq	.L92
1666:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 1408              		.loc 1 1666 0
 1409 00e2 0020     		movs	r0, #0
 1410              	.L95:
1674:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 76


 1411              		.loc 1 1674 0
 1412 00e4 05B0     		add	sp, sp, #20
 1413              		.cfi_def_cfa_offset 12
 1414              		@ sp needed
 1415 00e6 30BD     		pop	{r4, r5, pc}
 1416              	.LVL184:
 1417              	.L105:
 1418              		.align	2
 1419              	.L104:
 1420 00e8 04ED00E0 		.word	-536810236
 1421              		.cfi_endproc
 1422              	.LFE11:
 1423              		.size	xQueueSemaphoreTake, .-xQueueSemaphoreTake
 1424              		.section	.text.xQueuePeek,"ax",%progbits
 1425              		.align	2
 1426              		.global	xQueuePeek
 1427              		.thumb
 1428              		.thumb_func
 1429              		.type	xQueuePeek, %function
 1430              	xQueuePeek:
 1431              	.LFB12:
1680:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 1432              		.loc 1 1680 0
 1433              		.cfi_startproc
 1434              		@ args = 0, pretend = 0, frame = 16
 1435              		@ frame_needed = 0, uses_anonymous_args = 0
 1436              	.LVL185:
 1437 0000 70B5     		push	{r4, r5, r6, lr}
 1438              		.cfi_def_cfa_offset 16
 1439              		.cfi_offset 4, -16
 1440              		.cfi_offset 5, -12
 1441              		.cfi_offset 6, -8
 1442              		.cfi_offset 14, -4
 1443 0002 84B0     		sub	sp, sp, #16
 1444              		.cfi_def_cfa_offset 32
 1445 0004 0446     		mov	r4, r0
 1446 0006 0E46     		mov	r6, r1
 1447 0008 0192     		str	r2, [sp, #4]
 1448              	.LVL186:
1681:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     TimeOut_t xTimeOut;
 1449              		.loc 1 1681 0
 1450 000a 0025     		movs	r5, #0
 1451              	.LVL187:
 1452              	.L107:
1705:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 1453              		.loc 1 1705 0
 1454 000c FFF7FEFF 		bl	vPortEnterCritical
 1455              	.LVL188:
 1456              	.LBB40:
1707:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1457              		.loc 1 1707 0
 1458 0010 A36B     		ldr	r3, [r4, #56]
 1459              	.LVL189:
1711:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 1460              		.loc 1 1711 0
 1461 0012 C3B1     		cbz	r3, .L108
1716:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 77


 1462              		.loc 1 1716 0
 1463 0014 E568     		ldr	r5, [r4, #12]
 1464              	.LVL190:
1718:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 traceQUEUE_PEEK( pxQueue );
 1465              		.loc 1 1718 0
 1466 0016 3146     		mov	r1, r6
 1467 0018 2046     		mov	r0, r4
 1468 001a FFF7FEFF 		bl	prvCopyDataFromQueue
 1469              	.LVL191:
1722:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1470              		.loc 1 1722 0
 1471 001e E560     		str	r5, [r4, #12]
1726:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 1472              		.loc 1 1726 0
 1473 0020 636A     		ldr	r3, [r4, #36]
 1474 0022 63B1     		cbz	r3, .L109
1728:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
 1475              		.loc 1 1728 0
 1476 0024 04F12400 		add	r0, r4, #36
 1477 0028 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1478              	.LVL192:
 1479 002c 38B1     		cbz	r0, .L109
1731:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
 1480              		.loc 1 1731 0
 1481 002e 4FF08052 		mov	r2, #268435456
 1482 0032 304B     		ldr	r3, .L119
 1483 0034 1A60     		str	r2, [r3]
 1484              		.syntax unified
 1485              	@ 1731 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\queue.c" 1
 1486 0036 BFF34F8F 		dsb
 1487              	@ 0 "" 2
 1488              	@ 1731 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\queue.c" 1
 1489 003a BFF36F8F 		isb
 1490              	@ 0 "" 2
 1491              		.thumb
 1492              		.syntax unified
 1493              	.L109:
1743:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 return pdPASS;
 1494              		.loc 1 1743 0
 1495 003e FFF7FEFF 		bl	vPortExitCritical
 1496              	.LVL193:
1744:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 1497              		.loc 1 1744 0
 1498 0042 0120     		movs	r0, #1
 1499 0044 53E0     		b	.L110
 1500              	.LVL194:
 1501              	.L108:
1748:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 1502              		.loc 1 1748 0
 1503 0046 019B     		ldr	r3, [sp, #4]
 1504              	.LVL195:
 1505 0048 1BB9     		cbnz	r3, .L111
1752:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     traceQUEUE_PEEK_FAILED( pxQueue );
 1506              		.loc 1 1752 0
 1507 004a FFF7FEFF 		bl	vPortExitCritical
 1508              	.LVL196:
1754:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 78


 1509              		.loc 1 1754 0
 1510 004e 0020     		movs	r0, #0
 1511 0050 4DE0     		b	.L110
 1512              	.L111:
1756:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 1513              		.loc 1 1756 0
 1514 0052 1DB9     		cbnz	r5, .L112
1761:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     xEntryTimeSet = pdTRUE;
 1515              		.loc 1 1761 0
 1516 0054 02A8     		add	r0, sp, #8
 1517 0056 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1518              	.LVL197:
1762:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
 1519              		.loc 1 1762 0
 1520 005a 0125     		movs	r5, #1
 1521              	.LVL198:
 1522              	.L112:
 1523              	.LBE40:
1771:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1524              		.loc 1 1771 0
 1525 005c FFF7FEFF 		bl	vPortExitCritical
 1526              	.LVL199:
1776:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         prvLockQueue( pxQueue );
 1527              		.loc 1 1776 0
 1528 0060 FFF7FEFF 		bl	vTaskSuspendAll
 1529              	.LVL200:
1777:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1530              		.loc 1 1777 0
 1531 0064 FFF7FEFF 		bl	vPortEnterCritical
 1532              	.LVL201:
 1533 0068 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1534 006c 5BB2     		sxtb	r3, r3
 1535 006e B3F1FF3F 		cmp	r3, #-1
 1536 0072 02D1     		bne	.L113
1777:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1537              		.loc 1 1777 0 is_stmt 0 discriminator 1
 1538 0074 0023     		movs	r3, #0
 1539 0076 84F84430 		strb	r3, [r4, #68]
 1540              	.L113:
1777:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1541              		.loc 1 1777 0 discriminator 3
 1542 007a 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1543 007e 5BB2     		sxtb	r3, r3
 1544 0080 B3F1FF3F 		cmp	r3, #-1
 1545 0084 02D1     		bne	.L114
1777:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1546              		.loc 1 1777 0 discriminator 4
 1547 0086 0023     		movs	r3, #0
 1548 0088 84F84530 		strb	r3, [r4, #69]
 1549              	.L114:
1777:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1550              		.loc 1 1777 0 discriminator 6
 1551 008c FFF7FEFF 		bl	vPortExitCritical
 1552              	.LVL202:
1780:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 1553              		.loc 1 1780 0 is_stmt 1 discriminator 6
 1554 0090 01A9     		add	r1, sp, #4
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 79


 1555              	.LVL203:
 1556 0092 02A8     		add	r0, sp, #8
 1557 0094 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1558              	.LVL204:
 1559 0098 F0B9     		cbnz	r0, .L115
1784:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 1560              		.loc 1 1784 0
 1561 009a 2046     		mov	r0, r4
 1562 009c FFF7FEFF 		bl	prvIsQueueEmpty
 1563              	.LVL205:
 1564 00a0 A0B1     		cbz	r0, .L116
1787:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
 1565              		.loc 1 1787 0
 1566 00a2 0199     		ldr	r1, [sp, #4]
 1567 00a4 04F12400 		add	r0, r4, #36
 1568 00a8 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1569              	.LVL206:
1788:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1570              		.loc 1 1788 0
 1571 00ac 2046     		mov	r0, r4
 1572 00ae FFF7FEFF 		bl	prvUnlockQueue
 1573              	.LVL207:
1790:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 1574              		.loc 1 1790 0
 1575 00b2 FFF7FEFF 		bl	xTaskResumeAll
 1576              	.LVL208:
 1577 00b6 0028     		cmp	r0, #0
 1578 00b8 A8D1     		bne	.L107
1792:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
 1579              		.loc 1 1792 0
 1580 00ba 4FF08052 		mov	r2, #268435456
 1581 00be 0D4B     		ldr	r3, .L119
 1582 00c0 1A60     		str	r2, [r3]
 1583              		.syntax unified
 1584              	@ 1792 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\queue.c" 1
 1585 00c2 BFF34F8F 		dsb
 1586              	@ 0 "" 2
 1587              	@ 1792 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\queue.c" 1
 1588 00c6 BFF36F8F 		isb
 1589              	@ 0 "" 2
 1590              		.thumb
 1591              		.syntax unified
 1592 00ca 9FE7     		b	.L107
 1593              	.L116:
1803:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 ( void ) xTaskResumeAll();
 1594              		.loc 1 1803 0
 1595 00cc 2046     		mov	r0, r4
 1596 00ce FFF7FEFF 		bl	prvUnlockQueue
 1597              	.LVL209:
1804:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 1598              		.loc 1 1804 0
 1599 00d2 FFF7FEFF 		bl	xTaskResumeAll
 1600              	.LVL210:
 1601 00d6 99E7     		b	.L107
 1602              	.L115:
1811:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             ( void ) xTaskResumeAll();
 1603              		.loc 1 1811 0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 80


 1604 00d8 2046     		mov	r0, r4
 1605 00da FFF7FEFF 		bl	prvUnlockQueue
 1606              	.LVL211:
1812:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1607              		.loc 1 1812 0
 1608 00de FFF7FEFF 		bl	xTaskResumeAll
 1609              	.LVL212:
1814:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 1610              		.loc 1 1814 0
 1611 00e2 2046     		mov	r0, r4
 1612 00e4 FFF7FEFF 		bl	prvIsQueueEmpty
 1613              	.LVL213:
 1614 00e8 0028     		cmp	r0, #0
 1615 00ea 8FD0     		beq	.L107
1817:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 1616              		.loc 1 1817 0
 1617 00ec 0020     		movs	r0, #0
 1618              	.LVL214:
 1619              	.L110:
1825:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 1620              		.loc 1 1825 0
 1621 00ee 04B0     		add	sp, sp, #16
 1622              		.cfi_def_cfa_offset 16
 1623              		@ sp needed
 1624 00f0 70BD     		pop	{r4, r5, r6, pc}
 1625              	.LVL215:
 1626              	.L120:
 1627 00f2 00BF     		.align	2
 1628              	.L119:
 1629 00f4 04ED00E0 		.word	-536810236
 1630              		.cfi_endproc
 1631              	.LFE12:
 1632              		.size	xQueuePeek, .-xQueuePeek
 1633              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 1634              		.align	2
 1635              		.global	xQueueReceiveFromISR
 1636              		.thumb
 1637              		.thumb_func
 1638              		.type	xQueueReceiveFromISR, %function
 1639              	xQueueReceiveFromISR:
 1640              	.LFB13:
1831:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
 1641              		.loc 1 1831 0
 1642              		.cfi_startproc
 1643              		@ args = 0, pretend = 0, frame = 0
 1644              		@ frame_needed = 0, uses_anonymous_args = 0
 1645              	.LVL216:
 1646 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1647              		.cfi_def_cfa_offset 24
 1648              		.cfi_offset 4, -24
 1649              		.cfi_offset 5, -20
 1650              		.cfi_offset 6, -16
 1651              		.cfi_offset 7, -12
 1652              		.cfi_offset 8, -8
 1653              		.cfi_offset 14, -4
 1654              	.LVL217:
 1655              	.LBB41:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 81


 1656              	.LBB42:
 215:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         (
 1657              		.loc 2 215 0
 1658              		.syntax unified
 1659              	@ 215 "C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1660 0004 EFF31186 			mrs r6, basepri											
 1661 0008 4FF00403 		mov r3, #4												
 1662 000c 83F31188 		msr basepri, r3											
 1663 0010 BFF36F8F 		isb														
 1664 0014 BFF34F8F 		dsb														
 1665              	
 1666              	@ 0 "" 2
 1667              		.thumb
 1668              		.syntax unified
 1669              	.LBE42:
 1670              	.LBE41:
 1671              	.LBB43:
1857:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1672              		.loc 1 1857 0
 1673 0018 846B     		ldr	r4, [r0, #56]
 1674              	.LVL218:
1860:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 1675              		.loc 1 1860 0
 1676 001a FCB1     		cbz	r4, .L124
 1677 001c 9046     		mov	r8, r2
 1678 001e 0746     		mov	r7, r0
 1679              	.LBB44:
1862:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1680              		.loc 1 1862 0
 1681 0020 90F84450 		ldrb	r5, [r0, #68]	@ zero_extendqisi2
 1682 0024 6DB2     		sxtb	r5, r5
 1683              	.LVL219:
1866:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 1684              		.loc 1 1866 0
 1685 0026 FFF7FEFF 		bl	prvCopyDataFromQueue
 1686              	.LVL220:
1867:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1687              		.loc 1 1867 0
 1688 002a 013C     		subs	r4, r4, #1
 1689              	.LVL221:
 1690 002c BC63     		str	r4, [r7, #56]
1873:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
 1691              		.loc 1 1873 0
 1692 002e B5F1FF3F 		cmp	r5, #-1
 1693 0032 0DD1     		bne	.L123
1875:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
 1694              		.loc 1 1875 0
 1695 0034 3B69     		ldr	r3, [r7, #16]
 1696 0036 9BB1     		cbz	r3, .L125
1877:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
 1697              		.loc 1 1877 0
 1698 0038 07F11000 		add	r0, r7, #16
 1699 003c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1700              	.LVL222:
 1701 0040 80B1     		cbz	r0, .L126
1881:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         {
 1702              		.loc 1 1881 0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 82


 1703 0042 B8F1000F 		cmp	r8, #0
 1704 0046 0FD0     		beq	.L127
1883:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         }
 1705              		.loc 1 1883 0
 1706 0048 0120     		movs	r0, #1
 1707 004a C8F80000 		str	r0, [r8]
 1708 004e 0CE0     		b	.L122
 1709              	.L123:
1906:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
 1710              		.loc 1 1906 0
 1711 0050 0135     		adds	r5, r5, #1
 1712              	.LVL223:
 1713 0052 6DB2     		sxtb	r5, r5
 1714              	.LVL224:
 1715 0054 87F84450 		strb	r5, [r7, #68]
1909:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 1716              		.loc 1 1909 0
 1717 0058 0120     		movs	r0, #1
 1718 005a 06E0     		b	.L122
 1719              	.LVL225:
 1720              	.L124:
 1721              	.LBE44:
1913:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 1722              		.loc 1 1913 0
 1723 005c 0020     		movs	r0, #0
 1724              	.LVL226:
 1725 005e 04E0     		b	.L122
 1726              	.LVL227:
 1727              	.L125:
 1728              	.LBB45:
1909:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 1729              		.loc 1 1909 0
 1730 0060 0120     		movs	r0, #1
 1731 0062 02E0     		b	.L122
 1732              	.L126:
 1733 0064 0120     		movs	r0, #1
 1734 0066 00E0     		b	.L122
 1735              	.L127:
 1736 0068 0120     		movs	r0, #1
 1737              	.LVL228:
 1738              	.L122:
 1739              	.LBE45:
 1740              	.LBE43:
 1741              	.LBB46:
 1742              	.LBB47:
 1743              		.loc 2 233 0
 1744              		.syntax unified
 1745              	@ 233 "C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1746 006a 86F31188 			msr basepri, r6	
 1747              	@ 0 "" 2
 1748              	.LVL229:
 1749              		.thumb
 1750              		.syntax unified
 1751              	.LBE47:
 1752              	.LBE46:
1920:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 1753              		.loc 1 1920 0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 83


 1754 006e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1755              		.cfi_endproc
 1756              	.LFE13:
 1757              		.size	xQueueReceiveFromISR, .-xQueueReceiveFromISR
 1758 0072 00BF     		.section	.text.xQueuePeekFromISR,"ax",%progbits
 1759              		.align	2
 1760              		.global	xQueuePeekFromISR
 1761              		.thumb
 1762              		.thumb_func
 1763              		.type	xQueuePeekFromISR, %function
 1764              	xQueuePeekFromISR:
 1765              	.LFB14:
1925:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
 1766              		.loc 1 1925 0
 1767              		.cfi_startproc
 1768              		@ args = 0, pretend = 0, frame = 0
 1769              		@ frame_needed = 0, uses_anonymous_args = 0
 1770              	.LVL230:
 1771 0000 70B5     		push	{r4, r5, r6, lr}
 1772              		.cfi_def_cfa_offset 16
 1773              		.cfi_offset 4, -16
 1774              		.cfi_offset 5, -12
 1775              		.cfi_offset 6, -8
 1776              		.cfi_offset 14, -4
 1777              	.LVL231:
 1778              	.LBB48:
 1779              	.LBB49:
 215:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         (
 1780              		.loc 2 215 0
 1781              		.syntax unified
 1782              	@ 215 "C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1783 0002 EFF31185 			mrs r5, basepri											
 1784 0006 4FF00403 		mov r3, #4												
 1785 000a 83F31188 		msr basepri, r3											
 1786 000e BFF36F8F 		isb														
 1787 0012 BFF34F8F 		dsb														
 1788              	
 1789              	@ 0 "" 2
 1790              		.thumb
 1791              		.syntax unified
 1792              	.LBE49:
 1793              	.LBE48:
1954:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 1794              		.loc 1 1954 0
 1795 0016 836B     		ldr	r3, [r0, #56]
 1796 0018 33B1     		cbz	r3, .L131
 1797 001a 0446     		mov	r4, r0
1960:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 1798              		.loc 1 1960 0
 1799 001c C668     		ldr	r6, [r0, #12]
 1800              	.LVL232:
1961:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 1801              		.loc 1 1961 0
 1802 001e FFF7FEFF 		bl	prvCopyDataFromQueue
 1803              	.LVL233:
1962:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1804              		.loc 1 1962 0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 84


 1805 0022 E660     		str	r6, [r4, #12]
 1806              	.LVL234:
1964:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 1807              		.loc 1 1964 0
 1808 0024 0120     		movs	r0, #1
 1809 0026 00E0     		b	.L130
 1810              	.LVL235:
 1811              	.L131:
1968:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 1812              		.loc 1 1968 0
 1813 0028 0020     		movs	r0, #0
 1814              	.LVL236:
 1815              	.L130:
 1816              	.LBB50:
 1817              	.LBB51:
 1818              		.loc 2 233 0
 1819              		.syntax unified
 1820              	@ 233 "C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1821 002a 85F31188 			msr basepri, r5	
 1822              	@ 0 "" 2
 1823              	.LVL237:
 1824              		.thumb
 1825              		.syntax unified
 1826              	.LBE51:
 1827              	.LBE50:
1975:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 1828              		.loc 1 1975 0
 1829 002e 70BD     		pop	{r4, r5, r6, pc}
 1830              		.cfi_endproc
 1831              	.LFE14:
 1832              		.size	xQueuePeekFromISR, .-xQueuePeekFromISR
 1833              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 1834              		.align	2
 1835              		.global	uxQueueMessagesWaiting
 1836              		.thumb
 1837              		.thumb_func
 1838              		.type	uxQueueMessagesWaiting, %function
 1839              	uxQueueMessagesWaiting:
 1840              	.LFB15:
1979:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     UBaseType_t uxReturn;
 1841              		.loc 1 1979 0
 1842              		.cfi_startproc
 1843              		@ args = 0, pretend = 0, frame = 0
 1844              		@ frame_needed = 0, uses_anonymous_args = 0
 1845              	.LVL238:
 1846 0000 10B5     		push	{r4, lr}
 1847              		.cfi_def_cfa_offset 8
 1848              		.cfi_offset 4, -8
 1849              		.cfi_offset 14, -4
 1850 0002 0446     		mov	r4, r0
1984:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 1851              		.loc 1 1984 0
 1852 0004 FFF7FEFF 		bl	vPortEnterCritical
 1853              	.LVL239:
1986:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
 1854              		.loc 1 1986 0
 1855 0008 A46B     		ldr	r4, [r4, #56]
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 85


 1856              	.LVL240:
1988:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1857              		.loc 1 1988 0
 1858 000a FFF7FEFF 		bl	vPortExitCritical
 1859              	.LVL241:
1991:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 1860              		.loc 1 1991 0
 1861 000e 2046     		mov	r0, r4
 1862 0010 10BD     		pop	{r4, pc}
 1863              		.cfi_endproc
 1864              	.LFE15:
 1865              		.size	uxQueueMessagesWaiting, .-uxQueueMessagesWaiting
 1866 0012 00BF     		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 1867              		.align	2
 1868              		.global	uxQueueSpacesAvailable
 1869              		.thumb
 1870              		.thumb_func
 1871              		.type	uxQueueSpacesAvailable, %function
 1872              	uxQueueSpacesAvailable:
 1873              	.LFB16:
1995:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     UBaseType_t uxReturn;
 1874              		.loc 1 1995 0
 1875              		.cfi_startproc
 1876              		@ args = 0, pretend = 0, frame = 0
 1877              		@ frame_needed = 0, uses_anonymous_args = 0
 1878              	.LVL242:
 1879 0000 10B5     		push	{r4, lr}
 1880              		.cfi_def_cfa_offset 8
 1881              		.cfi_offset 4, -8
 1882              		.cfi_offset 14, -4
 1883 0002 0446     		mov	r4, r0
 1884              	.LVL243:
2001:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 1885              		.loc 1 2001 0
 1886 0004 FFF7FEFF 		bl	vPortEnterCritical
 1887              	.LVL244:
2003:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
 1888              		.loc 1 2003 0
 1889 0008 E36B     		ldr	r3, [r4, #60]
 1890 000a A46B     		ldr	r4, [r4, #56]
 1891              	.LVL245:
 1892 000c 1C1B     		subs	r4, r3, r4
 1893              	.LVL246:
2005:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1894              		.loc 1 2005 0
 1895 000e FFF7FEFF 		bl	vPortExitCritical
 1896              	.LVL247:
2008:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 1897              		.loc 1 2008 0
 1898 0012 2046     		mov	r0, r4
 1899 0014 10BD     		pop	{r4, pc}
 1900              		.cfi_endproc
 1901              	.LFE16:
 1902              		.size	uxQueueSpacesAvailable, .-uxQueueSpacesAvailable
 1903 0016 00BF     		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 1904              		.align	2
 1905              		.global	uxQueueMessagesWaitingFromISR
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 86


 1906              		.thumb
 1907              		.thumb_func
 1908              		.type	uxQueueMessagesWaitingFromISR, %function
 1909              	uxQueueMessagesWaitingFromISR:
 1910              	.LFB17:
2012:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     UBaseType_t uxReturn;
 1911              		.loc 1 2012 0
 1912              		.cfi_startproc
 1913              		@ args = 0, pretend = 0, frame = 0
 1914              		@ frame_needed = 0, uses_anonymous_args = 0
 1915              		@ link register save eliminated.
 1916              	.LVL248:
2017:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 1917              		.loc 1 2017 0
 1918 0000 806B     		ldr	r0, [r0, #56]
 1919              	.LVL249:
2020:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 1920              		.loc 1 2020 0
 1921 0002 7047     		bx	lr
 1922              		.cfi_endproc
 1923              	.LFE17:
 1924              		.size	uxQueueMessagesWaitingFromISR, .-uxQueueMessagesWaitingFromISR
 1925              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 1926              		.align	2
 1927              		.global	xQueueIsQueueEmptyFromISR
 1928              		.thumb
 1929              		.thumb_func
 1930              		.type	xQueueIsQueueEmptyFromISR, %function
 1931              	xQueueIsQueueEmptyFromISR:
 1932              	.LFB23:
2369:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
 1933              		.loc 1 2369 0
 1934              		.cfi_startproc
 1935              		@ args = 0, pretend = 0, frame = 0
 1936              		@ frame_needed = 0, uses_anonymous_args = 0
 1937              		@ link register save eliminated.
 1938              	.LVL250:
2375:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 1939              		.loc 1 2375 0
 1940 0000 836B     		ldr	r3, [r0, #56]
 1941 0002 0BB9     		cbnz	r3, .L140
2377:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
 1942              		.loc 1 2377 0
 1943 0004 0120     		movs	r0, #1
 1944              	.LVL251:
 1945 0006 7047     		bx	lr
 1946              	.LVL252:
 1947              	.L140:
2381:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
 1948              		.loc 1 2381 0
 1949 0008 0020     		movs	r0, #0
 1950              	.LVL253:
2385:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 1951              		.loc 1 2385 0
 1952 000a 7047     		bx	lr
 1953              		.cfi_endproc
 1954              	.LFE23:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 87


 1955              		.size	xQueueIsQueueEmptyFromISR, .-xQueueIsQueueEmptyFromISR
 1956              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 1957              		.align	2
 1958              		.global	xQueueIsQueueFullFromISR
 1959              		.thumb
 1960              		.thumb_func
 1961              		.type	xQueueIsQueueFullFromISR, %function
 1962              	xQueueIsQueueFullFromISR:
 1963              	.LFB25:
2407:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2408:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2409:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2410:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** {
 1964              		.loc 1 2410 0
 1965              		.cfi_startproc
 1966              		@ args = 0, pretend = 0, frame = 0
 1967              		@ frame_needed = 0, uses_anonymous_args = 0
 1968              		@ link register save eliminated.
 1969              	.LVL254:
2411:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
2412:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
2413:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2414:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
2415:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2416:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 1970              		.loc 1 2416 0
 1971 0000 826B     		ldr	r2, [r0, #56]
 1972 0002 C36B     		ldr	r3, [r0, #60]
 1973 0004 9A42     		cmp	r2, r3
 1974 0006 01D1     		bne	.L143
2417:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
2418:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         xReturn = pdTRUE;
 1975              		.loc 1 2418 0
 1976 0008 0120     		movs	r0, #1
 1977              	.LVL255:
 1978 000a 7047     		bx	lr
 1979              	.LVL256:
 1980              	.L143:
2419:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2420:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     else
2421:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
2422:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         xReturn = pdFALSE;
 1981              		.loc 1 2422 0
 1982 000c 0020     		movs	r0, #0
 1983              	.LVL257:
2423:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2424:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2425:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     return xReturn;
2426:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 1984              		.loc 1 2426 0
 1985 000e 7047     		bx	lr
 1986              		.cfi_endproc
 1987              	.LFE25:
 1988              		.size	xQueueIsQueueFullFromISR, .-xQueueIsQueueFullFromISR
 1989              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 1990              		.align	2
 1991              		.global	vQueueAddToRegistry
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 88


 1992              		.thumb
 1993              		.thumb_func
 1994              		.type	vQueueAddToRegistry, %function
 1995              	vQueueAddToRegistry:
 1996              	.LFB26:
2427:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2428:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2429:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2430:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2431:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xQueueCRSend( QueueHandle_t xQueue,
2432:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                              const void * pvItemToQueue,
2433:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                              TickType_t xTicksToWait )
2434:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
2435:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         BaseType_t xReturn;
2436:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         Queue_t * const pxQueue = xQueue;
2437:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2438:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* If the queue is already full we may have to block.  A critical section
2439:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * is required to prevent an interrupt removing something from the queue
2440:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * between the check to see if the queue is full and blocking on the queue. */
2441:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         portDISABLE_INTERRUPTS();
2442:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2443:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
2444:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2445:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* The queue is full - do we want to block or just leave without
2446:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * posting? */
2447:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2448:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
2449:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* As this is called from a coroutine we cannot block directly, but
2450:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * return indicating that we need to block. */
2451:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2452:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     portENABLE_INTERRUPTS();
2453:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     return errQUEUE_BLOCKED;
2454:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
2455:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else
2456:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
2457:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     portENABLE_INTERRUPTS();
2458:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     return errQUEUE_FULL;
2459:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
2460:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2461:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2462:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         portENABLE_INTERRUPTS();
2463:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2464:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         portDISABLE_INTERRUPTS();
2465:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2466:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2467:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2468:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* There is room in the queue, copy the data into the queue. */
2469:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2470:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 xReturn = pdPASS;
2471:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2472:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* Were any co-routines waiting for data to become available? */
2473:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2474:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
2475:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* In this instance the co-routine could be placed directly
2476:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * into the ready list as we are within a critical section.
2477:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2478:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * the event were caused from within an interrupt. */
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 89


2479:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2480:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
2481:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         /* The co-routine waiting has a higher priority so record
2482:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                          * that a yield might be appropriate. */
2483:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         xReturn = errQUEUE_YIELD;
2484:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
2485:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     else
2486:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
2487:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2488:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
2489:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
2490:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else
2491:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
2492:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2493:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
2494:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2495:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
2496:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2497:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 xReturn = errQUEUE_FULL;
2498:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2499:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2500:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         portENABLE_INTERRUPTS();
2501:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2502:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         return xReturn;
2503:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2504:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2505:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2506:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2507:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2508:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2509:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2510:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xQueueCRReceive( QueueHandle_t xQueue,
2511:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 void * pvBuffer,
2512:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                 TickType_t xTicksToWait )
2513:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
2514:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         BaseType_t xReturn;
2515:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         Queue_t * const pxQueue = xQueue;
2516:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2517:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* If the queue is already empty we may have to block.  A critical section
2518:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * is required to prevent an interrupt adding something to the queue
2519:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * between the check to see if the queue is empty and blocking on the queue. */
2520:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         portDISABLE_INTERRUPTS();
2521:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2522:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2523:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2524:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* There are no messages in the queue, do we want to block or just
2525:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * leave with nothing? */
2526:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2527:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
2528:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* As this is a co-routine we cannot block directly, but return
2529:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * indicating that we need to block. */
2530:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) 
2531:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     portENABLE_INTERRUPTS();
2532:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     return errQUEUE_BLOCKED;
2533:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
2534:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else
2535:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 90


2536:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     portENABLE_INTERRUPTS();
2537:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     return errQUEUE_FULL;
2538:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
2539:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2540:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
2541:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2542:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2543:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2544:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2545:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         portENABLE_INTERRUPTS();
2546:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2547:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         portDISABLE_INTERRUPTS();
2548:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2549:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2550:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2551:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* Data is available from the queue. */
2552:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2553:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2554:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2555:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
2556:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2557:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
2558:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else
2559:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
2560:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2561:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
2562:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2563:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 --( pxQueue->uxMessagesWaiting );
2564:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( un
2565:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2566:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 xReturn = pdPASS;
2567:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2568:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* Were any co-routines waiting for space to become available? */
2569:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2570:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
2571:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     /* In this instance the co-routine could be placed directly
2572:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * into the ready list as we are within a critical section.
2573:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2574:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                      * the event were caused from within an interrupt. */
2575:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2576:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
2577:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         xReturn = errQUEUE_YIELD;
2578:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
2579:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     else
2580:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
2581:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2582:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
2583:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
2584:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else
2585:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
2586:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2587:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
2588:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2589:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
2590:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2591:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 xReturn = pdFAIL;
2592:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 91


2593:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2594:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         portENABLE_INTERRUPTS();
2595:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2596:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         return xReturn;
2597:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2598:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2599:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2600:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2601:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2602:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2603:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2604:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue,
2605:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     const void * pvItemToQueue,
2606:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                     BaseType_t xCoRoutinePreviouslyWoken )
2607:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
2608:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         Queue_t * const pxQueue = xQueue;
2609:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2610:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* Cannot block within an ISR so if there is no space on the queue then
2611:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * exit without doing anything. */
2612:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2613:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2614:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2615:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2616:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* We only want to wake one co-routine per ISR, so check that a
2617:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****              * co-routine has not already been woken. */
2618:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( xCoRoutinePreviouslyWoken == pdFALSE )
2619:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2620:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2621:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
2622:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2623:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
2624:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         return pdTRUE;
2625:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
2626:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     else
2627:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
2628:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2629:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
2630:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
2631:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else
2632:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
2633:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2634:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
2635:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2636:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
2637:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2638:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2639:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2640:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2641:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
2642:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2643:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             mtCOVERAGE_TEST_MARKER();
2644:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2645:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2646:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         return xCoRoutinePreviouslyWoken;
2647:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2648:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2649:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 92


2650:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2651:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2652:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2653:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2654:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue,
2655:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                        void * pvBuffer,
2656:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                        BaseType_t * pxCoRoutineWoken )
2657:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
2658:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         BaseType_t xReturn;
2659:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         Queue_t * const pxQueue = xQueue;
2660:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2661:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* We cannot block from an ISR, so check there is data available. If
2662:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * not then just leave without doing anything. */
2663:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2664:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2665:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* Copy the data from the queue. */
2666:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2667:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2668:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2669:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2670:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2671:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2672:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
2673:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2674:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2675:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2676:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2677:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             --( pxQueue->uxMessagesWaiting );
2678:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsign
2679:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2680:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( ( *pxCoRoutineWoken ) == pdFALSE )
2681:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2682:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2683:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
2684:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2685:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
2686:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         *pxCoRoutineWoken = pdTRUE;
2687:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
2688:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     else
2689:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     {
2690:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2691:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     }
2692:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
2693:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 else
2694:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 {
2695:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2696:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 }
2697:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2698:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
2699:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2700:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2701:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2702:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2703:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             xReturn = pdPASS;
2704:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2705:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
2706:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 93


2707:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             xReturn = pdFAIL;
2708:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2709:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2710:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         return xReturn;
2711:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2712:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2713:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2714:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2715:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2716:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2717:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2718:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     void vQueueAddToRegistry( QueueHandle_t xQueue,
2719:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                               const char * pcQueueName ) /*lint !e971 Unqualified char types are al
2720:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 1997              		.loc 1 2720 0
 1998              		.cfi_startproc
 1999              		@ args = 0, pretend = 0, frame = 0
 2000              		@ frame_needed = 0, uses_anonymous_args = 0
 2001              		@ link register save eliminated.
 2002              	.LVL258:
2721:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         UBaseType_t ux;
2722:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2723:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* See if there is an empty space in the registry.  A NULL name denotes
2724:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * a free slot. */
2725:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2003              		.loc 1 2725 0
 2004 0000 0023     		movs	r3, #0
 2005 0002 0BE0     		b	.L145
 2006              	.LVL259:
 2007              	.L148:
2726:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2727:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( xQueueRegistry[ ux ].pcQueueName == NULL )
 2008              		.loc 1 2727 0
 2009 0004 074A     		ldr	r2, .L149
 2010 0006 52F83320 		ldr	r2, [r2, r3, lsl #3]
 2011 000a 32B9     		cbnz	r2, .L146
2728:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2729:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* Store the information on this queue. */
2730:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 2012              		.loc 1 2730 0
 2013 000c 054A     		ldr	r2, .L149
 2014 000e 42F83310 		str	r1, [r2, r3, lsl #3]
2731:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 xQueueRegistry[ ux ].xHandle = xQueue;
 2015              		.loc 1 2731 0
 2016 0012 02EBC303 		add	r3, r2, r3, lsl #3
 2017              	.LVL260:
 2018 0016 5860     		str	r0, [r3, #4]
2732:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2733:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2734:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 break;
 2019              		.loc 1 2734 0
 2020 0018 7047     		bx	lr
 2021              	.LVL261:
 2022              	.L146:
2725:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 2023              		.loc 1 2725 0 discriminator 2
 2024 001a 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 94


 2025              	.LVL262:
 2026              	.L145:
2725:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 2027              		.loc 1 2725 0 is_stmt 0 discriminator 1
 2028 001c 092B     		cmp	r3, #9
 2029 001e F1D9     		bls	.L148
 2030 0020 7047     		bx	lr
 2031              	.L150:
 2032 0022 00BF     		.align	2
 2033              	.L149:
 2034 0024 00000000 		.word	xQueueRegistry
 2035              		.cfi_endproc
 2036              	.LFE26:
 2037              		.size	vQueueAddToRegistry, .-vQueueAddToRegistry
 2038              		.section	.text.pcQueueGetName,"ax",%progbits
 2039              		.align	2
 2040              		.global	pcQueueGetName
 2041              		.thumb
 2042              		.thumb_func
 2043              		.type	pcQueueGetName, %function
 2044              	pcQueueGetName:
 2045              	.LFB27:
2735:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2736:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
2737:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2738:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2739:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2740:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2741:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     }
2742:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2743:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2744:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2745:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2746:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2747:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2748:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     const char * pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are all
2749:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 2046              		.loc 1 2749 0 is_stmt 1
 2047              		.cfi_startproc
 2048              		@ args = 0, pretend = 0, frame = 0
 2049              		@ frame_needed = 0, uses_anonymous_args = 0
 2050              		@ link register save eliminated.
 2051              	.LVL263:
2750:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         UBaseType_t ux;
2751:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings a
2752:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2753:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* Note there is nothing here to protect against another task adding or
2754:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * removing entries from the registry while it is being searched. */
2755:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2756:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2052              		.loc 1 2756 0
 2053 0000 0023     		movs	r3, #0
 2054 0002 0AE0     		b	.L152
 2055              	.LVL264:
 2056              	.L155:
2757:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2758:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 95


 2057              		.loc 1 2758 0
 2058 0004 074A     		ldr	r2, .L156
 2059 0006 02EBC302 		add	r2, r2, r3, lsl #3
 2060 000a 5268     		ldr	r2, [r2, #4]
 2061 000c 8242     		cmp	r2, r0
 2062 000e 03D1     		bne	.L153
2759:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2760:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 pcReturn = xQueueRegistry[ ux ].pcQueueName;
 2063              		.loc 1 2760 0
 2064 0010 044A     		ldr	r2, .L156
 2065 0012 52F83300 		ldr	r0, [r2, r3, lsl #3]
 2066              	.LVL265:
2761:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 break;
 2067              		.loc 1 2761 0
 2068 0016 7047     		bx	lr
 2069              	.LVL266:
 2070              	.L153:
2756:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 2071              		.loc 1 2756 0 discriminator 2
 2072 0018 0133     		adds	r3, r3, #1
 2073              	.LVL267:
 2074              	.L152:
2756:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 2075              		.loc 1 2756 0 is_stmt 0 discriminator 1
 2076 001a 092B     		cmp	r3, #9
 2077 001c F2D9     		bls	.L155
2751:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
 2078              		.loc 1 2751 0 is_stmt 1
 2079 001e 0020     		movs	r0, #0
 2080              	.LVL268:
2762:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2763:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
2764:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2765:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2766:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2767:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2768:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2769:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         return pcReturn;
2770:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     } /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 2081              		.loc 1 2770 0
 2082 0020 7047     		bx	lr
 2083              	.L157:
 2084 0022 00BF     		.align	2
 2085              	.L156:
 2086 0024 00000000 		.word	xQueueRegistry
 2087              		.cfi_endproc
 2088              	.LFE27:
 2089              		.size	pcQueueGetName, .-pcQueueGetName
 2090              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 2091              		.align	2
 2092              		.global	vQueueUnregisterQueue
 2093              		.thumb
 2094              		.thumb_func
 2095              		.type	vQueueUnregisterQueue, %function
 2096              	vQueueUnregisterQueue:
 2097              	.LFB28:
2771:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 96


2772:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2773:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2774:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2775:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2776:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2777:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     void vQueueUnregisterQueue( QueueHandle_t xQueue )
2778:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 2098              		.loc 1 2778 0
 2099              		.cfi_startproc
 2100              		@ args = 0, pretend = 0, frame = 0
 2101              		@ frame_needed = 0, uses_anonymous_args = 0
 2102              		@ link register save eliminated.
 2103              	.LVL269:
2779:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         UBaseType_t ux;
2780:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2781:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* See if the handle of the queue being unregistered in actually in the
2782:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * registry. */
2783:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2104              		.loc 1 2783 0
 2105 0000 0023     		movs	r3, #0
 2106 0002 0EE0     		b	.L159
 2107              	.LVL270:
 2108              	.L162:
2784:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2785:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
 2109              		.loc 1 2785 0
 2110 0004 084A     		ldr	r2, .L163
 2111 0006 02EBC302 		add	r2, r2, r3, lsl #3
 2112 000a 5268     		ldr	r2, [r2, #4]
 2113 000c 8242     		cmp	r2, r0
 2114 000e 07D1     		bne	.L160
2786:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2787:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* Set the name to NULL to show that this slot if free again. */
2788:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 xQueueRegistry[ ux ].pcQueueName = NULL;
 2115              		.loc 1 2788 0
 2116 0010 054A     		ldr	r2, .L163
 2117 0012 0021     		movs	r1, #0
 2118 0014 42F83310 		str	r1, [r2, r3, lsl #3]
2789:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2790:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 /* Set the handle to NULL to ensure the same queue handle cannot
2791:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * appear in the registry twice if it is added, removed, then
2792:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                  * added again. */
2793:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 2119              		.loc 1 2793 0
 2120 0018 02EBC303 		add	r3, r2, r3, lsl #3
 2121              	.LVL271:
 2122 001c 5960     		str	r1, [r3, #4]
2794:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 break;
 2123              		.loc 1 2794 0
 2124 001e 7047     		bx	lr
 2125              	.LVL272:
 2126              	.L160:
2783:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 2127              		.loc 1 2783 0 discriminator 2
 2128 0020 0133     		adds	r3, r3, #1
 2129              	.LVL273:
 2130              	.L159:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 97


2783:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
 2131              		.loc 1 2783 0 is_stmt 0 discriminator 1
 2132 0022 092B     		cmp	r3, #9
 2133 0024 EED9     		bls	.L162
 2134 0026 7047     		bx	lr
 2135              	.L164:
 2136              		.align	2
 2137              	.L163:
 2138 0028 00000000 		.word	xQueueRegistry
 2139              		.cfi_endproc
 2140              	.LFE28:
 2141              		.size	vQueueUnregisterQueue, .-vQueueUnregisterQueue
 2142              		.section	.text.vQueueDelete,"ax",%progbits
 2143              		.align	2
 2144              		.global	vQueueDelete
 2145              		.thumb
 2146              		.thumb_func
 2147              		.type	vQueueDelete, %function
 2148              	vQueueDelete:
 2149              	.LFB18:
2024:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
 2150              		.loc 1 2024 0 is_stmt 1
 2151              		.cfi_startproc
 2152              		@ args = 0, pretend = 0, frame = 0
 2153              		@ frame_needed = 0, uses_anonymous_args = 0
 2154              	.LVL274:
 2155 0000 10B5     		push	{r4, lr}
 2156              		.cfi_def_cfa_offset 8
 2157              		.cfi_offset 4, -8
 2158              		.cfi_offset 14, -4
 2159 0002 0446     		mov	r4, r0
 2160              	.LVL275:
2032:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 2161              		.loc 1 2032 0
 2162 0004 FFF7FEFF 		bl	vQueueUnregisterQueue
 2163              	.LVL276:
2040:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
 2164              		.loc 1 2040 0
 2165 0008 2046     		mov	r0, r4
 2166 000a FFF7FEFF 		bl	vPortFree
 2167              	.LVL277:
 2168 000e 10BD     		pop	{r4, pc}
 2169              		.cfi_endproc
 2170              	.LFE18:
 2171              		.size	vQueueDelete, .-vQueueDelete
 2172              		.section	.text.vQueueWaitForMessageRestricted,"ax",%progbits
 2173              		.align	2
 2174              		.global	vQueueWaitForMessageRestricted
 2175              		.thumb
 2176              		.thumb_func
 2177              		.type	vQueueWaitForMessageRestricted, %function
 2178              	vQueueWaitForMessageRestricted:
 2179              	.LFB29:
2795:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2796:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             else
2797:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             {
2798:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 98


2799:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             }
2800:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2801:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2802:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2803:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2804:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2805:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2806:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** #if ( configUSE_TIMERS == 1 )
2807:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2808:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
2809:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                          TickType_t xTicksToWait,
2810:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****                                          const BaseType_t xWaitIndefinitely )
2811:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****     {
 2180              		.loc 1 2811 0
 2181              		.cfi_startproc
 2182              		@ args = 0, pretend = 0, frame = 0
 2183              		@ frame_needed = 0, uses_anonymous_args = 0
 2184              	.LVL278:
 2185 0000 70B5     		push	{r4, r5, r6, lr}
 2186              		.cfi_def_cfa_offset 16
 2187              		.cfi_offset 4, -16
 2188              		.cfi_offset 5, -12
 2189              		.cfi_offset 6, -8
 2190              		.cfi_offset 14, -4
 2191 0002 0446     		mov	r4, r0
 2192 0004 0D46     		mov	r5, r1
 2193 0006 1646     		mov	r6, r2
 2194              	.LVL279:
2812:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         Queue_t * const pxQueue = xQueue;
2813:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2814:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* This function should not be called by application code hence the
2815:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
2816:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * designed for use by kernel code, and has special calling requirements.
2817:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * It can result in vListInsert() being called on a list that can only
2818:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * possibly ever have one item in it, so the list will be fast, but even
2819:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * so it should be called with the scheduler locked and not from a critical
2820:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          * section. */
2821:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2822:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         /* Only do anything if there are no messages in the queue.  This function
2823:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          *  will not actually cause the task to block, just place it on a blocked
2824:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          *  list.  It will not block until the scheduler is unlocked - at which
2825:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          *  time a yield will be performed.  If an item is added to the queue while
2826:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          *  the queue is locked, and the calling task blocks on the queue, then the
2827:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****          *  calling task will be immediately unblocked when the queue is unlocked. */
2828:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         prvLockQueue( pxQueue );
 2195              		.loc 1 2828 0
 2196 0008 FFF7FEFF 		bl	vPortEnterCritical
 2197              	.LVL280:
 2198 000c 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2199 0010 5BB2     		sxtb	r3, r3
 2200 0012 B3F1FF3F 		cmp	r3, #-1
 2201 0016 02D1     		bne	.L168
 2202              		.loc 1 2828 0 is_stmt 0 discriminator 1
 2203 0018 0023     		movs	r3, #0
 2204 001a 84F84430 		strb	r3, [r4, #68]
 2205              	.L168:
 2206              		.loc 1 2828 0 discriminator 3
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 99


 2207 001e 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2208 0022 5BB2     		sxtb	r3, r3
 2209 0024 B3F1FF3F 		cmp	r3, #-1
 2210 0028 02D1     		bne	.L169
 2211              		.loc 1 2828 0 discriminator 4
 2212 002a 0023     		movs	r3, #0
 2213 002c 84F84530 		strb	r3, [r4, #69]
 2214              	.L169:
 2215              		.loc 1 2828 0 discriminator 6
 2216 0030 FFF7FEFF 		bl	vPortExitCritical
 2217              	.LVL281:
2829:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2830:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 2218              		.loc 1 2830 0 is_stmt 1 discriminator 6
 2219 0034 A36B     		ldr	r3, [r4, #56]
 2220 0036 2BB9     		cbnz	r3, .L170
2831:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2832:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             /* There is nothing in the queue, block for the specified period. */
2833:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xW
 2221              		.loc 1 2833 0
 2222 0038 3246     		mov	r2, r6
 2223 003a 2946     		mov	r1, r5
 2224 003c 04F12400 		add	r0, r4, #36
 2225 0040 FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted
 2226              	.LVL282:
 2227              	.L170:
2834:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2835:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         else
2836:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         {
2837:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****             mtCOVERAGE_TEST_MARKER();
2838:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         }
2839:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c **** 
2840:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/queue.c ****         prvUnlockQueue( pxQueue );
 2228              		.loc 1 2840 0
 2229 0044 2046     		mov	r0, r4
 2230 0046 FFF7FEFF 		bl	prvUnlockQueue
 2231              	.LVL283:
 2232 004a 70BD     		pop	{r4, r5, r6, pc}
 2233              		.cfi_endproc
 2234              	.LFE29:
 2235              		.size	vQueueWaitForMessageRestricted, .-vQueueWaitForMessageRestricted
 2236              		.comm	xQueueRegistry,80,4
 2237              		.text
 2238              	.Letext0:
 2239              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2240              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2241              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2242              		.file 6 "C:\\FreeRTOS\\FreeRTOS\\FreeRTOS\\Source\\include/list.h"
 2243              		.file 7 "C:\\FreeRTOS\\FreeRTOS\\FreeRTOS\\Source\\include/task.h"
 2244              		.file 8 "C:\\FreeRTOS\\FreeRTOS\\FreeRTOS\\Source\\include/queue.h"
 2245              		.file 9 "C:\\FreeRTOS\\FreeRTOS\\FreeRTOS\\Source\\include/portable.h"
 2246              		.section	.debug_info,"",%progbits
 2247              	.Ldebug_info0:
 2248 0000 DE160000 		.4byte	0x16de
 2249 0004 0400     		.2byte	0x4
 2250 0006 00000000 		.4byte	.Ldebug_abbrev0
 2251 000a 04       		.byte	0x4
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 100


 2252 000b 01       		.uleb128 0x1
 2253 000c C2020000 		.4byte	.LASF134
 2254 0010 0C       		.byte	0xc
 2255 0011 55080000 		.4byte	.LASF135
 2256 0015 B1030000 		.4byte	.LASF136
 2257 0019 48000000 		.4byte	.Ldebug_ranges0+0x48
 2258 001d 00000000 		.4byte	0
 2259 0021 00000000 		.4byte	.Ldebug_line0
 2260 0025 02       		.uleb128 0x2
 2261 0026 5E030000 		.4byte	.LASF3
 2262 002a 03       		.byte	0x3
 2263 002b D8       		.byte	0xd8
 2264 002c 30000000 		.4byte	0x30
 2265 0030 03       		.uleb128 0x3
 2266 0031 04       		.byte	0x4
 2267 0032 07       		.byte	0x7
 2268 0033 BC000000 		.4byte	.LASF0
 2269 0037 04       		.uleb128 0x4
 2270 0038 04       		.byte	0x4
 2271 0039 05       		.byte	0x5
 2272 003a 696E7400 		.ascii	"int\000"
 2273 003e 03       		.uleb128 0x3
 2274 003f 08       		.byte	0x8
 2275 0040 05       		.byte	0x5
 2276 0041 97050000 		.4byte	.LASF1
 2277 0045 03       		.uleb128 0x3
 2278 0046 08       		.byte	0x8
 2279 0047 04       		.byte	0x4
 2280 0048 9F060000 		.4byte	.LASF2
 2281 004c 02       		.uleb128 0x2
 2282 004d 88060000 		.4byte	.LASF4
 2283 0051 04       		.byte	0x4
 2284 0052 1B       		.byte	0x1b
 2285 0053 57000000 		.4byte	0x57
 2286 0057 03       		.uleb128 0x3
 2287 0058 01       		.byte	0x1
 2288 0059 06       		.byte	0x6
 2289 005a E9080000 		.4byte	.LASF5
 2290 005e 02       		.uleb128 0x2
 2291 005f 9E070000 		.4byte	.LASF6
 2292 0063 04       		.byte	0x4
 2293 0064 1D       		.byte	0x1d
 2294 0065 69000000 		.4byte	0x69
 2295 0069 03       		.uleb128 0x3
 2296 006a 01       		.byte	0x1
 2297 006b 08       		.byte	0x8
 2298 006c 17080000 		.4byte	.LASF7
 2299 0070 03       		.uleb128 0x3
 2300 0071 02       		.byte	0x2
 2301 0072 05       		.byte	0x5
 2302 0073 FB060000 		.4byte	.LASF8
 2303 0077 03       		.uleb128 0x3
 2304 0078 02       		.byte	0x2
 2305 0079 07       		.byte	0x7
 2306 007a F5080000 		.4byte	.LASF9
 2307 007e 03       		.uleb128 0x3
 2308 007f 04       		.byte	0x4
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 101


 2309 0080 05       		.byte	0x5
 2310 0081 10070000 		.4byte	.LASF10
 2311 0085 02       		.uleb128 0x2
 2312 0086 25080000 		.4byte	.LASF11
 2313 008a 04       		.byte	0x4
 2314 008b 41       		.byte	0x41
 2315 008c 90000000 		.4byte	0x90
 2316 0090 03       		.uleb128 0x3
 2317 0091 04       		.byte	0x4
 2318 0092 07       		.byte	0x7
 2319 0093 D2070000 		.4byte	.LASF12
 2320 0097 03       		.uleb128 0x3
 2321 0098 08       		.byte	0x8
 2322 0099 07       		.byte	0x7
 2323 009a 42020000 		.4byte	.LASF13
 2324 009e 03       		.uleb128 0x3
 2325 009f 04       		.byte	0x4
 2326 00a0 07       		.byte	0x7
 2327 00a1 B8070000 		.4byte	.LASF14
 2328 00a5 05       		.uleb128 0x5
 2329 00a6 04       		.byte	0x4
 2330 00a7 03       		.uleb128 0x3
 2331 00a8 01       		.byte	0x1
 2332 00a9 08       		.byte	0x8
 2333 00aa 8A040000 		.4byte	.LASF15
 2334 00ae 06       		.uleb128 0x6
 2335 00af 04       		.byte	0x4
 2336 00b0 B4000000 		.4byte	0xb4
 2337 00b4 07       		.uleb128 0x7
 2338 00b5 A7000000 		.4byte	0xa7
 2339 00b9 06       		.uleb128 0x6
 2340 00ba 04       		.byte	0x4
 2341 00bb BF000000 		.4byte	0xbf
 2342 00bf 08       		.uleb128 0x8
 2343 00c0 02       		.uleb128 0x2
 2344 00c1 03020000 		.4byte	.LASF16
 2345 00c5 05       		.byte	0x5
 2346 00c6 14       		.byte	0x14
 2347 00c7 4C000000 		.4byte	0x4c
 2348 00cb 02       		.uleb128 0x2
 2349 00cc 55050000 		.4byte	.LASF17
 2350 00d0 05       		.byte	0x5
 2351 00d1 18       		.byte	0x18
 2352 00d2 5E000000 		.4byte	0x5e
 2353 00d6 02       		.uleb128 0x2
 2354 00d7 FA010000 		.4byte	.LASF18
 2355 00db 05       		.byte	0x5
 2356 00dc 30       		.byte	0x30
 2357 00dd 85000000 		.4byte	0x85
 2358 00e1 02       		.uleb128 0x2
 2359 00e2 A5050000 		.4byte	.LASF19
 2360 00e6 02       		.byte	0x2
 2361 00e7 38       		.byte	0x38
 2362 00e8 7E000000 		.4byte	0x7e
 2363 00ec 02       		.uleb128 0x2
 2364 00ed C4040000 		.4byte	.LASF20
 2365 00f1 02       		.byte	0x2
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 102


 2366 00f2 39       		.byte	0x39
 2367 00f3 90000000 		.4byte	0x90
 2368 00f7 02       		.uleb128 0x2
 2369 00f8 7D060000 		.4byte	.LASF21
 2370 00fc 02       		.byte	0x2
 2371 00fd 3F       		.byte	0x3f
 2372 00fe D6000000 		.4byte	0xd6
 2373 0102 06       		.uleb128 0x6
 2374 0103 04       		.byte	0x4
 2375 0104 CB000000 		.4byte	0xcb
 2376 0108 09       		.uleb128 0x9
 2377 0109 E6000000 		.4byte	.LASF27
 2378 010d 14       		.byte	0x14
 2379 010e 06       		.byte	0x6
 2380 010f 8E       		.byte	0x8e
 2381 0110 51010000 		.4byte	0x151
 2382 0114 0A       		.uleb128 0xa
 2383 0115 05070000 		.4byte	.LASF22
 2384 0119 06       		.byte	0x6
 2385 011a 91       		.byte	0x91
 2386 011b F7000000 		.4byte	0xf7
 2387 011f 00       		.byte	0
 2388 0120 0A       		.uleb128 0xa
 2389 0121 E4050000 		.4byte	.LASF23
 2390 0125 06       		.byte	0x6
 2391 0126 92       		.byte	0x92
 2392 0127 51010000 		.4byte	0x151
 2393 012b 04       		.byte	0x4
 2394 012c 0A       		.uleb128 0xa
 2395 012d 72020000 		.4byte	.LASF24
 2396 0131 06       		.byte	0x6
 2397 0132 93       		.byte	0x93
 2398 0133 51010000 		.4byte	0x151
 2399 0137 08       		.byte	0x8
 2400 0138 0A       		.uleb128 0xa
 2401 0139 9E080000 		.4byte	.LASF25
 2402 013d 06       		.byte	0x6
 2403 013e 94       		.byte	0x94
 2404 013f A5000000 		.4byte	0xa5
 2405 0143 0C       		.byte	0xc
 2406 0144 0A       		.uleb128 0xa
 2407 0145 0B080000 		.4byte	.LASF26
 2408 0149 06       		.byte	0x6
 2409 014a 95       		.byte	0x95
 2410 014b 88010000 		.4byte	0x188
 2411 014f 10       		.byte	0x10
 2412 0150 00       		.byte	0
 2413 0151 06       		.uleb128 0x6
 2414 0152 04       		.byte	0x4
 2415 0153 08010000 		.4byte	0x108
 2416 0157 09       		.uleb128 0x9
 2417 0158 92030000 		.4byte	.LASF28
 2418 015c 14       		.byte	0x14
 2419 015d 06       		.byte	0x6
 2420 015e A6       		.byte	0xa6
 2421 015f 88010000 		.4byte	0x188
 2422 0163 0A       		.uleb128 0xa
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 103


 2423 0164 00000000 		.4byte	.LASF29
 2424 0168 06       		.byte	0x6
 2425 0169 A9       		.byte	0xa9
 2426 016a D5010000 		.4byte	0x1d5
 2427 016e 00       		.byte	0
 2428 016f 0A       		.uleb128 0xa
 2429 0170 C9000000 		.4byte	.LASF30
 2430 0174 06       		.byte	0x6
 2431 0175 AA       		.byte	0xaa
 2432 0176 DA010000 		.4byte	0x1da
 2433 017a 04       		.byte	0x4
 2434 017b 0A       		.uleb128 0xa
 2435 017c FF040000 		.4byte	.LASF31
 2436 0180 06       		.byte	0x6
 2437 0181 AB       		.byte	0xab
 2438 0182 CA010000 		.4byte	0x1ca
 2439 0186 08       		.byte	0x8
 2440 0187 00       		.byte	0
 2441 0188 06       		.uleb128 0x6
 2442 0189 04       		.byte	0x4
 2443 018a 57010000 		.4byte	0x157
 2444 018e 02       		.uleb128 0x2
 2445 018f 8F040000 		.4byte	.LASF32
 2446 0193 06       		.byte	0x6
 2447 0194 98       		.byte	0x98
 2448 0195 08010000 		.4byte	0x108
 2449 0199 09       		.uleb128 0x9
 2450 019a 82030000 		.4byte	.LASF33
 2451 019e 0C       		.byte	0xc
 2452 019f 06       		.byte	0x6
 2453 01a0 9A       		.byte	0x9a
 2454 01a1 CA010000 		.4byte	0x1ca
 2455 01a5 0A       		.uleb128 0xa
 2456 01a6 05070000 		.4byte	.LASF22
 2457 01aa 06       		.byte	0x6
 2458 01ab 9D       		.byte	0x9d
 2459 01ac F7000000 		.4byte	0xf7
 2460 01b0 00       		.byte	0
 2461 01b1 0A       		.uleb128 0xa
 2462 01b2 E4050000 		.4byte	.LASF23
 2463 01b6 06       		.byte	0x6
 2464 01b7 9E       		.byte	0x9e
 2465 01b8 51010000 		.4byte	0x151
 2466 01bc 04       		.byte	0x4
 2467 01bd 0A       		.uleb128 0xa
 2468 01be 72020000 		.4byte	.LASF24
 2469 01c2 06       		.byte	0x6
 2470 01c3 9F       		.byte	0x9f
 2471 01c4 51010000 		.4byte	0x151
 2472 01c8 08       		.byte	0x8
 2473 01c9 00       		.byte	0
 2474 01ca 02       		.uleb128 0x2
 2475 01cb 26050000 		.4byte	.LASF34
 2476 01cf 06       		.byte	0x6
 2477 01d0 A1       		.byte	0xa1
 2478 01d1 99010000 		.4byte	0x199
 2479 01d5 0B       		.uleb128 0xb
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 104


 2480 01d6 EC000000 		.4byte	0xec
 2481 01da 06       		.uleb128 0x6
 2482 01db 04       		.byte	0x4
 2483 01dc 8E010000 		.4byte	0x18e
 2484 01e0 02       		.uleb128 0x2
 2485 01e1 5B060000 		.4byte	.LASF35
 2486 01e5 06       		.byte	0x6
 2487 01e6 AD       		.byte	0xad
 2488 01e7 57010000 		.4byte	0x157
 2489 01eb 02       		.uleb128 0x2
 2490 01ec 33060000 		.4byte	.LASF36
 2491 01f0 07       		.byte	0x7
 2492 01f1 4E       		.byte	0x4e
 2493 01f2 F6010000 		.4byte	0x1f6
 2494 01f6 06       		.uleb128 0x6
 2495 01f7 04       		.byte	0x4
 2496 01f8 FC010000 		.4byte	0x1fc
 2497 01fc 0C       		.uleb128 0xc
 2498 01fd 30000000 		.4byte	.LASF137
 2499 0201 09       		.uleb128 0x9
 2500 0202 D1000000 		.4byte	.LASF37
 2501 0206 08       		.byte	0x8
 2502 0207 07       		.byte	0x7
 2503 0208 6E       		.byte	0x6e
 2504 0209 26020000 		.4byte	0x226
 2505 020d 0A       		.uleb128 0xa
 2506 020e 4A010000 		.4byte	.LASF38
 2507 0212 07       		.byte	0x7
 2508 0213 70       		.byte	0x70
 2509 0214 E1000000 		.4byte	0xe1
 2510 0218 00       		.byte	0
 2511 0219 0A       		.uleb128 0xa
 2512 021a C0050000 		.4byte	.LASF39
 2513 021e 07       		.byte	0x7
 2514 021f 71       		.byte	0x71
 2515 0220 F7000000 		.4byte	0xf7
 2516 0224 04       		.byte	0x4
 2517 0225 00       		.byte	0
 2518 0226 02       		.uleb128 0x2
 2519 0227 F5050000 		.4byte	.LASF40
 2520 022b 07       		.byte	0x7
 2521 022c 72       		.byte	0x72
 2522 022d 01020000 		.4byte	0x201
 2523 0231 02       		.uleb128 0x2
 2524 0232 F1040000 		.4byte	.LASF41
 2525 0236 08       		.byte	0x8
 2526 0237 31       		.byte	0x31
 2527 0238 3C020000 		.4byte	0x23c
 2528 023c 06       		.uleb128 0x6
 2529 023d 04       		.byte	0x4
 2530 023e 42020000 		.4byte	0x242
 2531 0242 09       		.uleb128 0x9
 2532 0243 32020000 		.4byte	.LASF42
 2533 0247 48       		.byte	0x48
 2534 0248 01       		.byte	0x1
 2535 0249 62       		.byte	0x62
 2536 024a C5020000 		.4byte	0x2c5
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 105


 2537 024e 0A       		.uleb128 0xa
 2538 024f A6080000 		.4byte	.LASF43
 2539 0253 01       		.byte	0x1
 2540 0254 64       		.byte	0x64
 2541 0255 EA020000 		.4byte	0x2ea
 2542 0259 00       		.byte	0
 2543 025a 0A       		.uleb128 0xa
 2544 025b 73060000 		.4byte	.LASF44
 2545 025f 01       		.byte	0x1
 2546 0260 65       		.byte	0x65
 2547 0261 EA020000 		.4byte	0x2ea
 2548 0265 04       		.byte	0x4
 2549 0266 0D       		.uleb128 0xd
 2550 0267 7500     		.ascii	"u\000"
 2551 0269 01       		.byte	0x1
 2552 026a 6B       		.byte	0x6b
 2553 026b 2B030000 		.4byte	0x32b
 2554 026f 08       		.byte	0x8
 2555 0270 0A       		.uleb128 0xa
 2556 0271 17010000 		.4byte	.LASF45
 2557 0275 01       		.byte	0x1
 2558 0276 6D       		.byte	0x6d
 2559 0277 E0010000 		.4byte	0x1e0
 2560 027b 10       		.byte	0x10
 2561 027c 0A       		.uleb128 0xa
 2562 027d 77000000 		.4byte	.LASF46
 2563 0281 01       		.byte	0x1
 2564 0282 6E       		.byte	0x6e
 2565 0283 E0010000 		.4byte	0x1e0
 2566 0287 24       		.byte	0x24
 2567 0288 0A       		.uleb128 0xa
 2568 0289 7D020000 		.4byte	.LASF47
 2569 028d 01       		.byte	0x1
 2570 028e 70       		.byte	0x70
 2571 028f D5010000 		.4byte	0x1d5
 2572 0293 38       		.byte	0x38
 2573 0294 0A       		.uleb128 0xa
 2574 0295 D3060000 		.4byte	.LASF48
 2575 0299 01       		.byte	0x1
 2576 029a 71       		.byte	0x71
 2577 029b EC000000 		.4byte	0xec
 2578 029f 3C       		.byte	0x3c
 2579 02a0 0A       		.uleb128 0xa
 2580 02a1 4C040000 		.4byte	.LASF49
 2581 02a5 01       		.byte	0x1
 2582 02a6 72       		.byte	0x72
 2583 02a7 EC000000 		.4byte	0xec
 2584 02ab 40       		.byte	0x40
 2585 02ac 0A       		.uleb128 0xa
 2586 02ad 2D090000 		.4byte	.LASF50
 2587 02b1 01       		.byte	0x1
 2588 02b2 74       		.byte	0x74
 2589 02b3 4A030000 		.4byte	0x34a
 2590 02b7 44       		.byte	0x44
 2591 02b8 0A       		.uleb128 0xa
 2592 02b9 42010000 		.4byte	.LASF51
 2593 02bd 01       		.byte	0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 106


 2594 02be 75       		.byte	0x75
 2595 02bf 4A030000 		.4byte	0x34a
 2596 02c3 45       		.byte	0x45
 2597 02c4 00       		.byte	0
 2598 02c5 09       		.uleb128 0x9
 2599 02c6 A9040000 		.4byte	.LASF52
 2600 02ca 08       		.byte	0x8
 2601 02cb 01       		.byte	0x1
 2602 02cc 43       		.byte	0x43
 2603 02cd EA020000 		.4byte	0x2ea
 2604 02d1 0A       		.uleb128 0xa
 2605 02d2 97070000 		.4byte	.LASF53
 2606 02d6 01       		.byte	0x1
 2607 02d7 45       		.byte	0x45
 2608 02d8 EA020000 		.4byte	0x2ea
 2609 02dc 00       		.byte	0
 2610 02dd 0A       		.uleb128 0xa
 2611 02de AC010000 		.4byte	.LASF54
 2612 02e2 01       		.byte	0x1
 2613 02e3 46       		.byte	0x46
 2614 02e4 EA020000 		.4byte	0x2ea
 2615 02e8 04       		.byte	0x4
 2616 02e9 00       		.byte	0
 2617 02ea 06       		.uleb128 0x6
 2618 02eb 04       		.byte	0x4
 2619 02ec C0000000 		.4byte	0xc0
 2620 02f0 02       		.uleb128 0x2
 2621 02f1 BA060000 		.4byte	.LASF55
 2622 02f5 01       		.byte	0x1
 2623 02f6 47       		.byte	0x47
 2624 02f7 C5020000 		.4byte	0x2c5
 2625 02fb 09       		.uleb128 0x9
 2626 02fc 22000000 		.4byte	.LASF56
 2627 0300 08       		.byte	0x8
 2628 0301 01       		.byte	0x1
 2629 0302 49       		.byte	0x49
 2630 0303 20030000 		.4byte	0x320
 2631 0307 0A       		.uleb128 0xa
 2632 0308 16090000 		.4byte	.LASF57
 2633 030c 01       		.byte	0x1
 2634 030d 4B       		.byte	0x4b
 2635 030e EB010000 		.4byte	0x1eb
 2636 0312 00       		.byte	0
 2637 0313 0A       		.uleb128 0xa
 2638 0314 E4070000 		.4byte	.LASF58
 2639 0318 01       		.byte	0x1
 2640 0319 4C       		.byte	0x4c
 2641 031a EC000000 		.4byte	0xec
 2642 031e 04       		.byte	0x4
 2643 031f 00       		.byte	0
 2644 0320 02       		.uleb128 0x2
 2645 0321 44000000 		.4byte	.LASF59
 2646 0325 01       		.byte	0x1
 2647 0326 4D       		.byte	0x4d
 2648 0327 FB020000 		.4byte	0x2fb
 2649 032b 0E       		.uleb128 0xe
 2650 032c 08       		.byte	0x8
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 107


 2651 032d 01       		.byte	0x1
 2652 032e 67       		.byte	0x67
 2653 032f 4A030000 		.4byte	0x34a
 2654 0333 0F       		.uleb128 0xf
 2655 0334 2B020000 		.4byte	.LASF60
 2656 0338 01       		.byte	0x1
 2657 0339 69       		.byte	0x69
 2658 033a F0020000 		.4byte	0x2f0
 2659 033e 0F       		.uleb128 0xf
 2660 033f 8F020000 		.4byte	.LASF61
 2661 0343 01       		.byte	0x1
 2662 0344 6A       		.byte	0x6a
 2663 0345 20030000 		.4byte	0x320
 2664 0349 00       		.byte	0
 2665 034a 0B       		.uleb128 0xb
 2666 034b C0000000 		.4byte	0xc0
 2667 034f 02       		.uleb128 0x2
 2668 0350 0F090000 		.4byte	.LASF62
 2669 0354 01       		.byte	0x1
 2670 0355 83       		.byte	0x83
 2671 0356 42020000 		.4byte	0x242
 2672 035a 02       		.uleb128 0x2
 2673 035b 6C010000 		.4byte	.LASF63
 2674 035f 01       		.byte	0x1
 2675 0360 87       		.byte	0x87
 2676 0361 4F030000 		.4byte	0x34f
 2677 0365 09       		.uleb128 0x9
 2678 0366 F1000000 		.4byte	.LASF64
 2679 036a 08       		.byte	0x8
 2680 036b 01       		.byte	0x1
 2681 036c 94       		.byte	0x94
 2682 036d 8A030000 		.4byte	0x38a
 2683 0371 0A       		.uleb128 0xa
 2684 0372 76030000 		.4byte	.LASF65
 2685 0376 01       		.byte	0x1
 2686 0377 96       		.byte	0x96
 2687 0378 AE000000 		.4byte	0xae
 2688 037c 00       		.byte	0
 2689 037d 0A       		.uleb128 0xa
 2690 037e 6E030000 		.4byte	.LASF66
 2691 0382 01       		.byte	0x1
 2692 0383 97       		.byte	0x97
 2693 0384 31020000 		.4byte	0x231
 2694 0388 04       		.byte	0x4
 2695 0389 00       		.byte	0
 2696 038a 02       		.uleb128 0x2
 2697 038b 5D050000 		.4byte	.LASF67
 2698 038f 01       		.byte	0x1
 2699 0390 98       		.byte	0x98
 2700 0391 65030000 		.4byte	0x365
 2701 0395 02       		.uleb128 0x2
 2702 0396 8B010000 		.4byte	.LASF68
 2703 039a 01       		.byte	0x1
 2704 039b 9D       		.byte	0x9d
 2705 039c 8A030000 		.4byte	0x38a
 2706 03a0 10       		.uleb128 0x10
 2707 03a1 84050000 		.4byte	.LASF138
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 108


 2708 03a5 02       		.byte	0x2
 2709 03a6 D3       		.byte	0xd3
 2710 03a7 D6000000 		.4byte	0xd6
 2711 03ab 03       		.byte	0x3
 2712 03ac C7030000 		.4byte	0x3c7
 2713 03b0 11       		.uleb128 0x11
 2714 03b1 19020000 		.4byte	.LASF69
 2715 03b5 02       		.byte	0x2
 2716 03b6 D5       		.byte	0xd5
 2717 03b7 D6000000 		.4byte	0xd6
 2718 03bb 11       		.uleb128 0x11
 2719 03bc B7040000 		.4byte	.LASF70
 2720 03c0 02       		.byte	0x2
 2721 03c1 D5       		.byte	0xd5
 2722 03c2 D6000000 		.4byte	0xd6
 2723 03c6 00       		.byte	0
 2724 03c7 12       		.uleb128 0x12
 2725 03c8 01040000 		.4byte	.LASF139
 2726 03cc 02       		.byte	0x2
 2727 03cd E7       		.byte	0xe7
 2728 03ce 03       		.byte	0x3
 2729 03cf DF030000 		.4byte	0x3df
 2730 03d3 13       		.uleb128 0x13
 2731 03d4 40060000 		.4byte	.LASF140
 2732 03d8 02       		.byte	0x2
 2733 03d9 E7       		.byte	0xe7
 2734 03da D6000000 		.4byte	0xd6
 2735 03de 00       		.byte	0
 2736 03df 14       		.uleb128 0x14
 2737 03e0 9A040000 		.4byte	.LASF71
 2738 03e4 01       		.byte	0x1
 2739 03e5 5409     		.2byte	0x954
 2740 03e7 E1000000 		.4byte	0xe1
 2741 03eb 00000000 		.4byte	.LFB24
 2742 03ef 1E000000 		.4byte	.LFE24-.LFB24
 2743 03f3 01       		.uleb128 0x1
 2744 03f4 9C       		.byte	0x9c
 2745 03f5 2A040000 		.4byte	0x42a
 2746 03f9 15       		.uleb128 0x15
 2747 03fa A8070000 		.4byte	.LASF73
 2748 03fe 01       		.byte	0x1
 2749 03ff 5409     		.2byte	0x954
 2750 0401 2A040000 		.4byte	0x42a
 2751 0405 00000000 		.4byte	.LLST0
 2752 0409 16       		.uleb128 0x16
 2753 040a B0070000 		.4byte	.LASF74
 2754 040e 01       		.byte	0x1
 2755 040f 5609     		.2byte	0x956
 2756 0411 E1000000 		.4byte	0xe1
 2757 0415 01       		.uleb128 0x1
 2758 0416 54       		.byte	0x54
 2759 0417 17       		.uleb128 0x17
 2760 0418 08000000 		.4byte	.LVL1
 2761 041c 40160000 		.4byte	0x1640
 2762 0420 17       		.uleb128 0x17
 2763 0421 1A000000 		.4byte	.LVL5
 2764 0425 4B160000 		.4byte	0x164b
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 109


 2765 0429 00       		.byte	0
 2766 042a 06       		.uleb128 0x6
 2767 042b 04       		.byte	0x4
 2768 042c 30040000 		.4byte	0x430
 2769 0430 07       		.uleb128 0x7
 2770 0431 5A030000 		.4byte	0x35a
 2771 0435 14       		.uleb128 0x14
 2772 0436 59020000 		.4byte	.LASF72
 2773 043a 01       		.byte	0x1
 2774 043b 2B09     		.2byte	0x92b
 2775 043d E1000000 		.4byte	0xe1
 2776 0441 00000000 		.4byte	.LFB22
 2777 0445 1A000000 		.4byte	.LFE22-.LFB22
 2778 0449 01       		.uleb128 0x1
 2779 044a 9C       		.byte	0x9c
 2780 044b 80040000 		.4byte	0x480
 2781 044f 15       		.uleb128 0x15
 2782 0450 A8070000 		.4byte	.LASF73
 2783 0454 01       		.byte	0x1
 2784 0455 2B09     		.2byte	0x92b
 2785 0457 2A040000 		.4byte	0x42a
 2786 045b 45000000 		.4byte	.LLST1
 2787 045f 16       		.uleb128 0x16
 2788 0460 B0070000 		.4byte	.LASF74
 2789 0464 01       		.byte	0x1
 2790 0465 2D09     		.2byte	0x92d
 2791 0467 E1000000 		.4byte	0xe1
 2792 046b 01       		.uleb128 0x1
 2793 046c 54       		.byte	0x54
 2794 046d 17       		.uleb128 0x17
 2795 046e 08000000 		.4byte	.LVL7
 2796 0472 40160000 		.4byte	0x1640
 2797 0476 17       		.uleb128 0x17
 2798 0477 16000000 		.4byte	.LVL11
 2799 047b 4B160000 		.4byte	0x164b
 2800 047f 00       		.byte	0
 2801 0480 14       		.uleb128 0x14
 2802 0481 11040000 		.4byte	.LASF75
 2803 0485 01       		.byte	0x1
 2804 0486 4B08     		.2byte	0x84b
 2805 0488 E1000000 		.4byte	0xe1
 2806 048c 00000000 		.4byte	.LFB19
 2807 0490 54000000 		.4byte	.LFE19-.LFB19
 2808 0494 01       		.uleb128 0x1
 2809 0495 9C       		.byte	0x9c
 2810 0496 06050000 		.4byte	0x506
 2811 049a 15       		.uleb128 0x15
 2812 049b A8070000 		.4byte	.LASF73
 2813 049f 01       		.byte	0x1
 2814 04a0 4B08     		.2byte	0x84b
 2815 04a2 0C050000 		.4byte	0x50c
 2816 04a6 8A000000 		.4byte	.LLST2
 2817 04aa 15       		.uleb128 0x15
 2818 04ab 3A070000 		.4byte	.LASF76
 2819 04af 01       		.byte	0x1
 2820 04b0 4C08     		.2byte	0x84c
 2821 04b2 B9000000 		.4byte	0xb9
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 110


 2822 04b6 BE000000 		.4byte	.LLST3
 2823 04ba 15       		.uleb128 0x15
 2824 04bb 23090000 		.4byte	.LASF77
 2825 04bf 01       		.byte	0x1
 2826 04c0 4D08     		.2byte	0x84d
 2827 04c2 11050000 		.4byte	0x511
 2828 04c6 F8000000 		.4byte	.LLST4
 2829 04ca 18       		.uleb128 0x18
 2830 04cb B0070000 		.4byte	.LASF74
 2831 04cf 01       		.byte	0x1
 2832 04d0 4F08     		.2byte	0x84f
 2833 04d2 E1000000 		.4byte	0xe1
 2834 04d6 00       		.byte	0
 2835 04d7 19       		.uleb128 0x19
 2836 04d8 7D020000 		.4byte	.LASF47
 2837 04dc 01       		.byte	0x1
 2838 04dd 5008     		.2byte	0x850
 2839 04df EC000000 		.4byte	0xec
 2840 04e3 16010000 		.4byte	.LLST5
 2841 04e7 1A       		.uleb128 0x1a
 2842 04e8 14000000 		.4byte	.LVL17
 2843 04ec 56160000 		.4byte	0x1656
 2844 04f0 FC040000 		.4byte	0x4fc
 2845 04f4 1B       		.uleb128 0x1b
 2846 04f5 01       		.uleb128 0x1
 2847 04f6 51       		.byte	0x51
 2848 04f7 03       		.uleb128 0x3
 2849 04f8 F3       		.byte	0xf3
 2850 04f9 01       		.uleb128 0x1
 2851 04fa 51       		.byte	0x51
 2852 04fb 00       		.byte	0
 2853 04fc 17       		.uleb128 0x17
 2854 04fd 2E000000 		.4byte	.LVL20
 2855 0501 56160000 		.4byte	0x1656
 2856 0505 00       		.byte	0
 2857 0506 06       		.uleb128 0x6
 2858 0507 04       		.byte	0x4
 2859 0508 5A030000 		.4byte	0x35a
 2860 050c 07       		.uleb128 0x7
 2861 050d 06050000 		.4byte	0x506
 2862 0511 07       		.uleb128 0x7
 2863 0512 E1000000 		.4byte	0xe1
 2864 0516 1C       		.uleb128 0x1c
 2865 0517 40080000 		.4byte	.LASF79
 2866 051b 01       		.byte	0x1
 2867 051c 9E08     		.2byte	0x89e
 2868 051e 00000000 		.4byte	.LFB20
 2869 0522 24000000 		.4byte	.LFE20-.LFB20
 2870 0526 01       		.uleb128 0x1
 2871 0527 9C       		.byte	0x9c
 2872 0528 5D050000 		.4byte	0x55d
 2873 052c 15       		.uleb128 0x15
 2874 052d A8070000 		.4byte	.LASF73
 2875 0531 01       		.byte	0x1
 2876 0532 9E08     		.2byte	0x89e
 2877 0534 0C050000 		.4byte	0x50c
 2878 0538 36010000 		.4byte	.LLST6
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 111


 2879 053c 15       		.uleb128 0x15
 2880 053d 69020000 		.4byte	.LASF78
 2881 0541 01       		.byte	0x1
 2882 0542 9F08     		.2byte	0x89f
 2883 0544 5D050000 		.4byte	0x55d
 2884 0548 62010000 		.4byte	.LLST7
 2885 054c 1D       		.uleb128 0x1d
 2886 054d 20000000 		.4byte	.LVL26
 2887 0551 56160000 		.4byte	0x1656
 2888 0555 1B       		.uleb128 0x1b
 2889 0556 01       		.uleb128 0x1
 2890 0557 50       		.byte	0x50
 2891 0558 02       		.uleb128 0x2
 2892 0559 74       		.byte	0x74
 2893 055a 00       		.sleb128 0
 2894 055b 00       		.byte	0
 2895 055c 00       		.byte	0
 2896 055d 07       		.uleb128 0x7
 2897 055e A5000000 		.4byte	0xa5
 2898 0562 1C       		.uleb128 0x1c
 2899 0563 AD080000 		.4byte	.LASF80
 2900 0567 01       		.byte	0x1
 2901 0568 B308     		.2byte	0x8b3
 2902 056a 00000000 		.4byte	.LFB21
 2903 056e 66000000 		.4byte	.LFE21-.LFB21
 2904 0572 01       		.uleb128 0x1
 2905 0573 9C       		.byte	0x9c
 2906 0574 23060000 		.4byte	0x623
 2907 0578 15       		.uleb128 0x15
 2908 0579 A8070000 		.4byte	.LASF73
 2909 057d 01       		.byte	0x1
 2910 057e B308     		.2byte	0x8b3
 2911 0580 0C050000 		.4byte	0x50c
 2912 0584 8B010000 		.4byte	.LLST8
 2913 0588 1E       		.uleb128 0x1e
 2914 0589 08000000 		.4byte	.LBB23
 2915 058d 28000000 		.4byte	.LBE23-.LBB23
 2916 0591 C3050000 		.4byte	0x5c3
 2917 0595 19       		.uleb128 0x19
 2918 0596 42010000 		.4byte	.LASF51
 2919 059a 01       		.byte	0x1
 2920 059b BD08     		.2byte	0x8bd
 2921 059d C0000000 		.4byte	0xc0
 2922 05a1 A9010000 		.4byte	.LLST9
 2923 05a5 1A       		.uleb128 0x1a
 2924 05a6 1C000000 		.4byte	.LVL31
 2925 05aa 5F160000 		.4byte	0x165f
 2926 05ae B9050000 		.4byte	0x5b9
 2927 05b2 1B       		.uleb128 0x1b
 2928 05b3 01       		.uleb128 0x1
 2929 05b4 50       		.byte	0x50
 2930 05b5 02       		.uleb128 0x2
 2931 05b6 75       		.byte	0x75
 2932 05b7 24       		.sleb128 36
 2933 05b8 00       		.byte	0
 2934 05b9 17       		.uleb128 0x17
 2935 05ba 22000000 		.4byte	.LVL32
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 112


 2936 05be 6B160000 		.4byte	0x166b
 2937 05c2 00       		.byte	0
 2938 05c3 1E       		.uleb128 0x1e
 2939 05c4 38000000 		.4byte	.LBB24
 2940 05c8 28000000 		.4byte	.LBE24-.LBB24
 2941 05cc FE050000 		.4byte	0x5fe
 2942 05d0 19       		.uleb128 0x19
 2943 05d1 2D090000 		.4byte	.LASF50
 2944 05d5 01       		.byte	0x1
 2945 05d6 0E09     		.2byte	0x90e
 2946 05d8 C0000000 		.4byte	0xc0
 2947 05dc C7010000 		.4byte	.LLST10
 2948 05e0 1A       		.uleb128 0x1a
 2949 05e1 4C000000 		.4byte	.LVL39
 2950 05e5 5F160000 		.4byte	0x165f
 2951 05e9 F4050000 		.4byte	0x5f4
 2952 05ed 1B       		.uleb128 0x1b
 2953 05ee 01       		.uleb128 0x1
 2954 05ef 50       		.byte	0x50
 2955 05f0 02       		.uleb128 0x2
 2956 05f1 75       		.byte	0x75
 2957 05f2 10       		.sleb128 16
 2958 05f3 00       		.byte	0
 2959 05f4 17       		.uleb128 0x17
 2960 05f5 52000000 		.4byte	.LVL40
 2961 05f9 6B160000 		.4byte	0x166b
 2962 05fd 00       		.byte	0
 2963 05fe 17       		.uleb128 0x17
 2964 05ff 08000000 		.4byte	.LVL29
 2965 0603 40160000 		.4byte	0x1640
 2966 0607 17       		.uleb128 0x17
 2967 0608 34000000 		.4byte	.LVL35
 2968 060c 4B160000 		.4byte	0x164b
 2969 0610 17       		.uleb128 0x17
 2970 0611 38000000 		.4byte	.LVL36
 2971 0615 40160000 		.4byte	0x1640
 2972 0619 17       		.uleb128 0x17
 2973 061a 64000000 		.4byte	.LVL43
 2974 061e 4B160000 		.4byte	0x164b
 2975 0622 00       		.byte	0
 2976 0623 1F       		.uleb128 0x1f
 2977 0624 BC080000 		.4byte	.LASF87
 2978 0628 01       		.byte	0x1
 2979 0629 0801     		.2byte	0x108
 2980 062b E1000000 		.4byte	0xe1
 2981 062f 00000000 		.4byte	.LFB4
 2982 0633 6C000000 		.4byte	.LFE4-.LFB4
 2983 0637 01       		.uleb128 0x1
 2984 0638 9C       		.byte	0x9c
 2985 0639 BC060000 		.4byte	0x6bc
 2986 063d 15       		.uleb128 0x15
 2987 063e 2B020000 		.4byte	.LASF60
 2988 0642 01       		.byte	0x1
 2989 0643 0801     		.2byte	0x108
 2990 0645 31020000 		.4byte	0x231
 2991 0649 E5010000 		.4byte	.LLST11
 2992 064d 15       		.uleb128 0x15
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 113


 2993 064e EB050000 		.4byte	.LASF81
 2994 0652 01       		.byte	0x1
 2995 0653 0901     		.2byte	0x109
 2996 0655 E1000000 		.4byte	0xe1
 2997 0659 11020000 		.4byte	.LLST12
 2998 065d 19       		.uleb128 0x19
 2999 065e A8070000 		.4byte	.LASF73
 3000 0662 01       		.byte	0x1
 3001 0663 0B01     		.2byte	0x10b
 3002 0665 0C050000 		.4byte	0x50c
 3003 0669 3D020000 		.4byte	.LLST13
 3004 066d 17       		.uleb128 0x17
 3005 066e 0A000000 		.4byte	.LVL46
 3006 0672 40160000 		.4byte	0x1640
 3007 0676 1A       		.uleb128 0x1a
 3008 0677 3C000000 		.4byte	.LVL47
 3009 067b 5F160000 		.4byte	0x165f
 3010 067f 8A060000 		.4byte	0x68a
 3011 0683 1B       		.uleb128 0x1b
 3012 0684 01       		.uleb128 0x1
 3013 0685 50       		.byte	0x50
 3014 0686 02       		.uleb128 0x2
 3015 0687 74       		.byte	0x74
 3016 0688 10       		.sleb128 16
 3017 0689 00       		.byte	0
 3018 068a 1A       		.uleb128 0x1a
 3019 068b 58000000 		.4byte	.LVL48
 3020 068f 77160000 		.4byte	0x1677
 3021 0693 9E060000 		.4byte	0x69e
 3022 0697 1B       		.uleb128 0x1b
 3023 0698 01       		.uleb128 0x1
 3024 0699 50       		.byte	0x50
 3025 069a 02       		.uleb128 0x2
 3026 069b 74       		.byte	0x74
 3027 069c 10       		.sleb128 16
 3028 069d 00       		.byte	0
 3029 069e 1A       		.uleb128 0x1a
 3030 069f 60000000 		.4byte	.LVL49
 3031 06a3 77160000 		.4byte	0x1677
 3032 06a7 B2060000 		.4byte	0x6b2
 3033 06ab 1B       		.uleb128 0x1b
 3034 06ac 01       		.uleb128 0x1
 3035 06ad 50       		.byte	0x50
 3036 06ae 02       		.uleb128 0x2
 3037 06af 74       		.byte	0x74
 3038 06b0 24       		.sleb128 36
 3039 06b1 00       		.byte	0
 3040 06b2 17       		.uleb128 0x17
 3041 06b3 64000000 		.4byte	.LVL50
 3042 06b7 4B160000 		.4byte	0x164b
 3043 06bb 00       		.byte	0
 3044 06bc 1C       		.uleb128 0x1c
 3045 06bd E4010000 		.4byte	.LASF82
 3046 06c1 01       		.byte	0x1
 3047 06c2 B901     		.2byte	0x1b9
 3048 06c4 00000000 		.4byte	.LFB6
 3049 06c8 1C000000 		.4byte	.LFE6-.LFB6
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 114


 3050 06cc 01       		.uleb128 0x1
 3051 06cd 9C       		.byte	0x9c
 3052 06ce 38070000 		.4byte	0x738
 3053 06d2 15       		.uleb128 0x15
 3054 06d3 91060000 		.4byte	.LASF83
 3055 06d7 01       		.byte	0x1
 3056 06d8 B901     		.2byte	0x1b9
 3057 06da 38070000 		.4byte	0x738
 3058 06de 69020000 		.4byte	.LLST14
 3059 06e2 15       		.uleb128 0x15
 3060 06e3 4C040000 		.4byte	.LASF49
 3061 06e7 01       		.byte	0x1
 3062 06e8 BA01     		.2byte	0x1ba
 3063 06ea 38070000 		.4byte	0x738
 3064 06ee 96020000 		.4byte	.LLST15
 3065 06f2 15       		.uleb128 0x15
 3066 06f3 B0050000 		.4byte	.LASF84
 3067 06f7 01       		.byte	0x1
 3068 06f8 BB01     		.2byte	0x1bb
 3069 06fa 02010000 		.4byte	0x102
 3070 06fe B4020000 		.4byte	.LLST16
 3071 0702 15       		.uleb128 0x15
 3072 0703 4F060000 		.4byte	.LASF85
 3073 0707 01       		.byte	0x1
 3074 0708 BC01     		.2byte	0x1bc
 3075 070a 3D070000 		.4byte	0x73d
 3076 070e D5020000 		.4byte	.LLST17
 3077 0712 20       		.uleb128 0x20
 3078 0713 DB000000 		.4byte	.LASF86
 3079 0717 01       		.byte	0x1
 3080 0718 BD01     		.2byte	0x1bd
 3081 071a 06050000 		.4byte	0x506
 3082 071e 02       		.uleb128 0x2
 3083 071f 91       		.byte	0x91
 3084 0720 00       		.sleb128 0
 3085 0721 1D       		.uleb128 0x1d
 3086 0722 1A000000 		.4byte	.LVL56
 3087 0726 23060000 		.4byte	0x623
 3088 072a 1B       		.uleb128 0x1b
 3089 072b 01       		.uleb128 0x1
 3090 072c 50       		.byte	0x50
 3091 072d 03       		.uleb128 0x3
 3092 072e 91       		.byte	0x91
 3093 072f 00       		.sleb128 0
 3094 0730 06       		.byte	0x6
 3095 0731 1B       		.uleb128 0x1b
 3096 0732 01       		.uleb128 0x1
 3097 0733 51       		.byte	0x51
 3098 0734 01       		.uleb128 0x1
 3099 0735 31       		.byte	0x31
 3100 0736 00       		.byte	0
 3101 0737 00       		.byte	0
 3102 0738 07       		.uleb128 0x7
 3103 0739 EC000000 		.4byte	0xec
 3104 073d 07       		.uleb128 0x7
 3105 073e CB000000 		.4byte	0xcb
 3106 0742 1F       		.uleb128 0x1f
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 115


 3107 0743 70050000 		.4byte	.LASF88
 3108 0747 01       		.byte	0x1
 3109 0748 7E01     		.2byte	0x17e
 3110 074a 31020000 		.4byte	0x231
 3111 074e 00000000 		.4byte	.LFB5
 3112 0752 2E000000 		.4byte	.LFE5-.LFB5
 3113 0756 01       		.uleb128 0x1
 3114 0757 9C       		.byte	0x9c
 3115 0758 00080000 		.4byte	0x800
 3116 075c 15       		.uleb128 0x15
 3117 075d 91060000 		.4byte	.LASF83
 3118 0761 01       		.byte	0x1
 3119 0762 7E01     		.2byte	0x17e
 3120 0764 38070000 		.4byte	0x738
 3121 0768 F6020000 		.4byte	.LLST18
 3122 076c 15       		.uleb128 0x15
 3123 076d 4C040000 		.4byte	.LASF49
 3124 0771 01       		.byte	0x1
 3125 0772 7F01     		.2byte	0x17f
 3126 0774 38070000 		.4byte	0x738
 3127 0778 14030000 		.4byte	.LLST19
 3128 077c 15       		.uleb128 0x15
 3129 077d 4F060000 		.4byte	.LASF85
 3130 0781 01       		.byte	0x1
 3131 0782 8001     		.2byte	0x180
 3132 0784 3D070000 		.4byte	0x73d
 3133 0788 32030000 		.4byte	.LLST20
 3134 078c 19       		.uleb128 0x19
 3135 078d DB000000 		.4byte	.LASF86
 3136 0791 01       		.byte	0x1
 3137 0792 8201     		.2byte	0x182
 3138 0794 06050000 		.4byte	0x506
 3139 0798 53030000 		.4byte	.LLST21
 3140 079c 19       		.uleb128 0x19
 3141 079d 19070000 		.4byte	.LASF89
 3142 07a1 01       		.byte	0x1
 3143 07a2 8301     		.2byte	0x183
 3144 07a4 25000000 		.4byte	0x25
 3145 07a8 71030000 		.4byte	.LLST22
 3146 07ac 19       		.uleb128 0x19
 3147 07ad B0050000 		.4byte	.LASF84
 3148 07b1 01       		.byte	0x1
 3149 07b2 8401     		.2byte	0x184
 3150 07b4 02010000 		.4byte	0x102
 3151 07b8 A2030000 		.4byte	.LLST23
 3152 07bc 1A       		.uleb128 0x1a
 3153 07bd 14000000 		.4byte	.LVL60
 3154 07c1 83160000 		.4byte	0x1683
 3155 07c5 D5070000 		.4byte	0x7d5
 3156 07c9 1B       		.uleb128 0x1b
 3157 07ca 01       		.uleb128 0x1
 3158 07cb 50       		.byte	0x50
 3159 07cc 07       		.uleb128 0x7
 3160 07cd 76       		.byte	0x76
 3161 07ce 00       		.sleb128 0
 3162 07cf 75       		.byte	0x75
 3163 07d0 00       		.sleb128 0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 116


 3164 07d1 1E       		.byte	0x1e
 3165 07d2 23       		.byte	0x23
 3166 07d3 48       		.uleb128 0x48
 3167 07d4 00       		.byte	0
 3168 07d5 1D       		.uleb128 0x1d
 3169 07d6 28000000 		.4byte	.LVL64
 3170 07da BC060000 		.4byte	0x6bc
 3171 07de 1B       		.uleb128 0x1b
 3172 07df 01       		.uleb128 0x1
 3173 07e0 50       		.byte	0x50
 3174 07e1 02       		.uleb128 0x2
 3175 07e2 75       		.byte	0x75
 3176 07e3 00       		.sleb128 0
 3177 07e4 1B       		.uleb128 0x1b
 3178 07e5 01       		.uleb128 0x1
 3179 07e6 51       		.byte	0x51
 3180 07e7 02       		.uleb128 0x2
 3181 07e8 76       		.byte	0x76
 3182 07e9 00       		.sleb128 0
 3183 07ea 1B       		.uleb128 0x1b
 3184 07eb 01       		.uleb128 0x1
 3185 07ec 52       		.byte	0x52
 3186 07ed 03       		.uleb128 0x3
 3187 07ee 74       		.byte	0x74
 3188 07ef C800     		.sleb128 72
 3189 07f1 1B       		.uleb128 0x1b
 3190 07f2 01       		.uleb128 0x1
 3191 07f3 53       		.byte	0x53
 3192 07f4 02       		.uleb128 0x2
 3193 07f5 77       		.byte	0x77
 3194 07f6 00       		.sleb128 0
 3195 07f7 1B       		.uleb128 0x1b
 3196 07f8 02       		.uleb128 0x2
 3197 07f9 7D       		.byte	0x7d
 3198 07fa 00       		.sleb128 0
 3199 07fb 02       		.uleb128 0x2
 3200 07fc 74       		.byte	0x74
 3201 07fd 00       		.sleb128 0
 3202 07fe 00       		.byte	0
 3203 07ff 00       		.byte	0
 3204 0800 1F       		.uleb128 0x1f
 3205 0801 24040000 		.4byte	.LASF90
 3206 0805 01       		.byte	0x1
 3207 0806 0003     		.2byte	0x300
 3208 0808 E1000000 		.4byte	0xe1
 3209 080c 00000000 		.4byte	.LFB7
 3210 0810 08010000 		.4byte	.LFE7-.LFB7
 3211 0814 01       		.uleb128 0x1
 3212 0815 9C       		.byte	0x9c
 3213 0816 BA090000 		.4byte	0x9ba
 3214 081a 15       		.uleb128 0x15
 3215 081b 2B020000 		.4byte	.LASF60
 3216 081f 01       		.byte	0x1
 3217 0820 0003     		.2byte	0x300
 3218 0822 31020000 		.4byte	0x231
 3219 0826 D1030000 		.4byte	.LLST24
 3220 082a 15       		.uleb128 0x15
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 117


 3221 082b 3A070000 		.4byte	.LASF76
 3222 082f 01       		.byte	0x1
 3223 0830 0103     		.2byte	0x301
 3224 0832 BA090000 		.4byte	0x9ba
 3225 0836 FD030000 		.4byte	.LLST25
 3226 083a 15       		.uleb128 0x15
 3227 083b 91080000 		.4byte	.LASF91
 3228 083f 01       		.byte	0x1
 3229 0840 0203     		.2byte	0x302
 3230 0842 F7000000 		.4byte	0xf7
 3231 0846 29040000 		.4byte	.LLST26
 3232 084a 15       		.uleb128 0x15
 3233 084b 74010000 		.4byte	.LASF92
 3234 084f 01       		.byte	0x1
 3235 0850 0303     		.2byte	0x303
 3236 0852 11050000 		.4byte	0x511
 3237 0856 6C040000 		.4byte	.LLST27
 3238 085a 19       		.uleb128 0x19
 3239 085b 50030000 		.4byte	.LASF93
 3240 085f 01       		.byte	0x1
 3241 0860 0503     		.2byte	0x305
 3242 0862 E1000000 		.4byte	0xe1
 3243 0866 98040000 		.4byte	.LLST28
 3244 086a 19       		.uleb128 0x19
 3245 086b 0A020000 		.4byte	.LASF94
 3246 086f 01       		.byte	0x1
 3247 0870 0503     		.2byte	0x305
 3248 0872 E1000000 		.4byte	0xe1
 3249 0876 CE040000 		.4byte	.LLST29
 3250 087a 16       		.uleb128 0x16
 3251 087b 65030000 		.4byte	.LASF95
 3252 087f 01       		.byte	0x1
 3253 0880 0603     		.2byte	0x306
 3254 0882 26020000 		.4byte	0x226
 3255 0886 02       		.uleb128 0x2
 3256 0887 91       		.byte	0x91
 3257 0888 60       		.sleb128 -32
 3258 0889 19       		.uleb128 0x19
 3259 088a A8070000 		.4byte	.LASF73
 3260 088e 01       		.byte	0x1
 3261 088f 0703     		.2byte	0x307
 3262 0891 0C050000 		.4byte	0x50c
 3263 0895 EC040000 		.4byte	.LLST30
 3264 0899 17       		.uleb128 0x17
 3265 089a 12000000 		.4byte	.LVL68
 3266 089e 40160000 		.4byte	0x1640
 3267 08a2 1A       		.uleb128 0x1a
 3268 08a3 28000000 		.4byte	.LVL69
 3269 08a7 80040000 		.4byte	0x480
 3270 08ab C2080000 		.4byte	0x8c2
 3271 08af 1B       		.uleb128 0x1b
 3272 08b0 01       		.uleb128 0x1
 3273 08b1 50       		.byte	0x50
 3274 08b2 02       		.uleb128 0x2
 3275 08b3 74       		.byte	0x74
 3276 08b4 00       		.sleb128 0
 3277 08b5 1B       		.uleb128 0x1b
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 118


 3278 08b6 01       		.uleb128 0x1
 3279 08b7 51       		.byte	0x51
 3280 08b8 02       		.uleb128 0x2
 3281 08b9 77       		.byte	0x77
 3282 08ba 00       		.sleb128 0
 3283 08bb 1B       		.uleb128 0x1b
 3284 08bc 01       		.uleb128 0x1
 3285 08bd 52       		.byte	0x52
 3286 08be 02       		.uleb128 0x2
 3287 08bf 76       		.byte	0x76
 3288 08c0 00       		.sleb128 0
 3289 08c1 00       		.byte	0
 3290 08c2 1A       		.uleb128 0x1a
 3291 08c3 34000000 		.4byte	.LVL71
 3292 08c7 5F160000 		.4byte	0x165f
 3293 08cb D6080000 		.4byte	0x8d6
 3294 08cf 1B       		.uleb128 0x1b
 3295 08d0 01       		.uleb128 0x1
 3296 08d1 50       		.byte	0x50
 3297 08d2 02       		.uleb128 0x2
 3298 08d3 74       		.byte	0x74
 3299 08d4 24       		.sleb128 36
 3300 08d5 00       		.byte	0
 3301 08d6 17       		.uleb128 0x17
 3302 08d7 5E000000 		.4byte	.LVL74
 3303 08db 4B160000 		.4byte	0x164b
 3304 08df 17       		.uleb128 0x17
 3305 08e0 6A000000 		.4byte	.LVL75
 3306 08e4 4B160000 		.4byte	0x164b
 3307 08e8 1A       		.uleb128 0x1a
 3308 08e9 76000000 		.4byte	.LVL76
 3309 08ed 8E160000 		.4byte	0x168e
 3310 08f1 FC080000 		.4byte	0x8fc
 3311 08f5 1B       		.uleb128 0x1b
 3312 08f6 01       		.uleb128 0x1
 3313 08f7 50       		.byte	0x50
 3314 08f8 02       		.uleb128 0x2
 3315 08f9 91       		.byte	0x91
 3316 08fa 60       		.sleb128 -32
 3317 08fb 00       		.byte	0
 3318 08fc 17       		.uleb128 0x17
 3319 08fd 7C000000 		.4byte	.LVL78
 3320 0901 4B160000 		.4byte	0x164b
 3321 0905 17       		.uleb128 0x17
 3322 0906 80000000 		.4byte	.LVL79
 3323 090a 9A160000 		.4byte	0x169a
 3324 090e 17       		.uleb128 0x17
 3325 090f 84000000 		.4byte	.LVL80
 3326 0913 40160000 		.4byte	0x1640
 3327 0917 17       		.uleb128 0x17
 3328 0918 AC000000 		.4byte	.LVL81
 3329 091c 4B160000 		.4byte	0x164b
 3330 0920 1A       		.uleb128 0x1a
 3331 0921 B4000000 		.4byte	.LVL83
 3332 0925 A6160000 		.4byte	0x16a6
 3333 0929 3A090000 		.4byte	0x93a
 3334 092d 1B       		.uleb128 0x1b
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 119


 3335 092e 01       		.uleb128 0x1
 3336 092f 50       		.byte	0x50
 3337 0930 02       		.uleb128 0x2
 3338 0931 91       		.byte	0x91
 3339 0932 60       		.sleb128 -32
 3340 0933 1B       		.uleb128 0x1b
 3341 0934 01       		.uleb128 0x1
 3342 0935 51       		.byte	0x51
 3343 0936 02       		.uleb128 0x2
 3344 0937 91       		.byte	0x91
 3345 0938 5C       		.sleb128 -36
 3346 0939 00       		.byte	0
 3347 093a 1A       		.uleb128 0x1a
 3348 093b BC000000 		.4byte	.LVL84
 3349 093f DF030000 		.4byte	0x3df
 3350 0943 4E090000 		.4byte	0x94e
 3351 0947 1B       		.uleb128 0x1b
 3352 0948 01       		.uleb128 0x1
 3353 0949 50       		.byte	0x50
 3354 094a 02       		.uleb128 0x2
 3355 094b 74       		.byte	0x74
 3356 094c 00       		.sleb128 0
 3357 094d 00       		.byte	0
 3358 094e 1A       		.uleb128 0x1a
 3359 094f C8000000 		.4byte	.LVL85
 3360 0953 B2160000 		.4byte	0x16b2
 3361 0957 62090000 		.4byte	0x962
 3362 095b 1B       		.uleb128 0x1b
 3363 095c 01       		.uleb128 0x1
 3364 095d 50       		.byte	0x50
 3365 095e 02       		.uleb128 0x2
 3366 095f 74       		.byte	0x74
 3367 0960 10       		.sleb128 16
 3368 0961 00       		.byte	0
 3369 0962 1A       		.uleb128 0x1a
 3370 0963 CE000000 		.4byte	.LVL86
 3371 0967 62050000 		.4byte	0x562
 3372 096b 76090000 		.4byte	0x976
 3373 096f 1B       		.uleb128 0x1b
 3374 0970 01       		.uleb128 0x1
 3375 0971 50       		.byte	0x50
 3376 0972 02       		.uleb128 0x2
 3377 0973 74       		.byte	0x74
 3378 0974 00       		.sleb128 0
 3379 0975 00       		.byte	0
 3380 0976 17       		.uleb128 0x17
 3381 0977 D2000000 		.4byte	.LVL87
 3382 097b BE160000 		.4byte	0x16be
 3383 097f 1A       		.uleb128 0x1a
 3384 0980 EE000000 		.4byte	.LVL88
 3385 0984 62050000 		.4byte	0x562
 3386 0988 93090000 		.4byte	0x993
 3387 098c 1B       		.uleb128 0x1b
 3388 098d 01       		.uleb128 0x1
 3389 098e 50       		.byte	0x50
 3390 098f 02       		.uleb128 0x2
 3391 0990 74       		.byte	0x74
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 120


 3392 0991 00       		.sleb128 0
 3393 0992 00       		.byte	0
 3394 0993 17       		.uleb128 0x17
 3395 0994 F2000000 		.4byte	.LVL89
 3396 0998 BE160000 		.4byte	0x16be
 3397 099c 1A       		.uleb128 0x1a
 3398 099d FA000000 		.4byte	.LVL90
 3399 09a1 62050000 		.4byte	0x562
 3400 09a5 B0090000 		.4byte	0x9b0
 3401 09a9 1B       		.uleb128 0x1b
 3402 09aa 01       		.uleb128 0x1
 3403 09ab 50       		.byte	0x50
 3404 09ac 02       		.uleb128 0x2
 3405 09ad 74       		.byte	0x74
 3406 09ae 00       		.sleb128 0
 3407 09af 00       		.byte	0
 3408 09b0 17       		.uleb128 0x17
 3409 09b1 FE000000 		.4byte	.LVL91
 3410 09b5 BE160000 		.4byte	0x16be
 3411 09b9 00       		.byte	0
 3412 09ba 07       		.uleb128 0x7
 3413 09bb B9000000 		.4byte	0xb9
 3414 09bf 1F       		.uleb128 0x1f
 3415 09c0 98030000 		.4byte	.LASF96
 3416 09c4 01       		.byte	0x1
 3417 09c5 D403     		.2byte	0x3d4
 3418 09c7 E1000000 		.4byte	0xe1
 3419 09cb 00000000 		.4byte	.LFB8
 3420 09cf 70000000 		.4byte	.LFE8-.LFB8
 3421 09d3 01       		.uleb128 0x1
 3422 09d4 9C       		.byte	0x9c
 3423 09d5 DA0A0000 		.4byte	0xada
 3424 09d9 15       		.uleb128 0x15
 3425 09da 2B020000 		.4byte	.LASF60
 3426 09de 01       		.byte	0x1
 3427 09df D403     		.2byte	0x3d4
 3428 09e1 31020000 		.4byte	0x231
 3429 09e5 18050000 		.4byte	.LLST31
 3430 09e9 15       		.uleb128 0x15
 3431 09ea 3A070000 		.4byte	.LASF76
 3432 09ee 01       		.byte	0x1
 3433 09ef D503     		.2byte	0x3d5
 3434 09f1 BA090000 		.4byte	0x9ba
 3435 09f5 68050000 		.4byte	.LLST32
 3436 09f9 15       		.uleb128 0x15
 3437 09fa 8E000000 		.4byte	.LASF97
 3438 09fe 01       		.byte	0x1
 3439 09ff D603     		.2byte	0x3d6
 3440 0a01 E00A0000 		.4byte	0xae0
 3441 0a05 A2050000 		.4byte	.LLST33
 3442 0a09 15       		.uleb128 0x15
 3443 0a0a 74010000 		.4byte	.LASF92
 3444 0a0e 01       		.byte	0x1
 3445 0a0f D703     		.2byte	0x3d7
 3446 0a11 11050000 		.4byte	0x511
 3447 0a15 E4050000 		.4byte	.LLST34
 3448 0a19 16       		.uleb128 0x16
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 121


 3449 0a1a B0070000 		.4byte	.LASF74
 3450 0a1e 01       		.byte	0x1
 3451 0a1f D903     		.2byte	0x3d9
 3452 0a21 E1000000 		.4byte	0xe1
 3453 0a25 01       		.uleb128 0x1
 3454 0a26 50       		.byte	0x50
 3455 0a27 21       		.uleb128 0x21
 3456 0a28 CD010000 		.4byte	.LASF98
 3457 0a2c 01       		.byte	0x1
 3458 0a2d DA03     		.2byte	0x3da
 3459 0a2f EC000000 		.4byte	0xec
 3460 0a33 19       		.uleb128 0x19
 3461 0a34 A8070000 		.4byte	.LASF73
 3462 0a38 01       		.byte	0x1
 3463 0a39 DB03     		.2byte	0x3db
 3464 0a3b 0C050000 		.4byte	0x50c
 3465 0a3f 1E060000 		.4byte	.LLST35
 3466 0a43 22       		.uleb128 0x22
 3467 0a44 A0030000 		.4byte	0x3a0
 3468 0a48 02000000 		.4byte	.LBB25
 3469 0a4c 14000000 		.4byte	.LBE25-.LBB25
 3470 0a50 01       		.byte	0x1
 3471 0a51 F603     		.2byte	0x3f6
 3472 0a53 6C0A0000 		.4byte	0xa6c
 3473 0a57 23       		.uleb128 0x23
 3474 0a58 02000000 		.4byte	.LBB26
 3475 0a5c 14000000 		.4byte	.LBE26-.LBB26
 3476 0a60 24       		.uleb128 0x24
 3477 0a61 B0030000 		.4byte	0x3b0
 3478 0a65 24       		.uleb128 0x24
 3479 0a66 BB030000 		.4byte	0x3bb
 3480 0a6a 00       		.byte	0
 3481 0a6b 00       		.byte	0
 3482 0a6c 25       		.uleb128 0x25
 3483 0a6d 00000000 		.4byte	.Ldebug_ranges0+0
 3484 0a71 BF0A0000 		.4byte	0xabf
 3485 0a75 19       		.uleb128 0x19
 3486 0a76 42010000 		.4byte	.LASF51
 3487 0a7a 01       		.byte	0x1
 3488 0a7b FA03     		.2byte	0x3fa
 3489 0a7d E50A0000 		.4byte	0xae5
 3490 0a81 6E060000 		.4byte	.LLST36
 3491 0a85 16       		.uleb128 0x16
 3492 0a86 57040000 		.4byte	.LASF99
 3493 0a8a 01       		.byte	0x1
 3494 0a8b FB03     		.2byte	0x3fb
 3495 0a8d 38070000 		.4byte	0x738
 3496 0a91 01       		.uleb128 0x1
 3497 0a92 52       		.byte	0x52
 3498 0a93 1A       		.uleb128 0x1a
 3499 0a94 34000000 		.4byte	.LVL97
 3500 0a98 80040000 		.4byte	0x480
 3501 0a9c AE0A0000 		.4byte	0xaae
 3502 0aa0 1B       		.uleb128 0x1b
 3503 0aa1 01       		.uleb128 0x1
 3504 0aa2 50       		.byte	0x50
 3505 0aa3 02       		.uleb128 0x2
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 122


 3506 0aa4 75       		.byte	0x75
 3507 0aa5 00       		.sleb128 0
 3508 0aa6 1B       		.uleb128 0x1b
 3509 0aa7 01       		.uleb128 0x1
 3510 0aa8 52       		.byte	0x52
 3511 0aa9 03       		.uleb128 0x3
 3512 0aaa F3       		.byte	0xf3
 3513 0aab 01       		.uleb128 0x1
 3514 0aac 53       		.byte	0x53
 3515 0aad 00       		.byte	0
 3516 0aae 1D       		.uleb128 0x1d
 3517 0aaf 46000000 		.4byte	.LVL98
 3518 0ab3 5F160000 		.4byte	0x165f
 3519 0ab7 1B       		.uleb128 0x1b
 3520 0ab8 01       		.uleb128 0x1
 3521 0ab9 50       		.byte	0x50
 3522 0aba 02       		.uleb128 0x2
 3523 0abb 75       		.byte	0x75
 3524 0abc 24       		.sleb128 36
 3525 0abd 00       		.byte	0
 3526 0abe 00       		.byte	0
 3527 0abf 26       		.uleb128 0x26
 3528 0ac0 C7030000 		.4byte	0x3c7
 3529 0ac4 6A000000 		.4byte	.LBB29
 3530 0ac8 04000000 		.4byte	.LBE29-.LBB29
 3531 0acc 01       		.byte	0x1
 3532 0acd 7504     		.2byte	0x475
 3533 0acf 27       		.uleb128 0x27
 3534 0ad0 D3030000 		.4byte	0x3d3
 3535 0ad4 99060000 		.4byte	.LLST37
 3536 0ad8 00       		.byte	0
 3537 0ad9 00       		.byte	0
 3538 0ada 06       		.uleb128 0x6
 3539 0adb 04       		.byte	0x4
 3540 0adc E1000000 		.4byte	0xe1
 3541 0ae0 07       		.uleb128 0x7
 3542 0ae1 DA0A0000 		.4byte	0xada
 3543 0ae5 07       		.uleb128 0x7
 3544 0ae6 C0000000 		.4byte	0xc0
 3545 0aea 1F       		.uleb128 0x1f
 3546 0aeb D0040000 		.4byte	.LASF100
 3547 0aef 01       		.byte	0x1
 3548 0af0 7B04     		.2byte	0x47b
 3549 0af2 E1000000 		.4byte	0xe1
 3550 0af6 00000000 		.4byte	.LFB9
 3551 0afa 64000000 		.4byte	.LFE9-.LFB9
 3552 0afe 01       		.uleb128 0x1
 3553 0aff 9C       		.byte	0x9c
 3554 0b00 D90B0000 		.4byte	0xbd9
 3555 0b04 15       		.uleb128 0x15
 3556 0b05 2B020000 		.4byte	.LASF60
 3557 0b09 01       		.byte	0x1
 3558 0b0a 7B04     		.2byte	0x47b
 3559 0b0c 31020000 		.4byte	0x231
 3560 0b10 AC060000 		.4byte	.LLST38
 3561 0b14 15       		.uleb128 0x15
 3562 0b15 8E000000 		.4byte	.LASF97
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 123


 3563 0b19 01       		.byte	0x1
 3564 0b1a 7C04     		.2byte	0x47c
 3565 0b1c E00A0000 		.4byte	0xae0
 3566 0b20 25070000 		.4byte	.LLST39
 3567 0b24 16       		.uleb128 0x16
 3568 0b25 B0070000 		.4byte	.LASF74
 3569 0b29 01       		.byte	0x1
 3570 0b2a 7E04     		.2byte	0x47e
 3571 0b2c E1000000 		.4byte	0xe1
 3572 0b30 01       		.uleb128 0x1
 3573 0b31 50       		.byte	0x50
 3574 0b32 21       		.uleb128 0x21
 3575 0b33 CD010000 		.4byte	.LASF98
 3576 0b37 01       		.byte	0x1
 3577 0b38 7F04     		.2byte	0x47f
 3578 0b3a EC000000 		.4byte	0xec
 3579 0b3e 19       		.uleb128 0x19
 3580 0b3f A8070000 		.4byte	.LASF73
 3581 0b43 01       		.byte	0x1
 3582 0b44 8004     		.2byte	0x480
 3583 0b46 0C050000 		.4byte	0x50c
 3584 0b4a 67070000 		.4byte	.LLST40
 3585 0b4e 22       		.uleb128 0x22
 3586 0b4f A0030000 		.4byte	0x3a0
 3587 0b53 02000000 		.4byte	.LBB31
 3588 0b57 14000000 		.4byte	.LBE31-.LBB31
 3589 0b5b 01       		.byte	0x1
 3590 0b5c A304     		.2byte	0x4a3
 3591 0b5e 770B0000 		.4byte	0xb77
 3592 0b62 23       		.uleb128 0x23
 3593 0b63 02000000 		.4byte	.LBB32
 3594 0b67 14000000 		.4byte	.LBE32-.LBB32
 3595 0b6b 24       		.uleb128 0x24
 3596 0b6c B0030000 		.4byte	0x3b0
 3597 0b70 24       		.uleb128 0x24
 3598 0b71 BB030000 		.4byte	0x3bb
 3599 0b75 00       		.byte	0
 3600 0b76 00       		.byte	0
 3601 0b77 1E       		.uleb128 0x1e
 3602 0b78 16000000 		.4byte	.LBB33
 3603 0b7c 48000000 		.4byte	.LBE33-.LBB33
 3604 0b80 BE0B0000 		.4byte	0xbbe
 3605 0b84 19       		.uleb128 0x19
 3606 0b85 7D020000 		.4byte	.LASF47
 3607 0b89 01       		.byte	0x1
 3608 0b8a A504     		.2byte	0x4a5
 3609 0b8c 38070000 		.4byte	0x738
 3610 0b90 E0070000 		.4byte	.LLST41
 3611 0b94 28       		.uleb128 0x28
 3612 0b95 18000000 		.4byte	.Ldebug_ranges0+0x18
 3613 0b99 19       		.uleb128 0x19
 3614 0b9a 42010000 		.4byte	.LASF51
 3615 0b9e 01       		.byte	0x1
 3616 0b9f AC04     		.2byte	0x4ac
 3617 0ba1 E50A0000 		.4byte	0xae5
 3618 0ba5 25080000 		.4byte	.LLST42
 3619 0ba9 1D       		.uleb128 0x1d
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 124


 3620 0baa 3A000000 		.4byte	.LVL113
 3621 0bae 5F160000 		.4byte	0x165f
 3622 0bb2 1B       		.uleb128 0x1b
 3623 0bb3 01       		.uleb128 0x1
 3624 0bb4 50       		.byte	0x50
 3625 0bb5 05       		.uleb128 0x5
 3626 0bb6 F3       		.byte	0xf3
 3627 0bb7 01       		.uleb128 0x1
 3628 0bb8 50       		.byte	0x50
 3629 0bb9 23       		.byte	0x23
 3630 0bba 24       		.uleb128 0x24
 3631 0bbb 00       		.byte	0
 3632 0bbc 00       		.byte	0
 3633 0bbd 00       		.byte	0
 3634 0bbe 26       		.uleb128 0x26
 3635 0bbf C7030000 		.4byte	0x3c7
 3636 0bc3 5E000000 		.4byte	.LBB36
 3637 0bc7 04000000 		.4byte	.LBE36-.LBB36
 3638 0bcb 01       		.byte	0x1
 3639 0bcc 1D05     		.2byte	0x51d
 3640 0bce 27       		.uleb128 0x27
 3641 0bcf D3030000 		.4byte	0x3d3
 3642 0bd3 50080000 		.4byte	.LLST43
 3643 0bd7 00       		.byte	0
 3644 0bd8 00       		.byte	0
 3645 0bd9 1F       		.uleb128 0x1f
 3646 0bda 54000000 		.4byte	.LASF101
 3647 0bde 01       		.byte	0x1
 3648 0bdf 2305     		.2byte	0x523
 3649 0be1 E1000000 		.4byte	0xe1
 3650 0be5 00000000 		.4byte	.LFB10
 3651 0be9 F8000000 		.4byte	.LFE10-.LFB10
 3652 0bed 01       		.uleb128 0x1
 3653 0bee 9C       		.byte	0x9c
 3654 0bef 970D0000 		.4byte	0xd97
 3655 0bf3 15       		.uleb128 0x15
 3656 0bf4 2B020000 		.4byte	.LASF60
 3657 0bf8 01       		.byte	0x1
 3658 0bf9 2305     		.2byte	0x523
 3659 0bfb 31020000 		.4byte	0x231
 3660 0bff 63080000 		.4byte	.LLST44
 3661 0c03 15       		.uleb128 0x15
 3662 0c04 69020000 		.4byte	.LASF78
 3663 0c08 01       		.byte	0x1
 3664 0c09 2405     		.2byte	0x524
 3665 0c0b 5D050000 		.4byte	0x55d
 3666 0c0f 8F080000 		.4byte	.LLST45
 3667 0c13 15       		.uleb128 0x15
 3668 0c14 91080000 		.4byte	.LASF91
 3669 0c18 01       		.byte	0x1
 3670 0c19 2505     		.2byte	0x525
 3671 0c1b F7000000 		.4byte	0xf7
 3672 0c1f BB080000 		.4byte	.LLST46
 3673 0c23 19       		.uleb128 0x19
 3674 0c24 50030000 		.4byte	.LASF93
 3675 0c28 01       		.byte	0x1
 3676 0c29 2705     		.2byte	0x527
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 125


 3677 0c2b E1000000 		.4byte	0xe1
 3678 0c2f FE080000 		.4byte	.LLST47
 3679 0c33 16       		.uleb128 0x16
 3680 0c34 65030000 		.4byte	.LASF95
 3681 0c38 01       		.byte	0x1
 3682 0c39 2805     		.2byte	0x528
 3683 0c3b 26020000 		.4byte	0x226
 3684 0c3f 02       		.uleb128 0x2
 3685 0c40 91       		.byte	0x91
 3686 0c41 60       		.sleb128 -32
 3687 0c42 19       		.uleb128 0x19
 3688 0c43 A8070000 		.4byte	.LASF73
 3689 0c47 01       		.byte	0x1
 3690 0c48 2905     		.2byte	0x529
 3691 0c4a 0C050000 		.4byte	0x50c
 3692 0c4e 34090000 		.4byte	.LLST48
 3693 0c52 1E       		.uleb128 0x1e
 3694 0c53 10000000 		.4byte	.LBB38
 3695 0c57 4C000000 		.4byte	.LBE38-.LBB38
 3696 0c5b C00C0000 		.4byte	0xcc0
 3697 0c5f 19       		.uleb128 0x19
 3698 0c60 7D020000 		.4byte	.LASF47
 3699 0c64 01       		.byte	0x1
 3700 0c65 4005     		.2byte	0x540
 3701 0c67 38070000 		.4byte	0x738
 3702 0c6b 60090000 		.4byte	.LLST49
 3703 0c6f 1A       		.uleb128 0x1a
 3704 0c70 1C000000 		.4byte	.LVL130
 3705 0c74 16050000 		.4byte	0x516
 3706 0c78 890C0000 		.4byte	0xc89
 3707 0c7c 1B       		.uleb128 0x1b
 3708 0c7d 01       		.uleb128 0x1
 3709 0c7e 50       		.byte	0x50
 3710 0c7f 02       		.uleb128 0x2
 3711 0c80 74       		.byte	0x74
 3712 0c81 00       		.sleb128 0
 3713 0c82 1B       		.uleb128 0x1b
 3714 0c83 01       		.uleb128 0x1
 3715 0c84 51       		.byte	0x51
 3716 0c85 02       		.uleb128 0x2
 3717 0c86 77       		.byte	0x77
 3718 0c87 00       		.sleb128 0
 3719 0c88 00       		.byte	0
 3720 0c89 1A       		.uleb128 0x1a
 3721 0c8a 2C000000 		.4byte	.LVL132
 3722 0c8e 5F160000 		.4byte	0x165f
 3723 0c92 9D0C0000 		.4byte	0xc9d
 3724 0c96 1B       		.uleb128 0x1b
 3725 0c97 01       		.uleb128 0x1
 3726 0c98 50       		.byte	0x50
 3727 0c99 02       		.uleb128 0x2
 3728 0c9a 74       		.byte	0x74
 3729 0c9b 10       		.sleb128 16
 3730 0c9c 00       		.byte	0
 3731 0c9d 17       		.uleb128 0x17
 3732 0c9e 42000000 		.4byte	.LVL133
 3733 0ca2 4B160000 		.4byte	0x164b
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 126


 3734 0ca6 17       		.uleb128 0x17
 3735 0ca7 4E000000 		.4byte	.LVL135
 3736 0cab 4B160000 		.4byte	0x164b
 3737 0caf 1D       		.uleb128 0x1d
 3738 0cb0 5A000000 		.4byte	.LVL136
 3739 0cb4 8E160000 		.4byte	0x168e
 3740 0cb8 1B       		.uleb128 0x1b
 3741 0cb9 01       		.uleb128 0x1
 3742 0cba 50       		.byte	0x50
 3743 0cbb 02       		.uleb128 0x2
 3744 0cbc 91       		.byte	0x91
 3745 0cbd 60       		.sleb128 -32
 3746 0cbe 00       		.byte	0
 3747 0cbf 00       		.byte	0
 3748 0cc0 17       		.uleb128 0x17
 3749 0cc1 10000000 		.4byte	.LVL128
 3750 0cc5 40160000 		.4byte	0x1640
 3751 0cc9 17       		.uleb128 0x17
 3752 0cca 60000000 		.4byte	.LVL138
 3753 0cce 4B160000 		.4byte	0x164b
 3754 0cd2 17       		.uleb128 0x17
 3755 0cd3 64000000 		.4byte	.LVL139
 3756 0cd7 9A160000 		.4byte	0x169a
 3757 0cdb 17       		.uleb128 0x17
 3758 0cdc 68000000 		.4byte	.LVL140
 3759 0ce0 40160000 		.4byte	0x1640
 3760 0ce4 17       		.uleb128 0x17
 3761 0ce5 90000000 		.4byte	.LVL141
 3762 0ce9 4B160000 		.4byte	0x164b
 3763 0ced 1A       		.uleb128 0x1a
 3764 0cee 98000000 		.4byte	.LVL143
 3765 0cf2 A6160000 		.4byte	0x16a6
 3766 0cf6 070D0000 		.4byte	0xd07
 3767 0cfa 1B       		.uleb128 0x1b
 3768 0cfb 01       		.uleb128 0x1
 3769 0cfc 50       		.byte	0x50
 3770 0cfd 02       		.uleb128 0x2
 3771 0cfe 91       		.byte	0x91
 3772 0cff 60       		.sleb128 -32
 3773 0d00 1B       		.uleb128 0x1b
 3774 0d01 01       		.uleb128 0x1
 3775 0d02 51       		.byte	0x51
 3776 0d03 02       		.uleb128 0x2
 3777 0d04 91       		.byte	0x91
 3778 0d05 5C       		.sleb128 -36
 3779 0d06 00       		.byte	0
 3780 0d07 1A       		.uleb128 0x1a
 3781 0d08 A0000000 		.4byte	.LVL144
 3782 0d0c 35040000 		.4byte	0x435
 3783 0d10 1B0D0000 		.4byte	0xd1b
 3784 0d14 1B       		.uleb128 0x1b
 3785 0d15 01       		.uleb128 0x1
 3786 0d16 50       		.byte	0x50
 3787 0d17 02       		.uleb128 0x2
 3788 0d18 74       		.byte	0x74
 3789 0d19 00       		.sleb128 0
 3790 0d1a 00       		.byte	0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 127


 3791 0d1b 1A       		.uleb128 0x1a
 3792 0d1c AC000000 		.4byte	.LVL145
 3793 0d20 B2160000 		.4byte	0x16b2
 3794 0d24 2F0D0000 		.4byte	0xd2f
 3795 0d28 1B       		.uleb128 0x1b
 3796 0d29 01       		.uleb128 0x1
 3797 0d2a 50       		.byte	0x50
 3798 0d2b 02       		.uleb128 0x2
 3799 0d2c 74       		.byte	0x74
 3800 0d2d 24       		.sleb128 36
 3801 0d2e 00       		.byte	0
 3802 0d2f 1A       		.uleb128 0x1a
 3803 0d30 B2000000 		.4byte	.LVL146
 3804 0d34 62050000 		.4byte	0x562
 3805 0d38 430D0000 		.4byte	0xd43
 3806 0d3c 1B       		.uleb128 0x1b
 3807 0d3d 01       		.uleb128 0x1
 3808 0d3e 50       		.byte	0x50
 3809 0d3f 02       		.uleb128 0x2
 3810 0d40 74       		.byte	0x74
 3811 0d41 00       		.sleb128 0
 3812 0d42 00       		.byte	0
 3813 0d43 17       		.uleb128 0x17
 3814 0d44 B6000000 		.4byte	.LVL147
 3815 0d48 BE160000 		.4byte	0x16be
 3816 0d4c 1A       		.uleb128 0x1a
 3817 0d4d D2000000 		.4byte	.LVL148
 3818 0d51 62050000 		.4byte	0x562
 3819 0d55 600D0000 		.4byte	0xd60
 3820 0d59 1B       		.uleb128 0x1b
 3821 0d5a 01       		.uleb128 0x1
 3822 0d5b 50       		.byte	0x50
 3823 0d5c 02       		.uleb128 0x2
 3824 0d5d 74       		.byte	0x74
 3825 0d5e 00       		.sleb128 0
 3826 0d5f 00       		.byte	0
 3827 0d60 17       		.uleb128 0x17
 3828 0d61 D6000000 		.4byte	.LVL149
 3829 0d65 BE160000 		.4byte	0x16be
 3830 0d69 1A       		.uleb128 0x1a
 3831 0d6a DE000000 		.4byte	.LVL150
 3832 0d6e 62050000 		.4byte	0x562
 3833 0d72 7D0D0000 		.4byte	0xd7d
 3834 0d76 1B       		.uleb128 0x1b
 3835 0d77 01       		.uleb128 0x1
 3836 0d78 50       		.byte	0x50
 3837 0d79 02       		.uleb128 0x2
 3838 0d7a 74       		.byte	0x74
 3839 0d7b 00       		.sleb128 0
 3840 0d7c 00       		.byte	0
 3841 0d7d 17       		.uleb128 0x17
 3842 0d7e E2000000 		.4byte	.LVL151
 3843 0d82 BE160000 		.4byte	0x16be
 3844 0d86 1D       		.uleb128 0x1d
 3845 0d87 E8000000 		.4byte	.LVL152
 3846 0d8b 35040000 		.4byte	0x435
 3847 0d8f 1B       		.uleb128 0x1b
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 128


 3848 0d90 01       		.uleb128 0x1
 3849 0d91 50       		.byte	0x50
 3850 0d92 02       		.uleb128 0x2
 3851 0d93 74       		.byte	0x74
 3852 0d94 00       		.sleb128 0
 3853 0d95 00       		.byte	0
 3854 0d96 00       		.byte	0
 3855 0d97 1F       		.uleb128 0x1f
 3856 0d98 A8000000 		.4byte	.LASF102
 3857 0d9c 01       		.byte	0x1
 3858 0d9d B205     		.2byte	0x5b2
 3859 0d9f E1000000 		.4byte	0xe1
 3860 0da3 00000000 		.4byte	.LFB11
 3861 0da7 EC000000 		.4byte	.LFE11-.LFB11
 3862 0dab 01       		.uleb128 0x1
 3863 0dac 9C       		.byte	0x9c
 3864 0dad 2B0F0000 		.4byte	0xf2b
 3865 0db1 15       		.uleb128 0x15
 3866 0db2 2B020000 		.4byte	.LASF60
 3867 0db6 01       		.byte	0x1
 3868 0db7 B205     		.2byte	0x5b2
 3869 0db9 31020000 		.4byte	0x231
 3870 0dbd 8B090000 		.4byte	.LLST50
 3871 0dc1 15       		.uleb128 0x15
 3872 0dc2 91080000 		.4byte	.LASF91
 3873 0dc6 01       		.byte	0x1
 3874 0dc7 B305     		.2byte	0x5b3
 3875 0dc9 F7000000 		.4byte	0xf7
 3876 0dcd B7090000 		.4byte	.LLST51
 3877 0dd1 19       		.uleb128 0x19
 3878 0dd2 50030000 		.4byte	.LASF93
 3879 0dd6 01       		.byte	0x1
 3880 0dd7 B505     		.2byte	0x5b5
 3881 0dd9 E1000000 		.4byte	0xe1
 3882 0ddd FA090000 		.4byte	.LLST52
 3883 0de1 16       		.uleb128 0x16
 3884 0de2 65030000 		.4byte	.LASF95
 3885 0de6 01       		.byte	0x1
 3886 0de7 B605     		.2byte	0x5b6
 3887 0de9 26020000 		.4byte	0x226
 3888 0ded 02       		.uleb128 0x2
 3889 0dee 91       		.byte	0x91
 3890 0def 68       		.sleb128 -24
 3891 0df0 19       		.uleb128 0x19
 3892 0df1 A8070000 		.4byte	.LASF73
 3893 0df5 01       		.byte	0x1
 3894 0df6 B705     		.2byte	0x5b7
 3895 0df8 0C050000 		.4byte	0x50c
 3896 0dfc 300A0000 		.4byte	.LLST53
 3897 0e00 1E       		.uleb128 0x1e
 3898 0e01 0E000000 		.4byte	.LBB39
 3899 0e05 44000000 		.4byte	.LBE39-.LBB39
 3900 0e09 540E0000 		.4byte	0xe54
 3901 0e0d 19       		.uleb128 0x19
 3902 0e0e 62060000 		.4byte	.LASF103
 3903 0e12 01       		.byte	0x1
 3904 0e13 D405     		.2byte	0x5d4
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 129


 3905 0e15 38070000 		.4byte	0x738
 3906 0e19 5C0A0000 		.4byte	.LLST54
 3907 0e1d 1A       		.uleb128 0x1a
 3908 0e1e 22000000 		.4byte	.LVL162
 3909 0e22 5F160000 		.4byte	0x165f
 3910 0e26 310E0000 		.4byte	0xe31
 3911 0e2a 1B       		.uleb128 0x1b
 3912 0e2b 01       		.uleb128 0x1
 3913 0e2c 50       		.byte	0x50
 3914 0e2d 02       		.uleb128 0x2
 3915 0e2e 74       		.byte	0x74
 3916 0e2f 10       		.sleb128 16
 3917 0e30 00       		.byte	0
 3918 0e31 17       		.uleb128 0x17
 3919 0e32 38000000 		.4byte	.LVL163
 3920 0e36 4B160000 		.4byte	0x164b
 3921 0e3a 17       		.uleb128 0x17
 3922 0e3b 44000000 		.4byte	.LVL166
 3923 0e3f 4B160000 		.4byte	0x164b
 3924 0e43 1D       		.uleb128 0x1d
 3925 0e44 50000000 		.4byte	.LVL167
 3926 0e48 8E160000 		.4byte	0x168e
 3927 0e4c 1B       		.uleb128 0x1b
 3928 0e4d 01       		.uleb128 0x1
 3929 0e4e 50       		.byte	0x50
 3930 0e4f 02       		.uleb128 0x2
 3931 0e50 91       		.byte	0x91
 3932 0e51 68       		.sleb128 -24
 3933 0e52 00       		.byte	0
 3934 0e53 00       		.byte	0
 3935 0e54 17       		.uleb128 0x17
 3936 0e55 0E000000 		.4byte	.LVL158
 3937 0e59 40160000 		.4byte	0x1640
 3938 0e5d 17       		.uleb128 0x17
 3939 0e5e 56000000 		.4byte	.LVL169
 3940 0e62 4B160000 		.4byte	0x164b
 3941 0e66 17       		.uleb128 0x17
 3942 0e67 5A000000 		.4byte	.LVL170
 3943 0e6b 9A160000 		.4byte	0x169a
 3944 0e6f 17       		.uleb128 0x17
 3945 0e70 5E000000 		.4byte	.LVL171
 3946 0e74 40160000 		.4byte	0x1640
 3947 0e78 17       		.uleb128 0x17
 3948 0e79 86000000 		.4byte	.LVL172
 3949 0e7d 4B160000 		.4byte	0x164b
 3950 0e81 1A       		.uleb128 0x1a
 3951 0e82 8E000000 		.4byte	.LVL174
 3952 0e86 A6160000 		.4byte	0x16a6
 3953 0e8a 9B0E0000 		.4byte	0xe9b
 3954 0e8e 1B       		.uleb128 0x1b
 3955 0e8f 01       		.uleb128 0x1
 3956 0e90 50       		.byte	0x50
 3957 0e91 02       		.uleb128 0x2
 3958 0e92 91       		.byte	0x91
 3959 0e93 68       		.sleb128 -24
 3960 0e94 1B       		.uleb128 0x1b
 3961 0e95 01       		.uleb128 0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 130


 3962 0e96 51       		.byte	0x51
 3963 0e97 02       		.uleb128 0x2
 3964 0e98 91       		.byte	0x91
 3965 0e99 64       		.sleb128 -28
 3966 0e9a 00       		.byte	0
 3967 0e9b 1A       		.uleb128 0x1a
 3968 0e9c 96000000 		.4byte	.LVL175
 3969 0ea0 35040000 		.4byte	0x435
 3970 0ea4 AF0E0000 		.4byte	0xeaf
 3971 0ea8 1B       		.uleb128 0x1b
 3972 0ea9 01       		.uleb128 0x1
 3973 0eaa 50       		.byte	0x50
 3974 0eab 02       		.uleb128 0x2
 3975 0eac 74       		.byte	0x74
 3976 0ead 00       		.sleb128 0
 3977 0eae 00       		.byte	0
 3978 0eaf 1A       		.uleb128 0x1a
 3979 0eb0 A2000000 		.4byte	.LVL176
 3980 0eb4 B2160000 		.4byte	0x16b2
 3981 0eb8 C30E0000 		.4byte	0xec3
 3982 0ebc 1B       		.uleb128 0x1b
 3983 0ebd 01       		.uleb128 0x1
 3984 0ebe 50       		.byte	0x50
 3985 0ebf 02       		.uleb128 0x2
 3986 0ec0 74       		.byte	0x74
 3987 0ec1 24       		.sleb128 36
 3988 0ec2 00       		.byte	0
 3989 0ec3 1A       		.uleb128 0x1a
 3990 0ec4 A8000000 		.4byte	.LVL177
 3991 0ec8 62050000 		.4byte	0x562
 3992 0ecc D70E0000 		.4byte	0xed7
 3993 0ed0 1B       		.uleb128 0x1b
 3994 0ed1 01       		.uleb128 0x1
 3995 0ed2 50       		.byte	0x50
 3996 0ed3 02       		.uleb128 0x2
 3997 0ed4 74       		.byte	0x74
 3998 0ed5 00       		.sleb128 0
 3999 0ed6 00       		.byte	0
 4000 0ed7 17       		.uleb128 0x17
 4001 0ed8 AC000000 		.4byte	.LVL178
 4002 0edc BE160000 		.4byte	0x16be
 4003 0ee0 1A       		.uleb128 0x1a
 4004 0ee1 C8000000 		.4byte	.LVL179
 4005 0ee5 62050000 		.4byte	0x562
 4006 0ee9 F40E0000 		.4byte	0xef4
 4007 0eed 1B       		.uleb128 0x1b
 4008 0eee 01       		.uleb128 0x1
 4009 0eef 50       		.byte	0x50
 4010 0ef0 02       		.uleb128 0x2
 4011 0ef1 74       		.byte	0x74
 4012 0ef2 00       		.sleb128 0
 4013 0ef3 00       		.byte	0
 4014 0ef4 17       		.uleb128 0x17
 4015 0ef5 CC000000 		.4byte	.LVL180
 4016 0ef9 BE160000 		.4byte	0x16be
 4017 0efd 1A       		.uleb128 0x1a
 4018 0efe D4000000 		.4byte	.LVL181
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 131


 4019 0f02 62050000 		.4byte	0x562
 4020 0f06 110F0000 		.4byte	0xf11
 4021 0f0a 1B       		.uleb128 0x1b
 4022 0f0b 01       		.uleb128 0x1
 4023 0f0c 50       		.byte	0x50
 4024 0f0d 02       		.uleb128 0x2
 4025 0f0e 74       		.byte	0x74
 4026 0f0f 00       		.sleb128 0
 4027 0f10 00       		.byte	0
 4028 0f11 17       		.uleb128 0x17
 4029 0f12 D8000000 		.4byte	.LVL182
 4030 0f16 BE160000 		.4byte	0x16be
 4031 0f1a 1D       		.uleb128 0x1d
 4032 0f1b DE000000 		.4byte	.LVL183
 4033 0f1f 35040000 		.4byte	0x435
 4034 0f23 1B       		.uleb128 0x1b
 4035 0f24 01       		.uleb128 0x1
 4036 0f25 50       		.byte	0x50
 4037 0f26 02       		.uleb128 0x2
 4038 0f27 74       		.byte	0x74
 4039 0f28 00       		.sleb128 0
 4040 0f29 00       		.byte	0
 4041 0f2a 00       		.byte	0
 4042 0f2b 1F       		.uleb128 0x1f
 4043 0f2c B7020000 		.4byte	.LASF104
 4044 0f30 01       		.byte	0x1
 4045 0f31 8D06     		.2byte	0x68d
 4046 0f33 E1000000 		.4byte	0xe1
 4047 0f37 00000000 		.4byte	.LFB12
 4048 0f3b F8000000 		.4byte	.LFE12-.LFB12
 4049 0f3f 01       		.uleb128 0x1
 4050 0f40 9C       		.byte	0x9c
 4051 0f41 F9100000 		.4byte	0x10f9
 4052 0f45 15       		.uleb128 0x15
 4053 0f46 2B020000 		.4byte	.LASF60
 4054 0f4a 01       		.byte	0x1
 4055 0f4b 8D06     		.2byte	0x68d
 4056 0f4d 31020000 		.4byte	0x231
 4057 0f51 970A0000 		.4byte	.LLST55
 4058 0f55 15       		.uleb128 0x15
 4059 0f56 69020000 		.4byte	.LASF78
 4060 0f5a 01       		.byte	0x1
 4061 0f5b 8E06     		.2byte	0x68e
 4062 0f5d 5D050000 		.4byte	0x55d
 4063 0f61 C30A0000 		.4byte	.LLST56
 4064 0f65 15       		.uleb128 0x15
 4065 0f66 91080000 		.4byte	.LASF91
 4066 0f6a 01       		.byte	0x1
 4067 0f6b 8F06     		.2byte	0x68f
 4068 0f6d F7000000 		.4byte	0xf7
 4069 0f71 EF0A0000 		.4byte	.LLST57
 4070 0f75 19       		.uleb128 0x19
 4071 0f76 50030000 		.4byte	.LASF93
 4072 0f7a 01       		.byte	0x1
 4073 0f7b 9106     		.2byte	0x691
 4074 0f7d E1000000 		.4byte	0xe1
 4075 0f81 320B0000 		.4byte	.LLST58
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 132


 4076 0f85 16       		.uleb128 0x16
 4077 0f86 65030000 		.4byte	.LASF95
 4078 0f8a 01       		.byte	0x1
 4079 0f8b 9206     		.2byte	0x692
 4080 0f8d 26020000 		.4byte	0x226
 4081 0f91 02       		.uleb128 0x2
 4082 0f92 91       		.byte	0x91
 4083 0f93 68       		.sleb128 -24
 4084 0f94 19       		.uleb128 0x19
 4085 0f95 1C060000 		.4byte	.LASF105
 4086 0f99 01       		.byte	0x1
 4087 0f9a 9306     		.2byte	0x693
 4088 0f9c EA020000 		.4byte	0x2ea
 4089 0fa0 730B0000 		.4byte	.LLST59
 4090 0fa4 19       		.uleb128 0x19
 4091 0fa5 A8070000 		.4byte	.LASF73
 4092 0fa9 01       		.byte	0x1
 4093 0faa 9406     		.2byte	0x694
 4094 0fac 0C050000 		.4byte	0x50c
 4095 0fb0 860B0000 		.4byte	.LLST60
 4096 0fb4 1E       		.uleb128 0x1e
 4097 0fb5 10000000 		.4byte	.LBB40
 4098 0fb9 4C000000 		.4byte	.LBE40-.LBB40
 4099 0fbd 22100000 		.4byte	0x1022
 4100 0fc1 19       		.uleb128 0x19
 4101 0fc2 7D020000 		.4byte	.LASF47
 4102 0fc6 01       		.byte	0x1
 4103 0fc7 AB06     		.2byte	0x6ab
 4104 0fc9 38070000 		.4byte	0x738
 4105 0fcd B20B0000 		.4byte	.LLST61
 4106 0fd1 1A       		.uleb128 0x1a
 4107 0fd2 1E000000 		.4byte	.LVL191
 4108 0fd6 16050000 		.4byte	0x516
 4109 0fda EB0F0000 		.4byte	0xfeb
 4110 0fde 1B       		.uleb128 0x1b
 4111 0fdf 01       		.uleb128 0x1
 4112 0fe0 50       		.byte	0x50
 4113 0fe1 02       		.uleb128 0x2
 4114 0fe2 74       		.byte	0x74
 4115 0fe3 00       		.sleb128 0
 4116 0fe4 1B       		.uleb128 0x1b
 4117 0fe5 01       		.uleb128 0x1
 4118 0fe6 51       		.byte	0x51
 4119 0fe7 02       		.uleb128 0x2
 4120 0fe8 76       		.byte	0x76
 4121 0fe9 00       		.sleb128 0
 4122 0fea 00       		.byte	0
 4123 0feb 1A       		.uleb128 0x1a
 4124 0fec 2C000000 		.4byte	.LVL192
 4125 0ff0 5F160000 		.4byte	0x165f
 4126 0ff4 FF0F0000 		.4byte	0xfff
 4127 0ff8 1B       		.uleb128 0x1b
 4128 0ff9 01       		.uleb128 0x1
 4129 0ffa 50       		.byte	0x50
 4130 0ffb 02       		.uleb128 0x2
 4131 0ffc 74       		.byte	0x74
 4132 0ffd 24       		.sleb128 36
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 133


 4133 0ffe 00       		.byte	0
 4134 0fff 17       		.uleb128 0x17
 4135 1000 42000000 		.4byte	.LVL193
 4136 1004 4B160000 		.4byte	0x164b
 4137 1008 17       		.uleb128 0x17
 4138 1009 4E000000 		.4byte	.LVL196
 4139 100d 4B160000 		.4byte	0x164b
 4140 1011 1D       		.uleb128 0x1d
 4141 1012 5A000000 		.4byte	.LVL197
 4142 1016 8E160000 		.4byte	0x168e
 4143 101a 1B       		.uleb128 0x1b
 4144 101b 01       		.uleb128 0x1
 4145 101c 50       		.byte	0x50
 4146 101d 02       		.uleb128 0x2
 4147 101e 91       		.byte	0x91
 4148 101f 68       		.sleb128 -24
 4149 1020 00       		.byte	0
 4150 1021 00       		.byte	0
 4151 1022 17       		.uleb128 0x17
 4152 1023 10000000 		.4byte	.LVL188
 4153 1027 40160000 		.4byte	0x1640
 4154 102b 17       		.uleb128 0x17
 4155 102c 60000000 		.4byte	.LVL199
 4156 1030 4B160000 		.4byte	0x164b
 4157 1034 17       		.uleb128 0x17
 4158 1035 64000000 		.4byte	.LVL200
 4159 1039 9A160000 		.4byte	0x169a
 4160 103d 17       		.uleb128 0x17
 4161 103e 68000000 		.4byte	.LVL201
 4162 1042 40160000 		.4byte	0x1640
 4163 1046 17       		.uleb128 0x17
 4164 1047 90000000 		.4byte	.LVL202
 4165 104b 4B160000 		.4byte	0x164b
 4166 104f 1A       		.uleb128 0x1a
 4167 1050 98000000 		.4byte	.LVL204
 4168 1054 A6160000 		.4byte	0x16a6
 4169 1058 69100000 		.4byte	0x1069
 4170 105c 1B       		.uleb128 0x1b
 4171 105d 01       		.uleb128 0x1
 4172 105e 50       		.byte	0x50
 4173 105f 02       		.uleb128 0x2
 4174 1060 91       		.byte	0x91
 4175 1061 68       		.sleb128 -24
 4176 1062 1B       		.uleb128 0x1b
 4177 1063 01       		.uleb128 0x1
 4178 1064 51       		.byte	0x51
 4179 1065 02       		.uleb128 0x2
 4180 1066 91       		.byte	0x91
 4181 1067 64       		.sleb128 -28
 4182 1068 00       		.byte	0
 4183 1069 1A       		.uleb128 0x1a
 4184 106a A0000000 		.4byte	.LVL205
 4185 106e 35040000 		.4byte	0x435
 4186 1072 7D100000 		.4byte	0x107d
 4187 1076 1B       		.uleb128 0x1b
 4188 1077 01       		.uleb128 0x1
 4189 1078 50       		.byte	0x50
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 134


 4190 1079 02       		.uleb128 0x2
 4191 107a 74       		.byte	0x74
 4192 107b 00       		.sleb128 0
 4193 107c 00       		.byte	0
 4194 107d 1A       		.uleb128 0x1a
 4195 107e AC000000 		.4byte	.LVL206
 4196 1082 B2160000 		.4byte	0x16b2
 4197 1086 91100000 		.4byte	0x1091
 4198 108a 1B       		.uleb128 0x1b
 4199 108b 01       		.uleb128 0x1
 4200 108c 50       		.byte	0x50
 4201 108d 02       		.uleb128 0x2
 4202 108e 74       		.byte	0x74
 4203 108f 24       		.sleb128 36
 4204 1090 00       		.byte	0
 4205 1091 1A       		.uleb128 0x1a
 4206 1092 B2000000 		.4byte	.LVL207
 4207 1096 62050000 		.4byte	0x562
 4208 109a A5100000 		.4byte	0x10a5
 4209 109e 1B       		.uleb128 0x1b
 4210 109f 01       		.uleb128 0x1
 4211 10a0 50       		.byte	0x50
 4212 10a1 02       		.uleb128 0x2
 4213 10a2 74       		.byte	0x74
 4214 10a3 00       		.sleb128 0
 4215 10a4 00       		.byte	0
 4216 10a5 17       		.uleb128 0x17
 4217 10a6 B6000000 		.4byte	.LVL208
 4218 10aa BE160000 		.4byte	0x16be
 4219 10ae 1A       		.uleb128 0x1a
 4220 10af D2000000 		.4byte	.LVL209
 4221 10b3 62050000 		.4byte	0x562
 4222 10b7 C2100000 		.4byte	0x10c2
 4223 10bb 1B       		.uleb128 0x1b
 4224 10bc 01       		.uleb128 0x1
 4225 10bd 50       		.byte	0x50
 4226 10be 02       		.uleb128 0x2
 4227 10bf 74       		.byte	0x74
 4228 10c0 00       		.sleb128 0
 4229 10c1 00       		.byte	0
 4230 10c2 17       		.uleb128 0x17
 4231 10c3 D6000000 		.4byte	.LVL210
 4232 10c7 BE160000 		.4byte	0x16be
 4233 10cb 1A       		.uleb128 0x1a
 4234 10cc DE000000 		.4byte	.LVL211
 4235 10d0 62050000 		.4byte	0x562
 4236 10d4 DF100000 		.4byte	0x10df
 4237 10d8 1B       		.uleb128 0x1b
 4238 10d9 01       		.uleb128 0x1
 4239 10da 50       		.byte	0x50
 4240 10db 02       		.uleb128 0x2
 4241 10dc 74       		.byte	0x74
 4242 10dd 00       		.sleb128 0
 4243 10de 00       		.byte	0
 4244 10df 17       		.uleb128 0x17
 4245 10e0 E2000000 		.4byte	.LVL212
 4246 10e4 BE160000 		.4byte	0x16be
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 135


 4247 10e8 1D       		.uleb128 0x1d
 4248 10e9 E8000000 		.4byte	.LVL213
 4249 10ed 35040000 		.4byte	0x435
 4250 10f1 1B       		.uleb128 0x1b
 4251 10f2 01       		.uleb128 0x1
 4252 10f3 50       		.byte	0x50
 4253 10f4 02       		.uleb128 0x2
 4254 10f5 74       		.byte	0x74
 4255 10f6 00       		.sleb128 0
 4256 10f7 00       		.byte	0
 4257 10f8 00       		.byte	0
 4258 10f9 1F       		.uleb128 0x1f
 4259 10fa 62000000 		.4byte	.LASF106
 4260 10fe 01       		.byte	0x1
 4261 10ff 2407     		.2byte	0x724
 4262 1101 E1000000 		.4byte	0xe1
 4263 1105 00000000 		.4byte	.LFB13
 4264 1109 72000000 		.4byte	.LFE13-.LFB13
 4265 110d 01       		.uleb128 0x1
 4266 110e 9C       		.byte	0x9c
 4267 110f 10120000 		.4byte	0x1210
 4268 1113 15       		.uleb128 0x15
 4269 1114 2B020000 		.4byte	.LASF60
 4270 1118 01       		.byte	0x1
 4271 1119 2407     		.2byte	0x724
 4272 111b 31020000 		.4byte	0x231
 4273 111f D00B0000 		.4byte	.LLST62
 4274 1123 15       		.uleb128 0x15
 4275 1124 69020000 		.4byte	.LASF78
 4276 1128 01       		.byte	0x1
 4277 1129 2507     		.2byte	0x725
 4278 112b 5D050000 		.4byte	0x55d
 4279 112f 200C0000 		.4byte	.LLST63
 4280 1133 15       		.uleb128 0x15
 4281 1134 8E000000 		.4byte	.LASF97
 4282 1138 01       		.byte	0x1
 4283 1139 2607     		.2byte	0x726
 4284 113b E00A0000 		.4byte	0xae0
 4285 113f 5A0C0000 		.4byte	.LLST64
 4286 1143 16       		.uleb128 0x16
 4287 1144 B0070000 		.4byte	.LASF74
 4288 1148 01       		.byte	0x1
 4289 1149 2807     		.2byte	0x728
 4290 114b E1000000 		.4byte	0xe1
 4291 114f 01       		.uleb128 0x1
 4292 1150 50       		.byte	0x50
 4293 1151 21       		.uleb128 0x21
 4294 1152 CD010000 		.4byte	.LASF98
 4295 1156 01       		.byte	0x1
 4296 1157 2907     		.2byte	0x729
 4297 1159 EC000000 		.4byte	0xec
 4298 115d 19       		.uleb128 0x19
 4299 115e A8070000 		.4byte	.LASF73
 4300 1162 01       		.byte	0x1
 4301 1163 2A07     		.2byte	0x72a
 4302 1165 0C050000 		.4byte	0x50c
 4303 1169 9C0C0000 		.4byte	.LLST65
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 136


 4304 116d 22       		.uleb128 0x22
 4305 116e A0030000 		.4byte	0x3a0
 4306 1172 04000000 		.4byte	.LBB41
 4307 1176 14000000 		.4byte	.LBE41-.LBB41
 4308 117a 01       		.byte	0x1
 4309 117b 3F07     		.2byte	0x73f
 4310 117d 96110000 		.4byte	0x1196
 4311 1181 23       		.uleb128 0x23
 4312 1182 04000000 		.4byte	.LBB42
 4313 1186 14000000 		.4byte	.LBE42-.LBB42
 4314 118a 24       		.uleb128 0x24
 4315 118b B0030000 		.4byte	0x3b0
 4316 118f 24       		.uleb128 0x24
 4317 1190 BB030000 		.4byte	0x3bb
 4318 1194 00       		.byte	0
 4319 1195 00       		.byte	0
 4320 1196 1E       		.uleb128 0x1e
 4321 1197 18000000 		.4byte	.LBB43
 4322 119b 52000000 		.4byte	.LBE43-.LBB43
 4323 119f F5110000 		.4byte	0x11f5
 4324 11a3 19       		.uleb128 0x19
 4325 11a4 7D020000 		.4byte	.LASF47
 4326 11a8 01       		.byte	0x1
 4327 11a9 4107     		.2byte	0x741
 4328 11ab 38070000 		.4byte	0x738
 4329 11af EC0C0000 		.4byte	.LLST66
 4330 11b3 28       		.uleb128 0x28
 4331 11b4 30000000 		.4byte	.Ldebug_ranges0+0x30
 4332 11b8 19       		.uleb128 0x19
 4333 11b9 2D090000 		.4byte	.LASF50
 4334 11bd 01       		.byte	0x1
 4335 11be 4607     		.2byte	0x746
 4336 11c0 E50A0000 		.4byte	0xae5
 4337 11c4 240D0000 		.4byte	.LLST67
 4338 11c8 1A       		.uleb128 0x1a
 4339 11c9 2A000000 		.4byte	.LVL220
 4340 11cd 16050000 		.4byte	0x516
 4341 11d1 E3110000 		.4byte	0x11e3
 4342 11d5 1B       		.uleb128 0x1b
 4343 11d6 01       		.uleb128 0x1
 4344 11d7 50       		.byte	0x50
 4345 11d8 02       		.uleb128 0x2
 4346 11d9 77       		.byte	0x77
 4347 11da 00       		.sleb128 0
 4348 11db 1B       		.uleb128 0x1b
 4349 11dc 01       		.uleb128 0x1
 4350 11dd 51       		.byte	0x51
 4351 11de 03       		.uleb128 0x3
 4352 11df F3       		.byte	0xf3
 4353 11e0 01       		.uleb128 0x1
 4354 11e1 51       		.byte	0x51
 4355 11e2 00       		.byte	0
 4356 11e3 1D       		.uleb128 0x1d
 4357 11e4 40000000 		.4byte	.LVL222
 4358 11e8 5F160000 		.4byte	0x165f
 4359 11ec 1B       		.uleb128 0x1b
 4360 11ed 01       		.uleb128 0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 137


 4361 11ee 50       		.byte	0x50
 4362 11ef 02       		.uleb128 0x2
 4363 11f0 77       		.byte	0x77
 4364 11f1 10       		.sleb128 16
 4365 11f2 00       		.byte	0
 4366 11f3 00       		.byte	0
 4367 11f4 00       		.byte	0
 4368 11f5 26       		.uleb128 0x26
 4369 11f6 C7030000 		.4byte	0x3c7
 4370 11fa 6A000000 		.4byte	.LBB46
 4371 11fe 04000000 		.4byte	.LBE46-.LBB46
 4372 1202 01       		.byte	0x1
 4373 1203 7D07     		.2byte	0x77d
 4374 1205 27       		.uleb128 0x27
 4375 1206 D3030000 		.4byte	0x3d3
 4376 120a 4F0D0000 		.4byte	.LLST68
 4377 120e 00       		.byte	0
 4378 120f 00       		.byte	0
 4379 1210 1F       		.uleb128 0x1f
 4380 1211 F9070000 		.4byte	.LASF107
 4381 1215 01       		.byte	0x1
 4382 1216 8307     		.2byte	0x783
 4383 1218 E1000000 		.4byte	0xe1
 4384 121c 00000000 		.4byte	.LFB14
 4385 1220 30000000 		.4byte	.LFE14-.LFB14
 4386 1224 01       		.uleb128 0x1
 4387 1225 9C       		.byte	0x9c
 4388 1226 E5120000 		.4byte	0x12e5
 4389 122a 15       		.uleb128 0x15
 4390 122b 2B020000 		.4byte	.LASF60
 4391 122f 01       		.byte	0x1
 4392 1230 8307     		.2byte	0x783
 4393 1232 31020000 		.4byte	0x231
 4394 1236 620D0000 		.4byte	.LLST69
 4395 123a 15       		.uleb128 0x15
 4396 123b 69020000 		.4byte	.LASF78
 4397 123f 01       		.byte	0x1
 4398 1240 8407     		.2byte	0x784
 4399 1242 5D050000 		.4byte	0x55d
 4400 1246 990D0000 		.4byte	.LLST70
 4401 124a 19       		.uleb128 0x19
 4402 124b B0070000 		.4byte	.LASF74
 4403 124f 01       		.byte	0x1
 4404 1250 8607     		.2byte	0x786
 4405 1252 E1000000 		.4byte	0xe1
 4406 1256 D30D0000 		.4byte	.LLST71
 4407 125a 21       		.uleb128 0x21
 4408 125b CD010000 		.4byte	.LASF98
 4409 125f 01       		.byte	0x1
 4410 1260 8707     		.2byte	0x787
 4411 1262 EC000000 		.4byte	0xec
 4412 1266 19       		.uleb128 0x19
 4413 1267 1C060000 		.4byte	.LASF105
 4414 126b 01       		.byte	0x1
 4415 126c 8807     		.2byte	0x788
 4416 126e EA020000 		.4byte	0x2ea
 4417 1272 F20D0000 		.4byte	.LLST72
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 138


 4418 1276 19       		.uleb128 0x19
 4419 1277 A8070000 		.4byte	.LASF73
 4420 127b 01       		.byte	0x1
 4421 127c 8907     		.2byte	0x789
 4422 127e 0C050000 		.4byte	0x50c
 4423 1282 050E0000 		.4byte	.LLST73
 4424 1286 22       		.uleb128 0x22
 4425 1287 A0030000 		.4byte	0x3a0
 4426 128b 02000000 		.4byte	.LBB48
 4427 128f 14000000 		.4byte	.LBE48-.LBB48
 4428 1293 01       		.byte	0x1
 4429 1294 9F07     		.2byte	0x79f
 4430 1296 AF120000 		.4byte	0x12af
 4431 129a 23       		.uleb128 0x23
 4432 129b 02000000 		.4byte	.LBB49
 4433 129f 14000000 		.4byte	.LBE49-.LBB49
 4434 12a3 24       		.uleb128 0x24
 4435 12a4 B0030000 		.4byte	0x3b0
 4436 12a8 24       		.uleb128 0x24
 4437 12a9 BB030000 		.4byte	0x3bb
 4438 12ad 00       		.byte	0
 4439 12ae 00       		.byte	0
 4440 12af 22       		.uleb128 0x22
 4441 12b0 C7030000 		.4byte	0x3c7
 4442 12b4 2A000000 		.4byte	.LBB50
 4443 12b8 04000000 		.4byte	.LBE50-.LBB50
 4444 12bc 01       		.byte	0x1
 4445 12bd B407     		.2byte	0x7b4
 4446 12bf CD120000 		.4byte	0x12cd
 4447 12c3 27       		.uleb128 0x27
 4448 12c4 D3030000 		.4byte	0x3d3
 4449 12c8 3C0E0000 		.4byte	.LLST74
 4450 12cc 00       		.byte	0
 4451 12cd 1D       		.uleb128 0x1d
 4452 12ce 22000000 		.4byte	.LVL233
 4453 12d2 16050000 		.4byte	0x516
 4454 12d6 1B       		.uleb128 0x1b
 4455 12d7 01       		.uleb128 0x1
 4456 12d8 50       		.byte	0x50
 4457 12d9 02       		.uleb128 0x2
 4458 12da 74       		.byte	0x74
 4459 12db 00       		.sleb128 0
 4460 12dc 1B       		.uleb128 0x1b
 4461 12dd 01       		.uleb128 0x1
 4462 12de 51       		.byte	0x51
 4463 12df 03       		.uleb128 0x3
 4464 12e0 F3       		.byte	0xf3
 4465 12e1 01       		.uleb128 0x1
 4466 12e2 51       		.byte	0x51
 4467 12e3 00       		.byte	0
 4468 12e4 00       		.byte	0
 4469 12e5 1F       		.uleb128 0x1f
 4470 12e6 80070000 		.4byte	.LASF108
 4471 12ea 01       		.byte	0x1
 4472 12eb BA07     		.2byte	0x7ba
 4473 12ed EC000000 		.4byte	0xec
 4474 12f1 00000000 		.4byte	.LFB15
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 139


 4475 12f5 12000000 		.4byte	.LFE15-.LFB15
 4476 12f9 01       		.uleb128 0x1
 4477 12fa 9C       		.byte	0x9c
 4478 12fb 30130000 		.4byte	0x1330
 4479 12ff 15       		.uleb128 0x15
 4480 1300 2B020000 		.4byte	.LASF60
 4481 1304 01       		.byte	0x1
 4482 1305 BA07     		.2byte	0x7ba
 4483 1307 30130000 		.4byte	0x1330
 4484 130b 4F0E0000 		.4byte	.LLST75
 4485 130f 16       		.uleb128 0x16
 4486 1310 82010000 		.4byte	.LASF109
 4487 1314 01       		.byte	0x1
 4488 1315 BC07     		.2byte	0x7bc
 4489 1317 EC000000 		.4byte	0xec
 4490 131b 01       		.uleb128 0x1
 4491 131c 54       		.byte	0x54
 4492 131d 17       		.uleb128 0x17
 4493 131e 08000000 		.4byte	.LVL239
 4494 1322 40160000 		.4byte	0x1640
 4495 1326 17       		.uleb128 0x17
 4496 1327 0E000000 		.4byte	.LVL241
 4497 132b 4B160000 		.4byte	0x164b
 4498 132f 00       		.byte	0
 4499 1330 07       		.uleb128 0x7
 4500 1331 31020000 		.4byte	0x231
 4501 1335 1F       		.uleb128 0x1f
 4502 1336 2B010000 		.4byte	.LASF110
 4503 133a 01       		.byte	0x1
 4504 133b CA07     		.2byte	0x7ca
 4505 133d EC000000 		.4byte	0xec
 4506 1341 00000000 		.4byte	.LFB16
 4507 1345 16000000 		.4byte	.LFE16-.LFB16
 4508 1349 01       		.uleb128 0x1
 4509 134a 9C       		.byte	0x9c
 4510 134b 90130000 		.4byte	0x1390
 4511 134f 15       		.uleb128 0x15
 4512 1350 2B020000 		.4byte	.LASF60
 4513 1354 01       		.byte	0x1
 4514 1355 CA07     		.2byte	0x7ca
 4515 1357 30130000 		.4byte	0x1330
 4516 135b 7B0E0000 		.4byte	.LLST76
 4517 135f 16       		.uleb128 0x16
 4518 1360 82010000 		.4byte	.LASF109
 4519 1364 01       		.byte	0x1
 4520 1365 CC07     		.2byte	0x7cc
 4521 1367 EC000000 		.4byte	0xec
 4522 136b 01       		.uleb128 0x1
 4523 136c 54       		.byte	0x54
 4524 136d 19       		.uleb128 0x19
 4525 136e A8070000 		.4byte	.LASF73
 4526 1372 01       		.byte	0x1
 4527 1373 CD07     		.2byte	0x7cd
 4528 1375 0C050000 		.4byte	0x50c
 4529 1379 A70E0000 		.4byte	.LLST77
 4530 137d 17       		.uleb128 0x17
 4531 137e 08000000 		.4byte	.LVL244
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 140


 4532 1382 40160000 		.4byte	0x1640
 4533 1386 17       		.uleb128 0x17
 4534 1387 12000000 		.4byte	.LVL247
 4535 138b 4B160000 		.4byte	0x164b
 4536 138f 00       		.byte	0
 4537 1390 1F       		.uleb128 0x1f
 4538 1391 08050000 		.4byte	.LASF111
 4539 1395 01       		.byte	0x1
 4540 1396 DB07     		.2byte	0x7db
 4541 1398 EC000000 		.4byte	0xec
 4542 139c 00000000 		.4byte	.LFB17
 4543 13a0 04000000 		.4byte	.LFE17-.LFB17
 4544 13a4 01       		.uleb128 0x1
 4545 13a5 9C       		.byte	0x9c
 4546 13a6 D9130000 		.4byte	0x13d9
 4547 13aa 15       		.uleb128 0x15
 4548 13ab 2B020000 		.4byte	.LASF60
 4549 13af 01       		.byte	0x1
 4550 13b0 DB07     		.2byte	0x7db
 4551 13b2 30130000 		.4byte	0x1330
 4552 13b6 D30E0000 		.4byte	.LLST78
 4553 13ba 16       		.uleb128 0x16
 4554 13bb 82010000 		.4byte	.LASF109
 4555 13bf 01       		.byte	0x1
 4556 13c0 DD07     		.2byte	0x7dd
 4557 13c2 EC000000 		.4byte	0xec
 4558 13c6 01       		.uleb128 0x1
 4559 13c7 50       		.byte	0x50
 4560 13c8 19       		.uleb128 0x19
 4561 13c9 A8070000 		.4byte	.LASF73
 4562 13cd 01       		.byte	0x1
 4563 13ce DE07     		.2byte	0x7de
 4564 13d0 0C050000 		.4byte	0x50c
 4565 13d4 F40E0000 		.4byte	.LLST79
 4566 13d8 00       		.byte	0
 4567 13d9 1F       		.uleb128 0x1f
 4568 13da CF080000 		.4byte	.LASF112
 4569 13de 01       		.byte	0x1
 4570 13df 4009     		.2byte	0x940
 4571 13e1 E1000000 		.4byte	0xe1
 4572 13e5 00000000 		.4byte	.LFB23
 4573 13e9 0C000000 		.4byte	.LFE23-.LFB23
 4574 13ed 01       		.uleb128 0x1
 4575 13ee 9C       		.byte	0x9c
 4576 13ef 22140000 		.4byte	0x1422
 4577 13f3 15       		.uleb128 0x15
 4578 13f4 2B020000 		.4byte	.LASF60
 4579 13f8 01       		.byte	0x1
 4580 13f9 4009     		.2byte	0x940
 4581 13fb 30130000 		.4byte	0x1330
 4582 13ff 150F0000 		.4byte	.LLST80
 4583 1403 16       		.uleb128 0x16
 4584 1404 B0070000 		.4byte	.LASF74
 4585 1408 01       		.byte	0x1
 4586 1409 4209     		.2byte	0x942
 4587 140b E1000000 		.4byte	0xe1
 4588 140f 01       		.uleb128 0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 141


 4589 1410 50       		.byte	0x50
 4590 1411 19       		.uleb128 0x19
 4591 1412 A8070000 		.4byte	.LASF73
 4592 1416 01       		.byte	0x1
 4593 1417 4309     		.2byte	0x943
 4594 1419 0C050000 		.4byte	0x50c
 4595 141d 4F0F0000 		.4byte	.LLST81
 4596 1421 00       		.byte	0
 4597 1422 1F       		.uleb128 0x1f
 4598 1423 67070000 		.4byte	.LASF113
 4599 1427 01       		.byte	0x1
 4600 1428 6909     		.2byte	0x969
 4601 142a E1000000 		.4byte	0xe1
 4602 142e 00000000 		.4byte	.LFB25
 4603 1432 10000000 		.4byte	.LFE25-.LFB25
 4604 1436 01       		.uleb128 0x1
 4605 1437 9C       		.byte	0x9c
 4606 1438 6B140000 		.4byte	0x146b
 4607 143c 15       		.uleb128 0x15
 4608 143d 2B020000 		.4byte	.LASF60
 4609 1441 01       		.byte	0x1
 4610 1442 6909     		.2byte	0x969
 4611 1444 30130000 		.4byte	0x1330
 4612 1448 890F0000 		.4byte	.LLST82
 4613 144c 16       		.uleb128 0x16
 4614 144d B0070000 		.4byte	.LASF74
 4615 1451 01       		.byte	0x1
 4616 1452 6B09     		.2byte	0x96b
 4617 1454 E1000000 		.4byte	0xe1
 4618 1458 01       		.uleb128 0x1
 4619 1459 50       		.byte	0x50
 4620 145a 19       		.uleb128 0x19
 4621 145b A8070000 		.4byte	.LASF73
 4622 145f 01       		.byte	0x1
 4623 1460 6C09     		.2byte	0x96c
 4624 1462 0C050000 		.4byte	0x50c
 4625 1466 C30F0000 		.4byte	.LLST83
 4626 146a 00       		.byte	0
 4627 146b 29       		.uleb128 0x29
 4628 146c D0050000 		.4byte	.LASF116
 4629 1470 01       		.byte	0x1
 4630 1471 9E0A     		.2byte	0xa9e
 4631 1473 00000000 		.4byte	.LFB26
 4632 1477 28000000 		.4byte	.LFE26-.LFB26
 4633 147b 01       		.uleb128 0x1
 4634 147c 9C       		.byte	0x9c
 4635 147d AD140000 		.4byte	0x14ad
 4636 1481 20       		.uleb128 0x20
 4637 1482 2B020000 		.4byte	.LASF60
 4638 1486 01       		.byte	0x1
 4639 1487 9E0A     		.2byte	0xa9e
 4640 1489 31020000 		.4byte	0x231
 4641 148d 01       		.uleb128 0x1
 4642 148e 50       		.byte	0x50
 4643 148f 20       		.uleb128 0x20
 4644 1490 76030000 		.4byte	.LASF65
 4645 1494 01       		.byte	0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 142


 4646 1495 9F0A     		.2byte	0xa9f
 4647 1497 AE000000 		.4byte	0xae
 4648 149b 01       		.uleb128 0x1
 4649 149c 51       		.byte	0x51
 4650 149d 2A       		.uleb128 0x2a
 4651 149e 757800   		.ascii	"ux\000"
 4652 14a1 01       		.byte	0x1
 4653 14a2 A10A     		.2byte	0xaa1
 4654 14a4 EC000000 		.4byte	0xec
 4655 14a8 FD0F0000 		.4byte	.LLST84
 4656 14ac 00       		.byte	0
 4657 14ad 1F       		.uleb128 0x1f
 4658 14ae AB060000 		.4byte	.LASF114
 4659 14b2 01       		.byte	0x1
 4660 14b3 BC0A     		.2byte	0xabc
 4661 14b5 AE000000 		.4byte	0xae
 4662 14b9 00000000 		.4byte	.LFB27
 4663 14bd 28000000 		.4byte	.LFE27-.LFB27
 4664 14c1 01       		.uleb128 0x1
 4665 14c2 9C       		.byte	0x9c
 4666 14c3 F7140000 		.4byte	0x14f7
 4667 14c7 15       		.uleb128 0x15
 4668 14c8 2B020000 		.4byte	.LASF60
 4669 14cc 01       		.byte	0x1
 4670 14cd BC0A     		.2byte	0xabc
 4671 14cf 31020000 		.4byte	0x231
 4672 14d3 27100000 		.4byte	.LLST85
 4673 14d7 2A       		.uleb128 0x2a
 4674 14d8 757800   		.ascii	"ux\000"
 4675 14db 01       		.byte	0x1
 4676 14dc BE0A     		.2byte	0xabe
 4677 14de EC000000 		.4byte	0xec
 4678 14e2 61100000 		.4byte	.LLST86
 4679 14e6 19       		.uleb128 0x19
 4680 14e7 CA060000 		.4byte	.LASF115
 4681 14eb 01       		.byte	0x1
 4682 14ec BF0A     		.2byte	0xabf
 4683 14ee AE000000 		.4byte	0xae
 4684 14f2 80100000 		.4byte	.LLST87
 4685 14f6 00       		.byte	0
 4686 14f7 29       		.uleb128 0x29
 4687 14f8 B7010000 		.4byte	.LASF117
 4688 14fc 01       		.byte	0x1
 4689 14fd D90A     		.2byte	0xad9
 4690 14ff 00000000 		.4byte	.LFB28
 4691 1503 2C000000 		.4byte	.LFE28-.LFB28
 4692 1507 01       		.uleb128 0x1
 4693 1508 9C       		.byte	0x9c
 4694 1509 2B150000 		.4byte	0x152b
 4695 150d 20       		.uleb128 0x20
 4696 150e 2B020000 		.4byte	.LASF60
 4697 1512 01       		.byte	0x1
 4698 1513 D90A     		.2byte	0xad9
 4699 1515 31020000 		.4byte	0x231
 4700 1519 01       		.uleb128 0x1
 4701 151a 50       		.byte	0x50
 4702 151b 2A       		.uleb128 0x2a
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 143


 4703 151c 757800   		.ascii	"ux\000"
 4704 151f 01       		.byte	0x1
 4705 1520 DB0A     		.2byte	0xadb
 4706 1522 EC000000 		.4byte	0xec
 4707 1526 B6100000 		.4byte	.LLST88
 4708 152a 00       		.byte	0
 4709 152b 29       		.uleb128 0x29
 4710 152c 9F010000 		.4byte	.LASF118
 4711 1530 01       		.byte	0x1
 4712 1531 E707     		.2byte	0x7e7
 4713 1533 00000000 		.4byte	.LFB18
 4714 1537 10000000 		.4byte	.LFE18-.LFB18
 4715 153b 01       		.uleb128 0x1
 4716 153c 9C       		.byte	0x9c
 4717 153d 86150000 		.4byte	0x1586
 4718 1541 15       		.uleb128 0x15
 4719 1542 2B020000 		.4byte	.LASF60
 4720 1546 01       		.byte	0x1
 4721 1547 E707     		.2byte	0x7e7
 4722 1549 31020000 		.4byte	0x231
 4723 154d E0100000 		.4byte	.LLST89
 4724 1551 19       		.uleb128 0x19
 4725 1552 A8070000 		.4byte	.LASF73
 4726 1556 01       		.byte	0x1
 4727 1557 E907     		.2byte	0x7e9
 4728 1559 0C050000 		.4byte	0x50c
 4729 155d FE100000 		.4byte	.LLST90
 4730 1561 1A       		.uleb128 0x1a
 4731 1562 08000000 		.4byte	.LVL276
 4732 1566 F7140000 		.4byte	0x14f7
 4733 156a 75150000 		.4byte	0x1575
 4734 156e 1B       		.uleb128 0x1b
 4735 156f 01       		.uleb128 0x1
 4736 1570 50       		.byte	0x50
 4737 1571 02       		.uleb128 0x2
 4738 1572 74       		.byte	0x74
 4739 1573 00       		.sleb128 0
 4740 1574 00       		.byte	0
 4741 1575 1D       		.uleb128 0x1d
 4742 1576 0E000000 		.4byte	.LVL277
 4743 157a CA160000 		.4byte	0x16ca
 4744 157e 1B       		.uleb128 0x1b
 4745 157f 01       		.uleb128 0x1
 4746 1580 50       		.byte	0x50
 4747 1581 02       		.uleb128 0x2
 4748 1582 74       		.byte	0x74
 4749 1583 00       		.sleb128 0
 4750 1584 00       		.byte	0
 4751 1585 00       		.byte	0
 4752 1586 29       		.uleb128 0x29
 4753 1587 DC060000 		.4byte	.LASF119
 4754 158b 01       		.byte	0x1
 4755 158c F80A     		.2byte	0xaf8
 4756 158e 00000000 		.4byte	.LFB29
 4757 1592 4C000000 		.4byte	.LFE29-.LFB29
 4758 1596 01       		.uleb128 0x1
 4759 1597 9C       		.byte	0x9c
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 144


 4760 1598 1F160000 		.4byte	0x161f
 4761 159c 15       		.uleb128 0x15
 4762 159d 2B020000 		.4byte	.LASF60
 4763 15a1 01       		.byte	0x1
 4764 15a2 F80A     		.2byte	0xaf8
 4765 15a4 31020000 		.4byte	0x231
 4766 15a8 1C110000 		.4byte	.LLST91
 4767 15ac 15       		.uleb128 0x15
 4768 15ad 91080000 		.4byte	.LASF91
 4769 15b1 01       		.byte	0x1
 4770 15b2 F90A     		.2byte	0xaf9
 4771 15b4 F7000000 		.4byte	0xf7
 4772 15b8 3A110000 		.4byte	.LLST92
 4773 15bc 15       		.uleb128 0x15
 4774 15bd 05010000 		.4byte	.LASF120
 4775 15c1 01       		.byte	0x1
 4776 15c2 FA0A     		.2byte	0xafa
 4777 15c4 11050000 		.4byte	0x511
 4778 15c8 58110000 		.4byte	.LLST93
 4779 15cc 19       		.uleb128 0x19
 4780 15cd A8070000 		.4byte	.LASF73
 4781 15d1 01       		.byte	0x1
 4782 15d2 FC0A     		.2byte	0xafc
 4783 15d4 0C050000 		.4byte	0x50c
 4784 15d8 76110000 		.4byte	.LLST94
 4785 15dc 17       		.uleb128 0x17
 4786 15dd 0C000000 		.4byte	.LVL280
 4787 15e1 40160000 		.4byte	0x1640
 4788 15e5 17       		.uleb128 0x17
 4789 15e6 34000000 		.4byte	.LVL281
 4790 15ea 4B160000 		.4byte	0x164b
 4791 15ee 1A       		.uleb128 0x1a
 4792 15ef 44000000 		.4byte	.LVL282
 4793 15f3 D5160000 		.4byte	0x16d5
 4794 15f7 0E160000 		.4byte	0x160e
 4795 15fb 1B       		.uleb128 0x1b
 4796 15fc 01       		.uleb128 0x1
 4797 15fd 50       		.byte	0x50
 4798 15fe 02       		.uleb128 0x2
 4799 15ff 74       		.byte	0x74
 4800 1600 24       		.sleb128 36
 4801 1601 1B       		.uleb128 0x1b
 4802 1602 01       		.uleb128 0x1
 4803 1603 51       		.byte	0x51
 4804 1604 02       		.uleb128 0x2
 4805 1605 75       		.byte	0x75
 4806 1606 00       		.sleb128 0
 4807 1607 1B       		.uleb128 0x1b
 4808 1608 01       		.uleb128 0x1
 4809 1609 52       		.byte	0x52
 4810 160a 02       		.uleb128 0x2
 4811 160b 76       		.byte	0x76
 4812 160c 00       		.sleb128 0
 4813 160d 00       		.byte	0
 4814 160e 1D       		.uleb128 0x1d
 4815 160f 4A000000 		.4byte	.LVL283
 4816 1613 62050000 		.4byte	0x562
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 145


 4817 1617 1B       		.uleb128 0x1b
 4818 1618 01       		.uleb128 0x1
 4819 1619 50       		.byte	0x50
 4820 161a 02       		.uleb128 0x2
 4821 161b 74       		.byte	0x74
 4822 161c 00       		.sleb128 0
 4823 161d 00       		.byte	0
 4824 161e 00       		.byte	0
 4825 161f 2B       		.uleb128 0x2b
 4826 1620 95030000 		.4byte	0x395
 4827 1624 2F160000 		.4byte	0x162f
 4828 1628 2C       		.uleb128 0x2c
 4829 1629 9E000000 		.4byte	0x9e
 4830 162d 09       		.byte	0x9
 4831 162e 00       		.byte	0
 4832 162f 2D       		.uleb128 0x2d
 4833 1630 E2040000 		.4byte	.LASF141
 4834 1634 01       		.byte	0x1
 4835 1635 A2       		.byte	0xa2
 4836 1636 1F160000 		.4byte	0x161f
 4837 163a 05       		.uleb128 0x5
 4838 163b 03       		.byte	0x3
 4839 163c 00000000 		.4byte	xQueueRegistry
 4840 1640 2E       		.uleb128 0x2e
 4841 1641 59010000 		.4byte	.LASF121
 4842 1645 59010000 		.4byte	.LASF121
 4843 1649 02       		.byte	0x2
 4844 164a 62       		.byte	0x62
 4845 164b 2E       		.uleb128 0x2e
 4846 164c 10000000 		.4byte	.LASF122
 4847 1650 10000000 		.4byte	.LASF122
 4848 1654 02       		.byte	0x2
 4849 1655 63       		.byte	0x63
 4850 1656 2F       		.uleb128 0x2f
 4851 1657 08090000 		.4byte	.LASF142
 4852 165b 08090000 		.4byte	.LASF142
 4853 165f 30       		.uleb128 0x30
 4854 1660 71040000 		.4byte	.LASF123
 4855 1664 71040000 		.4byte	.LASF123
 4856 1668 07       		.byte	0x7
 4857 1669 690B     		.2byte	0xb69
 4858 166b 30       		.uleb128 0x30
 4859 166c C1070000 		.4byte	.LASF124
 4860 1670 C1070000 		.4byte	.LASF124
 4861 1674 07       		.byte	0x7
 4862 1675 860B     		.2byte	0xb86
 4863 1677 30       		.uleb128 0x30
 4864 1678 30080000 		.4byte	.LASF125
 4865 167c 30080000 		.4byte	.LASF125
 4866 1680 06       		.byte	0x6
 4867 1681 5B01     		.2byte	0x15b
 4868 1683 2E       		.uleb128 0x2e
 4869 1684 9A020000 		.4byte	.LASF126
 4870 1688 9A020000 		.4byte	.LASF126
 4871 168c 09       		.byte	0x9
 4872 168d B0       		.byte	0xb0
 4873 168e 30       		.uleb128 0x30
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 146


 4874 168f FF050000 		.4byte	.LASF127
 4875 1693 FF050000 		.4byte	.LASF127
 4876 1697 07       		.byte	0x7
 4877 1698 D50B     		.2byte	0xbd5
 4878 169a 30       		.uleb128 0x30
 4879 169b A7020000 		.4byte	.LASF128
 4880 169f A7020000 		.4byte	.LASF128
 4881 16a3 07       		.byte	0x7
 4882 16a4 3B05     		.2byte	0x53b
 4883 16a6 30       		.uleb128 0x30
 4884 16a7 48070000 		.4byte	.LASF129
 4885 16ab 48070000 		.4byte	.LASF129
 4886 16af 07       		.byte	0x7
 4887 16b0 E80A     		.2byte	0xae8
 4888 16b2 30       		.uleb128 0x30
 4889 16b3 36040000 		.4byte	.LASF130
 4890 16b7 36040000 		.4byte	.LASF130
 4891 16bb 07       		.byte	0x7
 4892 16bc 3C0B     		.2byte	0xb3c
 4893 16be 30       		.uleb128 0x30
 4894 16bf 2B070000 		.4byte	.LASF131
 4895 16c3 2B070000 		.4byte	.LASF131
 4896 16c7 07       		.byte	0x7
 4897 16c8 7305     		.2byte	0x573
 4898 16ca 2E       		.uleb128 0x2e
 4899 16cb 5D070000 		.4byte	.LASF132
 4900 16cf 5D070000 		.4byte	.LASF132
 4901 16d3 09       		.byte	0x9
 4902 16d4 B1       		.byte	0xb1
 4903 16d5 30       		.uleb128 0x30
 4904 16d6 35050000 		.4byte	.LASF133
 4905 16da 35050000 		.4byte	.LASF133
 4906 16de 07       		.byte	0x7
 4907 16df 4D0B     		.2byte	0xb4d
 4908 16e1 00       		.byte	0
 4909              		.section	.debug_abbrev,"",%progbits
 4910              	.Ldebug_abbrev0:
 4911 0000 01       		.uleb128 0x1
 4912 0001 11       		.uleb128 0x11
 4913 0002 01       		.byte	0x1
 4914 0003 25       		.uleb128 0x25
 4915 0004 0E       		.uleb128 0xe
 4916 0005 13       		.uleb128 0x13
 4917 0006 0B       		.uleb128 0xb
 4918 0007 03       		.uleb128 0x3
 4919 0008 0E       		.uleb128 0xe
 4920 0009 1B       		.uleb128 0x1b
 4921 000a 0E       		.uleb128 0xe
 4922 000b 55       		.uleb128 0x55
 4923 000c 17       		.uleb128 0x17
 4924 000d 11       		.uleb128 0x11
 4925 000e 01       		.uleb128 0x1
 4926 000f 10       		.uleb128 0x10
 4927 0010 17       		.uleb128 0x17
 4928 0011 00       		.byte	0
 4929 0012 00       		.byte	0
 4930 0013 02       		.uleb128 0x2
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 147


 4931 0014 16       		.uleb128 0x16
 4932 0015 00       		.byte	0
 4933 0016 03       		.uleb128 0x3
 4934 0017 0E       		.uleb128 0xe
 4935 0018 3A       		.uleb128 0x3a
 4936 0019 0B       		.uleb128 0xb
 4937 001a 3B       		.uleb128 0x3b
 4938 001b 0B       		.uleb128 0xb
 4939 001c 49       		.uleb128 0x49
 4940 001d 13       		.uleb128 0x13
 4941 001e 00       		.byte	0
 4942 001f 00       		.byte	0
 4943 0020 03       		.uleb128 0x3
 4944 0021 24       		.uleb128 0x24
 4945 0022 00       		.byte	0
 4946 0023 0B       		.uleb128 0xb
 4947 0024 0B       		.uleb128 0xb
 4948 0025 3E       		.uleb128 0x3e
 4949 0026 0B       		.uleb128 0xb
 4950 0027 03       		.uleb128 0x3
 4951 0028 0E       		.uleb128 0xe
 4952 0029 00       		.byte	0
 4953 002a 00       		.byte	0
 4954 002b 04       		.uleb128 0x4
 4955 002c 24       		.uleb128 0x24
 4956 002d 00       		.byte	0
 4957 002e 0B       		.uleb128 0xb
 4958 002f 0B       		.uleb128 0xb
 4959 0030 3E       		.uleb128 0x3e
 4960 0031 0B       		.uleb128 0xb
 4961 0032 03       		.uleb128 0x3
 4962 0033 08       		.uleb128 0x8
 4963 0034 00       		.byte	0
 4964 0035 00       		.byte	0
 4965 0036 05       		.uleb128 0x5
 4966 0037 0F       		.uleb128 0xf
 4967 0038 00       		.byte	0
 4968 0039 0B       		.uleb128 0xb
 4969 003a 0B       		.uleb128 0xb
 4970 003b 00       		.byte	0
 4971 003c 00       		.byte	0
 4972 003d 06       		.uleb128 0x6
 4973 003e 0F       		.uleb128 0xf
 4974 003f 00       		.byte	0
 4975 0040 0B       		.uleb128 0xb
 4976 0041 0B       		.uleb128 0xb
 4977 0042 49       		.uleb128 0x49
 4978 0043 13       		.uleb128 0x13
 4979 0044 00       		.byte	0
 4980 0045 00       		.byte	0
 4981 0046 07       		.uleb128 0x7
 4982 0047 26       		.uleb128 0x26
 4983 0048 00       		.byte	0
 4984 0049 49       		.uleb128 0x49
 4985 004a 13       		.uleb128 0x13
 4986 004b 00       		.byte	0
 4987 004c 00       		.byte	0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 148


 4988 004d 08       		.uleb128 0x8
 4989 004e 26       		.uleb128 0x26
 4990 004f 00       		.byte	0
 4991 0050 00       		.byte	0
 4992 0051 00       		.byte	0
 4993 0052 09       		.uleb128 0x9
 4994 0053 13       		.uleb128 0x13
 4995 0054 01       		.byte	0x1
 4996 0055 03       		.uleb128 0x3
 4997 0056 0E       		.uleb128 0xe
 4998 0057 0B       		.uleb128 0xb
 4999 0058 0B       		.uleb128 0xb
 5000 0059 3A       		.uleb128 0x3a
 5001 005a 0B       		.uleb128 0xb
 5002 005b 3B       		.uleb128 0x3b
 5003 005c 0B       		.uleb128 0xb
 5004 005d 01       		.uleb128 0x1
 5005 005e 13       		.uleb128 0x13
 5006 005f 00       		.byte	0
 5007 0060 00       		.byte	0
 5008 0061 0A       		.uleb128 0xa
 5009 0062 0D       		.uleb128 0xd
 5010 0063 00       		.byte	0
 5011 0064 03       		.uleb128 0x3
 5012 0065 0E       		.uleb128 0xe
 5013 0066 3A       		.uleb128 0x3a
 5014 0067 0B       		.uleb128 0xb
 5015 0068 3B       		.uleb128 0x3b
 5016 0069 0B       		.uleb128 0xb
 5017 006a 49       		.uleb128 0x49
 5018 006b 13       		.uleb128 0x13
 5019 006c 38       		.uleb128 0x38
 5020 006d 0B       		.uleb128 0xb
 5021 006e 00       		.byte	0
 5022 006f 00       		.byte	0
 5023 0070 0B       		.uleb128 0xb
 5024 0071 35       		.uleb128 0x35
 5025 0072 00       		.byte	0
 5026 0073 49       		.uleb128 0x49
 5027 0074 13       		.uleb128 0x13
 5028 0075 00       		.byte	0
 5029 0076 00       		.byte	0
 5030 0077 0C       		.uleb128 0xc
 5031 0078 13       		.uleb128 0x13
 5032 0079 00       		.byte	0
 5033 007a 03       		.uleb128 0x3
 5034 007b 0E       		.uleb128 0xe
 5035 007c 3C       		.uleb128 0x3c
 5036 007d 19       		.uleb128 0x19
 5037 007e 00       		.byte	0
 5038 007f 00       		.byte	0
 5039 0080 0D       		.uleb128 0xd
 5040 0081 0D       		.uleb128 0xd
 5041 0082 00       		.byte	0
 5042 0083 03       		.uleb128 0x3
 5043 0084 08       		.uleb128 0x8
 5044 0085 3A       		.uleb128 0x3a
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 149


 5045 0086 0B       		.uleb128 0xb
 5046 0087 3B       		.uleb128 0x3b
 5047 0088 0B       		.uleb128 0xb
 5048 0089 49       		.uleb128 0x49
 5049 008a 13       		.uleb128 0x13
 5050 008b 38       		.uleb128 0x38
 5051 008c 0B       		.uleb128 0xb
 5052 008d 00       		.byte	0
 5053 008e 00       		.byte	0
 5054 008f 0E       		.uleb128 0xe
 5055 0090 17       		.uleb128 0x17
 5056 0091 01       		.byte	0x1
 5057 0092 0B       		.uleb128 0xb
 5058 0093 0B       		.uleb128 0xb
 5059 0094 3A       		.uleb128 0x3a
 5060 0095 0B       		.uleb128 0xb
 5061 0096 3B       		.uleb128 0x3b
 5062 0097 0B       		.uleb128 0xb
 5063 0098 01       		.uleb128 0x1
 5064 0099 13       		.uleb128 0x13
 5065 009a 00       		.byte	0
 5066 009b 00       		.byte	0
 5067 009c 0F       		.uleb128 0xf
 5068 009d 0D       		.uleb128 0xd
 5069 009e 00       		.byte	0
 5070 009f 03       		.uleb128 0x3
 5071 00a0 0E       		.uleb128 0xe
 5072 00a1 3A       		.uleb128 0x3a
 5073 00a2 0B       		.uleb128 0xb
 5074 00a3 3B       		.uleb128 0x3b
 5075 00a4 0B       		.uleb128 0xb
 5076 00a5 49       		.uleb128 0x49
 5077 00a6 13       		.uleb128 0x13
 5078 00a7 00       		.byte	0
 5079 00a8 00       		.byte	0
 5080 00a9 10       		.uleb128 0x10
 5081 00aa 2E       		.uleb128 0x2e
 5082 00ab 01       		.byte	0x1
 5083 00ac 03       		.uleb128 0x3
 5084 00ad 0E       		.uleb128 0xe
 5085 00ae 3A       		.uleb128 0x3a
 5086 00af 0B       		.uleb128 0xb
 5087 00b0 3B       		.uleb128 0x3b
 5088 00b1 0B       		.uleb128 0xb
 5089 00b2 27       		.uleb128 0x27
 5090 00b3 19       		.uleb128 0x19
 5091 00b4 49       		.uleb128 0x49
 5092 00b5 13       		.uleb128 0x13
 5093 00b6 20       		.uleb128 0x20
 5094 00b7 0B       		.uleb128 0xb
 5095 00b8 01       		.uleb128 0x1
 5096 00b9 13       		.uleb128 0x13
 5097 00ba 00       		.byte	0
 5098 00bb 00       		.byte	0
 5099 00bc 11       		.uleb128 0x11
 5100 00bd 34       		.uleb128 0x34
 5101 00be 00       		.byte	0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 150


 5102 00bf 03       		.uleb128 0x3
 5103 00c0 0E       		.uleb128 0xe
 5104 00c1 3A       		.uleb128 0x3a
 5105 00c2 0B       		.uleb128 0xb
 5106 00c3 3B       		.uleb128 0x3b
 5107 00c4 0B       		.uleb128 0xb
 5108 00c5 49       		.uleb128 0x49
 5109 00c6 13       		.uleb128 0x13
 5110 00c7 00       		.byte	0
 5111 00c8 00       		.byte	0
 5112 00c9 12       		.uleb128 0x12
 5113 00ca 2E       		.uleb128 0x2e
 5114 00cb 01       		.byte	0x1
 5115 00cc 03       		.uleb128 0x3
 5116 00cd 0E       		.uleb128 0xe
 5117 00ce 3A       		.uleb128 0x3a
 5118 00cf 0B       		.uleb128 0xb
 5119 00d0 3B       		.uleb128 0x3b
 5120 00d1 0B       		.uleb128 0xb
 5121 00d2 27       		.uleb128 0x27
 5122 00d3 19       		.uleb128 0x19
 5123 00d4 20       		.uleb128 0x20
 5124 00d5 0B       		.uleb128 0xb
 5125 00d6 01       		.uleb128 0x1
 5126 00d7 13       		.uleb128 0x13
 5127 00d8 00       		.byte	0
 5128 00d9 00       		.byte	0
 5129 00da 13       		.uleb128 0x13
 5130 00db 05       		.uleb128 0x5
 5131 00dc 00       		.byte	0
 5132 00dd 03       		.uleb128 0x3
 5133 00de 0E       		.uleb128 0xe
 5134 00df 3A       		.uleb128 0x3a
 5135 00e0 0B       		.uleb128 0xb
 5136 00e1 3B       		.uleb128 0x3b
 5137 00e2 0B       		.uleb128 0xb
 5138 00e3 49       		.uleb128 0x49
 5139 00e4 13       		.uleb128 0x13
 5140 00e5 00       		.byte	0
 5141 00e6 00       		.byte	0
 5142 00e7 14       		.uleb128 0x14
 5143 00e8 2E       		.uleb128 0x2e
 5144 00e9 01       		.byte	0x1
 5145 00ea 03       		.uleb128 0x3
 5146 00eb 0E       		.uleb128 0xe
 5147 00ec 3A       		.uleb128 0x3a
 5148 00ed 0B       		.uleb128 0xb
 5149 00ee 3B       		.uleb128 0x3b
 5150 00ef 05       		.uleb128 0x5
 5151 00f0 27       		.uleb128 0x27
 5152 00f1 19       		.uleb128 0x19
 5153 00f2 49       		.uleb128 0x49
 5154 00f3 13       		.uleb128 0x13
 5155 00f4 11       		.uleb128 0x11
 5156 00f5 01       		.uleb128 0x1
 5157 00f6 12       		.uleb128 0x12
 5158 00f7 06       		.uleb128 0x6
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 151


 5159 00f8 40       		.uleb128 0x40
 5160 00f9 18       		.uleb128 0x18
 5161 00fa 9742     		.uleb128 0x2117
 5162 00fc 19       		.uleb128 0x19
 5163 00fd 01       		.uleb128 0x1
 5164 00fe 13       		.uleb128 0x13
 5165 00ff 00       		.byte	0
 5166 0100 00       		.byte	0
 5167 0101 15       		.uleb128 0x15
 5168 0102 05       		.uleb128 0x5
 5169 0103 00       		.byte	0
 5170 0104 03       		.uleb128 0x3
 5171 0105 0E       		.uleb128 0xe
 5172 0106 3A       		.uleb128 0x3a
 5173 0107 0B       		.uleb128 0xb
 5174 0108 3B       		.uleb128 0x3b
 5175 0109 05       		.uleb128 0x5
 5176 010a 49       		.uleb128 0x49
 5177 010b 13       		.uleb128 0x13
 5178 010c 02       		.uleb128 0x2
 5179 010d 17       		.uleb128 0x17
 5180 010e 00       		.byte	0
 5181 010f 00       		.byte	0
 5182 0110 16       		.uleb128 0x16
 5183 0111 34       		.uleb128 0x34
 5184 0112 00       		.byte	0
 5185 0113 03       		.uleb128 0x3
 5186 0114 0E       		.uleb128 0xe
 5187 0115 3A       		.uleb128 0x3a
 5188 0116 0B       		.uleb128 0xb
 5189 0117 3B       		.uleb128 0x3b
 5190 0118 05       		.uleb128 0x5
 5191 0119 49       		.uleb128 0x49
 5192 011a 13       		.uleb128 0x13
 5193 011b 02       		.uleb128 0x2
 5194 011c 18       		.uleb128 0x18
 5195 011d 00       		.byte	0
 5196 011e 00       		.byte	0
 5197 011f 17       		.uleb128 0x17
 5198 0120 898201   		.uleb128 0x4109
 5199 0123 00       		.byte	0
 5200 0124 11       		.uleb128 0x11
 5201 0125 01       		.uleb128 0x1
 5202 0126 31       		.uleb128 0x31
 5203 0127 13       		.uleb128 0x13
 5204 0128 00       		.byte	0
 5205 0129 00       		.byte	0
 5206 012a 18       		.uleb128 0x18
 5207 012b 34       		.uleb128 0x34
 5208 012c 00       		.byte	0
 5209 012d 03       		.uleb128 0x3
 5210 012e 0E       		.uleb128 0xe
 5211 012f 3A       		.uleb128 0x3a
 5212 0130 0B       		.uleb128 0xb
 5213 0131 3B       		.uleb128 0x3b
 5214 0132 05       		.uleb128 0x5
 5215 0133 49       		.uleb128 0x49
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 152


 5216 0134 13       		.uleb128 0x13
 5217 0135 1C       		.uleb128 0x1c
 5218 0136 0B       		.uleb128 0xb
 5219 0137 00       		.byte	0
 5220 0138 00       		.byte	0
 5221 0139 19       		.uleb128 0x19
 5222 013a 34       		.uleb128 0x34
 5223 013b 00       		.byte	0
 5224 013c 03       		.uleb128 0x3
 5225 013d 0E       		.uleb128 0xe
 5226 013e 3A       		.uleb128 0x3a
 5227 013f 0B       		.uleb128 0xb
 5228 0140 3B       		.uleb128 0x3b
 5229 0141 05       		.uleb128 0x5
 5230 0142 49       		.uleb128 0x49
 5231 0143 13       		.uleb128 0x13
 5232 0144 02       		.uleb128 0x2
 5233 0145 17       		.uleb128 0x17
 5234 0146 00       		.byte	0
 5235 0147 00       		.byte	0
 5236 0148 1A       		.uleb128 0x1a
 5237 0149 898201   		.uleb128 0x4109
 5238 014c 01       		.byte	0x1
 5239 014d 11       		.uleb128 0x11
 5240 014e 01       		.uleb128 0x1
 5241 014f 31       		.uleb128 0x31
 5242 0150 13       		.uleb128 0x13
 5243 0151 01       		.uleb128 0x1
 5244 0152 13       		.uleb128 0x13
 5245 0153 00       		.byte	0
 5246 0154 00       		.byte	0
 5247 0155 1B       		.uleb128 0x1b
 5248 0156 8A8201   		.uleb128 0x410a
 5249 0159 00       		.byte	0
 5250 015a 02       		.uleb128 0x2
 5251 015b 18       		.uleb128 0x18
 5252 015c 9142     		.uleb128 0x2111
 5253 015e 18       		.uleb128 0x18
 5254 015f 00       		.byte	0
 5255 0160 00       		.byte	0
 5256 0161 1C       		.uleb128 0x1c
 5257 0162 2E       		.uleb128 0x2e
 5258 0163 01       		.byte	0x1
 5259 0164 03       		.uleb128 0x3
 5260 0165 0E       		.uleb128 0xe
 5261 0166 3A       		.uleb128 0x3a
 5262 0167 0B       		.uleb128 0xb
 5263 0168 3B       		.uleb128 0x3b
 5264 0169 05       		.uleb128 0x5
 5265 016a 27       		.uleb128 0x27
 5266 016b 19       		.uleb128 0x19
 5267 016c 11       		.uleb128 0x11
 5268 016d 01       		.uleb128 0x1
 5269 016e 12       		.uleb128 0x12
 5270 016f 06       		.uleb128 0x6
 5271 0170 40       		.uleb128 0x40
 5272 0171 18       		.uleb128 0x18
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 153


 5273 0172 9742     		.uleb128 0x2117
 5274 0174 19       		.uleb128 0x19
 5275 0175 01       		.uleb128 0x1
 5276 0176 13       		.uleb128 0x13
 5277 0177 00       		.byte	0
 5278 0178 00       		.byte	0
 5279 0179 1D       		.uleb128 0x1d
 5280 017a 898201   		.uleb128 0x4109
 5281 017d 01       		.byte	0x1
 5282 017e 11       		.uleb128 0x11
 5283 017f 01       		.uleb128 0x1
 5284 0180 31       		.uleb128 0x31
 5285 0181 13       		.uleb128 0x13
 5286 0182 00       		.byte	0
 5287 0183 00       		.byte	0
 5288 0184 1E       		.uleb128 0x1e
 5289 0185 0B       		.uleb128 0xb
 5290 0186 01       		.byte	0x1
 5291 0187 11       		.uleb128 0x11
 5292 0188 01       		.uleb128 0x1
 5293 0189 12       		.uleb128 0x12
 5294 018a 06       		.uleb128 0x6
 5295 018b 01       		.uleb128 0x1
 5296 018c 13       		.uleb128 0x13
 5297 018d 00       		.byte	0
 5298 018e 00       		.byte	0
 5299 018f 1F       		.uleb128 0x1f
 5300 0190 2E       		.uleb128 0x2e
 5301 0191 01       		.byte	0x1
 5302 0192 3F       		.uleb128 0x3f
 5303 0193 19       		.uleb128 0x19
 5304 0194 03       		.uleb128 0x3
 5305 0195 0E       		.uleb128 0xe
 5306 0196 3A       		.uleb128 0x3a
 5307 0197 0B       		.uleb128 0xb
 5308 0198 3B       		.uleb128 0x3b
 5309 0199 05       		.uleb128 0x5
 5310 019a 27       		.uleb128 0x27
 5311 019b 19       		.uleb128 0x19
 5312 019c 49       		.uleb128 0x49
 5313 019d 13       		.uleb128 0x13
 5314 019e 11       		.uleb128 0x11
 5315 019f 01       		.uleb128 0x1
 5316 01a0 12       		.uleb128 0x12
 5317 01a1 06       		.uleb128 0x6
 5318 01a2 40       		.uleb128 0x40
 5319 01a3 18       		.uleb128 0x18
 5320 01a4 9742     		.uleb128 0x2117
 5321 01a6 19       		.uleb128 0x19
 5322 01a7 01       		.uleb128 0x1
 5323 01a8 13       		.uleb128 0x13
 5324 01a9 00       		.byte	0
 5325 01aa 00       		.byte	0
 5326 01ab 20       		.uleb128 0x20
 5327 01ac 05       		.uleb128 0x5
 5328 01ad 00       		.byte	0
 5329 01ae 03       		.uleb128 0x3
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 154


 5330 01af 0E       		.uleb128 0xe
 5331 01b0 3A       		.uleb128 0x3a
 5332 01b1 0B       		.uleb128 0xb
 5333 01b2 3B       		.uleb128 0x3b
 5334 01b3 05       		.uleb128 0x5
 5335 01b4 49       		.uleb128 0x49
 5336 01b5 13       		.uleb128 0x13
 5337 01b6 02       		.uleb128 0x2
 5338 01b7 18       		.uleb128 0x18
 5339 01b8 00       		.byte	0
 5340 01b9 00       		.byte	0
 5341 01ba 21       		.uleb128 0x21
 5342 01bb 34       		.uleb128 0x34
 5343 01bc 00       		.byte	0
 5344 01bd 03       		.uleb128 0x3
 5345 01be 0E       		.uleb128 0xe
 5346 01bf 3A       		.uleb128 0x3a
 5347 01c0 0B       		.uleb128 0xb
 5348 01c1 3B       		.uleb128 0x3b
 5349 01c2 05       		.uleb128 0x5
 5350 01c3 49       		.uleb128 0x49
 5351 01c4 13       		.uleb128 0x13
 5352 01c5 00       		.byte	0
 5353 01c6 00       		.byte	0
 5354 01c7 22       		.uleb128 0x22
 5355 01c8 1D       		.uleb128 0x1d
 5356 01c9 01       		.byte	0x1
 5357 01ca 31       		.uleb128 0x31
 5358 01cb 13       		.uleb128 0x13
 5359 01cc 11       		.uleb128 0x11
 5360 01cd 01       		.uleb128 0x1
 5361 01ce 12       		.uleb128 0x12
 5362 01cf 06       		.uleb128 0x6
 5363 01d0 58       		.uleb128 0x58
 5364 01d1 0B       		.uleb128 0xb
 5365 01d2 59       		.uleb128 0x59
 5366 01d3 05       		.uleb128 0x5
 5367 01d4 01       		.uleb128 0x1
 5368 01d5 13       		.uleb128 0x13
 5369 01d6 00       		.byte	0
 5370 01d7 00       		.byte	0
 5371 01d8 23       		.uleb128 0x23
 5372 01d9 0B       		.uleb128 0xb
 5373 01da 01       		.byte	0x1
 5374 01db 11       		.uleb128 0x11
 5375 01dc 01       		.uleb128 0x1
 5376 01dd 12       		.uleb128 0x12
 5377 01de 06       		.uleb128 0x6
 5378 01df 00       		.byte	0
 5379 01e0 00       		.byte	0
 5380 01e1 24       		.uleb128 0x24
 5381 01e2 34       		.uleb128 0x34
 5382 01e3 00       		.byte	0
 5383 01e4 31       		.uleb128 0x31
 5384 01e5 13       		.uleb128 0x13
 5385 01e6 00       		.byte	0
 5386 01e7 00       		.byte	0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 155


 5387 01e8 25       		.uleb128 0x25
 5388 01e9 0B       		.uleb128 0xb
 5389 01ea 01       		.byte	0x1
 5390 01eb 55       		.uleb128 0x55
 5391 01ec 17       		.uleb128 0x17
 5392 01ed 01       		.uleb128 0x1
 5393 01ee 13       		.uleb128 0x13
 5394 01ef 00       		.byte	0
 5395 01f0 00       		.byte	0
 5396 01f1 26       		.uleb128 0x26
 5397 01f2 1D       		.uleb128 0x1d
 5398 01f3 01       		.byte	0x1
 5399 01f4 31       		.uleb128 0x31
 5400 01f5 13       		.uleb128 0x13
 5401 01f6 11       		.uleb128 0x11
 5402 01f7 01       		.uleb128 0x1
 5403 01f8 12       		.uleb128 0x12
 5404 01f9 06       		.uleb128 0x6
 5405 01fa 58       		.uleb128 0x58
 5406 01fb 0B       		.uleb128 0xb
 5407 01fc 59       		.uleb128 0x59
 5408 01fd 05       		.uleb128 0x5
 5409 01fe 00       		.byte	0
 5410 01ff 00       		.byte	0
 5411 0200 27       		.uleb128 0x27
 5412 0201 05       		.uleb128 0x5
 5413 0202 00       		.byte	0
 5414 0203 31       		.uleb128 0x31
 5415 0204 13       		.uleb128 0x13
 5416 0205 02       		.uleb128 0x2
 5417 0206 17       		.uleb128 0x17
 5418 0207 00       		.byte	0
 5419 0208 00       		.byte	0
 5420 0209 28       		.uleb128 0x28
 5421 020a 0B       		.uleb128 0xb
 5422 020b 01       		.byte	0x1
 5423 020c 55       		.uleb128 0x55
 5424 020d 17       		.uleb128 0x17
 5425 020e 00       		.byte	0
 5426 020f 00       		.byte	0
 5427 0210 29       		.uleb128 0x29
 5428 0211 2E       		.uleb128 0x2e
 5429 0212 01       		.byte	0x1
 5430 0213 3F       		.uleb128 0x3f
 5431 0214 19       		.uleb128 0x19
 5432 0215 03       		.uleb128 0x3
 5433 0216 0E       		.uleb128 0xe
 5434 0217 3A       		.uleb128 0x3a
 5435 0218 0B       		.uleb128 0xb
 5436 0219 3B       		.uleb128 0x3b
 5437 021a 05       		.uleb128 0x5
 5438 021b 27       		.uleb128 0x27
 5439 021c 19       		.uleb128 0x19
 5440 021d 11       		.uleb128 0x11
 5441 021e 01       		.uleb128 0x1
 5442 021f 12       		.uleb128 0x12
 5443 0220 06       		.uleb128 0x6
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 156


 5444 0221 40       		.uleb128 0x40
 5445 0222 18       		.uleb128 0x18
 5446 0223 9742     		.uleb128 0x2117
 5447 0225 19       		.uleb128 0x19
 5448 0226 01       		.uleb128 0x1
 5449 0227 13       		.uleb128 0x13
 5450 0228 00       		.byte	0
 5451 0229 00       		.byte	0
 5452 022a 2A       		.uleb128 0x2a
 5453 022b 34       		.uleb128 0x34
 5454 022c 00       		.byte	0
 5455 022d 03       		.uleb128 0x3
 5456 022e 08       		.uleb128 0x8
 5457 022f 3A       		.uleb128 0x3a
 5458 0230 0B       		.uleb128 0xb
 5459 0231 3B       		.uleb128 0x3b
 5460 0232 05       		.uleb128 0x5
 5461 0233 49       		.uleb128 0x49
 5462 0234 13       		.uleb128 0x13
 5463 0235 02       		.uleb128 0x2
 5464 0236 17       		.uleb128 0x17
 5465 0237 00       		.byte	0
 5466 0238 00       		.byte	0
 5467 0239 2B       		.uleb128 0x2b
 5468 023a 01       		.uleb128 0x1
 5469 023b 01       		.byte	0x1
 5470 023c 49       		.uleb128 0x49
 5471 023d 13       		.uleb128 0x13
 5472 023e 01       		.uleb128 0x1
 5473 023f 13       		.uleb128 0x13
 5474 0240 00       		.byte	0
 5475 0241 00       		.byte	0
 5476 0242 2C       		.uleb128 0x2c
 5477 0243 21       		.uleb128 0x21
 5478 0244 00       		.byte	0
 5479 0245 49       		.uleb128 0x49
 5480 0246 13       		.uleb128 0x13
 5481 0247 2F       		.uleb128 0x2f
 5482 0248 0B       		.uleb128 0xb
 5483 0249 00       		.byte	0
 5484 024a 00       		.byte	0
 5485 024b 2D       		.uleb128 0x2d
 5486 024c 34       		.uleb128 0x34
 5487 024d 00       		.byte	0
 5488 024e 03       		.uleb128 0x3
 5489 024f 0E       		.uleb128 0xe
 5490 0250 3A       		.uleb128 0x3a
 5491 0251 0B       		.uleb128 0xb
 5492 0252 3B       		.uleb128 0x3b
 5493 0253 0B       		.uleb128 0xb
 5494 0254 49       		.uleb128 0x49
 5495 0255 13       		.uleb128 0x13
 5496 0256 3F       		.uleb128 0x3f
 5497 0257 19       		.uleb128 0x19
 5498 0258 02       		.uleb128 0x2
 5499 0259 18       		.uleb128 0x18
 5500 025a 00       		.byte	0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 157


 5501 025b 00       		.byte	0
 5502 025c 2E       		.uleb128 0x2e
 5503 025d 2E       		.uleb128 0x2e
 5504 025e 00       		.byte	0
 5505 025f 3F       		.uleb128 0x3f
 5506 0260 19       		.uleb128 0x19
 5507 0261 3C       		.uleb128 0x3c
 5508 0262 19       		.uleb128 0x19
 5509 0263 6E       		.uleb128 0x6e
 5510 0264 0E       		.uleb128 0xe
 5511 0265 03       		.uleb128 0x3
 5512 0266 0E       		.uleb128 0xe
 5513 0267 3A       		.uleb128 0x3a
 5514 0268 0B       		.uleb128 0xb
 5515 0269 3B       		.uleb128 0x3b
 5516 026a 0B       		.uleb128 0xb
 5517 026b 00       		.byte	0
 5518 026c 00       		.byte	0
 5519 026d 2F       		.uleb128 0x2f
 5520 026e 2E       		.uleb128 0x2e
 5521 026f 00       		.byte	0
 5522 0270 3F       		.uleb128 0x3f
 5523 0271 19       		.uleb128 0x19
 5524 0272 3C       		.uleb128 0x3c
 5525 0273 19       		.uleb128 0x19
 5526 0274 6E       		.uleb128 0x6e
 5527 0275 0E       		.uleb128 0xe
 5528 0276 03       		.uleb128 0x3
 5529 0277 0E       		.uleb128 0xe
 5530 0278 00       		.byte	0
 5531 0279 00       		.byte	0
 5532 027a 30       		.uleb128 0x30
 5533 027b 2E       		.uleb128 0x2e
 5534 027c 00       		.byte	0
 5535 027d 3F       		.uleb128 0x3f
 5536 027e 19       		.uleb128 0x19
 5537 027f 3C       		.uleb128 0x3c
 5538 0280 19       		.uleb128 0x19
 5539 0281 6E       		.uleb128 0x6e
 5540 0282 0E       		.uleb128 0xe
 5541 0283 03       		.uleb128 0x3
 5542 0284 0E       		.uleb128 0xe
 5543 0285 3A       		.uleb128 0x3a
 5544 0286 0B       		.uleb128 0xb
 5545 0287 3B       		.uleb128 0x3b
 5546 0288 05       		.uleb128 0x5
 5547 0289 00       		.byte	0
 5548 028a 00       		.byte	0
 5549 028b 00       		.byte	0
 5550              		.section	.debug_loc,"",%progbits
 5551              	.Ldebug_loc0:
 5552              	.LLST0:
 5553 0000 00000000 		.4byte	.LVL0
 5554 0004 07000000 		.4byte	.LVL1-1
 5555 0008 0100     		.2byte	0x1
 5556 000a 50       		.byte	0x50
 5557 000b 07000000 		.4byte	.LVL1-1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 158


 5558 000f 12000000 		.4byte	.LVL2
 5559 0013 0100     		.2byte	0x1
 5560 0015 54       		.byte	0x54
 5561 0016 12000000 		.4byte	.LVL2
 5562 001a 14000000 		.4byte	.LVL3
 5563 001e 0400     		.2byte	0x4
 5564 0020 F3       		.byte	0xf3
 5565 0021 01       		.uleb128 0x1
 5566 0022 50       		.byte	0x50
 5567 0023 9F       		.byte	0x9f
 5568 0024 14000000 		.4byte	.LVL3
 5569 0028 16000000 		.4byte	.LVL4
 5570 002c 0100     		.2byte	0x1
 5571 002e 54       		.byte	0x54
 5572 002f 16000000 		.4byte	.LVL4
 5573 0033 1E000000 		.4byte	.LFE24
 5574 0037 0400     		.2byte	0x4
 5575 0039 F3       		.byte	0xf3
 5576 003a 01       		.uleb128 0x1
 5577 003b 50       		.byte	0x50
 5578 003c 9F       		.byte	0x9f
 5579 003d 00000000 		.4byte	0
 5580 0041 00000000 		.4byte	0
 5581              	.LLST1:
 5582 0045 00000000 		.4byte	.LVL6
 5583 0049 07000000 		.4byte	.LVL7-1
 5584 004d 0100     		.2byte	0x1
 5585 004f 50       		.byte	0x50
 5586 0050 07000000 		.4byte	.LVL7-1
 5587 0054 0E000000 		.4byte	.LVL8
 5588 0058 0100     		.2byte	0x1
 5589 005a 54       		.byte	0x54
 5590 005b 0E000000 		.4byte	.LVL8
 5591 005f 10000000 		.4byte	.LVL9
 5592 0063 0400     		.2byte	0x4
 5593 0065 F3       		.byte	0xf3
 5594 0066 01       		.uleb128 0x1
 5595 0067 50       		.byte	0x50
 5596 0068 9F       		.byte	0x9f
 5597 0069 10000000 		.4byte	.LVL9
 5598 006d 12000000 		.4byte	.LVL10
 5599 0071 0100     		.2byte	0x1
 5600 0073 54       		.byte	0x54
 5601 0074 12000000 		.4byte	.LVL10
 5602 0078 1A000000 		.4byte	.LFE22
 5603 007c 0400     		.2byte	0x4
 5604 007e F3       		.byte	0xf3
 5605 007f 01       		.uleb128 0x1
 5606 0080 50       		.byte	0x50
 5607 0081 9F       		.byte	0x9f
 5608 0082 00000000 		.4byte	0
 5609 0086 00000000 		.4byte	0
 5610              	.LLST2:
 5611 008a 00000000 		.4byte	.LVL12
 5612 008e 10000000 		.4byte	.LVL16
 5613 0092 0100     		.2byte	0x1
 5614 0094 50       		.byte	0x50
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 159


 5615 0095 10000000 		.4byte	.LVL16
 5616 0099 28000000 		.4byte	.LVL18
 5617 009d 0100     		.2byte	0x1
 5618 009f 54       		.byte	0x54
 5619 00a0 28000000 		.4byte	.LVL18
 5620 00a4 2A000000 		.4byte	.LVL19
 5621 00a8 0100     		.2byte	0x1
 5622 00aa 50       		.byte	0x50
 5623 00ab 2A000000 		.4byte	.LVL19
 5624 00af 54000000 		.4byte	.LFE19
 5625 00b3 0100     		.2byte	0x1
 5626 00b5 54       		.byte	0x54
 5627 00b6 00000000 		.4byte	0
 5628 00ba 00000000 		.4byte	0
 5629              	.LLST3:
 5630 00be 00000000 		.4byte	.LVL12
 5631 00c2 13000000 		.4byte	.LVL17-1
 5632 00c6 0100     		.2byte	0x1
 5633 00c8 51       		.byte	0x51
 5634 00c9 13000000 		.4byte	.LVL17-1
 5635 00cd 28000000 		.4byte	.LVL18
 5636 00d1 0400     		.2byte	0x4
 5637 00d3 F3       		.byte	0xf3
 5638 00d4 01       		.uleb128 0x1
 5639 00d5 51       		.byte	0x51
 5640 00d6 9F       		.byte	0x9f
 5641 00d7 28000000 		.4byte	.LVL18
 5642 00db 2D000000 		.4byte	.LVL20-1
 5643 00df 0100     		.2byte	0x1
 5644 00e1 51       		.byte	0x51
 5645 00e2 2D000000 		.4byte	.LVL20-1
 5646 00e6 54000000 		.4byte	.LFE19
 5647 00ea 0400     		.2byte	0x4
 5648 00ec F3       		.byte	0xf3
 5649 00ed 01       		.uleb128 0x1
 5650 00ee 51       		.byte	0x51
 5651 00ef 9F       		.byte	0x9f
 5652 00f0 00000000 		.4byte	0
 5653 00f4 00000000 		.4byte	0
 5654              	.LLST4:
 5655 00f8 00000000 		.4byte	.LVL12
 5656 00fc 0A000000 		.4byte	.LVL15
 5657 0100 0100     		.2byte	0x1
 5658 0102 52       		.byte	0x52
 5659 0103 0A000000 		.4byte	.LVL15
 5660 0107 54000000 		.4byte	.LFE19
 5661 010b 0100     		.2byte	0x1
 5662 010d 56       		.byte	0x56
 5663 010e 00000000 		.4byte	0
 5664 0112 00000000 		.4byte	0
 5665              	.LLST5:
 5666 0116 08000000 		.4byte	.LVL14
 5667 011a 4E000000 		.4byte	.LVL22
 5668 011e 0100     		.2byte	0x1
 5669 0120 55       		.byte	0x55
 5670 0121 4E000000 		.4byte	.LVL22
 5671 0125 54000000 		.4byte	.LFE19
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 160


 5672 0129 0300     		.2byte	0x3
 5673 012b 75       		.byte	0x75
 5674 012c 7F       		.sleb128 -1
 5675 012d 9F       		.byte	0x9f
 5676 012e 00000000 		.4byte	0
 5677 0132 00000000 		.4byte	0
 5678              	.LLST6:
 5679 0136 00000000 		.4byte	.LVL23
 5680 013a 1C000000 		.4byte	.LVL25
 5681 013e 0100     		.2byte	0x1
 5682 0140 50       		.byte	0x50
 5683 0141 1C000000 		.4byte	.LVL25
 5684 0145 22000000 		.4byte	.LVL27
 5685 0149 0400     		.2byte	0x4
 5686 014b F3       		.byte	0xf3
 5687 014c 01       		.uleb128 0x1
 5688 014d 50       		.byte	0x50
 5689 014e 9F       		.byte	0x9f
 5690 014f 22000000 		.4byte	.LVL27
 5691 0153 24000000 		.4byte	.LFE20
 5692 0157 0100     		.2byte	0x1
 5693 0159 50       		.byte	0x50
 5694 015a 00000000 		.4byte	0
 5695 015e 00000000 		.4byte	0
 5696              	.LLST7:
 5697 0162 00000000 		.4byte	.LVL23
 5698 0166 1A000000 		.4byte	.LVL24
 5699 016a 0100     		.2byte	0x1
 5700 016c 51       		.byte	0x51
 5701 016d 1A000000 		.4byte	.LVL24
 5702 0171 22000000 		.4byte	.LVL27
 5703 0175 0100     		.2byte	0x1
 5704 0177 54       		.byte	0x54
 5705 0178 22000000 		.4byte	.LVL27
 5706 017c 24000000 		.4byte	.LFE20
 5707 0180 0100     		.2byte	0x1
 5708 0182 51       		.byte	0x51
 5709 0183 00000000 		.4byte	0
 5710 0187 00000000 		.4byte	0
 5711              	.LLST8:
 5712 018b 00000000 		.4byte	.LVL28
 5713 018f 07000000 		.4byte	.LVL29-1
 5714 0193 0100     		.2byte	0x1
 5715 0195 50       		.byte	0x50
 5716 0196 07000000 		.4byte	.LVL29-1
 5717 019a 66000000 		.4byte	.LFE21
 5718 019e 0100     		.2byte	0x1
 5719 01a0 55       		.byte	0x55
 5720 01a1 00000000 		.4byte	0
 5721 01a5 00000000 		.4byte	0
 5722              	.LLST9:
 5723 01a9 0E000000 		.4byte	.LVL30
 5724 01ad 24000000 		.4byte	.LVL33
 5725 01b1 0100     		.2byte	0x1
 5726 01b3 54       		.byte	0x54
 5727 01b4 26000000 		.4byte	.LVL34
 5728 01b8 3C000000 		.4byte	.LVL37
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 161


 5729 01bc 0100     		.2byte	0x1
 5730 01be 54       		.byte	0x54
 5731 01bf 00000000 		.4byte	0
 5732 01c3 00000000 		.4byte	0
 5733              	.LLST10:
 5734 01c7 3E000000 		.4byte	.LVL38
 5735 01cb 54000000 		.4byte	.LVL41
 5736 01cf 0100     		.2byte	0x1
 5737 01d1 54       		.byte	0x54
 5738 01d2 56000000 		.4byte	.LVL42
 5739 01d6 66000000 		.4byte	.LFE21
 5740 01da 0100     		.2byte	0x1
 5741 01dc 54       		.byte	0x54
 5742 01dd 00000000 		.4byte	0
 5743 01e1 00000000 		.4byte	0
 5744              	.LLST11:
 5745 01e5 00000000 		.4byte	.LVL44
 5746 01e9 09000000 		.4byte	.LVL46-1
 5747 01ed 0100     		.2byte	0x1
 5748 01ef 50       		.byte	0x50
 5749 01f0 09000000 		.4byte	.LVL46-1
 5750 01f4 68000000 		.4byte	.LVL51
 5751 01f8 0100     		.2byte	0x1
 5752 01fa 54       		.byte	0x54
 5753 01fb 68000000 		.4byte	.LVL51
 5754 01ff 6C000000 		.4byte	.LFE4
 5755 0203 0400     		.2byte	0x4
 5756 0205 F3       		.byte	0xf3
 5757 0206 01       		.uleb128 0x1
 5758 0207 50       		.byte	0x50
 5759 0208 9F       		.byte	0x9f
 5760 0209 00000000 		.4byte	0
 5761 020d 00000000 		.4byte	0
 5762              	.LLST12:
 5763 0211 00000000 		.4byte	.LVL44
 5764 0215 09000000 		.4byte	.LVL46-1
 5765 0219 0100     		.2byte	0x1
 5766 021b 51       		.byte	0x51
 5767 021c 09000000 		.4byte	.LVL46-1
 5768 0220 68000000 		.4byte	.LVL51
 5769 0224 0100     		.2byte	0x1
 5770 0226 55       		.byte	0x55
 5771 0227 68000000 		.4byte	.LVL51
 5772 022b 6C000000 		.4byte	.LFE4
 5773 022f 0400     		.2byte	0x4
 5774 0231 F3       		.byte	0xf3
 5775 0232 01       		.uleb128 0x1
 5776 0233 51       		.byte	0x51
 5777 0234 9F       		.byte	0x9f
 5778 0235 00000000 		.4byte	0
 5779 0239 00000000 		.4byte	0
 5780              	.LLST13:
 5781 023d 06000000 		.4byte	.LVL45
 5782 0241 09000000 		.4byte	.LVL46-1
 5783 0245 0100     		.2byte	0x1
 5784 0247 50       		.byte	0x50
 5785 0248 09000000 		.4byte	.LVL46-1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 162


 5786 024c 68000000 		.4byte	.LVL51
 5787 0250 0100     		.2byte	0x1
 5788 0252 54       		.byte	0x54
 5789 0253 68000000 		.4byte	.LVL51
 5790 0257 6C000000 		.4byte	.LFE4
 5791 025b 0400     		.2byte	0x4
 5792 025d F3       		.byte	0xf3
 5793 025e 01       		.uleb128 0x1
 5794 025f 50       		.byte	0x50
 5795 0260 9F       		.byte	0x9f
 5796 0261 00000000 		.4byte	0
 5797 0265 00000000 		.4byte	0
 5798              	.LLST14:
 5799 0269 00000000 		.4byte	.LVL52
 5800 026d 16000000 		.4byte	.LVL55
 5801 0271 0100     		.2byte	0x1
 5802 0273 50       		.byte	0x50
 5803 0274 16000000 		.4byte	.LVL55
 5804 0278 19000000 		.4byte	.LVL56-1
 5805 027c 0200     		.2byte	0x2
 5806 027e 70       		.byte	0x70
 5807 027f 3C       		.sleb128 60
 5808 0280 19000000 		.4byte	.LVL56-1
 5809 0284 1C000000 		.4byte	.LFE6
 5810 0288 0400     		.2byte	0x4
 5811 028a F3       		.byte	0xf3
 5812 028b 01       		.uleb128 0x1
 5813 028c 50       		.byte	0x50
 5814 028d 9F       		.byte	0x9f
 5815 028e 00000000 		.4byte	0
 5816 0292 00000000 		.4byte	0
 5817              	.LLST15:
 5818 0296 00000000 		.4byte	.LVL52
 5819 029a 14000000 		.4byte	.LVL54
 5820 029e 0100     		.2byte	0x1
 5821 02a0 51       		.byte	0x51
 5822 02a1 14000000 		.4byte	.LVL54
 5823 02a5 1C000000 		.4byte	.LFE6
 5824 02a9 0100     		.2byte	0x1
 5825 02ab 54       		.byte	0x54
 5826 02ac 00000000 		.4byte	0
 5827 02b0 00000000 		.4byte	0
 5828              	.LLST16:
 5829 02b4 00000000 		.4byte	.LVL52
 5830 02b8 19000000 		.4byte	.LVL56-1
 5831 02bc 0100     		.2byte	0x1
 5832 02be 52       		.byte	0x52
 5833 02bf 19000000 		.4byte	.LVL56-1
 5834 02c3 1C000000 		.4byte	.LFE6
 5835 02c7 0400     		.2byte	0x4
 5836 02c9 F3       		.byte	0xf3
 5837 02ca 01       		.uleb128 0x1
 5838 02cb 52       		.byte	0x52
 5839 02cc 9F       		.byte	0x9f
 5840 02cd 00000000 		.4byte	0
 5841 02d1 00000000 		.4byte	0
 5842              	.LLST17:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 163


 5843 02d5 00000000 		.4byte	.LVL52
 5844 02d9 04000000 		.4byte	.LVL53
 5845 02dd 0100     		.2byte	0x1
 5846 02df 53       		.byte	0x53
 5847 02e0 04000000 		.4byte	.LVL53
 5848 02e4 1C000000 		.4byte	.LFE6
 5849 02e8 0400     		.2byte	0x4
 5850 02ea F3       		.byte	0xf3
 5851 02eb 01       		.uleb128 0x1
 5852 02ec 53       		.byte	0x53
 5853 02ed 9F       		.byte	0x9f
 5854 02ee 00000000 		.4byte	0
 5855 02f2 00000000 		.4byte	0
 5856              	.LLST18:
 5857 02f6 00000000 		.4byte	.LVL57
 5858 02fa 0E000000 		.4byte	.LVL58
 5859 02fe 0100     		.2byte	0x1
 5860 0300 50       		.byte	0x50
 5861 0301 0E000000 		.4byte	.LVL58
 5862 0305 2E000000 		.4byte	.LFE5
 5863 0309 0100     		.2byte	0x1
 5864 030b 55       		.byte	0x55
 5865 030c 00000000 		.4byte	0
 5866 0310 00000000 		.4byte	0
 5867              	.LLST19:
 5868 0314 00000000 		.4byte	.LVL57
 5869 0318 13000000 		.4byte	.LVL60-1
 5870 031c 0100     		.2byte	0x1
 5871 031e 51       		.byte	0x51
 5872 031f 13000000 		.4byte	.LVL60-1
 5873 0323 2E000000 		.4byte	.LFE5
 5874 0327 0100     		.2byte	0x1
 5875 0329 56       		.byte	0x56
 5876 032a 00000000 		.4byte	0
 5877 032e 00000000 		.4byte	0
 5878              	.LLST20:
 5879 0332 00000000 		.4byte	.LVL57
 5880 0336 13000000 		.4byte	.LVL60-1
 5881 033a 0100     		.2byte	0x1
 5882 033c 52       		.byte	0x52
 5883 033d 13000000 		.4byte	.LVL60-1
 5884 0341 2E000000 		.4byte	.LFE5
 5885 0345 0400     		.2byte	0x4
 5886 0347 F3       		.byte	0xf3
 5887 0348 01       		.uleb128 0x1
 5888 0349 52       		.byte	0x52
 5889 034a 9F       		.byte	0x9f
 5890 034b 00000000 		.4byte	0
 5891 034f 00000000 		.4byte	0
 5892              	.LLST21:
 5893 0353 14000000 		.4byte	.LVL60
 5894 0357 24000000 		.4byte	.LVL63
 5895 035b 0100     		.2byte	0x1
 5896 035d 50       		.byte	0x50
 5897 035e 24000000 		.4byte	.LVL63
 5898 0362 2E000000 		.4byte	.LFE5
 5899 0366 0100     		.2byte	0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 164


 5900 0368 54       		.byte	0x54
 5901 0369 00000000 		.4byte	0
 5902 036d 00000000 		.4byte	0
 5903              	.LLST22:
 5904 0371 0E000000 		.4byte	.LVL58
 5905 0375 10000000 		.4byte	.LVL59
 5906 0379 0100     		.2byte	0x1
 5907 037b 50       		.byte	0x50
 5908 037c 10000000 		.4byte	.LVL59
 5909 0380 13000000 		.4byte	.LVL60-1
 5910 0384 0400     		.2byte	0x4
 5911 0386 70       		.byte	0x70
 5912 0387 B87F     		.sleb128 -72
 5913 0389 9F       		.byte	0x9f
 5914 038a 13000000 		.4byte	.LVL60-1
 5915 038e 2E000000 		.4byte	.LFE5
 5916 0392 0600     		.2byte	0x6
 5917 0394 76       		.byte	0x76
 5918 0395 00       		.sleb128 0
 5919 0396 75       		.byte	0x75
 5920 0397 00       		.sleb128 0
 5921 0398 1E       		.byte	0x1e
 5922 0399 9F       		.byte	0x9f
 5923 039a 00000000 		.4byte	0
 5924 039e 00000000 		.4byte	0
 5925              	.LLST23:
 5926 03a2 18000000 		.4byte	.LVL61
 5927 03a6 20000000 		.4byte	.LVL62
 5928 03aa 0400     		.2byte	0x4
 5929 03ac 70       		.byte	0x70
 5930 03ad C800     		.sleb128 72
 5931 03af 9F       		.byte	0x9f
 5932 03b0 20000000 		.4byte	.LVL62
 5933 03b4 27000000 		.4byte	.LVL64-1
 5934 03b8 0100     		.2byte	0x1
 5935 03ba 52       		.byte	0x52
 5936 03bb 27000000 		.4byte	.LVL64-1
 5937 03bf 28000000 		.4byte	.LVL64
 5938 03c3 0400     		.2byte	0x4
 5939 03c5 74       		.byte	0x74
 5940 03c6 C800     		.sleb128 72
 5941 03c8 9F       		.byte	0x9f
 5942 03c9 00000000 		.4byte	0
 5943 03cd 00000000 		.4byte	0
 5944              	.LLST24:
 5945 03d1 00000000 		.4byte	.LVL65
 5946 03d5 0E000000 		.4byte	.LVL67
 5947 03d9 0100     		.2byte	0x1
 5948 03db 50       		.byte	0x50
 5949 03dc 0E000000 		.4byte	.LVL67
 5950 03e0 04010000 		.4byte	.LVL92
 5951 03e4 0100     		.2byte	0x1
 5952 03e6 54       		.byte	0x54
 5953 03e7 04010000 		.4byte	.LVL92
 5954 03eb 08010000 		.4byte	.LFE7
 5955 03ef 0400     		.2byte	0x4
 5956 03f1 F3       		.byte	0xf3
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 165


 5957 03f2 01       		.uleb128 0x1
 5958 03f3 50       		.byte	0x50
 5959 03f4 9F       		.byte	0x9f
 5960 03f5 00000000 		.4byte	0
 5961 03f9 00000000 		.4byte	0
 5962              	.LLST25:
 5963 03fd 00000000 		.4byte	.LVL65
 5964 0401 0E000000 		.4byte	.LVL67
 5965 0405 0100     		.2byte	0x1
 5966 0407 51       		.byte	0x51
 5967 0408 0E000000 		.4byte	.LVL67
 5968 040c 04010000 		.4byte	.LVL92
 5969 0410 0100     		.2byte	0x1
 5970 0412 57       		.byte	0x57
 5971 0413 04010000 		.4byte	.LVL92
 5972 0417 08010000 		.4byte	.LFE7
 5973 041b 0400     		.2byte	0x4
 5974 041d F3       		.byte	0xf3
 5975 041e 01       		.uleb128 0x1
 5976 041f 51       		.byte	0x51
 5977 0420 9F       		.byte	0x9f
 5978 0421 00000000 		.4byte	0
 5979 0425 00000000 		.4byte	0
 5980              	.LLST26:
 5981 0429 00000000 		.4byte	.LVL65
 5982 042d 0E000000 		.4byte	.LVL67
 5983 0431 0100     		.2byte	0x1
 5984 0433 52       		.byte	0x52
 5985 0434 0E000000 		.4byte	.LVL67
 5986 0438 AE000000 		.4byte	.LVL82
 5987 043c 0200     		.2byte	0x2
 5988 043e 91       		.byte	0x91
 5989 043f 5C       		.sleb128 -36
 5990 0440 AE000000 		.4byte	.LVL82
 5991 0444 B3000000 		.4byte	.LVL83-1
 5992 0448 0200     		.2byte	0x2
 5993 044a 71       		.byte	0x71
 5994 044b 00       		.sleb128 0
 5995 044c B3000000 		.4byte	.LVL83-1
 5996 0450 04010000 		.4byte	.LVL92
 5997 0454 0200     		.2byte	0x2
 5998 0456 91       		.byte	0x91
 5999 0457 5C       		.sleb128 -36
 6000 0458 04010000 		.4byte	.LVL92
 6001 045c 08010000 		.4byte	.LFE7
 6002 0460 0200     		.2byte	0x2
 6003 0462 7D       		.byte	0x7d
 6004 0463 5C       		.sleb128 -36
 6005 0464 00000000 		.4byte	0
 6006 0468 00000000 		.4byte	0
 6007              	.LLST27:
 6008 046c 00000000 		.4byte	.LVL65
 6009 0470 0E000000 		.4byte	.LVL67
 6010 0474 0100     		.2byte	0x1
 6011 0476 53       		.byte	0x53
 6012 0477 0E000000 		.4byte	.LVL67
 6013 047b 04010000 		.4byte	.LVL92
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 166


 6014 047f 0100     		.2byte	0x1
 6015 0481 56       		.byte	0x56
 6016 0482 04010000 		.4byte	.LVL92
 6017 0486 08010000 		.4byte	.LFE7
 6018 048a 0400     		.2byte	0x4
 6019 048c F3       		.byte	0xf3
 6020 048d 01       		.uleb128 0x1
 6021 048e 53       		.byte	0x53
 6022 048f 9F       		.byte	0x9f
 6023 0490 00000000 		.4byte	0
 6024 0494 00000000 		.4byte	0
 6025              	.LLST28:
 6026 0498 0C000000 		.4byte	.LVL66
 6027 049c 0E000000 		.4byte	.LVL67
 6028 04a0 0200     		.2byte	0x2
 6029 04a2 30       		.byte	0x30
 6030 04a3 9F       		.byte	0x9f
 6031 04a4 0E000000 		.4byte	.LVL67
 6032 04a8 76000000 		.4byte	.LVL76
 6033 04ac 0100     		.2byte	0x1
 6034 04ae 55       		.byte	0x55
 6035 04af 76000000 		.4byte	.LVL76
 6036 04b3 78000000 		.4byte	.LVL77
 6037 04b7 0200     		.2byte	0x2
 6038 04b9 31       		.byte	0x31
 6039 04ba 9F       		.byte	0x9f
 6040 04bb 78000000 		.4byte	.LVL77
 6041 04bf 04010000 		.4byte	.LVL92
 6042 04c3 0100     		.2byte	0x1
 6043 04c5 55       		.byte	0x55
 6044 04c6 00000000 		.4byte	0
 6045 04ca 00000000 		.4byte	0
 6046              	.LLST29:
 6047 04ce 28000000 		.4byte	.LVL69
 6048 04d2 30000000 		.4byte	.LVL70
 6049 04d6 0100     		.2byte	0x1
 6050 04d8 50       		.byte	0x50
 6051 04d9 48000000 		.4byte	.LVL72
 6052 04dd 5A000000 		.4byte	.LVL73
 6053 04e1 0100     		.2byte	0x1
 6054 04e3 50       		.byte	0x50
 6055 04e4 00000000 		.4byte	0
 6056 04e8 00000000 		.4byte	0
 6057              	.LLST30:
 6058 04ec 0C000000 		.4byte	.LVL66
 6059 04f0 0E000000 		.4byte	.LVL67
 6060 04f4 0100     		.2byte	0x1
 6061 04f6 50       		.byte	0x50
 6062 04f7 0E000000 		.4byte	.LVL67
 6063 04fb 04010000 		.4byte	.LVL92
 6064 04ff 0100     		.2byte	0x1
 6065 0501 54       		.byte	0x54
 6066 0502 04010000 		.4byte	.LVL92
 6067 0506 08010000 		.4byte	.LFE7
 6068 050a 0400     		.2byte	0x4
 6069 050c F3       		.byte	0xf3
 6070 050d 01       		.uleb128 0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 167


 6071 050e 50       		.byte	0x50
 6072 050f 9F       		.byte	0x9f
 6073 0510 00000000 		.4byte	0
 6074 0514 00000000 		.4byte	0
 6075              	.LLST31:
 6076 0518 00000000 		.4byte	.LVL93
 6077 051c 33000000 		.4byte	.LVL97-1
 6078 0520 0100     		.2byte	0x1
 6079 0522 50       		.byte	0x50
 6080 0523 33000000 		.4byte	.LVL97-1
 6081 0527 5C000000 		.4byte	.LVL101
 6082 052b 0100     		.2byte	0x1
 6083 052d 55       		.byte	0x55
 6084 052e 5C000000 		.4byte	.LVL101
 6085 0532 5E000000 		.4byte	.LVL102
 6086 0536 0100     		.2byte	0x1
 6087 0538 50       		.byte	0x50
 6088 0539 5E000000 		.4byte	.LVL102
 6089 053d 60000000 		.4byte	.LVL103
 6090 0541 0400     		.2byte	0x4
 6091 0543 F3       		.byte	0xf3
 6092 0544 01       		.uleb128 0x1
 6093 0545 50       		.byte	0x50
 6094 0546 9F       		.byte	0x9f
 6095 0547 60000000 		.4byte	.LVL103
 6096 054b 6A000000 		.4byte	.LVL104
 6097 054f 0100     		.2byte	0x1
 6098 0551 55       		.byte	0x55
 6099 0552 6A000000 		.4byte	.LVL104
 6100 0556 70000000 		.4byte	.LFE8
 6101 055a 0400     		.2byte	0x4
 6102 055c F3       		.byte	0xf3
 6103 055d 01       		.uleb128 0x1
 6104 055e 50       		.byte	0x50
 6105 055f 9F       		.byte	0x9f
 6106 0560 00000000 		.4byte	0
 6107 0564 00000000 		.4byte	0
 6108              	.LLST32:
 6109 0568 00000000 		.4byte	.LVL93
 6110 056c 33000000 		.4byte	.LVL97-1
 6111 0570 0100     		.2byte	0x1
 6112 0572 51       		.byte	0x51
 6113 0573 33000000 		.4byte	.LVL97-1
 6114 0577 5C000000 		.4byte	.LVL101
 6115 057b 0400     		.2byte	0x4
 6116 057d F3       		.byte	0xf3
 6117 057e 01       		.uleb128 0x1
 6118 057f 51       		.byte	0x51
 6119 0580 9F       		.byte	0x9f
 6120 0581 5C000000 		.4byte	.LVL101
 6121 0585 60000000 		.4byte	.LVL103
 6122 0589 0100     		.2byte	0x1
 6123 058b 51       		.byte	0x51
 6124 058c 60000000 		.4byte	.LVL103
 6125 0590 70000000 		.4byte	.LFE8
 6126 0594 0400     		.2byte	0x4
 6127 0596 F3       		.byte	0xf3
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 168


 6128 0597 01       		.uleb128 0x1
 6129 0598 51       		.byte	0x51
 6130 0599 9F       		.byte	0x9f
 6131 059a 00000000 		.4byte	0
 6132 059e 00000000 		.4byte	0
 6133              	.LLST33:
 6134 05a2 00000000 		.4byte	.LVL93
 6135 05a6 2E000000 		.4byte	.LVL96
 6136 05aa 0100     		.2byte	0x1
 6137 05ac 52       		.byte	0x52
 6138 05ad 2E000000 		.4byte	.LVL96
 6139 05b1 5C000000 		.4byte	.LVL101
 6140 05b5 0100     		.2byte	0x1
 6141 05b7 57       		.byte	0x57
 6142 05b8 5C000000 		.4byte	.LVL101
 6143 05bc 60000000 		.4byte	.LVL103
 6144 05c0 0100     		.2byte	0x1
 6145 05c2 52       		.byte	0x52
 6146 05c3 60000000 		.4byte	.LVL103
 6147 05c7 6A000000 		.4byte	.LVL104
 6148 05cb 0100     		.2byte	0x1
 6149 05cd 57       		.byte	0x57
 6150 05ce 6A000000 		.4byte	.LVL104
 6151 05d2 70000000 		.4byte	.LFE8
 6152 05d6 0400     		.2byte	0x4
 6153 05d8 F3       		.byte	0xf3
 6154 05d9 01       		.uleb128 0x1
 6155 05da 52       		.byte	0x52
 6156 05db 9F       		.byte	0x9f
 6157 05dc 00000000 		.4byte	0
 6158 05e0 00000000 		.4byte	0
 6159              	.LLST34:
 6160 05e4 00000000 		.4byte	.LVL93
 6161 05e8 33000000 		.4byte	.LVL97-1
 6162 05ec 0100     		.2byte	0x1
 6163 05ee 53       		.byte	0x53
 6164 05ef 33000000 		.4byte	.LVL97-1
 6165 05f3 5C000000 		.4byte	.LVL101
 6166 05f7 0400     		.2byte	0x4
 6167 05f9 F3       		.byte	0xf3
 6168 05fa 01       		.uleb128 0x1
 6169 05fb 53       		.byte	0x53
 6170 05fc 9F       		.byte	0x9f
 6171 05fd 5C000000 		.4byte	.LVL101
 6172 0601 60000000 		.4byte	.LVL103
 6173 0605 0100     		.2byte	0x1
 6174 0607 53       		.byte	0x53
 6175 0608 60000000 		.4byte	.LVL103
 6176 060c 70000000 		.4byte	.LFE8
 6177 0610 0400     		.2byte	0x4
 6178 0612 F3       		.byte	0xf3
 6179 0613 01       		.uleb128 0x1
 6180 0614 53       		.byte	0x53
 6181 0615 9F       		.byte	0x9f
 6182 0616 00000000 		.4byte	0
 6183 061a 00000000 		.4byte	0
 6184              	.LLST35:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 169


 6185 061e 02000000 		.4byte	.LVL94
 6186 0622 33000000 		.4byte	.LVL97-1
 6187 0626 0100     		.2byte	0x1
 6188 0628 50       		.byte	0x50
 6189 0629 33000000 		.4byte	.LVL97-1
 6190 062d 5C000000 		.4byte	.LVL101
 6191 0631 0100     		.2byte	0x1
 6192 0633 55       		.byte	0x55
 6193 0634 5C000000 		.4byte	.LVL101
 6194 0638 5E000000 		.4byte	.LVL102
 6195 063c 0100     		.2byte	0x1
 6196 063e 50       		.byte	0x50
 6197 063f 5E000000 		.4byte	.LVL102
 6198 0643 60000000 		.4byte	.LVL103
 6199 0647 0400     		.2byte	0x4
 6200 0649 F3       		.byte	0xf3
 6201 064a 01       		.uleb128 0x1
 6202 064b 50       		.byte	0x50
 6203 064c 9F       		.byte	0x9f
 6204 064d 60000000 		.4byte	.LVL103
 6205 0651 6A000000 		.4byte	.LVL104
 6206 0655 0100     		.2byte	0x1
 6207 0657 55       		.byte	0x55
 6208 0658 6A000000 		.4byte	.LVL104
 6209 065c 70000000 		.4byte	.LFE8
 6210 0660 0400     		.2byte	0x4
 6211 0662 F3       		.byte	0xf3
 6212 0663 01       		.uleb128 0x1
 6213 0664 50       		.byte	0x50
 6214 0665 9F       		.byte	0x9f
 6215 0666 00000000 		.4byte	0
 6216 066a 00000000 		.4byte	0
 6217              	.LLST36:
 6218 066e 2C000000 		.4byte	.LVL95
 6219 0672 52000000 		.4byte	.LVL99
 6220 0676 0100     		.2byte	0x1
 6221 0678 54       		.byte	0x54
 6222 0679 52000000 		.4byte	.LVL99
 6223 067d 54000000 		.4byte	.LVL100
 6224 0681 0300     		.2byte	0x3
 6225 0683 74       		.byte	0x74
 6226 0684 7F       		.sleb128 -1
 6227 0685 9F       		.byte	0x9f
 6228 0686 60000000 		.4byte	.LVL103
 6229 068a 6A000000 		.4byte	.LVL104
 6230 068e 0100     		.2byte	0x1
 6231 0690 54       		.byte	0x54
 6232 0691 00000000 		.4byte	0
 6233 0695 00000000 		.4byte	0
 6234              	.LLST37:
 6235 0699 6A000000 		.4byte	.LVL104
 6236 069d 6E000000 		.4byte	.LVL105
 6237 06a1 0100     		.2byte	0x1
 6238 06a3 56       		.byte	0x56
 6239 06a4 00000000 		.4byte	0
 6240 06a8 00000000 		.4byte	0
 6241              	.LLST38:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 170


 6242 06ac 00000000 		.4byte	.LVL106
 6243 06b0 36000000 		.4byte	.LVL112
 6244 06b4 0100     		.2byte	0x1
 6245 06b6 50       		.byte	0x50
 6246 06b7 36000000 		.4byte	.LVL112
 6247 06bb 39000000 		.4byte	.LVL113-1
 6248 06bf 0300     		.2byte	0x3
 6249 06c1 70       		.byte	0x70
 6250 06c2 5C       		.sleb128 -36
 6251 06c3 9F       		.byte	0x9f
 6252 06c4 39000000 		.4byte	.LVL113-1
 6253 06c8 44000000 		.4byte	.LVL114
 6254 06cc 0400     		.2byte	0x4
 6255 06ce F3       		.byte	0xf3
 6256 06cf 01       		.uleb128 0x1
 6257 06d0 50       		.byte	0x50
 6258 06d1 9F       		.byte	0x9f
 6259 06d2 44000000 		.4byte	.LVL114
 6260 06d6 4E000000 		.4byte	.LVL117
 6261 06da 0100     		.2byte	0x1
 6262 06dc 50       		.byte	0x50
 6263 06dd 4E000000 		.4byte	.LVL117
 6264 06e1 50000000 		.4byte	.LVL118
 6265 06e5 0400     		.2byte	0x4
 6266 06e7 F3       		.byte	0xf3
 6267 06e8 01       		.uleb128 0x1
 6268 06e9 50       		.byte	0x50
 6269 06ea 9F       		.byte	0x9f
 6270 06eb 50000000 		.4byte	.LVL118
 6271 06ef 52000000 		.4byte	.LVL119
 6272 06f3 0100     		.2byte	0x1
 6273 06f5 50       		.byte	0x50
 6274 06f6 52000000 		.4byte	.LVL119
 6275 06fa 54000000 		.4byte	.LVL120
 6276 06fe 0400     		.2byte	0x4
 6277 0700 F3       		.byte	0xf3
 6278 0701 01       		.uleb128 0x1
 6279 0702 50       		.byte	0x50
 6280 0703 9F       		.byte	0x9f
 6281 0704 54000000 		.4byte	.LVL120
 6282 0708 56000000 		.4byte	.LVL121
 6283 070c 0100     		.2byte	0x1
 6284 070e 50       		.byte	0x50
 6285 070f 56000000 		.4byte	.LVL121
 6286 0713 64000000 		.4byte	.LFE9
 6287 0717 0400     		.2byte	0x4
 6288 0719 F3       		.byte	0xf3
 6289 071a 01       		.uleb128 0x1
 6290 071b 50       		.byte	0x50
 6291 071c 9F       		.byte	0x9f
 6292 071d 00000000 		.4byte	0
 6293 0721 00000000 		.4byte	0
 6294              	.LLST39:
 6295 0725 00000000 		.4byte	.LVL106
 6296 0729 39000000 		.4byte	.LVL113-1
 6297 072d 0100     		.2byte	0x1
 6298 072f 51       		.byte	0x51
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 171


 6299 0730 39000000 		.4byte	.LVL113-1
 6300 0734 44000000 		.4byte	.LVL114
 6301 0738 0100     		.2byte	0x1
 6302 073a 55       		.byte	0x55
 6303 073b 44000000 		.4byte	.LVL114
 6304 073f 58000000 		.4byte	.LVL122
 6305 0743 0100     		.2byte	0x1
 6306 0745 51       		.byte	0x51
 6307 0746 58000000 		.4byte	.LVL122
 6308 074a 5E000000 		.4byte	.LVL123
 6309 074e 0100     		.2byte	0x1
 6310 0750 55       		.byte	0x55
 6311 0751 5E000000 		.4byte	.LVL123
 6312 0755 64000000 		.4byte	.LFE9
 6313 0759 0400     		.2byte	0x4
 6314 075b F3       		.byte	0xf3
 6315 075c 01       		.uleb128 0x1
 6316 075d 51       		.byte	0x51
 6317 075e 9F       		.byte	0x9f
 6318 075f 00000000 		.4byte	0
 6319 0763 00000000 		.4byte	0
 6320              	.LLST40:
 6321 0767 02000000 		.4byte	.LVL107
 6322 076b 36000000 		.4byte	.LVL112
 6323 076f 0100     		.2byte	0x1
 6324 0771 50       		.byte	0x50
 6325 0772 36000000 		.4byte	.LVL112
 6326 0776 39000000 		.4byte	.LVL113-1
 6327 077a 0300     		.2byte	0x3
 6328 077c 70       		.byte	0x70
 6329 077d 5C       		.sleb128 -36
 6330 077e 9F       		.byte	0x9f
 6331 077f 39000000 		.4byte	.LVL113-1
 6332 0783 44000000 		.4byte	.LVL114
 6333 0787 0400     		.2byte	0x4
 6334 0789 F3       		.byte	0xf3
 6335 078a 01       		.uleb128 0x1
 6336 078b 50       		.byte	0x50
 6337 078c 9F       		.byte	0x9f
 6338 078d 44000000 		.4byte	.LVL114
 6339 0791 4E000000 		.4byte	.LVL117
 6340 0795 0100     		.2byte	0x1
 6341 0797 50       		.byte	0x50
 6342 0798 4E000000 		.4byte	.LVL117
 6343 079c 50000000 		.4byte	.LVL118
 6344 07a0 0400     		.2byte	0x4
 6345 07a2 F3       		.byte	0xf3
 6346 07a3 01       		.uleb128 0x1
 6347 07a4 50       		.byte	0x50
 6348 07a5 9F       		.byte	0x9f
 6349 07a6 50000000 		.4byte	.LVL118
 6350 07aa 52000000 		.4byte	.LVL119
 6351 07ae 0100     		.2byte	0x1
 6352 07b0 50       		.byte	0x50
 6353 07b1 52000000 		.4byte	.LVL119
 6354 07b5 54000000 		.4byte	.LVL120
 6355 07b9 0400     		.2byte	0x4
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 172


 6356 07bb F3       		.byte	0xf3
 6357 07bc 01       		.uleb128 0x1
 6358 07bd 50       		.byte	0x50
 6359 07be 9F       		.byte	0x9f
 6360 07bf 54000000 		.4byte	.LVL120
 6361 07c3 56000000 		.4byte	.LVL121
 6362 07c7 0100     		.2byte	0x1
 6363 07c9 50       		.byte	0x50
 6364 07ca 56000000 		.4byte	.LVL121
 6365 07ce 64000000 		.4byte	.LFE9
 6366 07d2 0400     		.2byte	0x4
 6367 07d4 F3       		.byte	0xf3
 6368 07d5 01       		.uleb128 0x1
 6369 07d6 50       		.byte	0x50
 6370 07d7 9F       		.byte	0x9f
 6371 07d8 00000000 		.4byte	0
 6372 07dc 00000000 		.4byte	0
 6373              	.LLST41:
 6374 07e0 18000000 		.4byte	.LVL108
 6375 07e4 26000000 		.4byte	.LVL110
 6376 07e8 0100     		.2byte	0x1
 6377 07ea 52       		.byte	0x52
 6378 07eb 26000000 		.4byte	.LVL110
 6379 07ef 39000000 		.4byte	.LVL113-1
 6380 07f3 0300     		.2byte	0x3
 6381 07f5 72       		.byte	0x72
 6382 07f6 7F       		.sleb128 -1
 6383 07f7 9F       		.byte	0x9f
 6384 07f8 44000000 		.4byte	.LVL114
 6385 07fc 50000000 		.4byte	.LVL118
 6386 0800 0300     		.2byte	0x3
 6387 0802 72       		.byte	0x72
 6388 0803 7F       		.sleb128 -1
 6389 0804 9F       		.byte	0x9f
 6390 0805 50000000 		.4byte	.LVL118
 6391 0809 54000000 		.4byte	.LVL120
 6392 080d 0100     		.2byte	0x1
 6393 080f 52       		.byte	0x52
 6394 0810 54000000 		.4byte	.LVL120
 6395 0814 58000000 		.4byte	.LVL122
 6396 0818 0300     		.2byte	0x3
 6397 081a 72       		.byte	0x72
 6398 081b 7F       		.sleb128 -1
 6399 081c 9F       		.byte	0x9f
 6400 081d 00000000 		.4byte	0
 6401 0821 00000000 		.4byte	0
 6402              	.LLST42:
 6403 0825 24000000 		.4byte	.LVL109
 6404 0829 30000000 		.4byte	.LVL111
 6405 082d 0100     		.2byte	0x1
 6406 082f 53       		.byte	0x53
 6407 0830 44000000 		.4byte	.LVL114
 6408 0834 46000000 		.4byte	.LVL115
 6409 0838 0100     		.2byte	0x1
 6410 083a 53       		.byte	0x53
 6411 083b 46000000 		.4byte	.LVL115
 6412 083f 48000000 		.4byte	.LVL116
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 173


 6413 0843 0300     		.2byte	0x3
 6414 0845 73       		.byte	0x73
 6415 0846 7F       		.sleb128 -1
 6416 0847 9F       		.byte	0x9f
 6417 0848 00000000 		.4byte	0
 6418 084c 00000000 		.4byte	0
 6419              	.LLST43:
 6420 0850 5E000000 		.4byte	.LVL123
 6421 0854 62000000 		.4byte	.LVL124
 6422 0858 0100     		.2byte	0x1
 6423 085a 54       		.byte	0x54
 6424 085b 00000000 		.4byte	0
 6425 085f 00000000 		.4byte	0
 6426              	.LLST44:
 6427 0863 00000000 		.4byte	.LVL125
 6428 0867 0C000000 		.4byte	.LVL127
 6429 086b 0100     		.2byte	0x1
 6430 086d 50       		.byte	0x50
 6431 086e 0C000000 		.4byte	.LVL127
 6432 0872 F2000000 		.4byte	.LVL154
 6433 0876 0100     		.2byte	0x1
 6434 0878 54       		.byte	0x54
 6435 0879 F2000000 		.4byte	.LVL154
 6436 087d F8000000 		.4byte	.LFE10
 6437 0881 0400     		.2byte	0x4
 6438 0883 F3       		.byte	0xf3
 6439 0884 01       		.uleb128 0x1
 6440 0885 50       		.byte	0x50
 6441 0886 9F       		.byte	0x9f
 6442 0887 00000000 		.4byte	0
 6443 088b 00000000 		.4byte	0
 6444              	.LLST45:
 6445 088f 00000000 		.4byte	.LVL125
 6446 0893 0C000000 		.4byte	.LVL127
 6447 0897 0100     		.2byte	0x1
 6448 0899 51       		.byte	0x51
 6449 089a 0C000000 		.4byte	.LVL127
 6450 089e F2000000 		.4byte	.LVL154
 6451 08a2 0100     		.2byte	0x1
 6452 08a4 57       		.byte	0x57
 6453 08a5 F2000000 		.4byte	.LVL154
 6454 08a9 F8000000 		.4byte	.LFE10
 6455 08ad 0400     		.2byte	0x4
 6456 08af F3       		.byte	0xf3
 6457 08b0 01       		.uleb128 0x1
 6458 08b1 51       		.byte	0x51
 6459 08b2 9F       		.byte	0x9f
 6460 08b3 00000000 		.4byte	0
 6461 08b7 00000000 		.4byte	0
 6462              	.LLST46:
 6463 08bb 00000000 		.4byte	.LVL125
 6464 08bf 0C000000 		.4byte	.LVL127
 6465 08c3 0100     		.2byte	0x1
 6466 08c5 52       		.byte	0x52
 6467 08c6 0C000000 		.4byte	.LVL127
 6468 08ca 92000000 		.4byte	.LVL142
 6469 08ce 0200     		.2byte	0x2
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 174


 6470 08d0 91       		.byte	0x91
 6471 08d1 5C       		.sleb128 -36
 6472 08d2 92000000 		.4byte	.LVL142
 6473 08d6 97000000 		.4byte	.LVL143-1
 6474 08da 0200     		.2byte	0x2
 6475 08dc 71       		.byte	0x71
 6476 08dd 00       		.sleb128 0
 6477 08de 97000000 		.4byte	.LVL143-1
 6478 08e2 F2000000 		.4byte	.LVL154
 6479 08e6 0200     		.2byte	0x2
 6480 08e8 91       		.byte	0x91
 6481 08e9 5C       		.sleb128 -36
 6482 08ea F2000000 		.4byte	.LVL154
 6483 08ee F8000000 		.4byte	.LFE10
 6484 08f2 0200     		.2byte	0x2
 6485 08f4 7D       		.byte	0x7d
 6486 08f5 5C       		.sleb128 -36
 6487 08f6 00000000 		.4byte	0
 6488 08fa 00000000 		.4byte	0
 6489              	.LLST47:
 6490 08fe 0A000000 		.4byte	.LVL126
 6491 0902 0C000000 		.4byte	.LVL127
 6492 0906 0200     		.2byte	0x2
 6493 0908 30       		.byte	0x30
 6494 0909 9F       		.byte	0x9f
 6495 090a 0C000000 		.4byte	.LVL127
 6496 090e 5A000000 		.4byte	.LVL136
 6497 0912 0100     		.2byte	0x1
 6498 0914 56       		.byte	0x56
 6499 0915 5A000000 		.4byte	.LVL136
 6500 0919 5C000000 		.4byte	.LVL137
 6501 091d 0200     		.2byte	0x2
 6502 091f 31       		.byte	0x31
 6503 0920 9F       		.byte	0x9f
 6504 0921 5C000000 		.4byte	.LVL137
 6505 0925 F2000000 		.4byte	.LVL154
 6506 0929 0100     		.2byte	0x1
 6507 092b 56       		.byte	0x56
 6508 092c 00000000 		.4byte	0
 6509 0930 00000000 		.4byte	0
 6510              	.LLST48:
 6511 0934 0A000000 		.4byte	.LVL126
 6512 0938 0C000000 		.4byte	.LVL127
 6513 093c 0100     		.2byte	0x1
 6514 093e 50       		.byte	0x50
 6515 093f 0C000000 		.4byte	.LVL127
 6516 0943 F2000000 		.4byte	.LVL154
 6517 0947 0100     		.2byte	0x1
 6518 0949 54       		.byte	0x54
 6519 094a F2000000 		.4byte	.LVL154
 6520 094e F8000000 		.4byte	.LFE10
 6521 0952 0400     		.2byte	0x4
 6522 0954 F3       		.byte	0xf3
 6523 0955 01       		.uleb128 0x1
 6524 0956 50       		.byte	0x50
 6525 0957 9F       		.byte	0x9f
 6526 0958 00000000 		.4byte	0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 175


 6527 095c 00000000 		.4byte	0
 6528              	.LLST49:
 6529 0960 12000000 		.4byte	.LVL129
 6530 0964 1E000000 		.4byte	.LVL131
 6531 0968 0100     		.2byte	0x1
 6532 096a 55       		.byte	0x55
 6533 096b 1E000000 		.4byte	.LVL131
 6534 096f 46000000 		.4byte	.LVL134
 6535 0973 0300     		.2byte	0x3
 6536 0975 75       		.byte	0x75
 6537 0976 01       		.sleb128 1
 6538 0977 9F       		.byte	0x9f
 6539 0978 46000000 		.4byte	.LVL134
 6540 097c EE000000 		.4byte	.LVL153
 6541 0980 0100     		.2byte	0x1
 6542 0982 55       		.byte	0x55
 6543 0983 00000000 		.4byte	0
 6544 0987 00000000 		.4byte	0
 6545              	.LLST50:
 6546 098b 00000000 		.4byte	.LVL155
 6547 098f 0A000000 		.4byte	.LVL157
 6548 0993 0100     		.2byte	0x1
 6549 0995 50       		.byte	0x50
 6550 0996 0A000000 		.4byte	.LVL157
 6551 099a E8000000 		.4byte	.LVL184
 6552 099e 0100     		.2byte	0x1
 6553 09a0 54       		.byte	0x54
 6554 09a1 E8000000 		.4byte	.LVL184
 6555 09a5 EC000000 		.4byte	.LFE11
 6556 09a9 0400     		.2byte	0x4
 6557 09ab F3       		.byte	0xf3
 6558 09ac 01       		.uleb128 0x1
 6559 09ad 50       		.byte	0x50
 6560 09ae 9F       		.byte	0x9f
 6561 09af 00000000 		.4byte	0
 6562 09b3 00000000 		.4byte	0
 6563              	.LLST51:
 6564 09b7 00000000 		.4byte	.LVL155
 6565 09bb 0A000000 		.4byte	.LVL157
 6566 09bf 0100     		.2byte	0x1
 6567 09c1 51       		.byte	0x51
 6568 09c2 0A000000 		.4byte	.LVL157
 6569 09c6 88000000 		.4byte	.LVL173
 6570 09ca 0200     		.2byte	0x2
 6571 09cc 91       		.byte	0x91
 6572 09cd 64       		.sleb128 -28
 6573 09ce 88000000 		.4byte	.LVL173
 6574 09d2 8D000000 		.4byte	.LVL174-1
 6575 09d6 0200     		.2byte	0x2
 6576 09d8 71       		.byte	0x71
 6577 09d9 00       		.sleb128 0
 6578 09da 8D000000 		.4byte	.LVL174-1
 6579 09de E8000000 		.4byte	.LVL184
 6580 09e2 0200     		.2byte	0x2
 6581 09e4 91       		.byte	0x91
 6582 09e5 64       		.sleb128 -28
 6583 09e6 E8000000 		.4byte	.LVL184
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 176


 6584 09ea EC000000 		.4byte	.LFE11
 6585 09ee 0200     		.2byte	0x2
 6586 09f0 7D       		.byte	0x7d
 6587 09f1 64       		.sleb128 -28
 6588 09f2 00000000 		.4byte	0
 6589 09f6 00000000 		.4byte	0
 6590              	.LLST52:
 6591 09fa 08000000 		.4byte	.LVL156
 6592 09fe 0A000000 		.4byte	.LVL157
 6593 0a02 0200     		.2byte	0x2
 6594 0a04 30       		.byte	0x30
 6595 0a05 9F       		.byte	0x9f
 6596 0a06 0A000000 		.4byte	.LVL157
 6597 0a0a 50000000 		.4byte	.LVL167
 6598 0a0e 0100     		.2byte	0x1
 6599 0a10 55       		.byte	0x55
 6600 0a11 50000000 		.4byte	.LVL167
 6601 0a15 52000000 		.4byte	.LVL168
 6602 0a19 0200     		.2byte	0x2
 6603 0a1b 31       		.byte	0x31
 6604 0a1c 9F       		.byte	0x9f
 6605 0a1d 52000000 		.4byte	.LVL168
 6606 0a21 E8000000 		.4byte	.LVL184
 6607 0a25 0100     		.2byte	0x1
 6608 0a27 55       		.byte	0x55
 6609 0a28 00000000 		.4byte	0
 6610 0a2c 00000000 		.4byte	0
 6611              	.LLST53:
 6612 0a30 08000000 		.4byte	.LVL156
 6613 0a34 0A000000 		.4byte	.LVL157
 6614 0a38 0100     		.2byte	0x1
 6615 0a3a 50       		.byte	0x50
 6616 0a3b 0A000000 		.4byte	.LVL157
 6617 0a3f E8000000 		.4byte	.LVL184
 6618 0a43 0100     		.2byte	0x1
 6619 0a45 54       		.byte	0x54
 6620 0a46 E8000000 		.4byte	.LVL184
 6621 0a4a EC000000 		.4byte	.LFE11
 6622 0a4e 0400     		.2byte	0x4
 6623 0a50 F3       		.byte	0xf3
 6624 0a51 01       		.uleb128 0x1
 6625 0a52 50       		.byte	0x50
 6626 0a53 9F       		.byte	0x9f
 6627 0a54 00000000 		.4byte	0
 6628 0a58 00000000 		.4byte	0
 6629              	.LLST54:
 6630 0a5c 10000000 		.4byte	.LVL159
 6631 0a60 14000000 		.4byte	.LVL160
 6632 0a64 0100     		.2byte	0x1
 6633 0a66 53       		.byte	0x53
 6634 0a67 14000000 		.4byte	.LVL160
 6635 0a6b 18000000 		.4byte	.LVL161
 6636 0a6f 0300     		.2byte	0x3
 6637 0a71 73       		.byte	0x73
 6638 0a72 01       		.sleb128 1
 6639 0a73 9F       		.byte	0x9f
 6640 0a74 18000000 		.4byte	.LVL161
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 177


 6641 0a78 21000000 		.4byte	.LVL162-1
 6642 0a7c 0600     		.2byte	0x6
 6643 0a7e 74       		.byte	0x74
 6644 0a7f 38       		.sleb128 56
 6645 0a80 06       		.byte	0x6
 6646 0a81 23       		.byte	0x23
 6647 0a82 01       		.uleb128 0x1
 6648 0a83 9F       		.byte	0x9f
 6649 0a84 3C000000 		.4byte	.LVL164
 6650 0a88 3E000000 		.4byte	.LVL165
 6651 0a8c 0100     		.2byte	0x1
 6652 0a8e 53       		.byte	0x53
 6653 0a8f 00000000 		.4byte	0
 6654 0a93 00000000 		.4byte	0
 6655              	.LLST55:
 6656 0a97 00000000 		.4byte	.LVL185
 6657 0a9b 0C000000 		.4byte	.LVL187
 6658 0a9f 0100     		.2byte	0x1
 6659 0aa1 50       		.byte	0x50
 6660 0aa2 0C000000 		.4byte	.LVL187
 6661 0aa6 F2000000 		.4byte	.LVL215
 6662 0aaa 0100     		.2byte	0x1
 6663 0aac 54       		.byte	0x54
 6664 0aad F2000000 		.4byte	.LVL215
 6665 0ab1 F8000000 		.4byte	.LFE12
 6666 0ab5 0400     		.2byte	0x4
 6667 0ab7 F3       		.byte	0xf3
 6668 0ab8 01       		.uleb128 0x1
 6669 0ab9 50       		.byte	0x50
 6670 0aba 9F       		.byte	0x9f
 6671 0abb 00000000 		.4byte	0
 6672 0abf 00000000 		.4byte	0
 6673              	.LLST56:
 6674 0ac3 00000000 		.4byte	.LVL185
 6675 0ac7 0C000000 		.4byte	.LVL187
 6676 0acb 0100     		.2byte	0x1
 6677 0acd 51       		.byte	0x51
 6678 0ace 0C000000 		.4byte	.LVL187
 6679 0ad2 F2000000 		.4byte	.LVL215
 6680 0ad6 0100     		.2byte	0x1
 6681 0ad8 56       		.byte	0x56
 6682 0ad9 F2000000 		.4byte	.LVL215
 6683 0add F8000000 		.4byte	.LFE12
 6684 0ae1 0400     		.2byte	0x4
 6685 0ae3 F3       		.byte	0xf3
 6686 0ae4 01       		.uleb128 0x1
 6687 0ae5 51       		.byte	0x51
 6688 0ae6 9F       		.byte	0x9f
 6689 0ae7 00000000 		.4byte	0
 6690 0aeb 00000000 		.4byte	0
 6691              	.LLST57:
 6692 0aef 00000000 		.4byte	.LVL185
 6693 0af3 0C000000 		.4byte	.LVL187
 6694 0af7 0100     		.2byte	0x1
 6695 0af9 52       		.byte	0x52
 6696 0afa 0C000000 		.4byte	.LVL187
 6697 0afe 92000000 		.4byte	.LVL203
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 178


 6698 0b02 0200     		.2byte	0x2
 6699 0b04 91       		.byte	0x91
 6700 0b05 64       		.sleb128 -28
 6701 0b06 92000000 		.4byte	.LVL203
 6702 0b0a 97000000 		.4byte	.LVL204-1
 6703 0b0e 0200     		.2byte	0x2
 6704 0b10 71       		.byte	0x71
 6705 0b11 00       		.sleb128 0
 6706 0b12 97000000 		.4byte	.LVL204-1
 6707 0b16 F2000000 		.4byte	.LVL215
 6708 0b1a 0200     		.2byte	0x2
 6709 0b1c 91       		.byte	0x91
 6710 0b1d 64       		.sleb128 -28
 6711 0b1e F2000000 		.4byte	.LVL215
 6712 0b22 F8000000 		.4byte	.LFE12
 6713 0b26 0200     		.2byte	0x2
 6714 0b28 7D       		.byte	0x7d
 6715 0b29 64       		.sleb128 -28
 6716 0b2a 00000000 		.4byte	0
 6717 0b2e 00000000 		.4byte	0
 6718              	.LLST58:
 6719 0b32 0A000000 		.4byte	.LVL186
 6720 0b36 0C000000 		.4byte	.LVL187
 6721 0b3a 0200     		.2byte	0x2
 6722 0b3c 30       		.byte	0x30
 6723 0b3d 9F       		.byte	0x9f
 6724 0b3e 0C000000 		.4byte	.LVL187
 6725 0b42 16000000 		.4byte	.LVL190
 6726 0b46 0100     		.2byte	0x1
 6727 0b48 55       		.byte	0x55
 6728 0b49 46000000 		.4byte	.LVL194
 6729 0b4d 5A000000 		.4byte	.LVL197
 6730 0b51 0100     		.2byte	0x1
 6731 0b53 55       		.byte	0x55
 6732 0b54 5A000000 		.4byte	.LVL197
 6733 0b58 5C000000 		.4byte	.LVL198
 6734 0b5c 0200     		.2byte	0x2
 6735 0b5e 31       		.byte	0x31
 6736 0b5f 9F       		.byte	0x9f
 6737 0b60 5C000000 		.4byte	.LVL198
 6738 0b64 EE000000 		.4byte	.LVL214
 6739 0b68 0100     		.2byte	0x1
 6740 0b6a 55       		.byte	0x55
 6741 0b6b 00000000 		.4byte	0
 6742 0b6f 00000000 		.4byte	0
 6743              	.LLST59:
 6744 0b73 16000000 		.4byte	.LVL190
 6745 0b77 46000000 		.4byte	.LVL194
 6746 0b7b 0100     		.2byte	0x1
 6747 0b7d 55       		.byte	0x55
 6748 0b7e 00000000 		.4byte	0
 6749 0b82 00000000 		.4byte	0
 6750              	.LLST60:
 6751 0b86 0A000000 		.4byte	.LVL186
 6752 0b8a 0C000000 		.4byte	.LVL187
 6753 0b8e 0100     		.2byte	0x1
 6754 0b90 50       		.byte	0x50
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 179


 6755 0b91 0C000000 		.4byte	.LVL187
 6756 0b95 F2000000 		.4byte	.LVL215
 6757 0b99 0100     		.2byte	0x1
 6758 0b9b 54       		.byte	0x54
 6759 0b9c F2000000 		.4byte	.LVL215
 6760 0ba0 F8000000 		.4byte	.LFE12
 6761 0ba4 0400     		.2byte	0x4
 6762 0ba6 F3       		.byte	0xf3
 6763 0ba7 01       		.uleb128 0x1
 6764 0ba8 50       		.byte	0x50
 6765 0ba9 9F       		.byte	0x9f
 6766 0baa 00000000 		.4byte	0
 6767 0bae 00000000 		.4byte	0
 6768              	.LLST61:
 6769 0bb2 12000000 		.4byte	.LVL189
 6770 0bb6 1D000000 		.4byte	.LVL191-1
 6771 0bba 0100     		.2byte	0x1
 6772 0bbc 53       		.byte	0x53
 6773 0bbd 46000000 		.4byte	.LVL194
 6774 0bc1 48000000 		.4byte	.LVL195
 6775 0bc5 0100     		.2byte	0x1
 6776 0bc7 53       		.byte	0x53
 6777 0bc8 00000000 		.4byte	0
 6778 0bcc 00000000 		.4byte	0
 6779              	.LLST62:
 6780 0bd0 00000000 		.4byte	.LVL216
 6781 0bd4 29000000 		.4byte	.LVL220-1
 6782 0bd8 0100     		.2byte	0x1
 6783 0bda 50       		.byte	0x50
 6784 0bdb 29000000 		.4byte	.LVL220-1
 6785 0bdf 5C000000 		.4byte	.LVL225
 6786 0be3 0100     		.2byte	0x1
 6787 0be5 57       		.byte	0x57
 6788 0be6 5C000000 		.4byte	.LVL225
 6789 0bea 5E000000 		.4byte	.LVL226
 6790 0bee 0100     		.2byte	0x1
 6791 0bf0 50       		.byte	0x50
 6792 0bf1 5E000000 		.4byte	.LVL226
 6793 0bf5 60000000 		.4byte	.LVL227
 6794 0bf9 0400     		.2byte	0x4
 6795 0bfb F3       		.byte	0xf3
 6796 0bfc 01       		.uleb128 0x1
 6797 0bfd 50       		.byte	0x50
 6798 0bfe 9F       		.byte	0x9f
 6799 0bff 60000000 		.4byte	.LVL227
 6800 0c03 6A000000 		.4byte	.LVL228
 6801 0c07 0100     		.2byte	0x1
 6802 0c09 57       		.byte	0x57
 6803 0c0a 6A000000 		.4byte	.LVL228
 6804 0c0e 72000000 		.4byte	.LFE13
 6805 0c12 0400     		.2byte	0x4
 6806 0c14 F3       		.byte	0xf3
 6807 0c15 01       		.uleb128 0x1
 6808 0c16 50       		.byte	0x50
 6809 0c17 9F       		.byte	0x9f
 6810 0c18 00000000 		.4byte	0
 6811 0c1c 00000000 		.4byte	0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 180


 6812              	.LLST63:
 6813 0c20 00000000 		.4byte	.LVL216
 6814 0c24 29000000 		.4byte	.LVL220-1
 6815 0c28 0100     		.2byte	0x1
 6816 0c2a 51       		.byte	0x51
 6817 0c2b 29000000 		.4byte	.LVL220-1
 6818 0c2f 5C000000 		.4byte	.LVL225
 6819 0c33 0400     		.2byte	0x4
 6820 0c35 F3       		.byte	0xf3
 6821 0c36 01       		.uleb128 0x1
 6822 0c37 51       		.byte	0x51
 6823 0c38 9F       		.byte	0x9f
 6824 0c39 5C000000 		.4byte	.LVL225
 6825 0c3d 60000000 		.4byte	.LVL227
 6826 0c41 0100     		.2byte	0x1
 6827 0c43 51       		.byte	0x51
 6828 0c44 60000000 		.4byte	.LVL227
 6829 0c48 72000000 		.4byte	.LFE13
 6830 0c4c 0400     		.2byte	0x4
 6831 0c4e F3       		.byte	0xf3
 6832 0c4f 01       		.uleb128 0x1
 6833 0c50 51       		.byte	0x51
 6834 0c51 9F       		.byte	0x9f
 6835 0c52 00000000 		.4byte	0
 6836 0c56 00000000 		.4byte	0
 6837              	.LLST64:
 6838 0c5a 00000000 		.4byte	.LVL216
 6839 0c5e 29000000 		.4byte	.LVL220-1
 6840 0c62 0100     		.2byte	0x1
 6841 0c64 52       		.byte	0x52
 6842 0c65 29000000 		.4byte	.LVL220-1
 6843 0c69 5C000000 		.4byte	.LVL225
 6844 0c6d 0100     		.2byte	0x1
 6845 0c6f 58       		.byte	0x58
 6846 0c70 5C000000 		.4byte	.LVL225
 6847 0c74 60000000 		.4byte	.LVL227
 6848 0c78 0100     		.2byte	0x1
 6849 0c7a 52       		.byte	0x52
 6850 0c7b 60000000 		.4byte	.LVL227
 6851 0c7f 6A000000 		.4byte	.LVL228
 6852 0c83 0100     		.2byte	0x1
 6853 0c85 58       		.byte	0x58
 6854 0c86 6A000000 		.4byte	.LVL228
 6855 0c8a 72000000 		.4byte	.LFE13
 6856 0c8e 0400     		.2byte	0x4
 6857 0c90 F3       		.byte	0xf3
 6858 0c91 01       		.uleb128 0x1
 6859 0c92 52       		.byte	0x52
 6860 0c93 9F       		.byte	0x9f
 6861 0c94 00000000 		.4byte	0
 6862 0c98 00000000 		.4byte	0
 6863              	.LLST65:
 6864 0c9c 04000000 		.4byte	.LVL217
 6865 0ca0 29000000 		.4byte	.LVL220-1
 6866 0ca4 0100     		.2byte	0x1
 6867 0ca6 50       		.byte	0x50
 6868 0ca7 29000000 		.4byte	.LVL220-1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 181


 6869 0cab 5C000000 		.4byte	.LVL225
 6870 0caf 0100     		.2byte	0x1
 6871 0cb1 57       		.byte	0x57
 6872 0cb2 5C000000 		.4byte	.LVL225
 6873 0cb6 5E000000 		.4byte	.LVL226
 6874 0cba 0100     		.2byte	0x1
 6875 0cbc 50       		.byte	0x50
 6876 0cbd 5E000000 		.4byte	.LVL226
 6877 0cc1 60000000 		.4byte	.LVL227
 6878 0cc5 0400     		.2byte	0x4
 6879 0cc7 F3       		.byte	0xf3
 6880 0cc8 01       		.uleb128 0x1
 6881 0cc9 50       		.byte	0x50
 6882 0cca 9F       		.byte	0x9f
 6883 0ccb 60000000 		.4byte	.LVL227
 6884 0ccf 6A000000 		.4byte	.LVL228
 6885 0cd3 0100     		.2byte	0x1
 6886 0cd5 57       		.byte	0x57
 6887 0cd6 6A000000 		.4byte	.LVL228
 6888 0cda 72000000 		.4byte	.LFE13
 6889 0cde 0400     		.2byte	0x4
 6890 0ce0 F3       		.byte	0xf3
 6891 0ce1 01       		.uleb128 0x1
 6892 0ce2 50       		.byte	0x50
 6893 0ce3 9F       		.byte	0x9f
 6894 0ce4 00000000 		.4byte	0
 6895 0ce8 00000000 		.4byte	0
 6896              	.LLST66:
 6897 0cec 1A000000 		.4byte	.LVL218
 6898 0cf0 2C000000 		.4byte	.LVL221
 6899 0cf4 0100     		.2byte	0x1
 6900 0cf6 54       		.byte	0x54
 6901 0cf7 2C000000 		.4byte	.LVL221
 6902 0cfb 5C000000 		.4byte	.LVL225
 6903 0cff 0300     		.2byte	0x3
 6904 0d01 74       		.byte	0x74
 6905 0d02 01       		.sleb128 1
 6906 0d03 9F       		.byte	0x9f
 6907 0d04 5C000000 		.4byte	.LVL225
 6908 0d08 60000000 		.4byte	.LVL227
 6909 0d0c 0100     		.2byte	0x1
 6910 0d0e 54       		.byte	0x54
 6911 0d0f 60000000 		.4byte	.LVL227
 6912 0d13 6A000000 		.4byte	.LVL228
 6913 0d17 0300     		.2byte	0x3
 6914 0d19 74       		.byte	0x74
 6915 0d1a 01       		.sleb128 1
 6916 0d1b 9F       		.byte	0x9f
 6917 0d1c 00000000 		.4byte	0
 6918 0d20 00000000 		.4byte	0
 6919              	.LLST67:
 6920 0d24 26000000 		.4byte	.LVL219
 6921 0d28 52000000 		.4byte	.LVL223
 6922 0d2c 0100     		.2byte	0x1
 6923 0d2e 55       		.byte	0x55
 6924 0d2f 52000000 		.4byte	.LVL223
 6925 0d33 54000000 		.4byte	.LVL224
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 182


 6926 0d37 0300     		.2byte	0x3
 6927 0d39 75       		.byte	0x75
 6928 0d3a 7F       		.sleb128 -1
 6929 0d3b 9F       		.byte	0x9f
 6930 0d3c 60000000 		.4byte	.LVL227
 6931 0d40 6A000000 		.4byte	.LVL228
 6932 0d44 0100     		.2byte	0x1
 6933 0d46 55       		.byte	0x55
 6934 0d47 00000000 		.4byte	0
 6935 0d4b 00000000 		.4byte	0
 6936              	.LLST68:
 6937 0d4f 6A000000 		.4byte	.LVL228
 6938 0d53 6E000000 		.4byte	.LVL229
 6939 0d57 0100     		.2byte	0x1
 6940 0d59 56       		.byte	0x56
 6941 0d5a 00000000 		.4byte	0
 6942 0d5e 00000000 		.4byte	0
 6943              	.LLST69:
 6944 0d62 00000000 		.4byte	.LVL230
 6945 0d66 21000000 		.4byte	.LVL233-1
 6946 0d6a 0100     		.2byte	0x1
 6947 0d6c 50       		.byte	0x50
 6948 0d6d 21000000 		.4byte	.LVL233-1
 6949 0d71 28000000 		.4byte	.LVL235
 6950 0d75 0100     		.2byte	0x1
 6951 0d77 54       		.byte	0x54
 6952 0d78 28000000 		.4byte	.LVL235
 6953 0d7c 2A000000 		.4byte	.LVL236
 6954 0d80 0100     		.2byte	0x1
 6955 0d82 50       		.byte	0x50
 6956 0d83 2A000000 		.4byte	.LVL236
 6957 0d87 30000000 		.4byte	.LFE14
 6958 0d8b 0400     		.2byte	0x4
 6959 0d8d F3       		.byte	0xf3
 6960 0d8e 01       		.uleb128 0x1
 6961 0d8f 50       		.byte	0x50
 6962 0d90 9F       		.byte	0x9f
 6963 0d91 00000000 		.4byte	0
 6964 0d95 00000000 		.4byte	0
 6965              	.LLST70:
 6966 0d99 00000000 		.4byte	.LVL230
 6967 0d9d 21000000 		.4byte	.LVL233-1
 6968 0da1 0100     		.2byte	0x1
 6969 0da3 51       		.byte	0x51
 6970 0da4 21000000 		.4byte	.LVL233-1
 6971 0da8 28000000 		.4byte	.LVL235
 6972 0dac 0400     		.2byte	0x4
 6973 0dae F3       		.byte	0xf3
 6974 0daf 01       		.uleb128 0x1
 6975 0db0 51       		.byte	0x51
 6976 0db1 9F       		.byte	0x9f
 6977 0db2 28000000 		.4byte	.LVL235
 6978 0db6 2A000000 		.4byte	.LVL236
 6979 0dba 0100     		.2byte	0x1
 6980 0dbc 51       		.byte	0x51
 6981 0dbd 2A000000 		.4byte	.LVL236
 6982 0dc1 30000000 		.4byte	.LFE14
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 183


 6983 0dc5 0400     		.2byte	0x4
 6984 0dc7 F3       		.byte	0xf3
 6985 0dc8 01       		.uleb128 0x1
 6986 0dc9 51       		.byte	0x51
 6987 0dca 9F       		.byte	0x9f
 6988 0dcb 00000000 		.4byte	0
 6989 0dcf 00000000 		.4byte	0
 6990              	.LLST71:
 6991 0dd3 24000000 		.4byte	.LVL234
 6992 0dd7 28000000 		.4byte	.LVL235
 6993 0ddb 0200     		.2byte	0x2
 6994 0ddd 31       		.byte	0x31
 6995 0dde 9F       		.byte	0x9f
 6996 0ddf 2A000000 		.4byte	.LVL236
 6997 0de3 30000000 		.4byte	.LFE14
 6998 0de7 0100     		.2byte	0x1
 6999 0de9 50       		.byte	0x50
 7000 0dea 00000000 		.4byte	0
 7001 0dee 00000000 		.4byte	0
 7002              	.LLST72:
 7003 0df2 1E000000 		.4byte	.LVL232
 7004 0df6 28000000 		.4byte	.LVL235
 7005 0dfa 0100     		.2byte	0x1
 7006 0dfc 56       		.byte	0x56
 7007 0dfd 00000000 		.4byte	0
 7008 0e01 00000000 		.4byte	0
 7009              	.LLST73:
 7010 0e05 02000000 		.4byte	.LVL231
 7011 0e09 21000000 		.4byte	.LVL233-1
 7012 0e0d 0100     		.2byte	0x1
 7013 0e0f 50       		.byte	0x50
 7014 0e10 21000000 		.4byte	.LVL233-1
 7015 0e14 28000000 		.4byte	.LVL235
 7016 0e18 0100     		.2byte	0x1
 7017 0e1a 54       		.byte	0x54
 7018 0e1b 28000000 		.4byte	.LVL235
 7019 0e1f 2A000000 		.4byte	.LVL236
 7020 0e23 0100     		.2byte	0x1
 7021 0e25 50       		.byte	0x50
 7022 0e26 2A000000 		.4byte	.LVL236
 7023 0e2a 30000000 		.4byte	.LFE14
 7024 0e2e 0400     		.2byte	0x4
 7025 0e30 F3       		.byte	0xf3
 7026 0e31 01       		.uleb128 0x1
 7027 0e32 50       		.byte	0x50
 7028 0e33 9F       		.byte	0x9f
 7029 0e34 00000000 		.4byte	0
 7030 0e38 00000000 		.4byte	0
 7031              	.LLST74:
 7032 0e3c 2A000000 		.4byte	.LVL236
 7033 0e40 2E000000 		.4byte	.LVL237
 7034 0e44 0100     		.2byte	0x1
 7035 0e46 55       		.byte	0x55
 7036 0e47 00000000 		.4byte	0
 7037 0e4b 00000000 		.4byte	0
 7038              	.LLST75:
 7039 0e4f 00000000 		.4byte	.LVL238
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 184


 7040 0e53 07000000 		.4byte	.LVL239-1
 7041 0e57 0100     		.2byte	0x1
 7042 0e59 50       		.byte	0x50
 7043 0e5a 07000000 		.4byte	.LVL239-1
 7044 0e5e 0A000000 		.4byte	.LVL240
 7045 0e62 0100     		.2byte	0x1
 7046 0e64 54       		.byte	0x54
 7047 0e65 0A000000 		.4byte	.LVL240
 7048 0e69 12000000 		.4byte	.LFE15
 7049 0e6d 0400     		.2byte	0x4
 7050 0e6f F3       		.byte	0xf3
 7051 0e70 01       		.uleb128 0x1
 7052 0e71 50       		.byte	0x50
 7053 0e72 9F       		.byte	0x9f
 7054 0e73 00000000 		.4byte	0
 7055 0e77 00000000 		.4byte	0
 7056              	.LLST76:
 7057 0e7b 00000000 		.4byte	.LVL242
 7058 0e7f 07000000 		.4byte	.LVL244-1
 7059 0e83 0100     		.2byte	0x1
 7060 0e85 50       		.byte	0x50
 7061 0e86 07000000 		.4byte	.LVL244-1
 7062 0e8a 0C000000 		.4byte	.LVL245
 7063 0e8e 0100     		.2byte	0x1
 7064 0e90 54       		.byte	0x54
 7065 0e91 0C000000 		.4byte	.LVL245
 7066 0e95 16000000 		.4byte	.LFE16
 7067 0e99 0400     		.2byte	0x4
 7068 0e9b F3       		.byte	0xf3
 7069 0e9c 01       		.uleb128 0x1
 7070 0e9d 50       		.byte	0x50
 7071 0e9e 9F       		.byte	0x9f
 7072 0e9f 00000000 		.4byte	0
 7073 0ea3 00000000 		.4byte	0
 7074              	.LLST77:
 7075 0ea7 04000000 		.4byte	.LVL243
 7076 0eab 07000000 		.4byte	.LVL244-1
 7077 0eaf 0100     		.2byte	0x1
 7078 0eb1 50       		.byte	0x50
 7079 0eb2 07000000 		.4byte	.LVL244-1
 7080 0eb6 0C000000 		.4byte	.LVL245
 7081 0eba 0100     		.2byte	0x1
 7082 0ebc 54       		.byte	0x54
 7083 0ebd 0C000000 		.4byte	.LVL245
 7084 0ec1 16000000 		.4byte	.LFE16
 7085 0ec5 0400     		.2byte	0x4
 7086 0ec7 F3       		.byte	0xf3
 7087 0ec8 01       		.uleb128 0x1
 7088 0ec9 50       		.byte	0x50
 7089 0eca 9F       		.byte	0x9f
 7090 0ecb 00000000 		.4byte	0
 7091 0ecf 00000000 		.4byte	0
 7092              	.LLST78:
 7093 0ed3 00000000 		.4byte	.LVL248
 7094 0ed7 02000000 		.4byte	.LVL249
 7095 0edb 0100     		.2byte	0x1
 7096 0edd 50       		.byte	0x50
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 185


 7097 0ede 02000000 		.4byte	.LVL249
 7098 0ee2 04000000 		.4byte	.LFE17
 7099 0ee6 0400     		.2byte	0x4
 7100 0ee8 F3       		.byte	0xf3
 7101 0ee9 01       		.uleb128 0x1
 7102 0eea 50       		.byte	0x50
 7103 0eeb 9F       		.byte	0x9f
 7104 0eec 00000000 		.4byte	0
 7105 0ef0 00000000 		.4byte	0
 7106              	.LLST79:
 7107 0ef4 00000000 		.4byte	.LVL248
 7108 0ef8 02000000 		.4byte	.LVL249
 7109 0efc 0100     		.2byte	0x1
 7110 0efe 50       		.byte	0x50
 7111 0eff 02000000 		.4byte	.LVL249
 7112 0f03 04000000 		.4byte	.LFE17
 7113 0f07 0400     		.2byte	0x4
 7114 0f09 F3       		.byte	0xf3
 7115 0f0a 01       		.uleb128 0x1
 7116 0f0b 50       		.byte	0x50
 7117 0f0c 9F       		.byte	0x9f
 7118 0f0d 00000000 		.4byte	0
 7119 0f11 00000000 		.4byte	0
 7120              	.LLST80:
 7121 0f15 00000000 		.4byte	.LVL250
 7122 0f19 06000000 		.4byte	.LVL251
 7123 0f1d 0100     		.2byte	0x1
 7124 0f1f 50       		.byte	0x50
 7125 0f20 06000000 		.4byte	.LVL251
 7126 0f24 08000000 		.4byte	.LVL252
 7127 0f28 0400     		.2byte	0x4
 7128 0f2a F3       		.byte	0xf3
 7129 0f2b 01       		.uleb128 0x1
 7130 0f2c 50       		.byte	0x50
 7131 0f2d 9F       		.byte	0x9f
 7132 0f2e 08000000 		.4byte	.LVL252
 7133 0f32 0A000000 		.4byte	.LVL253
 7134 0f36 0100     		.2byte	0x1
 7135 0f38 50       		.byte	0x50
 7136 0f39 0A000000 		.4byte	.LVL253
 7137 0f3d 0C000000 		.4byte	.LFE23
 7138 0f41 0400     		.2byte	0x4
 7139 0f43 F3       		.byte	0xf3
 7140 0f44 01       		.uleb128 0x1
 7141 0f45 50       		.byte	0x50
 7142 0f46 9F       		.byte	0x9f
 7143 0f47 00000000 		.4byte	0
 7144 0f4b 00000000 		.4byte	0
 7145              	.LLST81:
 7146 0f4f 00000000 		.4byte	.LVL250
 7147 0f53 06000000 		.4byte	.LVL251
 7148 0f57 0100     		.2byte	0x1
 7149 0f59 50       		.byte	0x50
 7150 0f5a 06000000 		.4byte	.LVL251
 7151 0f5e 08000000 		.4byte	.LVL252
 7152 0f62 0400     		.2byte	0x4
 7153 0f64 F3       		.byte	0xf3
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 186


 7154 0f65 01       		.uleb128 0x1
 7155 0f66 50       		.byte	0x50
 7156 0f67 9F       		.byte	0x9f
 7157 0f68 08000000 		.4byte	.LVL252
 7158 0f6c 0A000000 		.4byte	.LVL253
 7159 0f70 0100     		.2byte	0x1
 7160 0f72 50       		.byte	0x50
 7161 0f73 0A000000 		.4byte	.LVL253
 7162 0f77 0C000000 		.4byte	.LFE23
 7163 0f7b 0400     		.2byte	0x4
 7164 0f7d F3       		.byte	0xf3
 7165 0f7e 01       		.uleb128 0x1
 7166 0f7f 50       		.byte	0x50
 7167 0f80 9F       		.byte	0x9f
 7168 0f81 00000000 		.4byte	0
 7169 0f85 00000000 		.4byte	0
 7170              	.LLST82:
 7171 0f89 00000000 		.4byte	.LVL254
 7172 0f8d 0A000000 		.4byte	.LVL255
 7173 0f91 0100     		.2byte	0x1
 7174 0f93 50       		.byte	0x50
 7175 0f94 0A000000 		.4byte	.LVL255
 7176 0f98 0C000000 		.4byte	.LVL256
 7177 0f9c 0400     		.2byte	0x4
 7178 0f9e F3       		.byte	0xf3
 7179 0f9f 01       		.uleb128 0x1
 7180 0fa0 50       		.byte	0x50
 7181 0fa1 9F       		.byte	0x9f
 7182 0fa2 0C000000 		.4byte	.LVL256
 7183 0fa6 0E000000 		.4byte	.LVL257
 7184 0faa 0100     		.2byte	0x1
 7185 0fac 50       		.byte	0x50
 7186 0fad 0E000000 		.4byte	.LVL257
 7187 0fb1 10000000 		.4byte	.LFE25
 7188 0fb5 0400     		.2byte	0x4
 7189 0fb7 F3       		.byte	0xf3
 7190 0fb8 01       		.uleb128 0x1
 7191 0fb9 50       		.byte	0x50
 7192 0fba 9F       		.byte	0x9f
 7193 0fbb 00000000 		.4byte	0
 7194 0fbf 00000000 		.4byte	0
 7195              	.LLST83:
 7196 0fc3 00000000 		.4byte	.LVL254
 7197 0fc7 0A000000 		.4byte	.LVL255
 7198 0fcb 0100     		.2byte	0x1
 7199 0fcd 50       		.byte	0x50
 7200 0fce 0A000000 		.4byte	.LVL255
 7201 0fd2 0C000000 		.4byte	.LVL256
 7202 0fd6 0400     		.2byte	0x4
 7203 0fd8 F3       		.byte	0xf3
 7204 0fd9 01       		.uleb128 0x1
 7205 0fda 50       		.byte	0x50
 7206 0fdb 9F       		.byte	0x9f
 7207 0fdc 0C000000 		.4byte	.LVL256
 7208 0fe0 0E000000 		.4byte	.LVL257
 7209 0fe4 0100     		.2byte	0x1
 7210 0fe6 50       		.byte	0x50
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 187


 7211 0fe7 0E000000 		.4byte	.LVL257
 7212 0feb 10000000 		.4byte	.LFE25
 7213 0fef 0400     		.2byte	0x4
 7214 0ff1 F3       		.byte	0xf3
 7215 0ff2 01       		.uleb128 0x1
 7216 0ff3 50       		.byte	0x50
 7217 0ff4 9F       		.byte	0x9f
 7218 0ff5 00000000 		.4byte	0
 7219 0ff9 00000000 		.4byte	0
 7220              	.LLST84:
 7221 0ffd 00000000 		.4byte	.LVL258
 7222 1001 04000000 		.4byte	.LVL259
 7223 1005 0200     		.2byte	0x2
 7224 1007 30       		.byte	0x30
 7225 1008 9F       		.byte	0x9f
 7226 1009 04000000 		.4byte	.LVL259
 7227 100d 16000000 		.4byte	.LVL260
 7228 1011 0100     		.2byte	0x1
 7229 1013 53       		.byte	0x53
 7230 1014 1A000000 		.4byte	.LVL261
 7231 1018 28000000 		.4byte	.LFE26
 7232 101c 0100     		.2byte	0x1
 7233 101e 53       		.byte	0x53
 7234 101f 00000000 		.4byte	0
 7235 1023 00000000 		.4byte	0
 7236              	.LLST85:
 7237 1027 00000000 		.4byte	.LVL263
 7238 102b 16000000 		.4byte	.LVL265
 7239 102f 0100     		.2byte	0x1
 7240 1031 50       		.byte	0x50
 7241 1032 16000000 		.4byte	.LVL265
 7242 1036 18000000 		.4byte	.LVL266
 7243 103a 0400     		.2byte	0x4
 7244 103c F3       		.byte	0xf3
 7245 103d 01       		.uleb128 0x1
 7246 103e 50       		.byte	0x50
 7247 103f 9F       		.byte	0x9f
 7248 1040 18000000 		.4byte	.LVL266
 7249 1044 20000000 		.4byte	.LVL268
 7250 1048 0100     		.2byte	0x1
 7251 104a 50       		.byte	0x50
 7252 104b 20000000 		.4byte	.LVL268
 7253 104f 28000000 		.4byte	.LFE27
 7254 1053 0400     		.2byte	0x4
 7255 1055 F3       		.byte	0xf3
 7256 1056 01       		.uleb128 0x1
 7257 1057 50       		.byte	0x50
 7258 1058 9F       		.byte	0x9f
 7259 1059 00000000 		.4byte	0
 7260 105d 00000000 		.4byte	0
 7261              	.LLST86:
 7262 1061 00000000 		.4byte	.LVL263
 7263 1065 04000000 		.4byte	.LVL264
 7264 1069 0200     		.2byte	0x2
 7265 106b 30       		.byte	0x30
 7266 106c 9F       		.byte	0x9f
 7267 106d 04000000 		.4byte	.LVL264
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 188


 7268 1071 28000000 		.4byte	.LFE27
 7269 1075 0100     		.2byte	0x1
 7270 1077 53       		.byte	0x53
 7271 1078 00000000 		.4byte	0
 7272 107c 00000000 		.4byte	0
 7273              	.LLST87:
 7274 1080 00000000 		.4byte	.LVL263
 7275 1084 16000000 		.4byte	.LVL265
 7276 1088 0200     		.2byte	0x2
 7277 108a 30       		.byte	0x30
 7278 108b 9F       		.byte	0x9f
 7279 108c 16000000 		.4byte	.LVL265
 7280 1090 18000000 		.4byte	.LVL266
 7281 1094 0100     		.2byte	0x1
 7282 1096 50       		.byte	0x50
 7283 1097 18000000 		.4byte	.LVL266
 7284 109b 20000000 		.4byte	.LVL268
 7285 109f 0200     		.2byte	0x2
 7286 10a1 30       		.byte	0x30
 7287 10a2 9F       		.byte	0x9f
 7288 10a3 20000000 		.4byte	.LVL268
 7289 10a7 28000000 		.4byte	.LFE27
 7290 10ab 0100     		.2byte	0x1
 7291 10ad 50       		.byte	0x50
 7292 10ae 00000000 		.4byte	0
 7293 10b2 00000000 		.4byte	0
 7294              	.LLST88:
 7295 10b6 00000000 		.4byte	.LVL269
 7296 10ba 04000000 		.4byte	.LVL270
 7297 10be 0200     		.2byte	0x2
 7298 10c0 30       		.byte	0x30
 7299 10c1 9F       		.byte	0x9f
 7300 10c2 04000000 		.4byte	.LVL270
 7301 10c6 1C000000 		.4byte	.LVL271
 7302 10ca 0100     		.2byte	0x1
 7303 10cc 53       		.byte	0x53
 7304 10cd 20000000 		.4byte	.LVL272
 7305 10d1 2C000000 		.4byte	.LFE28
 7306 10d5 0100     		.2byte	0x1
 7307 10d7 53       		.byte	0x53
 7308 10d8 00000000 		.4byte	0
 7309 10dc 00000000 		.4byte	0
 7310              	.LLST89:
 7311 10e0 00000000 		.4byte	.LVL274
 7312 10e4 07000000 		.4byte	.LVL276-1
 7313 10e8 0100     		.2byte	0x1
 7314 10ea 50       		.byte	0x50
 7315 10eb 07000000 		.4byte	.LVL276-1
 7316 10ef 10000000 		.4byte	.LFE18
 7317 10f3 0100     		.2byte	0x1
 7318 10f5 54       		.byte	0x54
 7319 10f6 00000000 		.4byte	0
 7320 10fa 00000000 		.4byte	0
 7321              	.LLST90:
 7322 10fe 04000000 		.4byte	.LVL275
 7323 1102 07000000 		.4byte	.LVL276-1
 7324 1106 0100     		.2byte	0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 189


 7325 1108 50       		.byte	0x50
 7326 1109 07000000 		.4byte	.LVL276-1
 7327 110d 10000000 		.4byte	.LFE18
 7328 1111 0100     		.2byte	0x1
 7329 1113 54       		.byte	0x54
 7330 1114 00000000 		.4byte	0
 7331 1118 00000000 		.4byte	0
 7332              	.LLST91:
 7333 111c 00000000 		.4byte	.LVL278
 7334 1120 0B000000 		.4byte	.LVL280-1
 7335 1124 0100     		.2byte	0x1
 7336 1126 50       		.byte	0x50
 7337 1127 0B000000 		.4byte	.LVL280-1
 7338 112b 4C000000 		.4byte	.LFE29
 7339 112f 0100     		.2byte	0x1
 7340 1131 54       		.byte	0x54
 7341 1132 00000000 		.4byte	0
 7342 1136 00000000 		.4byte	0
 7343              	.LLST92:
 7344 113a 00000000 		.4byte	.LVL278
 7345 113e 0B000000 		.4byte	.LVL280-1
 7346 1142 0100     		.2byte	0x1
 7347 1144 51       		.byte	0x51
 7348 1145 0B000000 		.4byte	.LVL280-1
 7349 1149 4C000000 		.4byte	.LFE29
 7350 114d 0100     		.2byte	0x1
 7351 114f 55       		.byte	0x55
 7352 1150 00000000 		.4byte	0
 7353 1154 00000000 		.4byte	0
 7354              	.LLST93:
 7355 1158 00000000 		.4byte	.LVL278
 7356 115c 0B000000 		.4byte	.LVL280-1
 7357 1160 0100     		.2byte	0x1
 7358 1162 52       		.byte	0x52
 7359 1163 0B000000 		.4byte	.LVL280-1
 7360 1167 4C000000 		.4byte	.LFE29
 7361 116b 0100     		.2byte	0x1
 7362 116d 56       		.byte	0x56
 7363 116e 00000000 		.4byte	0
 7364 1172 00000000 		.4byte	0
 7365              	.LLST94:
 7366 1176 08000000 		.4byte	.LVL279
 7367 117a 0B000000 		.4byte	.LVL280-1
 7368 117e 0100     		.2byte	0x1
 7369 1180 50       		.byte	0x50
 7370 1181 0B000000 		.4byte	.LVL280-1
 7371 1185 4C000000 		.4byte	.LFE29
 7372 1189 0100     		.2byte	0x1
 7373 118b 54       		.byte	0x54
 7374 118c 00000000 		.4byte	0
 7375 1190 00000000 		.4byte	0
 7376              		.section	.debug_aranges,"",%progbits
 7377 0000 E4000000 		.4byte	0xe4
 7378 0004 0200     		.2byte	0x2
 7379 0006 00000000 		.4byte	.Ldebug_info0
 7380 000a 04       		.byte	0x4
 7381 000b 00       		.byte	0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 190


 7382 000c 0000     		.2byte	0
 7383 000e 0000     		.2byte	0
 7384 0010 00000000 		.4byte	.LFB24
 7385 0014 1E000000 		.4byte	.LFE24-.LFB24
 7386 0018 00000000 		.4byte	.LFB22
 7387 001c 1A000000 		.4byte	.LFE22-.LFB22
 7388 0020 00000000 		.4byte	.LFB19
 7389 0024 54000000 		.4byte	.LFE19-.LFB19
 7390 0028 00000000 		.4byte	.LFB20
 7391 002c 24000000 		.4byte	.LFE20-.LFB20
 7392 0030 00000000 		.4byte	.LFB21
 7393 0034 66000000 		.4byte	.LFE21-.LFB21
 7394 0038 00000000 		.4byte	.LFB4
 7395 003c 6C000000 		.4byte	.LFE4-.LFB4
 7396 0040 00000000 		.4byte	.LFB6
 7397 0044 1C000000 		.4byte	.LFE6-.LFB6
 7398 0048 00000000 		.4byte	.LFB5
 7399 004c 2E000000 		.4byte	.LFE5-.LFB5
 7400 0050 00000000 		.4byte	.LFB7
 7401 0054 08010000 		.4byte	.LFE7-.LFB7
 7402 0058 00000000 		.4byte	.LFB8
 7403 005c 70000000 		.4byte	.LFE8-.LFB8
 7404 0060 00000000 		.4byte	.LFB9
 7405 0064 64000000 		.4byte	.LFE9-.LFB9
 7406 0068 00000000 		.4byte	.LFB10
 7407 006c F8000000 		.4byte	.LFE10-.LFB10
 7408 0070 00000000 		.4byte	.LFB11
 7409 0074 EC000000 		.4byte	.LFE11-.LFB11
 7410 0078 00000000 		.4byte	.LFB12
 7411 007c F8000000 		.4byte	.LFE12-.LFB12
 7412 0080 00000000 		.4byte	.LFB13
 7413 0084 72000000 		.4byte	.LFE13-.LFB13
 7414 0088 00000000 		.4byte	.LFB14
 7415 008c 30000000 		.4byte	.LFE14-.LFB14
 7416 0090 00000000 		.4byte	.LFB15
 7417 0094 12000000 		.4byte	.LFE15-.LFB15
 7418 0098 00000000 		.4byte	.LFB16
 7419 009c 16000000 		.4byte	.LFE16-.LFB16
 7420 00a0 00000000 		.4byte	.LFB17
 7421 00a4 04000000 		.4byte	.LFE17-.LFB17
 7422 00a8 00000000 		.4byte	.LFB23
 7423 00ac 0C000000 		.4byte	.LFE23-.LFB23
 7424 00b0 00000000 		.4byte	.LFB25
 7425 00b4 10000000 		.4byte	.LFE25-.LFB25
 7426 00b8 00000000 		.4byte	.LFB26
 7427 00bc 28000000 		.4byte	.LFE26-.LFB26
 7428 00c0 00000000 		.4byte	.LFB27
 7429 00c4 28000000 		.4byte	.LFE27-.LFB27
 7430 00c8 00000000 		.4byte	.LFB28
 7431 00cc 2C000000 		.4byte	.LFE28-.LFB28
 7432 00d0 00000000 		.4byte	.LFB18
 7433 00d4 10000000 		.4byte	.LFE18-.LFB18
 7434 00d8 00000000 		.4byte	.LFB29
 7435 00dc 4C000000 		.4byte	.LFE29-.LFB29
 7436 00e0 00000000 		.4byte	0
 7437 00e4 00000000 		.4byte	0
 7438              		.section	.debug_ranges,"",%progbits
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 191


 7439              	.Ldebug_ranges0:
 7440 0000 26000000 		.4byte	.LBB27
 7441 0004 5C000000 		.4byte	.LBE27
 7442 0008 60000000 		.4byte	.LBB28
 7443 000c 6A000000 		.4byte	.LBE28
 7444 0010 00000000 		.4byte	0
 7445 0014 00000000 		.4byte	0
 7446 0018 1E000000 		.4byte	.LBB34
 7447 001c 50000000 		.4byte	.LBE34
 7448 0020 54000000 		.4byte	.LBB35
 7449 0024 5E000000 		.4byte	.LBE35
 7450 0028 00000000 		.4byte	0
 7451 002c 00000000 		.4byte	0
 7452 0030 20000000 		.4byte	.LBB44
 7453 0034 5C000000 		.4byte	.LBE44
 7454 0038 60000000 		.4byte	.LBB45
 7455 003c 6A000000 		.4byte	.LBE45
 7456 0040 00000000 		.4byte	0
 7457 0044 00000000 		.4byte	0
 7458 0048 00000000 		.4byte	.LFB24
 7459 004c 1E000000 		.4byte	.LFE24
 7460 0050 00000000 		.4byte	.LFB22
 7461 0054 1A000000 		.4byte	.LFE22
 7462 0058 00000000 		.4byte	.LFB19
 7463 005c 54000000 		.4byte	.LFE19
 7464 0060 00000000 		.4byte	.LFB20
 7465 0064 24000000 		.4byte	.LFE20
 7466 0068 00000000 		.4byte	.LFB21
 7467 006c 66000000 		.4byte	.LFE21
 7468 0070 00000000 		.4byte	.LFB4
 7469 0074 6C000000 		.4byte	.LFE4
 7470 0078 00000000 		.4byte	.LFB6
 7471 007c 1C000000 		.4byte	.LFE6
 7472 0080 00000000 		.4byte	.LFB5
 7473 0084 2E000000 		.4byte	.LFE5
 7474 0088 00000000 		.4byte	.LFB7
 7475 008c 08010000 		.4byte	.LFE7
 7476 0090 00000000 		.4byte	.LFB8
 7477 0094 70000000 		.4byte	.LFE8
 7478 0098 00000000 		.4byte	.LFB9
 7479 009c 64000000 		.4byte	.LFE9
 7480 00a0 00000000 		.4byte	.LFB10
 7481 00a4 F8000000 		.4byte	.LFE10
 7482 00a8 00000000 		.4byte	.LFB11
 7483 00ac EC000000 		.4byte	.LFE11
 7484 00b0 00000000 		.4byte	.LFB12
 7485 00b4 F8000000 		.4byte	.LFE12
 7486 00b8 00000000 		.4byte	.LFB13
 7487 00bc 72000000 		.4byte	.LFE13
 7488 00c0 00000000 		.4byte	.LFB14
 7489 00c4 30000000 		.4byte	.LFE14
 7490 00c8 00000000 		.4byte	.LFB15
 7491 00cc 12000000 		.4byte	.LFE15
 7492 00d0 00000000 		.4byte	.LFB16
 7493 00d4 16000000 		.4byte	.LFE16
 7494 00d8 00000000 		.4byte	.LFB17
 7495 00dc 04000000 		.4byte	.LFE17
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 192


 7496 00e0 00000000 		.4byte	.LFB23
 7497 00e4 0C000000 		.4byte	.LFE23
 7498 00e8 00000000 		.4byte	.LFB25
 7499 00ec 10000000 		.4byte	.LFE25
 7500 00f0 00000000 		.4byte	.LFB26
 7501 00f4 28000000 		.4byte	.LFE26
 7502 00f8 00000000 		.4byte	.LFB27
 7503 00fc 28000000 		.4byte	.LFE27
 7504 0100 00000000 		.4byte	.LFB28
 7505 0104 2C000000 		.4byte	.LFE28
 7506 0108 00000000 		.4byte	.LFB18
 7507 010c 10000000 		.4byte	.LFE18
 7508 0110 00000000 		.4byte	.LFB29
 7509 0114 4C000000 		.4byte	.LFE29
 7510 0118 00000000 		.4byte	0
 7511 011c 00000000 		.4byte	0
 7512              		.section	.debug_line,"",%progbits
 7513              	.Ldebug_line0:
 7514 0000 AE060000 		.section	.debug_str,"MS",%progbits,1
 7514      02007402 
 7514      00000201 
 7514      FB0E0D00 
 7514      01010101 
 7515              	.LASF29:
 7516 0000 75784E75 		.ascii	"uxNumberOfItems\000"
 7516      6D626572 
 7516      4F664974 
 7516      656D7300 
 7517              	.LASF122:
 7518 0010 76506F72 		.ascii	"vPortExitCritical\000"
 7518      74457869 
 7518      74437269 
 7518      74696361 
 7518      6C00
 7519              	.LASF56:
 7520 0022 53656D61 		.ascii	"SemaphoreData\000"
 7520      70686F72 
 7520      65446174 
 7520      6100
 7521              	.LASF137:
 7522 0030 74736B54 		.ascii	"tskTaskControlBlock\000"
 7522      61736B43 
 7522      6F6E7472 
 7522      6F6C426C 
 7522      6F636B00 
 7523              	.LASF59:
 7524 0044 53656D61 		.ascii	"SemaphoreData_t\000"
 7524      70686F72 
 7524      65446174 
 7524      615F7400 
 7525              	.LASF101:
 7526 0054 78517565 		.ascii	"xQueueReceive\000"
 7526      75655265 
 7526      63656976 
 7526      6500
 7527              	.LASF106:
 7528 0062 78517565 		.ascii	"xQueueReceiveFromISR\000"
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 193


 7528      75655265 
 7528      63656976 
 7528      6546726F 
 7528      6D495352 
 7529              	.LASF46:
 7530 0077 78546173 		.ascii	"xTasksWaitingToReceive\000"
 7530      6B735761 
 7530      6974696E 
 7530      67546F52 
 7530      65636569 
 7531              	.LASF97:
 7532 008e 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 7532      67686572 
 7532      5072696F 
 7532      72697479 
 7532      5461736B 
 7533              	.LASF102:
 7534 00a8 78517565 		.ascii	"xQueueSemaphoreTake\000"
 7534      75655365 
 7534      6D617068 
 7534      6F726554 
 7534      616B6500 
 7535              	.LASF0:
 7536 00bc 756E7369 		.ascii	"unsigned int\000"
 7536      676E6564 
 7536      20696E74 
 7536      00
 7537              	.LASF30:
 7538 00c9 7078496E 		.ascii	"pxIndex\000"
 7538      64657800 
 7539              	.LASF37:
 7540 00d1 7854494D 		.ascii	"xTIME_OUT\000"
 7540      455F4F55 
 7540      5400
 7541              	.LASF86:
 7542 00db 70784E65 		.ascii	"pxNewQueue\000"
 7542      77517565 
 7542      756500
 7543              	.LASF27:
 7544 00e6 784C4953 		.ascii	"xLIST_ITEM\000"
 7544      545F4954 
 7544      454D00
 7545              	.LASF64:
 7546 00f1 51554555 		.ascii	"QUEUE_REGISTRY_ITEM\000"
 7546      455F5245 
 7546      47495354 
 7546      52595F49 
 7546      54454D00 
 7547              	.LASF120:
 7548 0105 78576169 		.ascii	"xWaitIndefinitely\000"
 7548      74496E64 
 7548      6566696E 
 7548      6974656C 
 7548      7900
 7549              	.LASF45:
 7550 0117 78546173 		.ascii	"xTasksWaitingToSend\000"
 7550      6B735761 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 194


 7550      6974696E 
 7550      67546F53 
 7550      656E6400 
 7551              	.LASF110:
 7552 012b 75785175 		.ascii	"uxQueueSpacesAvailable\000"
 7552      65756553 
 7552      70616365 
 7552      73417661 
 7552      696C6162 
 7553              	.LASF51:
 7554 0142 6354784C 		.ascii	"cTxLock\000"
 7554      6F636B00 
 7555              	.LASF38:
 7556 014a 784F7665 		.ascii	"xOverflowCount\000"
 7556      72666C6F 
 7556      77436F75 
 7556      6E7400
 7557              	.LASF121:
 7558 0159 76506F72 		.ascii	"vPortEnterCritical\000"
 7558      74456E74 
 7558      65724372 
 7558      69746963 
 7558      616C00
 7559              	.LASF63:
 7560 016c 51756575 		.ascii	"Queue_t\000"
 7560      655F7400 
 7561              	.LASF92:
 7562 0174 78436F70 		.ascii	"xCopyPosition\000"
 7562      79506F73 
 7562      6974696F 
 7562      6E00
 7563              	.LASF109:
 7564 0182 75785265 		.ascii	"uxReturn\000"
 7564      7475726E 
 7564      00
 7565              	.LASF68:
 7566 018b 51756575 		.ascii	"QueueRegistryItem_t\000"
 7566      65526567 
 7566      69737472 
 7566      79497465 
 7566      6D5F7400 
 7567              	.LASF118:
 7568 019f 76517565 		.ascii	"vQueueDelete\000"
 7568      75654465 
 7568      6C657465 
 7568      00
 7569              	.LASF54:
 7570 01ac 70635265 		.ascii	"pcReadFrom\000"
 7570      61644672 
 7570      6F6D00
 7571              	.LASF117:
 7572 01b7 76517565 		.ascii	"vQueueUnregisterQueue\000"
 7572      7565556E 
 7572      72656769 
 7572      73746572 
 7572      51756575 
 7573              	.LASF98:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 195


 7574 01cd 75785361 		.ascii	"uxSavedInterruptStatus\000"
 7574      76656449 
 7574      6E746572 
 7574      72757074 
 7574      53746174 
 7575              	.LASF82:
 7576 01e4 70727649 		.ascii	"prvInitialiseNewQueue\000"
 7576      6E697469 
 7576      616C6973 
 7576      654E6577 
 7576      51756575 
 7577              	.LASF18:
 7578 01fa 75696E74 		.ascii	"uint32_t\000"
 7578      33325F74 
 7578      00
 7579              	.LASF16:
 7580 0203 696E7438 		.ascii	"int8_t\000"
 7580      5F7400
 7581              	.LASF94:
 7582 020a 78596965 		.ascii	"xYieldRequired\000"
 7582      6C645265 
 7582      71756972 
 7582      656400
 7583              	.LASF69:
 7584 0219 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 7584      6967696E 
 7584      616C4241 
 7584      53455052 
 7584      4900
 7585              	.LASF60:
 7586 022b 78517565 		.ascii	"xQueue\000"
 7586      756500
 7587              	.LASF42:
 7588 0232 51756575 		.ascii	"QueueDefinition\000"
 7588      65446566 
 7588      696E6974 
 7588      696F6E00 
 7589              	.LASF13:
 7590 0242 6C6F6E67 		.ascii	"long long unsigned int\000"
 7590      206C6F6E 
 7590      6720756E 
 7590      7369676E 
 7590      65642069 
 7591              	.LASF72:
 7592 0259 70727649 		.ascii	"prvIsQueueEmpty\000"
 7592      73517565 
 7592      7565456D 
 7592      70747900 
 7593              	.LASF78:
 7594 0269 70764275 		.ascii	"pvBuffer\000"
 7594      66666572 
 7594      00
 7595              	.LASF24:
 7596 0272 70785072 		.ascii	"pxPrevious\000"
 7596      6576696F 
 7596      757300
 7597              	.LASF47:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 196


 7598 027d 75784D65 		.ascii	"uxMessagesWaiting\000"
 7598      73736167 
 7598      65735761 
 7598      6974696E 
 7598      6700
 7599              	.LASF61:
 7600 028f 7853656D 		.ascii	"xSemaphore\000"
 7600      6170686F 
 7600      726500
 7601              	.LASF126:
 7602 029a 7076506F 		.ascii	"pvPortMalloc\000"
 7602      72744D61 
 7602      6C6C6F63 
 7602      00
 7603              	.LASF128:
 7604 02a7 76546173 		.ascii	"vTaskSuspendAll\000"
 7604      6B537573 
 7604      70656E64 
 7604      416C6C00 
 7605              	.LASF104:
 7606 02b7 78517565 		.ascii	"xQueuePeek\000"
 7606      75655065 
 7606      656B00
 7607              	.LASF134:
 7608 02c2 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 7608      43313120 
 7608      352E342E 
 7608      31203230 
 7608      31363036 
 7609 02f5 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 7609      20726576 
 7609      6973696F 
 7609      6E203233 
 7609      37373135 
 7610 0328 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 7610      66756E63 
 7610      74696F6E 
 7610      2D736563 
 7610      74696F6E 
 7611              	.LASF93:
 7612 0350 78456E74 		.ascii	"xEntryTimeSet\000"
 7612      72795469 
 7612      6D655365 
 7612      7400
 7613              	.LASF3:
 7614 035e 73697A65 		.ascii	"size_t\000"
 7614      5F7400
 7615              	.LASF95:
 7616 0365 7854696D 		.ascii	"xTimeOut\000"
 7616      654F7574 
 7616      00
 7617              	.LASF66:
 7618 036e 7848616E 		.ascii	"xHandle\000"
 7618      646C6500 
 7619              	.LASF65:
 7620 0376 70635175 		.ascii	"pcQueueName\000"
 7620      6575654E 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 197


 7620      616D6500 
 7621              	.LASF33:
 7622 0382 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 7622      495F4C49 
 7622      53545F49 
 7622      54454D00 
 7623              	.LASF28:
 7624 0392 784C4953 		.ascii	"xLIST\000"
 7624      5400
 7625              	.LASF96:
 7626 0398 78517565 		.ascii	"xQueueGenericSendFromISR\000"
 7626      75654765 
 7626      6E657269 
 7626      6353656E 
 7626      6446726F 
 7627              	.LASF136:
 7628 03b1 433A5C44 		.ascii	"C:\\DATA\\software\\embedded_controllers\\Cypress\\"
 7628      4154415C 
 7628      736F6674 
 7628      77617265 
 7628      5C656D62 
 7629 03df 55434C4C 		.ascii	"UCLL_Koen_lib\\UCLL_Koen_lib.cylib\000"
 7629      5F4B6F65 
 7629      6E5F6C69 
 7629      625C5543 
 7629      4C4C5F4B 
 7630              	.LASF139:
 7631 0401 76506F72 		.ascii	"vPortSetBASEPRI\000"
 7631      74536574 
 7631      42415345 
 7631      50524900 
 7632              	.LASF75:
 7633 0411 70727643 		.ascii	"prvCopyDataToQueue\000"
 7633      6F707944 
 7633      61746154 
 7633      6F517565 
 7633      756500
 7634              	.LASF90:
 7635 0424 78517565 		.ascii	"xQueueGenericSend\000"
 7635      75654765 
 7635      6E657269 
 7635      6353656E 
 7635      6400
 7636              	.LASF130:
 7637 0436 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 7637      6B506C61 
 7637      63654F6E 
 7637      4576656E 
 7637      744C6973 
 7638              	.LASF49:
 7639 044c 75784974 		.ascii	"uxItemSize\000"
 7639      656D5369 
 7639      7A6500
 7640              	.LASF99:
 7641 0457 75785072 		.ascii	"uxPreviousMessagesWaiting\000"
 7641      6576696F 
 7641      75734D65 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 198


 7641      73736167 
 7641      65735761 
 7642              	.LASF123:
 7643 0471 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 7643      6B52656D 
 7643      6F766546 
 7643      726F6D45 
 7643      76656E74 
 7644              	.LASF15:
 7645 048a 63686172 		.ascii	"char\000"
 7645      00
 7646              	.LASF32:
 7647 048f 4C697374 		.ascii	"ListItem_t\000"
 7647      4974656D 
 7647      5F7400
 7648              	.LASF71:
 7649 049a 70727649 		.ascii	"prvIsQueueFull\000"
 7649      73517565 
 7649      75654675 
 7649      6C6C00
 7650              	.LASF52:
 7651 04a9 51756575 		.ascii	"QueuePointers\000"
 7651      65506F69 
 7651      6E746572 
 7651      7300
 7652              	.LASF70:
 7653 04b7 756C4E65 		.ascii	"ulNewBASEPRI\000"
 7653      77424153 
 7653      45505249 
 7653      00
 7654              	.LASF20:
 7655 04c4 55426173 		.ascii	"UBaseType_t\000"
 7655      65547970 
 7655      655F7400 
 7656              	.LASF100:
 7657 04d0 78517565 		.ascii	"xQueueGiveFromISR\000"
 7657      75654769 
 7657      76654672 
 7657      6F6D4953 
 7657      5200
 7658              	.LASF141:
 7659 04e2 78517565 		.ascii	"xQueueRegistry\000"
 7659      75655265 
 7659      67697374 
 7659      727900
 7660              	.LASF41:
 7661 04f1 51756575 		.ascii	"QueueHandle_t\000"
 7661      6548616E 
 7661      646C655F 
 7661      7400
 7662              	.LASF31:
 7663 04ff 784C6973 		.ascii	"xListEnd\000"
 7663      74456E64 
 7663      00
 7664              	.LASF111:
 7665 0508 75785175 		.ascii	"uxQueueMessagesWaitingFromISR\000"
 7665      6575654D 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 199


 7665      65737361 
 7665      67657357 
 7665      61697469 
 7666              	.LASF34:
 7667 0526 4D696E69 		.ascii	"MiniListItem_t\000"
 7667      4C697374 
 7667      4974656D 
 7667      5F7400
 7668              	.LASF133:
 7669 0535 76546173 		.ascii	"vTaskPlaceOnEventListRestricted\000"
 7669      6B506C61 
 7669      63654F6E 
 7669      4576656E 
 7669      744C6973 
 7670              	.LASF17:
 7671 0555 75696E74 		.ascii	"uint8_t\000"
 7671      385F7400 
 7672              	.LASF67:
 7673 055d 78517565 		.ascii	"xQueueRegistryItem\000"
 7673      75655265 
 7673      67697374 
 7673      72794974 
 7673      656D00
 7674              	.LASF88:
 7675 0570 78517565 		.ascii	"xQueueGenericCreate\000"
 7675      75654765 
 7675      6E657269 
 7675      63437265 
 7675      61746500 
 7676              	.LASF138:
 7677 0584 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 7677      72745261 
 7677      69736542 
 7677      41534550 
 7677      524900
 7678              	.LASF1:
 7679 0597 6C6F6E67 		.ascii	"long long int\000"
 7679      206C6F6E 
 7679      6720696E 
 7679      7400
 7680              	.LASF19:
 7681 05a5 42617365 		.ascii	"BaseType_t\000"
 7681      54797065 
 7681      5F7400
 7682              	.LASF84:
 7683 05b0 70756351 		.ascii	"pucQueueStorage\000"
 7683      75657565 
 7683      53746F72 
 7683      61676500 
 7684              	.LASF39:
 7685 05c0 7854696D 		.ascii	"xTimeOnEntering\000"
 7685      654F6E45 
 7685      6E746572 
 7685      696E6700 
 7686              	.LASF116:
 7687 05d0 76517565 		.ascii	"vQueueAddToRegistry\000"
 7687      75654164 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 200


 7687      64546F52 
 7687      65676973 
 7687      74727900 
 7688              	.LASF23:
 7689 05e4 70784E65 		.ascii	"pxNext\000"
 7689      787400
 7690              	.LASF81:
 7691 05eb 784E6577 		.ascii	"xNewQueue\000"
 7691      51756575 
 7691      6500
 7692              	.LASF40:
 7693 05f5 54696D65 		.ascii	"TimeOut_t\000"
 7693      4F75745F 
 7693      7400
 7694              	.LASF127:
 7695 05ff 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 7695      6B496E74 
 7695      65726E61 
 7695      6C536574 
 7695      54696D65 
 7696              	.LASF105:
 7697 061c 70634F72 		.ascii	"pcOriginalReadPosition\000"
 7697      6967696E 
 7697      616C5265 
 7697      6164506F 
 7697      73697469 
 7698              	.LASF36:
 7699 0633 5461736B 		.ascii	"TaskHandle_t\000"
 7699      48616E64 
 7699      6C655F74 
 7699      00
 7700              	.LASF140:
 7701 0640 756C4E65 		.ascii	"ulNewMaskValue\000"
 7701      774D6173 
 7701      6B56616C 
 7701      756500
 7702              	.LASF85:
 7703 064f 75635175 		.ascii	"ucQueueType\000"
 7703      65756554 
 7703      79706500 
 7704              	.LASF35:
 7705 065b 4C697374 		.ascii	"List_t\000"
 7705      5F7400
 7706              	.LASF103:
 7707 0662 75785365 		.ascii	"uxSemaphoreCount\000"
 7707      6D617068 
 7707      6F726543 
 7707      6F756E74 
 7707      00
 7708              	.LASF44:
 7709 0673 70635772 		.ascii	"pcWriteTo\000"
 7709      69746554 
 7709      6F00
 7710              	.LASF21:
 7711 067d 5469636B 		.ascii	"TickType_t\000"
 7711      54797065 
 7711      5F7400
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 201


 7712              	.LASF4:
 7713 0688 5F5F696E 		.ascii	"__int8_t\000"
 7713      74385F74 
 7713      00
 7714              	.LASF83:
 7715 0691 75785175 		.ascii	"uxQueueLength\000"
 7715      6575654C 
 7715      656E6774 
 7715      6800
 7716              	.LASF2:
 7717 069f 6C6F6E67 		.ascii	"long double\000"
 7717      20646F75 
 7717      626C6500 
 7718              	.LASF114:
 7719 06ab 70635175 		.ascii	"pcQueueGetName\000"
 7719      65756547 
 7719      65744E61 
 7719      6D6500
 7720              	.LASF55:
 7721 06ba 51756575 		.ascii	"QueuePointers_t\000"
 7721      65506F69 
 7721      6E746572 
 7721      735F7400 
 7722              	.LASF115:
 7723 06ca 70635265 		.ascii	"pcReturn\000"
 7723      7475726E 
 7723      00
 7724              	.LASF48:
 7725 06d3 75784C65 		.ascii	"uxLength\000"
 7725      6E677468 
 7725      00
 7726              	.LASF119:
 7727 06dc 76517565 		.ascii	"vQueueWaitForMessageRestricted\000"
 7727      75655761 
 7727      6974466F 
 7727      724D6573 
 7727      73616765 
 7728              	.LASF8:
 7729 06fb 73686F72 		.ascii	"short int\000"
 7729      7420696E 
 7729      7400
 7730              	.LASF22:
 7731 0705 78497465 		.ascii	"xItemValue\000"
 7731      6D56616C 
 7731      756500
 7732              	.LASF10:
 7733 0710 6C6F6E67 		.ascii	"long int\000"
 7733      20696E74 
 7733      00
 7734              	.LASF89:
 7735 0719 78517565 		.ascii	"xQueueSizeInBytes\000"
 7735      75655369 
 7735      7A65496E 
 7735      42797465 
 7735      7300
 7736              	.LASF131:
 7737 072b 78546173 		.ascii	"xTaskResumeAll\000"
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 202


 7737      6B526573 
 7737      756D6541 
 7737      6C6C00
 7738              	.LASF76:
 7739 073a 70764974 		.ascii	"pvItemToQueue\000"
 7739      656D546F 
 7739      51756575 
 7739      6500
 7740              	.LASF129:
 7741 0748 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 7741      6B436865 
 7741      636B466F 
 7741      7254696D 
 7741      654F7574 
 7742              	.LASF132:
 7743 075d 76506F72 		.ascii	"vPortFree\000"
 7743      74467265 
 7743      6500
 7744              	.LASF113:
 7745 0767 78517565 		.ascii	"xQueueIsQueueFullFromISR\000"
 7745      75654973 
 7745      51756575 
 7745      6546756C 
 7745      6C46726F 
 7746              	.LASF108:
 7747 0780 75785175 		.ascii	"uxQueueMessagesWaiting\000"
 7747      6575654D 
 7747      65737361 
 7747      67657357 
 7747      61697469 
 7748              	.LASF53:
 7749 0797 70635461 		.ascii	"pcTail\000"
 7749      696C00
 7750              	.LASF6:
 7751 079e 5F5F7569 		.ascii	"__uint8_t\000"
 7751      6E74385F 
 7751      7400
 7752              	.LASF73:
 7753 07a8 70785175 		.ascii	"pxQueue\000"
 7753      65756500 
 7754              	.LASF74:
 7755 07b0 78526574 		.ascii	"xReturn\000"
 7755      75726E00 
 7756              	.LASF14:
 7757 07b8 73697A65 		.ascii	"sizetype\000"
 7757      74797065 
 7757      00
 7758              	.LASF124:
 7759 07c1 76546173 		.ascii	"vTaskMissedYield\000"
 7759      6B4D6973 
 7759      73656459 
 7759      69656C64 
 7759      00
 7760              	.LASF12:
 7761 07d2 6C6F6E67 		.ascii	"long unsigned int\000"
 7761      20756E73 
 7761      69676E65 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 203


 7761      6420696E 
 7761      7400
 7762              	.LASF58:
 7763 07e4 75785265 		.ascii	"uxRecursiveCallCount\000"
 7763      63757273 
 7763      69766543 
 7763      616C6C43 
 7763      6F756E74 
 7764              	.LASF107:
 7765 07f9 78517565 		.ascii	"xQueuePeekFromISR\000"
 7765      75655065 
 7765      656B4672 
 7765      6F6D4953 
 7765      5200
 7766              	.LASF26:
 7767 080b 7078436F 		.ascii	"pxContainer\000"
 7767      6E746169 
 7767      6E657200 
 7768              	.LASF7:
 7769 0817 756E7369 		.ascii	"unsigned char\000"
 7769      676E6564 
 7769      20636861 
 7769      7200
 7770              	.LASF11:
 7771 0825 5F5F7569 		.ascii	"__uint32_t\000"
 7771      6E743332 
 7771      5F7400
 7772              	.LASF125:
 7773 0830 764C6973 		.ascii	"vListInitialise\000"
 7773      74496E69 
 7773      7469616C 
 7773      69736500 
 7774              	.LASF79:
 7775 0840 70727643 		.ascii	"prvCopyDataFromQueue\000"
 7775      6F707944 
 7775      61746146 
 7775      726F6D51 
 7775      75657565 
 7776              	.LASF135:
 7777 0855 2E2E5C2E 		.ascii	"..\\..\\..\\..\\..\\..\\FreeRTOS\\FreeRTOS\\FreeRTO"
 7777      2E5C2E2E 
 7777      5C2E2E5C 
 7777      2E2E5C2E 
 7777      2E5C4672 
 7778 0880 535C536F 		.ascii	"S\\Source\\queue.c\000"
 7778      75726365 
 7778      5C717565 
 7778      75652E63 
 7778      00
 7779              	.LASF91:
 7780 0891 78546963 		.ascii	"xTicksToWait\000"
 7780      6B73546F 
 7780      57616974 
 7780      00
 7781              	.LASF25:
 7782 089e 70764F77 		.ascii	"pvOwner\000"
 7782      6E657200 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccFCle3P.s 			page 204


 7783              	.LASF43:
 7784 08a6 70634865 		.ascii	"pcHead\000"
 7784      616400
 7785              	.LASF80:
 7786 08ad 70727655 		.ascii	"prvUnlockQueue\000"
 7786      6E6C6F63 
 7786      6B517565 
 7786      756500
 7787              	.LASF87:
 7788 08bc 78517565 		.ascii	"xQueueGenericReset\000"
 7788      75654765 
 7788      6E657269 
 7788      63526573 
 7788      657400
 7789              	.LASF112:
 7790 08cf 78517565 		.ascii	"xQueueIsQueueEmptyFromISR\000"
 7790      75654973 
 7790      51756575 
 7790      65456D70 
 7790      74794672 
 7791              	.LASF5:
 7792 08e9 7369676E 		.ascii	"signed char\000"
 7792      65642063 
 7792      68617200 
 7793              	.LASF9:
 7794 08f5 73686F72 		.ascii	"short unsigned int\000"
 7794      7420756E 
 7794      7369676E 
 7794      65642069 
 7794      6E7400
 7795              	.LASF142:
 7796 0908 6D656D63 		.ascii	"memcpy\000"
 7796      707900
 7797              	.LASF62:
 7798 090f 78515545 		.ascii	"xQUEUE\000"
 7798      554500
 7799              	.LASF57:
 7800 0916 784D7574 		.ascii	"xMutexHolder\000"
 7800      6578486F 
 7800      6C646572 
 7800      00
 7801              	.LASF77:
 7802 0923 78506F73 		.ascii	"xPosition\000"
 7802      6974696F 
 7802      6E00
 7803              	.LASF50:
 7804 092d 6352784C 		.ascii	"cRxLock\000"
 7804      6F636B00 
 7805              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
