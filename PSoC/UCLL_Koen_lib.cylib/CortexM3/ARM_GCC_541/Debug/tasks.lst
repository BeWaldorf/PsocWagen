ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	prvTaskIsTaskSuspended, %function
  24              	prvTaskIsTaskSuspended:
  25              	.LFB14:
  26              		.file 1 "..\\..\\..\\..\\..\\..\\FreeRTOS\\FreeRTOS\\FreeRTOS\\Source\\tasks.c"
   1:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
   2:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * FreeRTOS Kernel V10.4.0
   3:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  *
   5:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * subject to the following conditions:
  11:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  *
  12:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * copies or substantial portions of the Software.
  14:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  *
  15:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  *
  22:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * https://www.FreeRTOS.org
  23:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * https://github.com/FreeRTOS
  24:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  *
  25:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
  26:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
  27:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* Standard includes. */
  28:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #include <stdlib.h>
  29:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #include <string.h>
  30:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
  31:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 2


  32:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  33:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * task.h is included from an application file. */
  34:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
  36:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* FreeRTOS includes. */
  37:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #include "FreeRTOS.h"
  38:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #include "task.h"
  39:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #include "timers.h"
  40:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #include "stack_macros.h"
  41:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
  42:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  43:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  44:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * for the header files above, but not in this file, in order to generate the
  45:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * correct privileged Vs unprivileged linkage and placement. */
  46:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  47:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
  48:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  49:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * functions but without including stdio.h here. */
  50:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  51:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
  52:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* At the bottom of this file are two optional functions that can be used
  53:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * to generate human readable text from the raw data generated by the
  54:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * for convenience only, and are NOT considered part of the kernel. */
  56:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #include <stdio.h>
  57:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
  59:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_PREEMPTION == 0 )
  60:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
  61:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* If the cooperative scheduler is being used then a yield should not be
  62:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * performed just because a higher priority task has been woken. */
  63:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()
  64:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #else
  65:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  66:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif
  67:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
  68:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  69:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION              ( ( uint8_t ) 0 ) /* Must be zero as it is the in
  70:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #define taskWAITING_NOTIFICATION                  ( ( uint8_t ) 1 )
  71:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #define taskNOTIFICATION_RECEIVED                 ( ( uint8_t ) 2 )
  72:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
  73:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
  74:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  75:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  76:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
  77:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #define tskSTACK_FILL_BYTE                        ( 0xa5U )
  78:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
  79:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  80:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB    ( ( uint8_t ) 0 )
  81:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY        ( ( uint8_t ) 1 )
  82:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB     ( ( uint8_t ) 2 )
  83:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
  84:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  85:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * value so the high water mark can be determined.  If none of the following are
  86:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * set then don't fill the stack so there is no unnecessary dependency on memset. */
  87:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
  88:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 3


  89:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #else
  90:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    0
  91:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif
  92:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
  93:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
  94:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  95:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
  96:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #define tskRUNNING_CHAR      ( 'X' )
  97:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #define tskBLOCKED_CHAR      ( 'B' )
  98:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #define tskREADY_CHAR        ( 'R' )
  99:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #define tskDELETED_CHAR      ( 'D' )
 100:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #define tskSUSPENDED_CHAR    ( 'S' )
 101:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 102:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
 103:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 104:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * global, rather than file scope.
 105:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
 106:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 107:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #define static
 108:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif
 109:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 110:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 111:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 112:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 113:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #define configIDLE_TASK_NAME    "IDLE"
 114:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif
 115:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 116:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 117:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 118:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 119:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * performed in a generic way that is not optimised to any particular
 120:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * microcontroller architecture. */
 121:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 122:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* uxTopReadyPriority holds the priority of the highest priority ready
 123:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * state task. */
 124:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority ) \
 125:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {                                               \
 126:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( ( uxPriority ) > uxTopReadyPriority )   \
 127:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {                                           \
 128:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             uxTopReadyPriority = ( uxPriority );    \
 129:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }                                           \
 130:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     } /* taskRECORD_READY_PRIORITY */
 131:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 132:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 133:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 134:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                \
 135:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {                                                                         \
 136:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxTopPriority = uxTopReadyPriority;                       \
 137:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                                                               \
 138:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Find the highest priority queue that contains ready tasks. */      \
 139:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) ) \
 140:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {                                                                     \
 141:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             configASSERT( uxTopPriority );                                    \
 142:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             --uxTopPriority;                                                  \
 143:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }                                                                     \
 144:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                                                               \
 145:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of \
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 4


 146:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * the  same priority get an equal share of the processor time. */                    \
 147:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) ); \
 148:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uxTopReadyPriority = uxTopPriority;                                                   \
 149:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK */
 150:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 151:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 152:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 153:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 154:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * they are only required when a port optimised method of task selection is
 155:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * being used. */
 156:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )
 157:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 158:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 159:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 160:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 161:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 162:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * performed in a way that is tailored to the particular microcontroller
 163:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * architecture being used. */
 164:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 165:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* A port optimised version is provided.  Call the port defined macros. */
 166:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority )    portRECORD_READY_PRIORITY( uxPriority, uxTop
 167:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 168:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 169:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 170:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                                  \
 171:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {                                                                                           \
 172:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxTopPriority;                                                              \
 173:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                                                                                 \
 174:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Find the highest priority list that contains ready tasks. */                         \
 175:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );                          \
 176:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 ); \
 177:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );   \
 178:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 179:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 180:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 181:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 182:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* A port optimised version is provided, call it only if the TCB being reset
 183:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * is being referenced from a ready list.  If it is referenced from a delayed
 184:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * or suspended list then it won't be in a ready list. */
 185:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )                                                 
 186:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {                                                                                              
 187:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 
 188:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {                                                                                          
 189:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );                    
 190:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }                                                                                          
 191:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 192:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 193:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 195:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 196:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 197:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 198:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * count overflows. */
 199:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()                                                \
 200:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {                                                                             \
 201:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         List_t * pxTemp;                                                          \
 202:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                                                                   \
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 5


 203:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* The delayed tasks list should be empty when the lists are switched. */ \
 204:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );               \
 205:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                                                                   \
 206:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTemp = pxDelayedTaskList;                                               \
 207:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxDelayedTaskList = pxOverflowDelayedTaskList;                            \
 208:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxOverflowDelayedTaskList = pxTemp;                                       \
 209:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         xNumOfOverflows++;                                                        \
 210:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         prvResetNextTaskUnblockTime();                                            \
 211:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 212:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 213:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 214:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 215:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
 216:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 217:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 218:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
 219:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )                                                             
 220:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     traceMOVED_TASK_TO_READY_STATE( pxTCB );                                                       
 221:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );                                            
 222:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem )
 223:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 224:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 225:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 226:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
 227:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 228:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 229:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 230:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 231:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
 232:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle )    ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle )
 233:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 234:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 235:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * of the task to which it belongs (coded to allow it to be held in reverse
 236:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * priority order).  However, it is occasionally borrowed for other purposes.  It
 237:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * is important its value is not updated due to a task priority change while it is
 238:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * being used for another purpose.  The following bit definition is used to inform
 239:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * the scheduler that the value should not be changed - in which case it is the
 240:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * responsibility of whichever module is using the value to ensure it gets set back
 241:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * to its original value when it is released. */
 242:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_16_BIT_TICKS == 1 )
 243:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x8000U
 244:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #else
 245:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x80000000UL
 246:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif
 247:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 248:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
 249:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 250:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 251:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * (the task's run time environment, including register values)
 252:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
 253:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** typedef struct tskTaskControlBlock       /* The old naming convention is used to prevent breaking k
 254:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
 255:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     volatile StackType_t * pxTopOfStack; /*< Points to the location of the last item placed on the 
 256:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 257:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 258:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         xMPU_SETTINGS xMPUSettings; /*< The MPU settings are defined as part of the port layer.  TH
 259:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 6


 260:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 261:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     ListItem_t xStateListItem;                  /*< The list that the state list item of a task is 
 262:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     ListItem_t xEventListItem;                  /*< Used to reference a task from an event list. */
 263:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     UBaseType_t uxPriority;                     /*< The priority of the task.  0 is the lowest prio
 264:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     StackType_t * pxStack;                      /*< Points to the start of the stack. */
 265:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     char pcTaskName[ configMAX_TASK_NAME_LEN ]; /*< Descriptive name given to the task when created
 266:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 267:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 268:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         StackType_t * pxEndOfStack; /*< Points to the highest valid address for the stack. */
 269:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif
 270:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 271:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 272:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxCriticalNesting; /*< Holds the critical section nesting depth for ports that 
 273:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif
 274:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 275:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 276:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxTCBNumber;  /*< Stores a number that increments each time a TCB is created.  
 277:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxTaskNumber; /*< Stores a number specifically for use by third party trace cod
 278:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif
 279:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 280:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 281:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxBasePriority; /*< The priority last assigned to the task - used by the priori
 282:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxMutexesHeld;
 283:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif
 284:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 285:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 286:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TaskHookFunction_t pxTaskTag;
 287:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif
 288:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 289:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 290:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         void * pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 291:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif
 292:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 293:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 294:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uint32_t ulRunTimeCounter; /*< Stores the amount of time the task has spent in the Running 
 295:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif
 296:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 297:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 298:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 299:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Allocate a Newlib reent structure that is specific to this task.
 300:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * Note Newlib support has been included by popular demand, but is not
 301:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 302:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * responsible for resulting newlib operation.  User must be familiar with
 303:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * newlib and must provide system-wide implementations of the necessary
 304:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * stubs. Be warned that (at the time of writing) the current newlib design
 305:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * implements a system-wide malloc() that must be provided with locks.
 306:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          *
 307:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 308:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * for additional information. */
 309:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         struct  _reent xNewLib_reent;
 310:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif
 311:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 312:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 313:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         volatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 314:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         volatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 315:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif
 316:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 7


 317:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* See the comments in FreeRTOS.h with the definition of
 318:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 319:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been conso
 320:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uint8_t ucStaticallyAllocated;                     /*< Set to pdTRUE if the task is a stati
 321:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif
 322:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 323:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 324:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uint8_t ucDelayAborted;
 325:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif
 326:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 327:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( configUSE_POSIX_ERRNO == 1 )
 328:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         int iTaskErrno;
 329:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif
 330:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** } tskTCB;
 331:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 332:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 333:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * below to enable the use of older kernel aware debuggers. */
 334:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** typedef tskTCB TCB_t;
 335:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 336:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 337:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * which static variables must be declared volatile. */
 338:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 339:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 340:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 341:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 342:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * doing so breaks some kernel aware debuggers and debuggers that rely on removing
 343:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * the static qualifier. */
 344:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ]; /*< Prioritised ready task
 345:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;                         /*< Delayed tasks. */
 346:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;                         /*< Delayed tasks (two lis
 347:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              /*< Points to the delayed 
 348:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      /*< Points to the delayed 
 349:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;                         /*< Tasks that have been r
 350:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 351:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 352:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 353:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     PRIVILEGED_DATA static List_t xTasksWaitingTermination; /*< Tasks that have been deleted - but 
 354:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 355:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 356:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif
 357:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 358:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 359:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 360:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     PRIVILEGED_DATA static List_t xSuspendedTaskList; /*< Tasks that are currently suspended. */
 361:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 362:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif
 363:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 364:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 365:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * the errno of the currently running task. */
 366:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 367:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     int FreeRTOS_errno = 0;
 368:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif
 369:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 370:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* Other file private variables. --------------------------------*/
 371:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 372:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 373:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority = tskIDLE_PRIORITY;
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 8


 374:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning = pdFALSE;
 375:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;
 376:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending = pdFALSE;
 377:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;
 378:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;
 379:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U; /* Initialised
 380:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;                          /*< Holds the 
 381:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 382:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 383:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * interrupts must not manipulate the xStateListItem of a TCB, or any of the
 384:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * lists the xStateListItem can be referenced from, if the scheduler is suspended.
 385:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * If an interrupt needs to unblock a task while the scheduler is suspended then it
 386:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * moves the task's event list item into the xPendingReadyList, ready for the
 387:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * kernel to move the task from the pending ready list into the real ready list
 388:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * when the scheduler is unsuspended.  The pending ready list itself can only be
 389:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * accessed from a critical section. */
 390:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) pdFALSE;
 391:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 392:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 393:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 394:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* Do not move these variables to function scope as doing so prevents the
 395:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * code working with debuggers that need to remove the static qualifier. */
 396:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;    /*< Holds the value of a timer/c
 397:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     PRIVILEGED_DATA static volatile uint32_t ulTotalRunTime = 0UL; /*< Holds the total amount of ex
 398:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 399:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif
 400:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 401:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*lint -restore */
 402:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 403:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 404:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 405:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* File private functions. --------------------------------*/
 406:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 407:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /**
 408:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 409:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 410:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * is in any other state.
 411:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
 412:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 413:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 414:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 415:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 416:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 417:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 418:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
 419:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 420:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * automatically upon the creation of the first task.
 421:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
 422:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 423:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 424:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
 425:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 426:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 427:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * creation of the first user task.
 428:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  *
 429:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 430:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 9


 431:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  *
 432:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 433:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  *
 434:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
 435:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
 436:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 437:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
 438:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 439:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * including the stack pointed to by the TCB.
 440:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  *
 441:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 442:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 443:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
 444:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 445:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 446:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB ) PRIVILEGED_FUNCTION;
 447:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 448:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif
 449:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 450:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
 451:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 452:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 453:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * and its TCB deleted.
 454:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
 455:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 456:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 457:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
 458:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 459:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * either the current or the overflow delayed task list.
 460:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
 461:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
 462:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely ) PRIVILEGED_FUN
 463:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 464:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
 465:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 466:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 467:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * a suspended list, etc.).
 468:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  *
 469:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 470:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * NORMAL APPLICATION CODE.
 471:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
 472:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 473:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 474:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
 475:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                                      List_t * pxList,
 476:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                                      eTaskState eState ) PRIVILEGED_FUNCTION;
 477:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 478:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif
 479:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 480:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
 481:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 482:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 483:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
 484:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 485:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 486:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
 487:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                                      const char pcNameToQuery[] ) PRIVILEGED_FUNCTI
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 10


 488:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 489:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif
 490:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 491:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
 492:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 493:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 494:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 495:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
 496:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 497:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 498:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVIL
 499:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 500:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif
 501:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 502:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
 503:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 504:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 505:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  *
 506:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 507:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 508:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 509:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * set to a value other than 1.
 510:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
 511:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 512:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 513:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 514:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 515:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif
 516:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 517:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
 518:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 519:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * will exit the Blocked state.
 520:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
 521:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** static void prvResetNextTaskUnblockTime( void ) PRIVILEGED_FUNCTION;
 522:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 523:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 524:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 525:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
 526:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * Helper function used to pad task names with spaces when printing out
 527:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * human readable tables of task information.
 528:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
 529:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
 530:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                         const char * pcTaskName ) PRIVILEGED_FUNCTION;
 531:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 532:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif
 533:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 534:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
 535:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 536:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * dynamically to fill in the structure's members.
 537:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
 538:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 539:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 540:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                   const uint32_t ulStackDepth,
 541:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                   void * const pvParameters,
 542:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                   UBaseType_t uxPriority,
 543:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 544:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                   TCB_t * pxNewTCB,
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 11


 545:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                   const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 546:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 547:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
 548:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 549:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * under the control of the scheduler.
 550:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
 551:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB ) PRIVILEGED_FUNCTION;
 552:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 553:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
 554:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 555:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 556:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * called by the function.
 557:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
 558:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 559:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 560:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 561:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 562:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif
 563:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 564:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 565:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 566:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 567:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 568:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
 569:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                     const char * const pcName, /*lint !e971 Unqualified char types 
 570:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                     const uint32_t ulStackDepth,
 571:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                     void * const pvParameters,
 572:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                     UBaseType_t uxPriority,
 573:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                     StackType_t * const puxStackBuffer,
 574:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                     StaticTask_t * const pxTaskBuffer )
 575:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 576:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxNewTCB;
 577:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TaskHandle_t xReturn;
 578:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 579:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( puxStackBuffer != NULL );
 580:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 581:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 582:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( configASSERT_DEFINED == 1 )
 583:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 584:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Sanity check that the size of the structure used to declare a
 585:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * variable of type StaticTask_t equals the size of the real task
 586:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * structure. */
 587:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 volatile size_t xSize = sizeof( StaticTask_t );
 588:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 configASSERT( xSize == sizeof( TCB_t ) );
 589:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 590:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 591:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif /* configASSERT_DEFINED */
 592:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 593:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 594:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 595:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* The memory used for the task's TCB and stack are passed into this
 596:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * function - use them. */
 597:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the stru
 598:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 599:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 600:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has be
 601:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 12


 602:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 603:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * task was created statically in case the task is later deleted. */
 604:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 605:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 606:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 607:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 608:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xRet
 609:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 610:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 611:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
 612:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 613:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xReturn = NULL;
 614:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 615:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 616:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return xReturn;
 617:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 618:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 619:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 620:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 621:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 622:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 623:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 624:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
 625:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                             TaskHandle_t * pxCreatedTask )
 626:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 627:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxNewTCB;
 628:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 629:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 630:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 631:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 632:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 633:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NUL
 634:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 635:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 636:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * on the implementation of the port malloc function and whether or
 637:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * not static allocation is being used. */
 638:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 639:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 640:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Store the stack location in the TCB. */
 641:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 642:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 643:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 644:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 645:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 646:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * task was created statically in case the task is later deleted. */
 647:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 648:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 649:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 650:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 651:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 652:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                   pxTaskDefinition->pcName,
 653:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                   ( uint32_t ) pxTaskDefinition->usStackDepth,
 654:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                   pxTaskDefinition->pvParameters,
 655:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                   pxTaskDefinition->uxPriority,
 656:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                   pxCreatedTask, pxNewTCB,
 657:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                   pxTaskDefinition->xRegions );
 658:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 13


 659:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 660:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xReturn = pdPASS;
 661:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 662:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 663:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return xReturn;
 664:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 665:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 666:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 667:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 668:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 669:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 670:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 671:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
 672:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                       TaskHandle_t * pxCreatedTask )
 673:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 674:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxNewTCB;
 675:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 676:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 677:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer );
 678:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 679:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( pxTaskDefinition->puxStackBuffer != NULL )
 680:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 681:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 682:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * on the implementation of the port malloc function and whether or
 683:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * not static allocation is being used. */
 684:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 685:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 686:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( pxNewTCB != NULL )
 687:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 688:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Store the stack location in the TCB. */
 689:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 690:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 691:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 692:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
 693:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* Tasks can be created statically or dynamically, so note
 694:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * this task had a statically allocated stack in case it is
 695:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * later deleted.  The TCB was allocated dynamically. */
 696:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 697:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
 698:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 699:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 700:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 701:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                       pxTaskDefinition->pcName,
 702:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                       ( uint32_t ) pxTaskDefinition->usStackDepth,
 703:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                       pxTaskDefinition->pvParameters,
 704:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                       pxTaskDefinition->uxPriority,
 705:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                       pxCreatedTask, pxNewTCB,
 706:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                       pxTaskDefinition->xRegions );
 707:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 708:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
 709:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 xReturn = pdPASS;
 710:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 711:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 712:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 713:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return xReturn;
 714:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 715:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 14


 716:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 717:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 718:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 719:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 720:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 721:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
 722:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             const char * const pcName, /*lint !e971 Unqualified char types are allo
 723:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             const configSTACK_DEPTH_TYPE usStackDepth,
 724:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             void * const pvParameters,
 725:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             UBaseType_t uxPriority,
 726:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             TaskHandle_t * const pxCreatedTask )
 727:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 728:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxNewTCB;
 729:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn;
 730:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 731:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* If the stack grows down then allocate the stack then the TCB so the stack
 732:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * does not grow into the TCB.  Likewise if the stack grows up then allocate
 733:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * the TCB then the stack. */
 734:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( portSTACK_GROWTH > 0 )
 735:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 736:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Allocate space for the TCB.  Where the memory comes from depends on
 737:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * the implementation of the port malloc function and whether or not static
 738:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * allocation is being used. */
 739:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 740:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 741:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( pxNewTCB != NULL )
 742:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 743:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Allocate space for the stack used by the task being created.
 744:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * The base of the stack memory stored in the TCB so the task can
 745:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * be deleted later if required. */
 746:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth
 747:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 748:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( pxNewTCB->pxStack == NULL )
 749:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
 750:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* Could not allocate the stack.  Delete the allocated TCB. */
 751:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         vPortFree( pxNewTCB );
 752:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         pxNewTCB = NULL;
 753:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
 754:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 755:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 756:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #else /* portSTACK_GROWTH */
 757:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 758:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 StackType_t * pxStack;
 759:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 760:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Allocate space for the stack used by the task being created. */
 761:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); 
 762:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 763:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( pxStack != NULL )
 764:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 765:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Allocate space for the TCB. */
 766:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 Al
 767:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 768:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( pxNewTCB != NULL )
 769:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
 770:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* Store the stack location in the TCB. */
 771:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         pxNewTCB->pxStack = pxStack;
 772:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 15


 773:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     else
 774:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
 775:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* The stack cannot be used as the TCB was not created.  Free
 776:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * it again. */
 777:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         vPortFree( pxStack );
 778:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
 779:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 780:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
 781:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 782:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxNewTCB = NULL;
 783:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 784:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 785:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif /* portSTACK_GROWTH */
 786:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 787:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( pxNewTCB != NULL )
 788:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 789:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has be
 790:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 791:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 792:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * task was created dynamically in case it is later deleted. */
 793:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 794:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 795:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 796:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 797:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPr
 798:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 799:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xReturn = pdPASS;
 800:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 801:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
 802:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 803:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 804:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 805:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 806:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return xReturn;
 807:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 808:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 809:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 810:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 811:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 812:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 813:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 814:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                   const uint32_t ulStackDepth,
 815:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                   void * const pvParameters,
 816:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                   UBaseType_t uxPriority,
 817:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 818:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                   TCB_t * pxNewTCB,
 819:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                   const MemoryRegion_t * const xRegions )
 820:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
 821:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     StackType_t * pxTopOfStack;
 822:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     UBaseType_t x;
 823:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 824:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 825:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Should the task be created in privileged mode? */
 826:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xRunPrivileged;
 827:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 828:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 829:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 16


 830:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xRunPrivileged = pdTRUE;
 831:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 832:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
 833:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 834:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xRunPrivileged = pdFALSE;
 835:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 836:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uxPriority &= ~portPRIVILEGE_BIT;
 837:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS == 1 */
 838:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 839:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Avoid dependency on memset() if it is not required. */
 840:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 841:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 842:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Fill the stack with a known value to assist debugging. */
 843:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth
 844:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 845:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 846:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 847:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Calculate the top of stack address.  This depends on whether the stack
 848:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * grows from high memory to low (as per the 80x86) or vice versa.
 849:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * portSTACK_GROWTH is used to make the result positive or negative as required
 850:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * by the port. */
 851:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( portSTACK_GROWTH < 0 )
 852:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 853:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 854:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 855:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 856:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Check the alignment of the calculated top of stack is correct. */
 857:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) po
 858:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 859:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
 860:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 861:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Also record the stack's high address, which may assist
 862:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * debugging. */
 863:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxNewTCB->pxEndOfStack = pxTopOfStack;
 864:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 865:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #endif /* configRECORD_STACK_HIGH_ADDRESS */
 866:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 867:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #else /* portSTACK_GROWTH */
 868:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 869:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTopOfStack = pxNewTCB->pxStack;
 870:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 871:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Check the alignment of the stack buffer is correct. */
 872:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE
 873:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 874:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* The other extreme of the stack space is required if stack checking is
 875:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * performed. */
 876:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 877:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 878:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif /* portSTACK_GROWTH */
 879:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 880:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Store the task name in the TCB. */
 881:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     if( pcName != NULL )
 882:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 883:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 884:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 885:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 886:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 17


 887:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 888:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * configMAX_TASK_NAME_LEN characters just in case the memory after the
 889:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * string is not accessible (extremely unlikely). */
 890:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( pcName[ x ] == ( char ) 0x00 )
 891:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 892:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 break;
 893:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 894:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
 895:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 896:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
 897:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 898:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 899:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 900:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Ensure the name string is terminated in the case that the string length
 901:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * was greater or equal to configMAX_TASK_NAME_LEN. */
 902:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 903:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 904:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     else
 905:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 906:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* The task has not been given a name, so just ensure there is a NULL
 907:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * terminator when it is read out. */
 908:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxNewTCB->pcTaskName[ 0 ] = 0x00;
 909:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 910:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 911:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* This is used as an array index so must ensure it's not too large.  First
 912:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * remove the privilege bit if one is present. */
 913:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 914:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 915:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 916:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 917:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     else
 918:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 919:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 920:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 921:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 922:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     pxNewTCB->uxPriority = uxPriority;
 923:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 924:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 925:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxNewTCB->uxBasePriority = uxPriority;
 926:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxNewTCB->uxMutexesHeld = 0;
 927:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 928:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif /* configUSE_MUTEXES */
 929:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 930:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 931:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 932:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 933:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 934:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * back to  the containing TCB from a generic item in a list. */
 935:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 936:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 937:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Event lists are always in priority order. */
 938:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - (
 939:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 940:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 941:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 942:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 943:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 18


 944:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 945:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif /* portCRITICAL_NESTING_IN_TCB */
 946:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 947:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 948:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 949:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxNewTCB->pxTaskTag = NULL;
 950:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 951:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif /* configUSE_APPLICATION_TASK_TAG */
 952:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 953:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 954:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 955:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxNewTCB->ulRunTimeCounter = 0UL;
 956:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 957:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif /* configGENERATE_RUN_TIME_STATS */
 958:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 959:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 960:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 961:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ul
 962:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 963:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #else
 964:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 965:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Avoid compiler warning about unreferenced parameter. */
 966:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             ( void ) xRegions;
 967:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 968:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif
 969:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 970:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 971:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 972:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNe
 973:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 974:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif
 975:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 976:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 977:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 978:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotif
 979:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyS
 980:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 981:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif
 982:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 983:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 984:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 985:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Initialise this task's Newlib reent structure.
 986:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 987:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * for additional information. */
 988:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 989:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 990:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif
 991:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 992:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 993:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 994:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxNewTCB->ucDelayAborted = pdFALSE;
 995:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 996:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif
 997:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 998:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Initialize the TCB stack to look as if the task was already running,
 999:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * but had been interrupted by the scheduler.  The return address is set
1000:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * to the start of the task function. Once the stack has been initialised
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 19


1001:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * the top of stack variable is updated. */
1002:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
1003:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1004:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* If the port has capability to detect stack overflow,
1005:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * pass the stack end address to the stack initialization
1006:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * function as well. */
1007:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1008:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1009:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     #if ( portSTACK_GROWTH < 0 )
1010:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
1011:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1012:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
1013:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     #else /* portSTACK_GROWTH */
1014:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
1015:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1016:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
1017:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     #endif /* portSTACK_GROWTH */
1018:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1019:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1020:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1021:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
1022:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1023:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1024:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1025:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #else /* portUSING_MPU_WRAPPERS */
1026:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1027:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* If the port has capability to detect stack overflow,
1028:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * pass the stack end address to the stack initialization
1029:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * function as well. */
1030:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1031:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1032:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     #if ( portSTACK_GROWTH < 0 )
1033:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
1034:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1035:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
1036:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     #else /* portSTACK_GROWTH */
1037:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
1038:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1039:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
1040:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     #endif /* portSTACK_GROWTH */
1041:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1042:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1043:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1044:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
1045:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1046:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1047:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1048:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS */
1049:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1050:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     if( pxCreatedTask != NULL )
1051:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
1052:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Pass the handle out in an anonymous way.  The handle can be used to
1053:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * change the created task's priority, delete the created task, etc.*/
1054:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1055:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
1056:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     else
1057:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 20


1058:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1059:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
1060:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
1061:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1062:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1063:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
1064:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
1065:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
1066:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * updated. */
1067:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     taskENTER_CRITICAL();
1068:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
1069:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uxCurrentNumberOfTasks++;
1070:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1071:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( pxCurrentTCB == NULL )
1072:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1073:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* There are no other tasks, or all the other tasks are in
1074:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * the suspended state - make this the current task. */
1075:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxCurrentTCB = pxNewTCB;
1076:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1077:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1078:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1079:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* This is the first task to be created so do the preliminary
1080:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * initialisation required.  We will not recover if this call
1081:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * fails, but we will report the failure. */
1082:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 prvInitialiseTaskLists();
1083:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1084:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
1085:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1086:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1087:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1088:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1089:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
1090:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1091:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* If the scheduler is not already running, make this task the
1092:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * current task if it is the highest priority task to be created
1093:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * so far. */
1094:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( xSchedulerRunning == pdFALSE )
1095:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1096:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1097:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1098:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxCurrentTCB = pxNewTCB;
1099:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1100:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
1101:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1102:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1103:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1104:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1105:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
1106:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1107:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1108:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1109:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1110:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1111:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uxTaskNumber++;
1112:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1113:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
1114:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 21


1115:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Add a counter into the TCB for tracing only. */
1116:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxNewTCB->uxTCBNumber = uxTaskNumber;
1117:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1118:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif /* configUSE_TRACE_FACILITY */
1119:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         traceTASK_CREATE( pxNewTCB );
1120:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1121:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         prvAddTaskToReadyList( pxNewTCB );
1122:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1123:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         portSETUP_TCB( pxNewTCB );
1124:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
1125:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     taskEXIT_CRITICAL();
1126:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1127:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     if( xSchedulerRunning != pdFALSE )
1128:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
1129:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* If the created task is of a higher priority than the current task
1130:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * then it should run now. */
1131:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1132:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1133:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             taskYIELD_IF_USING_PREEMPTION();
1134:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1135:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
1136:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1137:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1138:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1139:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
1140:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     else
1141:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
1142:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1143:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
1144:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
1145:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1146:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1147:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1148:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1149:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     void vTaskDelete( TaskHandle_t xTaskToDelete )
1150:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
1151:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
1152:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1153:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
1154:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1155:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* If null is passed in here then it is the calling task that is
1156:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * being deleted. */
1157:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1158:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1159:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Remove task from the ready/delayed list. */
1160:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1161:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1162:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1163:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1164:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
1165:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1166:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1167:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1168:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1169:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Is the task waiting on an event also? */
1170:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1171:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 22


1172:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1173:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1174:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
1175:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1176:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1177:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1178:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1179:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Increment the uxTaskNumber also so kernel aware debuggers can
1180:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * detect that the task lists need re-generating.  This is done before
1181:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1182:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * not return. */
1183:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             uxTaskNumber++;
1184:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1185:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( pxTCB == pxCurrentTCB )
1186:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1187:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* A task is deleting itself.  This cannot complete within the
1188:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * task itself, as a context switch to another task is required.
1189:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * Place the task in the termination list.  The idle task will
1190:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * check the termination list and free up any memory allocated by
1191:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * the scheduler for the TCB and stack of the deleted task. */
1192:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1193:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1194:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Increment the ucTasksDeleted variable so the idle task knows
1195:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * there is a task that has been deleted and that it should therefore
1196:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * check the xTasksWaitingTermination list. */
1197:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 ++uxDeletedTasksWaitingCleanUp;
1198:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1199:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1200:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1201:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 traceTASK_DELETE( pxTCB );
1202:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1203:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* The pre-delete hook is primarily for the Windows simulator,
1204:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * in which Windows specific clean up operations are performed,
1205:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * after which it is not possible to yield away from this task -
1206:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * hence xYieldPending is used to latch that a context switch is
1207:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * required. */
1208:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1209:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1210:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
1211:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1212:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 --uxCurrentNumberOfTasks;
1213:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 traceTASK_DELETE( pxTCB );
1214:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 prvDeleteTCB( pxTCB );
1215:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1216:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Reset the next expected unblock time in case it referred to
1217:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * the task that has just been deleted. */
1218:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 prvResetNextTaskUnblockTime();
1219:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1220:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1221:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
1222:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1223:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Force a reschedule if it is the currently running task that has just
1224:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * been deleted. */
1225:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( xSchedulerRunning != pdFALSE )
1226:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1227:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( pxTCB == pxCurrentTCB )
1228:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 23


1229:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
1230:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 portYIELD_WITHIN_API();
1231:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1232:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
1233:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1234:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1235:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1236:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1237:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
1238:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1239:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1240:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1241:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1242:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1243:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1244:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
1245:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                           const TickType_t xTimeIncrement )
1246:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
1247:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TickType_t xTimeToWake;
1248:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1249:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1250:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( pxPreviousWakeTime );
1251:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
1252:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
1253:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1254:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         vTaskSuspendAll();
1255:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1256:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Minor optimisation.  The tick count cannot change in this
1257:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * block. */
1258:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             const TickType_t xConstTickCount = xTickCount;
1259:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1260:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Generate the tick time at which the task wants to wake. */
1261:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1262:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1263:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( xConstTickCount < *pxPreviousWakeTime )
1264:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1265:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* The tick count has overflowed since this function was
1266:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * lasted called.  In this case the only time we should ever
1267:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * actually delay is if the wake time has also  overflowed,
1268:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * and the wake time is greater than the tick time.  When this
1269:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * is the case it is as if neither time had overflowed. */
1270:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1271:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1272:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     xShouldDelay = pdTRUE;
1273:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1274:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
1275:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1276:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1277:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1278:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1279:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
1280:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1281:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* The tick time has not overflowed.  In this case we will
1282:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * delay if either the wake time has overflowed, and/or the
1283:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * tick time is less than the wake time. */
1284:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1285:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 24


1286:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     xShouldDelay = pdTRUE;
1287:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1288:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
1289:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1290:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1291:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1292:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1293:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1294:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Update the wake time ready for the next call. */
1295:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             *pxPreviousWakeTime = xTimeToWake;
1296:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1297:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( xShouldDelay != pdFALSE )
1298:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1299:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 traceTASK_DELAY_UNTIL( xTimeToWake );
1300:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1301:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* prvAddCurrentTaskToDelayedList() needs the block time, not
1302:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * the time to wake, so subtract the current tick count. */
1303:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1304:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1305:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
1306:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1307:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1308:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1309:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1310:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
1311:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1312:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1313:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * have put ourselves to sleep. */
1314:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( xAlreadyYielded == pdFALSE )
1315:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1316:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             portYIELD_WITHIN_API();
1317:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1318:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
1319:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1320:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1321:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1322:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
1323:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1324:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1325:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1326:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1327:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1328:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1329:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     void vTaskDelay( const TickType_t xTicksToDelay )
1330:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
1331:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
1332:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1333:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* A delay time of zero just forces a reschedule. */
1334:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( xTicksToDelay > ( TickType_t ) 0U )
1335:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1336:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             configASSERT( uxSchedulerSuspended == 0 );
1337:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             vTaskSuspendAll();
1338:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1339:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 traceTASK_DELAY();
1340:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1341:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* A task that is removed from the event list while the
1342:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * scheduler is suspended will not get placed in the ready
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 25


1343:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * list or removed from the blocked list until the scheduler
1344:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * is resumed.
1345:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  *
1346:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * This task cannot be in an event list as it is the currently
1347:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * executing task. */
1348:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1349:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1350:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xAlreadyYielded = xTaskResumeAll();
1351:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1352:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
1353:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1354:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1355:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1356:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1357:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1358:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * have put ourselves to sleep. */
1359:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( xAlreadyYielded == pdFALSE )
1360:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1361:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             portYIELD_WITHIN_API();
1362:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1363:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
1364:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1365:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1366:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1367:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
1368:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1369:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1370:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1371:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1372:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDe
1373:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1374:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     eTaskState eTaskGetState( TaskHandle_t xTask )
1375:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
1376:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         eTaskState eReturn;
1377:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         List_t const * pxStateList, * pxDelayedList, * pxOverflowedDelayedList;
1378:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
1379:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1380:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( pxTCB );
1381:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1382:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( pxTCB == pxCurrentTCB )
1383:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1384:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* The task calling this function is querying its own state. */
1385:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             eReturn = eRunning;
1386:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1387:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
1388:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1389:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             taskENTER_CRITICAL();
1390:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1391:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1392:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
1393:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1394:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1395:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             taskEXIT_CRITICAL();
1396:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1397:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1398:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1399:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* The task being queried is referenced from one of the Blocked
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 26


1400:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * lists. */
1401:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 eReturn = eBlocked;
1402:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1403:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1404:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
1405:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else if( pxStateList == &xSuspendedTaskList )
1406:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1407:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* The task being queried is referenced from the suspended
1408:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * list.  Is it genuinely suspended or is it blocked
1409:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * indefinitely? */
1410:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1411:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
1412:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1413:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             {
1414:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 BaseType_t x;
1415:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1416:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 /* The task does not appear on the event list item of
1417:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                  * and of the RTOS objects, but could still be in the
1418:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                  * blocked state if it is waiting on its notification
1419:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                  * rather than waiting on an object.  If not, is
1420:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                  * suspended. */
1421:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 eReturn = eSuspended;
1422:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1423:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1424:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 {
1425:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1426:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                     {
1427:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                         eReturn = eBlocked;
1428:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                         break;
1429:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                     }
1430:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 }
1431:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             }
1432:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1433:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             {
1434:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 eReturn = eSuspended;
1435:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             }
1436:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1437:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
1438:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     else
1439:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
1440:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         eReturn = eBlocked;
1441:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
1442:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1443:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */
1444:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1445:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
1446:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1447:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1448:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* The task being queried is referenced from the deleted
1449:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * tasks list, or it is not referenced from any lists at
1450:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * all. */
1451:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     eReturn = eDeleted;
1452:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1453:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #endif
1454:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1455:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer
1456:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 27


1457:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* If the task is not in any other state, it must be in the
1458:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * Ready (including pending ready) state. */
1459:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 eReturn = eReady;
1460:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1461:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1462:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1463:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return eReturn;
1464:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1465:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1466:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1467:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1468:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1469:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1470:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1471:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1472:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
1473:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t const * pxTCB;
1474:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxReturn;
1475:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1476:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
1477:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1478:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* If null is passed in here then it is the priority of the task
1479:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * that called uxTaskPriorityGet() that is being queried. */
1480:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1481:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
1482:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1483:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
1484:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1485:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return uxReturn;
1486:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
1487:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1488:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1489:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1490:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1491:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1492:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1493:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1494:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
1495:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t const * pxTCB;
1496:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxReturn, uxSavedInterruptState;
1497:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1498:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1499:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1500:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1501:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1502:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1503:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * is defined in FreeRTOSConfig.h then
1504:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1505:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1506:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * been assigned a priority above the configured maximum system call
1507:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1508:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1509:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1510:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1511:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1512:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * provided on the following link:
1513:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 28


1514:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1515:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1516:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1517:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1518:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1519:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * task that is being queried. */
1520:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1521:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
1522:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1523:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1524:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1525:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return uxReturn;
1526:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
1527:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1528:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1529:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1530:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1531:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1532:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1533:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     void vTaskPrioritySet( TaskHandle_t xTask,
1534:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                            UBaseType_t uxNewPriority )
1535:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
1536:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
1537:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1538:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
1539:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1540:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1541:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1542:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Ensure the new priority is valid. */
1543:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1544:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1545:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1546:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1547:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
1548:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1549:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1550:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1551:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1552:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
1553:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1554:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1555:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * task that is being changed. */
1556:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1557:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1558:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1559:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1560:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #if ( configUSE_MUTEXES == 1 )
1561:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1562:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     uxCurrentBasePriority = pxTCB->uxBasePriority;
1563:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1564:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #else
1565:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1566:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     uxCurrentBasePriority = pxTCB->uxPriority;
1567:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1568:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #endif
1569:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1570:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( uxCurrentBasePriority != uxNewPriority )
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 29


1571:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1572:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* The priority change may have readied a task of higher
1573:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * priority than the calling task. */
1574:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( uxNewPriority > uxCurrentBasePriority )
1575:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1576:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( pxTCB != pxCurrentTCB )
1577:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
1578:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* The priority of a task other than the currently
1579:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * running task is being raised.  Is the priority being
1580:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * raised above that of the running task? */
1581:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         if( uxNewPriority >= pxCurrentTCB->uxPriority )
1582:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
1583:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             xYieldRequired = pdTRUE;
1584:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
1585:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         else
1586:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
1587:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1588:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
1589:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
1590:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     else
1591:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
1592:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* The priority of the running task is being raised,
1593:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * but the running task must already be the highest
1594:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * priority task able to run so no yield is required. */
1595:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
1596:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1597:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else if( pxTCB == pxCurrentTCB )
1598:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1599:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Setting the priority of the running task down means
1600:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * there may now be another task of higher priority that
1601:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * is ready to execute. */
1602:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     xYieldRequired = pdTRUE;
1603:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1604:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
1605:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1606:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Setting the priority of any other task down does not
1607:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * require a yield as the running task must be above the
1608:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * new priority of the task being modified. */
1609:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1610:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1611:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Remember the ready list the task might be referenced from
1612:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * before its uxPriority member is changed so the
1613:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * taskRESET_READY_PRIORITY() macro can function correctly. */
1614:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
1615:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1616:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #if ( configUSE_MUTEXES == 1 )
1617:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
1618:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* Only change the priority being used if the task is not
1619:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * currently using an inherited priority. */
1620:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1621:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
1622:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             pxTCB->uxPriority = uxNewPriority;
1623:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
1624:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         else
1625:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
1626:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1627:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 30


1628:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1629:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* The base priority gets set whatever. */
1630:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         pxTCB->uxBasePriority = uxNewPriority;
1631:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
1632:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #else /* if ( configUSE_MUTEXES == 1 ) */
1633:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
1634:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         pxTCB->uxPriority = uxNewPriority;
1635:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
1636:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1637:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1638:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Only reset the event list item value if the value is not
1639:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * being used for anything else. */
1640:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_V
1641:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1642:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX
1643:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1644:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
1645:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1646:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1647:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1648:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1649:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* If the task is in the blocked or suspended list we need do
1650:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * nothing more than change its priority variable. However, if
1651:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * the task is in a ready list it needs to be removed and placed
1652:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * in the list appropriate to its new priority. */
1653:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( px
1654:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1655:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* The task is currently in its ready list - remove before
1656:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * adding it to it's new ready list.  As we are in a critical
1657:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * section we can do this even if the scheduler is suspended. */
1658:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1659:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
1660:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* It is known that the task is in its ready list so
1661:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * there is no need to check again and the port level
1662:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * reset macro can be called directly. */
1663:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1664:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
1665:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     else
1666:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
1667:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1668:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
1669:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1670:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1671:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1672:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
1673:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1674:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1675:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1676:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1677:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( xYieldRequired != pdFALSE )
1678:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1679:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
1680:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1681:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
1682:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1683:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1684:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 31


1685:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1686:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Remove compiler warning about unused variables when the port
1687:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * optimised task selection is not being used. */
1688:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 ( void ) uxPriorityUsedOnEntry;
1689:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1690:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1691:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
1692:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
1693:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1694:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1695:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1696:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1697:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1698:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1699:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1700:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
1701:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
1702:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1703:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
1704:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1705:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* If null is passed in here then it is the running task that is
1706:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * being suspended. */
1707:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1708:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1709:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             traceTASK_SUSPEND( pxTCB );
1710:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1711:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Remove task from the ready/delayed list and place in the
1712:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * suspended list. */
1713:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1714:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1715:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1716:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1717:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
1718:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1719:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1720:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1721:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1722:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Is the task waiting on an event also? */
1723:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1724:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1725:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1726:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1727:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
1728:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1729:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1730:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1731:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1732:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1733:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1734:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1735:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1736:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     BaseType_t x;
1737:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1738:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1739:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
1740:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1741:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 32


1742:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             /* The task was blocked to wait for a notification, but is
1743:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                              * now suspended, so no notification was received. */
1744:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
1745:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
1746:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
1747:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1748:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1749:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1750:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
1751:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1752:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( xSchedulerRunning != pdFALSE )
1753:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1754:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Reset the next expected unblock time in case it referred to the
1755:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * task that is now in the Suspended state. */
1756:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             taskENTER_CRITICAL();
1757:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1758:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 prvResetNextTaskUnblockTime();
1759:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1760:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             taskEXIT_CRITICAL();
1761:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1762:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
1763:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1764:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1765:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1766:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1767:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( pxTCB == pxCurrentTCB )
1768:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1769:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( xSchedulerRunning != pdFALSE )
1770:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1771:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* The current task has just been suspended. */
1772:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
1773:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 portYIELD_WITHIN_API();
1774:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1775:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
1776:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1777:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* The scheduler is not running, but the task that was pointed
1778:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * must be adjusted to point to a different task. */
1780:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*li
1781:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1782:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* No other tasks are ready, so set pxCurrentTCB back to
1783:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * NULL so when the next task is created pxCurrentTCB will
1784:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * be set to point to it no matter what its relative priority
1785:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * is. */
1786:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxCurrentTCB = NULL;
1787:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1788:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
1789:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1790:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     vTaskSwitchContext();
1791:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1792:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1793:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1794:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
1795:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1796:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1797:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1798:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 33


1799:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1800:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1802:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1803:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1805:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
  27              		.loc 1 1806 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1807:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn = pdFALSE;
1808:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
1809:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1810:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Accesses xPendingReadyList so must be called from a critical
1811:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * section. */
1812:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1813:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* It does not make sense to check if the calling task is suspended. */
1814:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( xTask );
1815:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1816:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Is the task being resumed actually in the suspended list? */
1817:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  33              		.loc 1 1817 0
  34 0000 4269     		ldr	r2, [r0, #20]
  35 0002 084B     		ldr	r3, .L6
  36 0004 9A42     		cmp	r2, r3
  37 0006 06D1     		bne	.L3
1818:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1819:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Has the task already been resumed from within an ISR? */
1820:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALS
  38              		.loc 1 1820 0
  39 0008 836A     		ldr	r3, [r0, #40]
  40 000a 074A     		ldr	r2, .L6+4
  41 000c 9342     		cmp	r3, r2
  42 000e 04D0     		beq	.L4
1821:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1822:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Is it in the suspended list because it is in the Suspended
1823:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * state, or because is is blocked with no timeout? */
1824:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint
  43              		.loc 1 1824 0
  44 0010 2BB1     		cbz	r3, .L5
1807:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
  45              		.loc 1 1807 0
  46 0012 0020     		movs	r0, #0
  47              	.LVL1:
  48 0014 7047     		bx	lr
  49              	.LVL2:
  50              	.L3:
  51 0016 0020     		movs	r0, #0
  52              	.LVL3:
  53 0018 7047     		bx	lr
  54              	.LVL4:
  55              	.L4:
  56 001a 0020     		movs	r0, #0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 34


  57              	.LVL5:
  58 001c 7047     		bx	lr
  59              	.LVL6:
  60              	.L5:
1825:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1826:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     xReturn = pdTRUE;
  61              		.loc 1 1826 0
  62 001e 0120     		movs	r0, #1
  63              	.LVL7:
1827:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1828:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
1829:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1830:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1831:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1832:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1833:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
1834:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1835:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1836:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1837:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1838:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
1839:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1840:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1841:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1842:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1843:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return xReturn;
1844:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  64              		.loc 1 1844 0
  65 0020 7047     		bx	lr
  66              	.L7:
  67 0022 00BF     		.align	2
  68              	.L6:
  69 0024 00000000 		.word	.LANCHOR0
  70 0028 14000000 		.word	.LANCHOR0+20
  71              		.cfi_endproc
  72              	.LFE14:
  73              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
  74              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
  75              		.align	2
  76              		.thumb
  77              		.thumb_func
  78              		.type	prvResetNextTaskUnblockTime, %function
  79              	prvResetNextTaskUnblockTime:
  80              	.LFB43:
1845:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1846:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1848:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1849:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1851:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     void vTaskResume( TaskHandle_t xTaskToResume )
1852:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
1853:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
1854:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1855:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* It does not make sense to resume the calling task. */
1856:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( xTaskToResume );
1857:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 35


1858:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* The parameter cannot be NULL as it is impossible to resume the
1859:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * currently executing task. */
1860:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1861:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1862:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             taskENTER_CRITICAL();
1863:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1864:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1865:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1866:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     traceTASK_RESUME( pxTCB );
1867:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1868:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* The ready list can be accessed even if the scheduler is
1869:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * suspended because this is inside a critical section. */
1870:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1871:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1872:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1873:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* A higher priority task may have just been resumed. */
1874:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1875:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
1876:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* This yield may not cause the task just resumed to run,
1877:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * but will leave the lists in the correct state for the
1878:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * next yield. */
1879:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         taskYIELD_IF_USING_PREEMPTION();
1880:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
1881:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     else
1882:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
1883:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1884:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
1885:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1886:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
1887:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1888:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1889:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1890:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1891:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             taskEXIT_CRITICAL();
1892:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1893:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
1894:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1895:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1896:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1897:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
1898:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1899:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1901:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1902:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1903:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1905:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
1907:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
1908:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
1909:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
1910:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1911:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( xTaskToResume );
1912:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1913:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1914:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 36


1915:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1916:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1917:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * is defined in FreeRTOSConfig.h then
1919:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1921:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * been assigned a priority above the configured maximum system call
1922:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1923:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1924:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1925:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1926:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1927:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * provided on the following link:
1928:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1929:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1930:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1931:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1932:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1933:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1934:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1935:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 traceTASK_RESUME_FROM_ISR( pxTCB );
1936:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1937:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Check the ready lists can be accessed. */
1938:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1939:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1940:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Ready lists can be accessed so move the task from the
1941:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * suspended list to the ready list directly. */
1942:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1943:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
1944:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         xYieldRequired = pdTRUE;
1945:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
1946:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     else
1947:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
1948:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1949:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
1950:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1951:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1952:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1953:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1954:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
1955:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
1956:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* The delayed or ready lists cannot be accessed so the task
1957:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * is held in the pending ready list until the scheduler is
1958:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * unsuspended. */
1959:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1960:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
1961:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1962:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
1963:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1964:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1965:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
1966:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
1967:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1969:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return xYieldRequired;
1970:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
1971:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 37


1972:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1974:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1975:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** void vTaskStartScheduler( void )
1976:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
1977:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xReturn;
1978:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1979:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Add the idle task at the lowest priority. */
1980:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
1982:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             StaticTask_t * pxIdleTaskTCBBuffer = NULL;
1983:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             StackType_t * pxIdleTaskStackBuffer = NULL;
1984:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             uint32_t ulIdleTaskStackSize;
1985:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1986:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* The Idle task is created using user provided RAM - obtain the
1987:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * address of the RAM then create the idle task. */
1988:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTas
1989:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
1990:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                                  configIDLE_TASK_NAME,
1991:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                                  ulIdleTaskStackSize,
1992:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                                  ( void * ) NULL,       /*lint !e961.  The cast is 
1993:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                                  portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIO
1994:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                                  pxIdleTaskStackBuffer,
1995:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                                  pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exceptio
1996:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
1997:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( xIdleTaskHandle != NULL )
1998:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
1999:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 xReturn = pdPASS;
2000:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
2001:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
2002:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
2003:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 xReturn = pdFAIL;
2004:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
2005:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2006:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
2007:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2008:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* The Idle task is being created using dynamically allocated RAM. */
2009:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xReturn = xTaskCreate( prvIdleTask,
2010:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                    configIDLE_TASK_NAME,
2011:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                    configMINIMAL_STACK_SIZE,
2012:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                    ( void * ) NULL,
2013:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                    portPRIVILEGE_BIT,  /* In effect ( tskIDLE_PRIORITY | portPRIVIL
2014:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                    &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as i
2015:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2016:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
2017:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2018:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( configUSE_TIMERS == 1 )
2019:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2020:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( xReturn == pdPASS )
2021:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
2022:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 xReturn = xTimerCreateTimerTask();
2023:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
2024:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
2025:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
2026:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2027:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
2028:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 38


2029:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif /* configUSE_TIMERS */
2030:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2031:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     if( xReturn == pdPASS )
2032:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
2033:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* freertos_tasks_c_additions_init() should only be called if the user
2034:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * the only macro called by the function. */
2036:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
2038:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 freertos_tasks_c_additions_init();
2039:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
2040:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif
2041:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2042:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Interrupts are turned off here, to ensure a tick does not occur
2043:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * before or during the call to xPortStartScheduler().  The stacks of
2044:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * the created tasks contain a status word with interrupts switched on
2045:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * so interrupts will automatically get re-enabled when the first task
2046:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * starts to run. */
2047:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         portDISABLE_INTERRUPTS();
2048:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2049:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
2051:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
2052:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * structure specific to the task that will run first.
2053:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * for additional information. */
2055:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
2057:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
2058:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2059:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
2060:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         xSchedulerRunning = pdTRUE;
2061:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2062:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2063:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * macro must be defined to configure the timer/counter used to generate
2065:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * is set to 0 and the following line fails to build then ensure you do not
2067:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * FreeRTOSConfig.h file. */
2069:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2070:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2071:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
2072:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2073:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Setting up the timer tick is hardware specific and thus in the
2074:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * portable interface. */
2075:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( xPortStartScheduler() != pdFALSE )
2076:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2077:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Should not reach here as if the scheduler is running the
2078:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * function will not return. */
2079:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2080:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
2081:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2082:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Should only reach here if a task calls xTaskEndScheduler(). */
2083:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2084:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
2085:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     else
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 39


2086:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
2087:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* This line will only be reached if the kernel could not be started,
2088:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * because there was not enough FreeRTOS heap to create the idle task
2089:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * or the timer task. */
2090:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
2092:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2093:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * meaning xIdleTaskHandle is not used anywhere else. */
2095:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     ( void ) xIdleTaskHandle;
2096:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
2097:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2098:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2099:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** void vTaskEndScheduler( void )
2100:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
2101:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
2102:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * routine so the original ISRs can be restored if necessary.  The port
2103:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * layer must ensure interrupts enable  bit is left in the correct state. */
2104:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     portDISABLE_INTERRUPTS();
2105:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     xSchedulerRunning = pdFALSE;
2106:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     vPortEndScheduler();
2107:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
2108:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2109:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2110:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** void vTaskSuspendAll( void )
2111:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
2112:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* A critical section is not required as the variable is of type
2113:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * post in the FreeRTOS support forum before reporting this as a bug! -
2115:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * http://goo.gl/wu4acr */
2116:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2117:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * do not otherwise exhibit real time behaviour. */
2119:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     portSOFTWARE_BARRIER();
2120:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2121:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * is used to allow calls to vTaskSuspendAll() to nest. */
2123:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     ++uxSchedulerSuspended;
2124:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2125:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Enforces ordering for ports and optimised compilers that may otherwise place
2126:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * the above increment elsewhere. */
2127:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     portMEMORY_BARRIER();
2128:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
2129:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2130:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2131:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2133:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void )
2134:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
2135:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TickType_t xReturn;
2136:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2138:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* uxHigherPriorityReadyTasks takes care of the case where
2139:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * task that are in the Ready state, even though the idle task is
2141:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * running. */
2142:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 40


2143:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
2144:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2146:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     uxHigherPriorityReadyTasks = pdTRUE;
2147:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
2148:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
2149:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #else
2150:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
2151:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2153:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* When port optimised task selection is used the uxTopReadyPriority
2154:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * variable is used as a bit map.  If bits other than the least
2155:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * significant bit are set then there are tasks that have a priority
2156:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * above the idle priority that are in the Ready state.  This takes
2157:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * care of the case where the co-operative scheduler is in use. */
2158:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( uxTopReadyPriority > uxLeastSignificantBit )
2159:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2160:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     uxHigherPriorityReadyTasks = pdTRUE;
2161:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
2162:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
2163:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */
2164:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2165:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2167:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xReturn = 0;
2168:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2169:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2171:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* There are other idle priority tasks in the ready state.  If
2172:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * time slicing is used then the very next tick interrupt must be
2173:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * processed. */
2174:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xReturn = 0;
2175:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2176:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2178:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* There are tasks in the Ready state that have a priority above the
2179:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * idle priority.  This path can only be reached if
2180:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * configUSE_PREEMPTION is 0. */
2181:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xReturn = 0;
2182:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2183:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
2184:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2185:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xReturn = xNextTaskUnblockTime - xTickCount;
2186:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2187:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2188:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return xReturn;
2189:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
2190:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2191:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2193:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2194:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
2196:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TCB_t * pxTCB = NULL;
2197:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
2198:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2199:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* If uxSchedulerSuspended is zero then this function does not match a
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 41


2200:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * previous call to vTaskSuspendAll(). */
2201:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     configASSERT( uxSchedulerSuspended );
2202:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2203:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* It is possible that an ISR caused a task to be removed from an event
2204:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * list while the scheduler was suspended.  If this was the case then the
2205:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * removed task will have been added to the xPendingReadyList.  Once the
2206:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * scheduler has been resumed it is safe to move all the pending ready
2207:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * tasks from this list into their appropriate ready list. */
2208:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     taskENTER_CRITICAL();
2209:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
2210:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         --uxSchedulerSuspended;
2211:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2212:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2213:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2214:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2215:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
2216:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Move any readied tasks from the pending list into the
2217:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * appropriate ready list. */
2218:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2219:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2220:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 vo
2221:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2222:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2223:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2224:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2225:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* If the moved task has a priority higher than the current
2226:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * task then a yield must be performed. */
2227:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2228:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
2229:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         xYieldPending = pdTRUE;
2230:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
2231:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     else
2232:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
2233:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2234:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
2235:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
2236:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2237:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( pxTCB != NULL )
2238:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2239:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* A task was unblocked while the scheduler was suspended,
2240:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * which may have prevented the next unblock time from being
2241:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * re-calculated, in which case re-calculate it now.  Mainly
2242:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * important for low power tickless implementations, where
2243:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * this can prevent an unnecessary exit from low power
2244:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * state. */
2245:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     prvResetNextTaskUnblockTime();
2246:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
2247:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2248:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* If any ticks occurred while the scheduler was suspended then
2249:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * they should be processed now.  This ensures the tick count does
2250:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * not  slip, and that any delayed tasks are resumed at the correct
2251:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * time. */
2252:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2253:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2254:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2255:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( xPendedCounts > ( TickType_t ) 0U )
2256:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 42


2257:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         do
2258:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
2259:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             if( xTaskIncrementTick() != pdFALSE )
2260:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             {
2261:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 xYieldPending = pdTRUE;
2262:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             }
2263:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             else
2264:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             {
2265:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2266:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             }
2267:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2268:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             --xPendedCounts;
2269:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
2270:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2271:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         xPendedTicks = 0;
2272:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
2273:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     else
2274:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
2275:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2276:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
2277:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
2278:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2279:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( xYieldPending != pdFALSE )
2280:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2281:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     #if ( configUSE_PREEMPTION != 0 )
2282:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
2283:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             xAlreadyYielded = pdTRUE;
2284:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
2285:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     #endif
2286:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
2287:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
2288:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
2289:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2290:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2291:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
2292:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
2293:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2294:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
2295:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2296:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2297:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2298:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
2299:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     taskEXIT_CRITICAL();
2300:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2301:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     return xAlreadyYielded;
2302:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
2303:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2304:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2305:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2306:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
2307:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TickType_t xTicks;
2308:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2309:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Critical section required if running on a 16 bit processor. */
2310:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     portTICK_TYPE_ENTER_CRITICAL();
2311:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
2312:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         xTicks = xTickCount;
2313:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 43


2314:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     portTICK_TYPE_EXIT_CRITICAL();
2315:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2316:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     return xTicks;
2317:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
2318:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2319:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2320:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2321:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
2322:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TickType_t xReturn;
2323:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
2324:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2325:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2326:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2327:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * above the maximum system call priority are kept permanently enabled, even
2328:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2329:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2330:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2331:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2332:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * assigned a priority above the configured maximum system call priority.
2333:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2334:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * that have been assigned a priority at or (logically) below the maximum
2335:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
2336:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2337:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * More information (albeit Cortex-M specific) is provided on the following
2338:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2339:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2340:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2341:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2342:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
2343:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         xReturn = xTickCount;
2344:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
2345:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2346:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2347:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     return xReturn;
2348:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
2349:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2350:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2351:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2352:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
2353:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* A critical section is not required because the variables are of type
2354:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * BaseType_t. */
2355:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     return uxCurrentNumberOfTasks;
2356:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
2357:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2358:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2359:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** char * pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed f
2360:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
2361:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TCB_t * pxTCB;
2362:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2363:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* If null is passed in here then the name of the calling task is being
2364:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * queried. */
2365:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2366:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     configASSERT( pxTCB );
2367:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
2368:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
2369:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2370:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 44


2371:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2372:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2373:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
2374:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                                      const char pcNameToQuery[] )
2375:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
2376:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
2377:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t x;
2378:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         char cNextChar;
2379:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xBreakLoop;
2380:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2381:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* This function is called with the scheduler suspended. */
2382:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2383:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2384:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2385:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
2386:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2387:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             do
2388:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
2389:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
2390:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2391:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Check each character in the name looking for a match or
2392:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * mismatch. */
2393:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 xBreakLoop = pdFALSE;
2394:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2395:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2396:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2397:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     cNextChar = pxNextTCB->pcTaskName[ x ];
2398:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2399:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( cNextChar != pcNameToQuery[ x ] )
2400:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
2401:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* Characters didn't match. */
2402:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         xBreakLoop = pdTRUE;
2403:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
2404:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     else if( cNextChar == ( char ) 0x00 )
2405:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
2406:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* Both strings terminated, a match must have been
2407:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * found. */
2408:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         pxReturn = pxNextTCB;
2409:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         xBreakLoop = pdTRUE;
2410:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
2411:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     else
2412:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
2413:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2414:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
2415:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2416:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( xBreakLoop != pdFALSE )
2417:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
2418:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         break;
2419:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
2420:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
2421:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2422:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( pxReturn != NULL )
2423:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2424:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* The handle has been found. */
2425:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
2426:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
2427:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 45


2428:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2429:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
2430:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2431:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2432:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2433:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2434:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return pxReturn;
2435:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
2436:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2437:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2438:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2439:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2440:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2441:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2442:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types a
2443:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
2444:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
2445:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
2446:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2447:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2448:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2449:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2450:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         vTaskSuspendAll();
2451:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2452:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Search the ready lists. */
2453:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             do
2454:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
2455:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 uxQueue--;
2456:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
2457:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2458:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( pxTCB != NULL )
2459:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2460:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Found the handle. */
2461:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
2462:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
2463:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as 
2464:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2465:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Search the delayed lists. */
2466:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( pxTCB == NULL )
2467:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
2468:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQ
2469:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
2470:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2471:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( pxTCB == NULL )
2472:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
2473:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, p
2474:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
2475:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2476:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
2477:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2478:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( pxTCB == NULL )
2479:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
2480:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* Search the suspended list. */
2481:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuer
2482:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
2483:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
2484:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #endif
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 46


2485:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2486:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
2487:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2488:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( pxTCB == NULL )
2489:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
2490:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* Search the deleted list. */
2491:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcName
2492:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
2493:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
2494:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #endif
2495:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2496:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         ( void ) xTaskResumeAll();
2497:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2498:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return pxTCB;
2499:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
2500:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2501:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2502:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2503:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2504:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2505:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2506:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
2507:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                       const UBaseType_t uxArraySize,
2508:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                       uint32_t * const pulTotalRunTime )
2509:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
2510:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2511:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2512:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         vTaskSuspendAll();
2513:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2514:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Is there a space in the array for each task in the system? */
2515:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( uxArraySize >= uxCurrentNumberOfTasks )
2516:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
2517:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2518:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * task in the Ready state. */
2519:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 do
2520:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2521:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     uxQueue--;
2522:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
2523:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
2524:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2525:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2526:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * task in the Blocked state. */
2527:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2528:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2529:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2530:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #if ( INCLUDE_vTaskDelete == 1 )
2531:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
2532:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* Fill in an TaskStatus_t structure with information on
2533:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * each task that has been deleted but not yet cleaned up. */
2534:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
2535:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
2536:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #endif
2537:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2538:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
2539:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
2540:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* Fill in an TaskStatus_t structure with information on
2541:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * each task in the Suspended state. */
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 47


2542:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
2543:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
2544:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #endif
2545:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2546:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
2547:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
2548:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         if( pulTotalRunTime != NULL )
2549:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
2550:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2551:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2552:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             #else
2553:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 *pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2554:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             #endif
2555:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
2556:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
2557:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2558:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
2559:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         if( pulTotalRunTime != NULL )
2560:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
2561:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             *pulTotalRunTime = 0;
2562:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
2563:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
2564:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2565:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
2566:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
2567:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
2568:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2569:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
2570:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2571:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         ( void ) xTaskResumeAll();
2572:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2573:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return uxTask;
2574:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
2575:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2576:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2577:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2578:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2579:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2580:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2581:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TaskHandle_t xTaskGetIdleTaskHandle( void )
2582:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
2583:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2584:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * started, then xIdleTaskHandle will be NULL. */
2585:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( ( xIdleTaskHandle != NULL ) );
2586:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return xIdleTaskHandle;
2587:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
2588:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2589:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2590:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2591:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2592:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2593:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * This is to ensure vTaskStepTick() is available when user defined low power mode
2594:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2595:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * 1. */
2596:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2597:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2598:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     void vTaskStepTick( const TickType_t xTicksToJump )
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 48


2599:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
2600:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Correct the tick count value after a period during which the tick
2601:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * was suppressed.  Note this does *not* call the tick hook function for
2602:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * each stepped tick. */
2603:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2604:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         xTickCount += xTicksToJump;
2605:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         traceINCREASE_TICK_COUNT( xTicksToJump );
2606:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
2607:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2608:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2609:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2610:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2611:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2612:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
2613:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xYieldOccurred;
2614:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2615:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Must not be called with the scheduler suspended as the implementation
2616:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2617:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     configASSERT( uxSchedulerSuspended == 0 );
2618:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2619:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2620:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2621:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     vTaskSuspendAll();
2622:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     xPendedTicks += xTicksToCatchUp;
2623:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     xYieldOccurred = xTaskResumeAll();
2624:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2625:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     return xYieldOccurred;
2626:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
2627:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2628:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2629:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2630:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2631:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2632:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
2633:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB = xTask;
2634:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn;
2635:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2636:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( pxTCB );
2637:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2638:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         vTaskSuspendAll();
2639:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2640:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* A task can only be prematurely removed from the Blocked state if
2641:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * it is actually in the Blocked state. */
2642:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( eTaskGetState( xTask ) == eBlocked )
2643:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
2644:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 xReturn = pdPASS;
2645:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2646:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Remove the reference to the task from the blocked list.  An
2647:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * interrupt won't touch the xStateListItem because the
2648:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * scheduler is suspended. */
2649:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2650:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2651:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Is the task waiting on an event also?  If so remove it from
2652:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * the event list too.  Interrupts can touch the event list item,
2653:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * even though the scheduler is suspended, so a critical section
2654:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * is used. */
2655:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 taskENTER_CRITICAL();
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 49


2656:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2657:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2658:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
2659:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2660:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2661:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* This lets the task know it was forcibly removed from the
2662:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * blocked state so it should not re-evaluate its block time and
2663:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * then block again. */
2664:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         pxTCB->ucDelayAborted = pdTRUE;
2665:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
2666:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     else
2667:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
2668:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2669:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
2670:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
2671:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 taskEXIT_CRITICAL();
2672:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2673:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Place the unblocked task into the appropriate ready list. */
2674:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
2675:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2676:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* A task being unblocked cannot cause an immediate context
2677:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * switch if preemption is turned off. */
2678:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #if ( configUSE_PREEMPTION == 1 )
2679:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
2680:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* Preemption is on, but a context switch should only be
2681:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          *  performed if the unblocked task has a priority that is
2682:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          *  equal to or higher than the currently executing task. */
2683:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2684:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
2685:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             /* Pend the yield to be performed when the scheduler
2686:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                              * is unsuspended. */
2687:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             xYieldPending = pdTRUE;
2688:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
2689:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         else
2690:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
2691:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
2692:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
2693:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
2694:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #endif /* configUSE_PREEMPTION */
2695:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
2696:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
2697:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
2698:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 xReturn = pdFAIL;
2699:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
2700:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2701:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         ( void ) xTaskResumeAll();
2702:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2703:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return xReturn;
2704:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
2705:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2706:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2707:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2708:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2709:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2710:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
2711:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TCB_t * pxTCB;
2712:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TickType_t xItemValue;
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 50


2713:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
2714:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2715:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Called by the portable layer each time a tick interrupt occurs.
2716:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * Increments the tick then checks to see if the new tick value will cause any
2717:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * tasks to be unblocked. */
2718:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     traceTASK_INCREMENT_TICK( xTickCount );
2719:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2720:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2721:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
2722:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this
2723:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * block. */
2724:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2725:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2726:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Increment the RTOS tick, switching the delayed and overflowed
2727:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * delayed lists if it wraps to 0. */
2728:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         xTickCount = xConstTickCount;
2729:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2730:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to fa
2731:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2732:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             taskSWITCH_DELAYED_LISTS();
2733:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2734:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
2735:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2736:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2737:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2738:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2739:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* See if this tick has made a timeout expire.  Tasks are stored in
2740:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * the  queue in the order of their wake time - meaning once one task
2741:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * has been found whose block time has not expired there is no need to
2742:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * look any further down the list. */
2743:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( xConstTickCount >= xNextTaskUnblockTime )
2744:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2745:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             for( ; ; )
2746:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
2747:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2748:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2749:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* The delayed list is empty.  Set xNextTaskUnblockTime
2750:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * to the maximum possible value so it is extremely
2751:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * unlikely that the
2752:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * if( xTickCount >= xNextTaskUnblockTime ) test will pass
2753:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * next time through. */
2754:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts
2755:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
2756:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
2757:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
2758:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2759:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* The delayed list is not empty, get the value of the
2760:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * item at the head of the delayed list.  This is the time
2761:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * at which the task at the head of the delayed list must
2762:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * be removed from the Blocked state. */
2763:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * 
2764:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2765:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2766:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( xConstTickCount < xItemValue )
2767:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
2768:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* It is not time to unblock this item yet, but the
2769:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * item value is the time at which the task at the head
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 51


2770:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * of the blocked list must be removed from the Blocked
2771:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * state -  so record the item value in
2772:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * xNextTaskUnblockTime. */
2773:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         xNextTaskUnblockTime = xItemValue;
2774:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         break; /*lint !e9011 Code structure here is deedmed easier to understand wi
2775:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
2776:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     else
2777:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
2778:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2779:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
2780:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2781:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* It is time to remove the item from the Blocked state. */
2782:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2783:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2784:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Is the task waiting on an event also?  If so remove
2785:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * it from the event list. */
2786:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2787:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
2788:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2789:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
2790:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     else
2791:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
2792:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2793:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
2794:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2795:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Place the unblocked task into the appropriate ready
2796:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * list. */
2797:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2798:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2799:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* A task being unblocked cannot cause an immediate
2800:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * context switch if preemption is turned off. */
2801:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
2802:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
2803:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             /* Preemption is on, but a context switch should
2804:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                              * only be performed if the unblocked task has a
2805:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                              * priority that is equal to or higher than the
2806:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                              * currently executing task. */
2807:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2808:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             {
2809:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 xSwitchRequired = pdTRUE;
2810:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             }
2811:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             else
2812:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             {
2813:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2814:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             }
2815:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
2816:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     #endif /* configUSE_PREEMPTION */
2817:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
2818:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
2819:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2820:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2821:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Tasks of equal priority to the currently running task will share
2822:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * processing time (time slice) if preemption is on, and the application
2823:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * writer has not explicitly turned time slicing off. */
2824:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2825:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
2826:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) >
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 52


2827:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2828:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     xSwitchRequired = pdTRUE;
2829:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
2830:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
2831:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2832:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2833:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
2834:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
2835:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2836:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2837:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2838:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
2839:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Guard against the tick hook being called when the pended tick
2840:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * count is being unwound (when the scheduler is being unlocked). */
2841:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( xPendedTicks == ( TickType_t ) 0 )
2842:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2843:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     vApplicationTickHook();
2844:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
2845:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
2846:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2847:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2848:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
2849:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
2850:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif /* configUSE_TICK_HOOK */
2851:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2852:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
2853:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
2854:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( xYieldPending != pdFALSE )
2855:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2856:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     xSwitchRequired = pdTRUE;
2857:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
2858:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
2859:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
2860:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2861:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
2862:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
2863:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif /* configUSE_PREEMPTION */
2864:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
2865:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     else
2866:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
2867:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         ++xPendedTicks;
2868:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2869:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* The tick hook gets called at regular intervals, even if the
2870:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * scheduler is locked. */
2871:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2872:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
2873:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 vApplicationTickHook();
2874:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
2875:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif
2876:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
2877:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2878:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     return xSwitchRequired;
2879:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
2880:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2881:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2882:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2883:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 53


2884:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
2885:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                      TaskHookFunction_t pxHookFunction )
2886:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
2887:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * xTCB;
2888:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2889:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* If xTask is NULL then it is the task hook of the calling task that is
2890:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * getting set. */
2891:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( xTask == NULL )
2892:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2893:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xTCB = ( TCB_t * ) pxCurrentTCB;
2894:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2895:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
2896:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2897:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xTCB = xTask;
2898:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2899:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2900:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2901:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * the value can be accessed from an interrupt. */
2902:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
2903:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2904:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xTCB->pxTaskTag = pxHookFunction;
2905:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2906:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
2907:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
2908:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2909:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2910:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2911:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2912:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2913:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2914:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2915:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
2916:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
2917:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TaskHookFunction_t xReturn;
2918:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2919:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2920:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2921:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2922:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2923:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * the value can be accessed from an interrupt. */
2924:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
2925:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2926:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2927:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2928:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
2929:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2930:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return xReturn;
2931:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
2932:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2933:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2934:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2935:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2936:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2937:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2938:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2939:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
2940:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 54


2941:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TaskHookFunction_t xReturn;
2942:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
2943:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2944:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2945:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2946:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2947:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2948:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * the value can be accessed from an interrupt. */
2949:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2950:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2951:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2952:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2953:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2954:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2955:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return xReturn;
2956:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
2957:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2958:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2959:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2960:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2961:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2962:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2963:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
2964:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                              void * pvParameter )
2965:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
2966:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * xTCB;
2967:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn;
2968:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2969:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* If xTask is NULL then we are calling our own task hook. */
2970:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( xTask == NULL )
2971:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2972:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xTCB = pxCurrentTCB;
2973:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2974:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
2975:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2976:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xTCB = xTask;
2977:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2978:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2979:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( xTCB->pxTaskTag != NULL )
2980:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2981:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xReturn = xTCB->pxTaskTag( pvParameter );
2982:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2983:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
2984:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
2985:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xReturn = pdFAIL;
2986:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
2987:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2988:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return xReturn;
2989:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
2990:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2991:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2992:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2993:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
2994:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** void vTaskSwitchContext( void )
2995:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
2996:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2997:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 55


2998:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* The scheduler is currently suspended - do not allow a context
2999:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * switch. */
3000:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         xYieldPending = pdTRUE;
3001:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3002:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     else
3003:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3004:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         xYieldPending = pdFALSE;
3005:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_OUT();
3006:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3007:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3008:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3009:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3010:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3011:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #else
3012:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3013:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #endif
3014:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3015:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Add the amount of time the task has been running to the
3016:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * accumulated time so far.  The time the task started running was
3017:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * stored in ulTaskSwitchedInTime.  Note that there is no overflow
3018:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * protection here so count values are only valid until the timer
3019:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * overflows.  The guard against negative values is to protect
3020:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * against suspect run time stat counter implementations - which
3021:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * are provided by the application, not the kernel. */
3022:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( ulTotalRunTime > ulTaskSwitchedInTime )
3023:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
3024:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3025:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
3026:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
3027:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
3028:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3029:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
3030:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3031:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 ulTaskSwitchedInTime = ulTotalRunTime;
3032:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3033:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif /* configGENERATE_RUN_TIME_STATS */
3034:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3035:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Check for stack overflow, if configured. */
3036:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskCHECK_FOR_STACK_OVERFLOW();
3037:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3038:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Before the currently running task is switched out, save its errno. */
3039:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3040:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3041:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3042:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3043:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif
3044:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3045:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Select a new task to run using either the generic C or port
3046:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * optimised asm code. */
3047:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with
3048:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
3049:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3050:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* After the new task is switched in, update the global errno. */
3051:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3052:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3053:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3054:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 56


3055:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif
3056:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3057:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3058:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3059:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
3060:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * structure specific to this task.
3061:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3062:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * for additional information. */
3063:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3064:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3065:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
3066:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3067:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
3068:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3069:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3070:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList,
3071:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             const TickType_t xTicksToWait )
3072:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
3073:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     configASSERT( pxEventList );
3074:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3075:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3076:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3077:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3078:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Place the event list item of the TCB in the appropriate event list.
3079:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * This is placed in the list in priority order so the highest priority task
3080:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * is the first to be woken by the event.  The queue that contains the event
3081:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * list is locked, preventing simultaneous access from interrupts. */
3082:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3083:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3084:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3085:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
3086:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3087:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3088:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
3089:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                      const TickType_t xItemValue,
3090:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                      const TickType_t xTicksToWait )
3091:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
3092:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     configASSERT( pxEventList );
3093:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3094:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3095:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * the event groups implementation. */
3096:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     configASSERT( uxSchedulerSuspended != 0 );
3097:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3098:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Store the item value in the event list item.  It is safe to access the
3099:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * event list item here as interrupts won't access the event list item of a
3100:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * task that is not in the Blocked state. */
3101:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VA
3102:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3103:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Place the event list item of the TCB at the end of the appropriate event
3104:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * list.  It is safe to access the event list here because it is part of an
3105:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * event group implementation - and interrupts don't access event groups
3106:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * directly (instead they access them indirectly by pending function calls to
3107:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * the task level). */
3108:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3109:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3110:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3111:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 57


3112:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3113:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3114:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_TIMERS == 1 )
3115:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3116:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
3117:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                           TickType_t xTicksToWait,
3118:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                           const BaseType_t xWaitIndefinitely )
3119:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3120:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( pxEventList );
3121:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3122:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* This function should not be called by application code hence the
3123:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
3124:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * designed for use by kernel code, and has special calling requirements -
3125:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * it should be called with the scheduler suspended. */
3126:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3127:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3128:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Place the event list item of the TCB in the appropriate event list.
3129:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * In this case it is assume that this is the only task that is going to
3130:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * be waiting on this event list, so the faster vListInsertEnd() function
3131:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * can be used in place of vListInsert. */
3132:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3133:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3134:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* If the task should block indefinitely then set the block time to a
3135:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * value that will be recognised as an indefinite delay inside the
3136:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * prvAddCurrentTaskToDelayedList() function. */
3137:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( xWaitIndefinitely != pdFALSE )
3138:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3139:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xTicksToWait = portMAX_DELAY;
3140:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3141:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3142:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3143:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3144:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3145:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3146:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TIMERS */
3147:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3148:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3149:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3150:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
3151:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TCB_t * pxUnblockedTCB;
3152:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xReturn;
3153:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3154:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3155:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * called from a critical section within an ISR. */
3156:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3157:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* The event list is sorted in priority order, so the first in the list can
3158:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * be removed as it is known to be the highest priority.  Remove the TCB from
3159:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * the delayed list, and add it to the ready list.
3160:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      *
3161:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * If an event is for a queue that is locked then this function will never
3162:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * get called - the lock count on the queue will get modified instead.  This
3163:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * means exclusive access to the event list is guaranteed here.
3164:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      *
3165:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * This function assumes that a check has already been made to ensure that
3166:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * pxEventList is not empty. */
3167:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as th
3168:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     configASSERT( pxUnblockedTCB );
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 58


3169:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3170:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3171:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3172:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3173:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3174:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
3175:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3176:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3177:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3178:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3179:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * might be set to the blocked task's time out time.  If the task is
3180:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3181:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * normally left unchanged, because it is automatically reset to a new
3182:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * value when the tick count equals xNextTaskUnblockTime.  However if
3183:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * tickless idling is used it might be more important to enter sleep mode
3184:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * at the earliest possible time - so reset xNextTaskUnblockTime here to
3185:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * ensure it is updated at the earliest possible time. */
3186:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 prvResetNextTaskUnblockTime();
3187:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3188:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif
3189:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3190:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     else
3191:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3192:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* The delayed and ready lists cannot be accessed, so hold this task
3193:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * pending until the scheduler is resumed. */
3194:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3195:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3196:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3197:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3198:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3199:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Return true if the task removed from the event list has a higher
3200:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * priority than the calling task.  This allows the calling task to know if
3201:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * it should force a context switch now. */
3202:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         xReturn = pdTRUE;
3203:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3204:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Mark that a yield is pending in case the user is not using the
3205:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3206:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         xYieldPending = pdTRUE;
3207:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3208:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     else
3209:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3210:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         xReturn = pdFALSE;
3211:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3212:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3213:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     return xReturn;
3214:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
3215:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3216:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3217:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
3218:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                         const TickType_t xItemValue )
3219:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
3220:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TCB_t * pxUnblockedTCB;
3221:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3222:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3223:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * the event flags implementation. */
3224:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     configASSERT( uxSchedulerSuspended != pdFALSE );
3225:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 59


3226:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Store the new item value in the event list. */
3227:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3228:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3229:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Remove the event list form the event flag.  Interrupts do not access
3230:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * event flags. */
3231:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as th
3232:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     configASSERT( pxUnblockedTCB );
3233:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     ( void ) uxListRemove( pxEventListItem );
3234:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3235:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( configUSE_TICKLESS_IDLE != 0 )
3236:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3237:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3238:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * might be set to the blocked task's time out time.  If the task is
3239:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3240:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * normally left unchanged, because it is automatically reset to a new
3241:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * value when the tick count equals xNextTaskUnblockTime.  However if
3242:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * tickless idling is used it might be more important to enter sleep mode
3243:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * at the earliest possible time - so reset xNextTaskUnblockTime here to
3244:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * ensure it is updated at the earliest possible time. */
3245:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             prvResetNextTaskUnblockTime();
3246:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3247:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif
3248:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3249:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Remove the task from the delayed list and add it to the ready list.  The
3250:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * scheduler is suspended so interrupts will not be accessing the ready
3251:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * lists. */
3252:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3253:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
3254:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3255:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3256:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3257:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* The unblocked task has a priority above that of the calling task, so
3258:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * a context switch is required.  This function is called with the
3259:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * scheduler suspended so xYieldPending is set so the context switch
3260:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * occurs immediately that the scheduler is resumed (unsuspended). */
3261:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         xYieldPending = pdTRUE;
3262:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3263:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
3264:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3265:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3266:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
3268:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     configASSERT( pxTimeOut );
3269:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     taskENTER_CRITICAL();
3270:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3271:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTimeOut->xOverflowCount = xNumOfOverflows;
3272:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
3273:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3274:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     taskEXIT_CRITICAL();
3275:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
3276:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3277:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3278:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3279:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
3280:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* For internal use only as it does not use a critical section. */
3281:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
3282:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 60


3283:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
3284:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3285:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3286:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
3287:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                  TickType_t * const pxTicksToWait )
3288:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
3289:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xReturn;
3290:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3291:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     configASSERT( pxTimeOut );
3292:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     configASSERT( pxTicksToWait );
3293:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3294:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     taskENTER_CRITICAL();
3295:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3296:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this block. */
3297:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         const TickType_t xConstTickCount = xTickCount;
3298:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3299:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3300:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( INCLUDE_xTaskAbortDelay == 1 )
3301:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3302:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3303:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* The delay was aborted, which is not the same as a time out,
3304:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * but has the same result. */
3305:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxCurrentTCB->ucDelayAborted = pdFALSE;
3306:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 xReturn = pdTRUE;
3307:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3308:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
3309:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif
3310:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3311:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3312:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( *pxTicksToWait == portMAX_DELAY )
3313:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3314:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* If INCLUDE_vTaskSuspend is set to 1 and the block time
3315:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * specified is the maximum block time then the task should block
3316:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * indefinitely, and therefore never time out. */
3317:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 xReturn = pdFALSE;
3318:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3319:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
3320:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif
3321:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3322:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTi
3323:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3324:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* The tick count is greater than the time at which
3325:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * vTaskSetTimeout() was called, but has also overflowed since
3326:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * vTaskSetTimeOut() was called.  It must have wrapped all the way
3327:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * around and gone past again. This passed since vTaskSetTimeout()
3328:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * was called. */
3329:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xReturn = pdTRUE;
3330:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
3331:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3332:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant wi
3333:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3334:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Not a genuine timeout. Adjust parameters for time remaining. */
3335:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             *pxTicksToWait -= xElapsedTime;
3336:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
3337:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xReturn = pdFALSE;
3338:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3339:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 61


3340:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3341:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
3342:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xReturn = pdTRUE;
3343:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3344:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3345:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     taskEXIT_CRITICAL();
3346:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3347:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     return xReturn;
3348:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
3349:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3350:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3351:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** void vTaskMissedYield( void )
3352:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
3353:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     xYieldPending = pdTRUE;
3354:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
3355:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3356:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3357:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3358:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3359:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3360:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3361:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxReturn;
3362:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t const * pxTCB;
3363:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3364:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( xTask != NULL )
3365:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3366:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTCB = xTask;
3367:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
3368:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3369:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
3370:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3371:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             uxReturn = 0U;
3372:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3373:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3374:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return uxReturn;
3375:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3376:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3377:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3378:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3379:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3380:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3381:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3382:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     void vTaskSetTaskNumber( TaskHandle_t xTask,
3383:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                              const UBaseType_t uxHandle )
3384:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3385:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3386:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3387:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( xTask != NULL )
3388:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3389:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTCB = xTask;
3390:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
3391:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3392:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3393:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3394:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3395:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3396:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 62


3397:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * -----------------------------------------------------------
3398:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * The Idle task.
3399:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * ----------------------------------------------------------
3400:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  *
3401:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3402:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3403:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  *
3404:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3405:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  *
3406:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  */
3407:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3408:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
3409:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Stop warnings. */
3410:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     ( void ) pvParameters;
3411:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3412:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3413:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * SCHEDULER IS STARTED. **/
3414:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3415:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* In case a task that has a secure context deletes itself, in which case
3416:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * the idle task is responsible for deleting the task's secure context, if
3417:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * any. */
3418:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3419:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3420:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     for( ; ; )
3421:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3422:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* See if any tasks have deleted themselves - if so then the idle task
3423:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * is responsible for freeing the deleted task's TCB and stack. */
3424:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         prvCheckTasksWaitingTermination();
3425:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3426:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( configUSE_PREEMPTION == 0 )
3427:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3428:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* If we are not using preemption we keep forcing a task switch to
3429:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * see if any other task has become available.  If we are using
3430:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * preemption we don't need to do this as any task becoming available
3431:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * will automatically get the processor anyway. */
3432:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 taskYIELD();
3433:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3434:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif /* configUSE_PREEMPTION */
3435:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3436:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3437:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3438:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* When using preemption tasks of equal priority will be
3439:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * timesliced.  If a task that is sharing the idle priority is ready
3440:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * to run then the idle task should yield before the end of the
3441:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * timeslice.
3442:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  *
3443:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * A critical region is not required here as we are just reading from
3444:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * the list, and an occasional incorrect value will not matter.  If
3445:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * the ready list at the idle priority contains more than one task
3446:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * then a task other than the idle task is ready to execute. */
3447:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBase
3448:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
3449:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     taskYIELD();
3450:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
3451:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
3452:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
3453:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 63


3454:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
3455:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3456:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3457:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3458:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( configUSE_IDLE_HOOK == 1 )
3459:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3460:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 extern void vApplicationIdleHook( void );
3461:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3462:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Call the user defined function from within the idle task.  This
3463:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * allows the application designer to add background functionality
3464:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * without the overhead of a separate task.
3465:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3466:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * CALL A FUNCTION THAT MIGHT BLOCK. */
3467:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 vApplicationIdleHook();
3468:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3469:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif /* configUSE_IDLE_HOOK */
3470:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3471:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* This conditional compilation should use inequality to 0, not equality
3472:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3473:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * user defined low power mode  implementations require
3474:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3475:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3476:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3477:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 TickType_t xExpectedIdleTime;
3478:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3479:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* It is not desirable to suspend then resume the scheduler on
3480:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * each iteration of the idle task.  Therefore, a preliminary
3481:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * test of the expected idle time is performed without the
3482:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * scheduler suspended.  The result here is not necessarily
3483:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * valid. */
3484:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 xExpectedIdleTime = prvGetExpectedIdleTime();
3485:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3486:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
3488:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     vTaskSuspendAll();
3489:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
3490:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* Now the scheduler is suspended, the expected idle
3491:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * time can be sampled again, and this time its value can
3492:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * be used. */
3493:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         configASSERT( xNextTaskUnblockTime >= xTickCount );
3494:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         xExpectedIdleTime = prvGetExpectedIdleTime();
3495:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3496:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* Define the following macro to set xExpectedIdleTime to 0
3497:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * if the application does not want
3498:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3499:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3500:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3501:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3502:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
3503:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             traceLOW_POWER_IDLE_BEGIN();
3504:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3505:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             traceLOW_POWER_IDLE_END();
3506:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
3507:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         else
3508:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
3509:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
3510:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 64


3511:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
3512:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     ( void ) xTaskResumeAll();
3513:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
3514:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
3515:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
3516:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3517:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
3518:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3519:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif /* configUSE_TICKLESS_IDLE */
3520:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3521:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
3522:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3523:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3524:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
3525:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3526:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3527:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3528:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* The idle task exists in addition to the application tasks. */
3529:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         const UBaseType_t uxNonApplicationTasks = 1;
3530:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         eSleepModeStatus eReturn = eStandardSleep;
3531:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3532:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* This function must be called from a critical section. */
3533:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3534:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3535:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3536:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* A task was made ready while the scheduler was suspended. */
3537:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             eReturn = eAbortSleep;
3538:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3539:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else if( xYieldPending != pdFALSE )
3540:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3541:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* A yield was pended while the scheduler was suspended. */
3542:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             eReturn = eAbortSleep;
3543:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3544:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else if( xPendedTicks != 0 )
3545:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3546:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* A tick interrupt has already occurred but was held pending
3547:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * because the scheduler is suspended. */
3548:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             eReturn = eAbortSleep;
3549:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3550:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
3551:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3552:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* If all the tasks are in the suspended list (which might mean they
3553:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * have an infinite block time rather than actually being suspended)
3554:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * then it is safe to turn all clocks off and just wait for external
3555:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * interrupts. */
3556:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonA
3557:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3558:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 eReturn = eNoTasksWaitingTimeout;
3559:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3560:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
3561:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3562:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3563:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3564:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3565:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3566:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return eReturn;
3567:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 65


3568:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3569:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3570:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3571:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3572:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3573:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3574:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
3575:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                             BaseType_t xIndex,
3576:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                             void * pvValue )
3577:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3578:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3579:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3580:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3581:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3582:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSet );
3583:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             configASSERT( pxTCB != NULL );
3584:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3585:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3586:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3587:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3588:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3590:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3591:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3592:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3593:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
3594:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                                BaseType_t xIndex )
3595:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3596:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         void * pvReturn = NULL;
3597:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3598:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3599:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3600:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3601:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3602:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3603:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3604:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
3605:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3606:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pvReturn = NULL;
3607:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3608:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3609:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return pvReturn;
3610:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3611:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3612:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3613:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3614:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3615:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3616:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3617:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
3618:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                   const MemoryRegion_t * const xRegions )
3619:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3620:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3621:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3622:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* If null is passed in here then we are modifying the MPU settings of
3623:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * the calling task. */
3624:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTaskToModify );
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 66


3625:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3626:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3627:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3628:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3629:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3630:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3631:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3632:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** static void prvInitialiseTaskLists( void )
3633:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
3634:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     UBaseType_t uxPriority;
3635:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3636:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPrio
3637:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3638:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3639:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3640:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3641:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     vListInitialise( &xDelayedTaskList1 );
3642:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
3643:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     vListInitialise( &xPendingReadyList );
3644:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3645:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3646:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3647:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             vListInitialise( &xTasksWaitingTermination );
3648:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3649:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3650:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3651:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
3652:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3653:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             vListInitialise( &xSuspendedTaskList );
3654:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3655:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
3656:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3657:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3658:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * using list2. */
3659:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     pxDelayedTaskList = &xDelayedTaskList1;
3660:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
3661:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
3662:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3663:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3664:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3665:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
3666:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3667:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3668:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3669:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3670:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             TCB_t * pxTCB;
3671:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3672:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3673:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * being called too often in the idle task. */
3674:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3675:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3676:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 taskENTER_CRITICAL();
3677:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
3678:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e
3679:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3680:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     --uxCurrentNumberOfTasks;
3681:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     --uxDeletedTasksWaitingCleanUp;
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 67


3682:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
3683:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 taskEXIT_CRITICAL();
3684:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3685:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 prvDeleteTCB( pxTCB );
3686:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3687:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3688:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3689:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
3690:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3691:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3692:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3693:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3694:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     void vTaskGetInfo( TaskHandle_t xTask,
3695:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                        TaskStatus_t * pxTaskStatus,
3696:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                        BaseType_t xGetFreeStackSpace,
3697:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                        eTaskState eState )
3698:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3699:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3700:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3701:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* xTask is NULL then get the state of the calling task. */
3702:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3703:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3704:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3705:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
3706:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3707:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
3708:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3709:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3710:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( configUSE_MUTEXES == 1 )
3711:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3712:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3713:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3714:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #else
3715:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3716:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxTaskStatus->uxBasePriority = 0;
3717:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3718:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif
3719:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3720:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3721:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3722:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3723:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3724:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #else
3725:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3726:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxTaskStatus->ulRunTimeCounter = 0;
3727:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3728:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif
3729:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3730:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Obtaining the task state is a little fiddly, so is only done if the
3731:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * value of eState passed into this function is eInvalid - otherwise the
3732:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * state is just set to whatever is passed in. */
3733:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( eState != eInvalid )
3734:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3735:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( pxTCB == pxCurrentTCB )
3736:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3737:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxTaskStatus->eCurrentState = eRunning;
3738:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 68


3739:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
3740:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3741:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxTaskStatus->eCurrentState = eState;
3742:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3743:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
3744:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
3745:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* If the task is in the suspended list then there is a
3746:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          *  chance it is actually just blocked indefinitely - so really
3747:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          *  it should be reported as being in the Blocked state. */
3748:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         if( eState == eSuspended )
3749:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
3750:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             vTaskSuspendAll();
3751:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             {
3752:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3753:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 {
3754:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                     pxTaskStatus->eCurrentState = eBlocked;
3755:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 }
3756:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             }
3757:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             ( void ) xTaskResumeAll();
3758:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
3759:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
3760:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #endif /* INCLUDE_vTaskSuspend */
3761:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3762:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3763:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
3764:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3765:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3766:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3767:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3768:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3769:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * parameter is provided to allow it to be skipped. */
3770:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( xGetFreeStackSpace != pdFALSE )
3771:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3772:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #if ( portSTACK_GROWTH > 0 )
3773:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
3774:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
3775:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
3776:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #else
3777:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
3778:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
3779:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
3780:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             #endif
3781:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3782:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
3783:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3784:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTaskStatus->usStackHighWaterMark = 0;
3785:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3786:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3787:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3788:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3789:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3790:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3791:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3792:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3793:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
3794:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                                      List_t * pxList,
3795:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                                      eTaskState eState )
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 69


3796:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3797:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
3798:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxTask = 0;
3799:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3800:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3801:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3802:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
3803:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3804:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Populate an TaskStatus_t structure within the
3805:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * pxTaskStatusArray array for each task that is referenced from
3806:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * pxList.  See the definition of TaskStatus_t in task.h for the
3807:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * meaning of each TaskStatus_t structure member. */
3808:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             do
3809:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3810:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
3811:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
3812:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 uxTask++;
3813:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
3814:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3815:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
3816:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3817:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3818:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3819:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3820:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return uxTask;
3821:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3822:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3823:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3824:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3825:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3826:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3827:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3828:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3829:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3830:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uint32_t ulCount = 0U;
3831:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3832:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3833:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
3834:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pucStackByte -= portSTACK_GROWTH;
3835:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             ulCount++;
3836:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
3837:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3838:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on sma
3839:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3840:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return ( configSTACK_DEPTH_TYPE ) ulCount;
3841:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3842:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3843:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3844:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3845:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3846:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3847:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3848:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3849:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3850:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * user to determine the return type.  It gets around the problem of the value
3851:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * overflowing on 8-bit types without breaking backward compatibility for
3852:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****  * applications that expect an 8-bit return type. */
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 70


3853:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3854:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3855:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3856:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uint8_t * pucEndOfStack;
3857:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configSTACK_DEPTH_TYPE uxReturn;
3858:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3859:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3860:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * the same except for their return type.  Using configSTACK_DEPTH_TYPE
3861:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * allows the user to determine the return type.  It gets around the
3862:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * problem of the value overflowing on 8-bit types without breaking
3863:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * backward compatibility for applications that expect an 8-bit return
3864:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * type. */
3865:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3866:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3867:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3868:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if portSTACK_GROWTH < 0
3869:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3870:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3871:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3872:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #else
3873:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3874:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3875:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3876:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif
3877:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3878:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3879:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3880:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return uxReturn;
3881:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3882:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3883:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3884:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3885:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3886:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3887:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3888:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3889:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3890:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3891:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uint8_t * pucEndOfStack;
3892:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxReturn;
3893:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3894:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3895:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3896:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if portSTACK_GROWTH < 0
3897:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3898:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3899:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3900:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #else
3901:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3902:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3903:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3904:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif
3905:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3906:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3907:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3908:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return uxReturn;
3909:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 71


3910:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3911:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3912:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3913:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3914:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3915:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3916:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB )
3917:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3918:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
3919:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * above the vPortFree() calls.  The call is also used by ports/demos that
3920:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * want to allocate and clean RAM statically. */
3921:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         portCLEAN_UP_TCB( pxTCB );
3922:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3923:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Free up the memory allocated by the scheduler for the task.  It is up
3924:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * to the task to free any memory allocated at the application level.
3925:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3926:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * for additional information. */
3927:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3928:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3929:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 _reclaim_reent( &( pxTCB->xNewLib_reent ) );
3930:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3931:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
3932:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3933:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
3934:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3935:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* The task can only have been allocated dynamically - free both
3936:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * the stack and TCB. */
3937:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 vPortFree( pxTCB->pxStack );
3938:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 vPortFree( pxTCB );
3939:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3940:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been
3941:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
3942:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* The task could have been allocated statically or dynamically, so
3943:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * check what was statically allocated before trying to free the
3944:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * memory. */
3945:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3946:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
3947:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Both the stack and TCB were allocated dynamically, so both
3948:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * must be freed. */
3949:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     vPortFree( pxTCB->pxStack );
3950:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     vPortFree( pxTCB );
3951:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
3952:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3953:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
3954:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Only the stack was statically allocated, so the TCB is the
3955:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * only memory that must be freed. */
3956:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     vPortFree( pxTCB );
3957:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
3958:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
3959:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
3960:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Neither the stack nor the TCB were allocated dynamically, so
3961:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * nothing needs to be freed. */
3962:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND
3963:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3964:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
3965:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
3966:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 72


3967:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3968:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3969:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3970:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3971:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3972:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3973:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
  81              		.loc 1 3973 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              		@ link register save eliminated.
3974:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  86              		.loc 1 3974 0
  87 0000 074B     		ldr	r3, .L11
  88 0002 9B6A     		ldr	r3, [r3, #40]
  89 0004 1B68     		ldr	r3, [r3]
  90 0006 23B9     		cbnz	r3, .L9
3975:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3976:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3977:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * the maximum possible value so it is  extremely unlikely that the
3978:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3979:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * there is an item in the delayed list. */
3980:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
  91              		.loc 1 3980 0
  92 0008 4FF0FF32 		mov	r2, #-1
  93 000c 044B     		ldr	r3, .L11
  94 000e DA62     		str	r2, [r3, #44]
  95 0010 7047     		bx	lr
  96              	.L9:
3981:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3982:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     else
3983:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3984:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* The new current delayed list is not empty, get the value of
3985:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * the item at the head of the delayed list.  This is the time at
3986:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * which the task at the head of the delayed list should be removed
3987:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * from the Blocked state. */
3988:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
  97              		.loc 1 3988 0
  98 0012 034B     		ldr	r3, .L11
  99 0014 9A6A     		ldr	r2, [r3, #40]
 100 0016 D268     		ldr	r2, [r2, #12]
 101 0018 1268     		ldr	r2, [r2]
 102 001a DA62     		str	r2, [r3, #44]
 103 001c 7047     		bx	lr
 104              	.L12:
 105 001e 00BF     		.align	2
 106              	.L11:
 107 0020 00000000 		.word	.LANCHOR0
 108              		.cfi_endproc
 109              	.LFE43:
 110              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 111              		.section	.text.prvDeleteTCB,"ax",%progbits
 112              		.align	2
 113              		.thumb
 114              		.thumb_func
 115              		.type	prvDeleteTCB, %function
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 73


 116              	prvDeleteTCB:
 117              	.LFB42:
3917:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
 118              		.loc 1 3917 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              	.LVL8:
 123 0000 10B5     		push	{r4, lr}
 124              		.cfi_def_cfa_offset 8
 125              		.cfi_offset 4, -8
 126              		.cfi_offset 14, -4
 127 0002 0446     		mov	r4, r0
3937:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 vPortFree( pxTCB );
 128              		.loc 1 3937 0
 129 0004 006B     		ldr	r0, [r0, #48]
 130              	.LVL9:
 131 0006 FFF7FEFF 		bl	vPortFree
 132              	.LVL10:
3938:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 133              		.loc 1 3938 0
 134 000a 2046     		mov	r0, r4
 135 000c FFF7FEFF 		bl	vPortFree
 136              	.LVL11:
 137 0010 10BD     		pop	{r4, pc}
 138              		.cfi_endproc
 139              	.LFE42:
 140              		.size	prvDeleteTCB, .-prvDeleteTCB
 141 0012 00BF     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 142              		.align	2
 143              		.thumb
 144              		.thumb_func
 145              		.type	prvInitialiseNewTask, %function
 146              	prvInitialiseNewTask:
 147              	.LFB5:
 820:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     StackType_t * pxTopOfStack;
 148              		.loc 1 820 0
 149              		.cfi_startproc
 150              		@ args = 16, pretend = 0, frame = 0
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152              	.LVL12:
 153 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 154              		.cfi_def_cfa_offset 32
 155              		.cfi_offset 3, -32
 156              		.cfi_offset 4, -28
 157              		.cfi_offset 5, -24
 158              		.cfi_offset 6, -20
 159              		.cfi_offset 7, -16
 160              		.cfi_offset 8, -12
 161              		.cfi_offset 9, -8
 162              		.cfi_offset 14, -4
 163 0004 8046     		mov	r8, r0
 164 0006 9946     		mov	r9, r3
 165 0008 089D     		ldr	r5, [sp, #32]
 166 000a 099F     		ldr	r7, [sp, #36]
 167 000c 0A9C     		ldr	r4, [sp, #40]
 853:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 74


 168              		.loc 1 853 0
 169 000e 236B     		ldr	r3, [r4, #48]
 170              	.LVL13:
 171 0010 02F18042 		add	r2, r2, #1073741824
 172              	.LVL14:
 173 0014 013A     		subs	r2, r2, #1
 174              	.LVL15:
 175 0016 03EB8206 		add	r6, r3, r2, lsl #2
 176              	.LVL16:
 854:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 177              		.loc 1 854 0
 178 001a 26F00706 		bic	r6, r6, #7
 179              	.LVL17:
 881:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 180              		.loc 1 881 0
 181 001e 41B9     		cbnz	r1, .L23
 182 0020 0FE0     		b	.L25
 183              	.LVL18:
 184              	.L19:
 885:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 185              		.loc 1 885 0
 186 0022 D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 187 0024 E118     		adds	r1, r4, r3
 188 0026 81F83400 		strb	r0, [r1, #52]
 890:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 189              		.loc 1 890 0
 190 002a D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 191 002c 29B1     		cbz	r1, .L18
 883:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 192              		.loc 1 883 0 discriminator 2
 193 002e 0133     		adds	r3, r3, #1
 194              	.LVL19:
 195 0030 01E0     		b	.L16
 196              	.LVL20:
 197              	.L23:
 198 0032 0A46     		mov	r2, r1
 199 0034 0023     		movs	r3, #0
 200              	.LVL21:
 201              	.L16:
 883:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 202              		.loc 1 883 0 is_stmt 0 discriminator 1
 203 0036 0F2B     		cmp	r3, #15
 204 0038 F3D9     		bls	.L19
 205              	.L18:
 902:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 206              		.loc 1 902 0 is_stmt 1
 207 003a 0023     		movs	r3, #0
 208              	.LVL22:
 209 003c 84F84330 		strb	r3, [r4, #67]
 210 0040 02E0     		b	.L20
 211              	.LVL23:
 212              	.L25:
 908:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 213              		.loc 1 908 0
 214 0042 0023     		movs	r3, #0
 215 0044 84F83430 		strb	r3, [r4, #52]
 216              	.LVL24:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 75


 217              	.L20:
 913:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 218              		.loc 1 913 0
 219 0048 042D     		cmp	r5, #4
 220 004a 00D9     		bls	.L21
 915:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 221              		.loc 1 915 0
 222 004c 0425     		movs	r5, #4
 223              	.L21:
 224              	.LVL25:
 922:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 225              		.loc 1 922 0
 226 004e E562     		str	r5, [r4, #44]
 930:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 227              		.loc 1 930 0
 228 0050 201D     		adds	r0, r4, #4
 229 0052 FFF7FEFF 		bl	vListInitialiseItem
 230              	.LVL26:
 931:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 231              		.loc 1 931 0
 232 0056 04F11800 		add	r0, r4, #24
 233 005a FFF7FEFF 		bl	vListInitialiseItem
 234              	.LVL27:
 935:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 235              		.loc 1 935 0
 236 005e 2461     		str	r4, [r4, #16]
 938:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 237              		.loc 1 938 0
 238 0060 C5F10505 		rsb	r5, r5, #5
 239              	.LVL28:
 240 0064 A561     		str	r5, [r4, #24]
 939:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 241              		.loc 1 939 0
 242 0066 6462     		str	r4, [r4, #36]
 972:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 243              		.loc 1 972 0
 244 0068 0023     		movs	r3, #0
 245 006a 6364     		str	r3, [r4, #68]	@ unaligned
 246 006c A364     		str	r3, [r4, #72]	@ unaligned
 247 006e E364     		str	r3, [r4, #76]	@ unaligned
 248 0070 2365     		str	r3, [r4, #80]	@ unaligned
 249 0072 6365     		str	r3, [r4, #84]	@ unaligned
 978:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyS
 250              		.loc 1 978 0
 251 0074 A365     		str	r3, [r4, #88]	@ unaligned
 979:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 252              		.loc 1 979 0
 253 0076 84F85C30 		strb	r3, [r4, #92]
1044:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 254              		.loc 1 1044 0
 255 007a 4A46     		mov	r2, r9
 256 007c 4146     		mov	r1, r8
 257 007e 3046     		mov	r0, r6
 258 0080 FFF7FEFF 		bl	pxPortInitialiseStack
 259              	.LVL29:
 260 0084 2060     		str	r0, [r4]
1050:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 76


 261              		.loc 1 1050 0
 262 0086 07B1     		cbz	r7, .L15
1054:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 263              		.loc 1 1054 0
 264 0088 3C60     		str	r4, [r7]
 265              	.L15:
 266 008a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 267              		.cfi_endproc
 268              	.LFE5:
 269              		.size	prvInitialiseNewTask, .-prvInitialiseNewTask
 270 008e 00BF     		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 271              		.align	2
 272              		.thumb
 273              		.thumb_func
 274              		.type	prvInitialiseTaskLists, %function
 275              	prvInitialiseTaskLists:
 276              	.LFB40:
3633:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     UBaseType_t uxPriority;
 277              		.loc 1 3633 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281 0000 70B5     		push	{r4, r5, r6, lr}
 282              		.cfi_def_cfa_offset 16
 283              		.cfi_offset 4, -16
 284              		.cfi_offset 5, -12
 285              		.cfi_offset 6, -8
 286              		.cfi_offset 14, -4
 287              	.LVL30:
3636:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 288              		.loc 1 3636 0
 289 0002 0024     		movs	r4, #0
 290 0004 07E0     		b	.L28
 291              	.LVL31:
 292              	.L29:
3638:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 293              		.loc 1 3638 0 discriminator 3
 294 0006 04EB8402 		add	r2, r4, r4, lsl #2
 295 000a 9300     		lsls	r3, r2, #2
 296 000c 1048     		ldr	r0, .L31
 297 000e 1844     		add	r0, r0, r3
 298 0010 FFF7FEFF 		bl	vListInitialise
 299              	.LVL32:
3636:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 300              		.loc 1 3636 0 discriminator 3
 301 0014 0134     		adds	r4, r4, #1
 302              	.LVL33:
 303              	.L28:
3636:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 304              		.loc 1 3636 0 is_stmt 0 discriminator 1
 305 0016 042C     		cmp	r4, #4
 306 0018 F5D9     		bls	.L29
3641:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
 307              		.loc 1 3641 0 is_stmt 1
 308 001a 0E4C     		ldr	r4, .L31+4
 309              	.LVL34:
 310 001c 04F19406 		add	r6, r4, #148
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 77


 311 0020 3046     		mov	r0, r6
 312 0022 FFF7FEFF 		bl	vListInitialise
 313              	.LVL35:
3642:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     vListInitialise( &xPendingReadyList );
 314              		.loc 1 3642 0
 315 0026 04F1A805 		add	r5, r4, #168
 316 002a 2846     		mov	r0, r5
 317 002c FFF7FEFF 		bl	vListInitialise
 318              	.LVL36:
3643:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 319              		.loc 1 3643 0
 320 0030 04F11400 		add	r0, r4, #20
 321 0034 FFF7FEFF 		bl	vListInitialise
 322              	.LVL37:
3647:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 323              		.loc 1 3647 0
 324 0038 04F1BC00 		add	r0, r4, #188
 325 003c FFF7FEFF 		bl	vListInitialise
 326              	.LVL38:
3653:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 327              		.loc 1 3653 0
 328 0040 2046     		mov	r0, r4
 329 0042 FFF7FEFF 		bl	vListInitialise
 330              	.LVL39:
3659:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 331              		.loc 1 3659 0
 332 0046 A662     		str	r6, [r4, #40]
3660:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
 333              		.loc 1 3660 0
 334 0048 C4F8D050 		str	r5, [r4, #208]
 335 004c 70BD     		pop	{r4, r5, r6, pc}
 336              	.L32:
 337 004e 00BF     		.align	2
 338              	.L31:
 339 0050 30000000 		.word	.LANCHOR0+48
 340 0054 00000000 		.word	.LANCHOR0
 341              		.cfi_endproc
 342              	.LFE40:
 343              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 344              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 345              		.align	2
 346              		.thumb
 347              		.thumb_func
 348              		.type	prvAddNewTaskToReadyList, %function
 349              	prvAddNewTaskToReadyList:
 350              	.LFB6:
1064:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
 351              		.loc 1 1064 0
 352              		.cfi_startproc
 353              		@ args = 0, pretend = 0, frame = 0
 354              		@ frame_needed = 0, uses_anonymous_args = 0
 355              	.LVL40:
 356 0000 38B5     		push	{r3, r4, r5, lr}
 357              		.cfi_def_cfa_offset 16
 358              		.cfi_offset 3, -16
 359              		.cfi_offset 4, -12
 360              		.cfi_offset 5, -8
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 78


 361              		.cfi_offset 14, -4
 362 0002 0446     		mov	r4, r0
1067:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 363              		.loc 1 1067 0
 364 0004 FFF7FEFF 		bl	vPortEnterCritical
 365              	.LVL41:
1069:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 366              		.loc 1 1069 0
 367 0008 264B     		ldr	r3, .L39
 368 000a D3F8D420 		ldr	r2, [r3, #212]
 369 000e 0132     		adds	r2, r2, #1
 370 0010 C3F8D420 		str	r2, [r3, #212]
1071:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 371              		.loc 1 1071 0
 372 0014 D3F8D830 		ldr	r3, [r3, #216]
 373 0018 4BB9     		cbnz	r3, .L34
1075:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 374              		.loc 1 1075 0
 375 001a 224B     		ldr	r3, .L39
 376 001c C3F8D840 		str	r4, [r3, #216]
1077:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 377              		.loc 1 1077 0
 378 0020 D3F8D430 		ldr	r3, [r3, #212]
 379 0024 012B     		cmp	r3, #1
 380 0026 10D1     		bne	.L35
1082:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 381              		.loc 1 1082 0
 382 0028 FFF7FEFF 		bl	prvInitialiseTaskLists
 383              	.LVL42:
 384 002c 0DE0     		b	.L35
 385              	.L34:
1094:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 386              		.loc 1 1094 0
 387 002e 1D4B     		ldr	r3, .L39
 388 0030 D3F8DC30 		ldr	r3, [r3, #220]
 389 0034 4BB9     		cbnz	r3, .L35
1096:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 390              		.loc 1 1096 0
 391 0036 1B4B     		ldr	r3, .L39
 392 0038 D3F8D830 		ldr	r3, [r3, #216]
 393 003c DA6A     		ldr	r2, [r3, #44]
 394 003e E36A     		ldr	r3, [r4, #44]
 395 0040 9A42     		cmp	r2, r3
 396 0042 02D8     		bhi	.L35
1098:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 397              		.loc 1 1098 0
 398 0044 174B     		ldr	r3, .L39
 399 0046 C3F8D840 		str	r4, [r3, #216]
 400              	.L35:
1111:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 401              		.loc 1 1111 0
 402 004a 164A     		ldr	r2, .L39
 403 004c D2F8E030 		ldr	r3, [r2, #224]
 404 0050 0133     		adds	r3, r3, #1
 405 0052 C2F8E030 		str	r3, [r2, #224]
1121:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 406              		.loc 1 1121 0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 79


 407 0056 E36A     		ldr	r3, [r4, #44]
 408 0058 D2F8E420 		ldr	r2, [r2, #228]
 409 005c 9342     		cmp	r3, r2
 410 005e 02D9     		bls	.L36
1121:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 411              		.loc 1 1121 0 is_stmt 0 discriminator 1
 412 0060 104A     		ldr	r2, .L39
 413 0062 C2F8E430 		str	r3, [r2, #228]
 414              	.L36:
1121:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 415              		.loc 1 1121 0 discriminator 3
 416 0066 0F4D     		ldr	r5, .L39
 417 0068 05F13000 		add	r0, r5, #48
 418 006c 03EB8303 		add	r3, r3, r3, lsl #2
 419 0070 9A00     		lsls	r2, r3, #2
 420 0072 211D     		adds	r1, r4, #4
 421 0074 1044     		add	r0, r0, r2
 422 0076 FFF7FEFF 		bl	vListInsertEnd
 423              	.LVL43:
1125:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 424              		.loc 1 1125 0 is_stmt 1 discriminator 3
 425 007a FFF7FEFF 		bl	vPortExitCritical
 426              	.LVL44:
1127:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 427              		.loc 1 1127 0 discriminator 3
 428 007e D5F8DC30 		ldr	r3, [r5, #220]
 429 0082 6BB1     		cbz	r3, .L33
1131:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 430              		.loc 1 1131 0
 431 0084 D5F8D830 		ldr	r3, [r5, #216]
 432 0088 DA6A     		ldr	r2, [r3, #44]
 433 008a E36A     		ldr	r3, [r4, #44]
 434 008c 9A42     		cmp	r2, r3
 435 008e 07D2     		bcs	.L33
1133:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 436              		.loc 1 1133 0
 437 0090 4FF08052 		mov	r2, #268435456
 438 0094 044B     		ldr	r3, .L39+4
 439 0096 1A60     		str	r2, [r3]
 440              		.syntax unified
 441              	@ 1133 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 442 0098 BFF34F8F 		dsb
 443              	@ 0 "" 2
 444              	@ 1133 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 445 009c BFF36F8F 		isb
 446              	@ 0 "" 2
 447              		.thumb
 448              		.syntax unified
 449              	.L33:
 450 00a0 38BD     		pop	{r3, r4, r5, pc}
 451              	.LVL45:
 452              	.L40:
 453 00a2 00BF     		.align	2
 454              	.L39:
 455 00a4 00000000 		.word	.LANCHOR0
 456 00a8 04ED00E0 		.word	-536810236
 457              		.cfi_endproc
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 80


 458              	.LFE6:
 459              		.size	prvAddNewTaskToReadyList, .-prvAddNewTaskToReadyList
 460              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 461              		.align	2
 462              		.thumb
 463              		.thumb_func
 464              		.type	prvCheckTasksWaitingTermination, %function
 465              	prvCheckTasksWaitingTermination:
 466              	.LFB41:
3665:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
 467              		.loc 1 3665 0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 471 0000 38B5     		push	{r3, r4, r5, lr}
 472              		.cfi_def_cfa_offset 16
 473              		.cfi_offset 3, -16
 474              		.cfi_offset 4, -12
 475              		.cfi_offset 5, -8
 476              		.cfi_offset 14, -4
 477              	.LBB22:
3674:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 478              		.loc 1 3674 0
 479 0002 17E0     		b	.L42
 480              	.L43:
3676:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 481              		.loc 1 3676 0
 482 0004 FFF7FEFF 		bl	vPortEnterCritical
 483              	.LVL46:
3678:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 484              		.loc 1 3678 0
 485 0008 0D4C     		ldr	r4, .L45
 486 000a D4F8C830 		ldr	r3, [r4, #200]
 487 000e DD68     		ldr	r5, [r3, #12]
 488              	.LVL47:
3679:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     --uxCurrentNumberOfTasks;
 489              		.loc 1 3679 0
 490 0010 281D     		adds	r0, r5, #4
 491 0012 FFF7FEFF 		bl	uxListRemove
 492              	.LVL48:
3680:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     --uxDeletedTasksWaitingCleanUp;
 493              		.loc 1 3680 0
 494 0016 D4F8D430 		ldr	r3, [r4, #212]
 495 001a 013B     		subs	r3, r3, #1
 496 001c C4F8D430 		str	r3, [r4, #212]
3681:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 497              		.loc 1 3681 0
 498 0020 D4F8E830 		ldr	r3, [r4, #232]
 499 0024 013B     		subs	r3, r3, #1
 500 0026 C4F8E830 		str	r3, [r4, #232]
3683:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 501              		.loc 1 3683 0
 502 002a FFF7FEFF 		bl	vPortExitCritical
 503              	.LVL49:
3685:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 504              		.loc 1 3685 0
 505 002e 2846     		mov	r0, r5
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 81


 506 0030 FFF7FEFF 		bl	prvDeleteTCB
 507              	.LVL50:
 508              	.L42:
3674:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 509              		.loc 1 3674 0
 510 0034 024B     		ldr	r3, .L45
 511 0036 D3F8E830 		ldr	r3, [r3, #232]
 512 003a 002B     		cmp	r3, #0
 513 003c E2D1     		bne	.L43
 514              	.LBE22:
3689:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 515              		.loc 1 3689 0
 516 003e 38BD     		pop	{r3, r4, r5, pc}
 517              	.L46:
 518              		.align	2
 519              	.L45:
 520 0040 00000000 		.word	.LANCHOR0
 521              		.cfi_endproc
 522              	.LFE41:
 523              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 524              		.section	.text.prvIdleTask,"ax",%progbits
 525              		.align	2
 526              		.thumb
 527              		.thumb_func
 528              		.type	prvIdleTask, %function
 529              	prvIdleTask:
 530              	.LFB37:
3408:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Stop warnings. */
 531              		.loc 1 3408 0
 532              		.cfi_startproc
 533              		@ Volatile: function does not return.
 534              		@ args = 0, pretend = 0, frame = 0
 535              		@ frame_needed = 0, uses_anonymous_args = 0
 536              	.LVL51:
 537 0000 08B5     		push	{r3, lr}
 538              		.cfi_def_cfa_offset 8
 539              		.cfi_offset 3, -8
 540              		.cfi_offset 14, -4
 541              	.LVL52:
 542              	.L48:
3424:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 543              		.loc 1 3424 0
 544 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 545              	.LVL53:
3447:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 546              		.loc 1 3447 0
 547 0006 064B     		ldr	r3, .L51
 548 0008 1B6B     		ldr	r3, [r3, #48]
 549 000a 012B     		cmp	r3, #1
 550 000c F9D9     		bls	.L48
3449:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 551              		.loc 1 3449 0
 552 000e 4FF08052 		mov	r2, #268435456
 553 0012 044B     		ldr	r3, .L51+4
 554 0014 1A60     		str	r2, [r3]
 555              		.syntax unified
 556              	@ 3449 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 82


 557 0016 BFF34F8F 		dsb
 558              	@ 0 "" 2
 559              	@ 3449 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 560 001a BFF36F8F 		isb
 561              	@ 0 "" 2
 562              		.thumb
 563              		.syntax unified
 564 001e F0E7     		b	.L48
 565              	.L52:
 566              		.align	2
 567              	.L51:
 568 0020 00000000 		.word	.LANCHOR0
 569 0024 04ED00E0 		.word	-536810236
 570              		.cfi_endproc
 571              	.LFE37:
 572              		.size	prvIdleTask, .-prvIdleTask
 573              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 574              		.align	2
 575              		.thumb
 576              		.thumb_func
 577              		.type	prvAddCurrentTaskToDelayedList, %function
 578              	prvAddCurrentTaskToDelayedList:
 579              	.LFB54:
3989:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
3990:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
3991:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3992:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3993:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3994:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3995:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TaskHandle_t xTaskGetCurrentTaskHandle( void )
3996:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
3997:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TaskHandle_t xReturn;
3998:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
3999:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* A critical section is not required as this is not called from
4000:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * an interrupt and the current TCB will always be the same for any
4001:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * individual execution thread. */
4002:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         xReturn = pxCurrentTCB;
4003:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4004:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return xReturn;
4005:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
4006:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4007:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
4008:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4009:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4010:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
4011:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4012:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskGetSchedulerState( void )
4013:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
4014:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn;
4015:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4016:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( xSchedulerRunning == pdFALSE )
4017:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4018:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xReturn = taskSCHEDULER_NOT_STARTED;
4019:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4020:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
4021:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4022:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 83


4023:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4024:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 xReturn = taskSCHEDULER_RUNNING;
4025:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4026:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
4027:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4028:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 xReturn = taskSCHEDULER_SUSPENDED;
4029:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4030:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4031:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4032:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return xReturn;
4033:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
4034:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4035:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4036:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4037:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4038:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4039:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4040:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4041:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
4042:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4043:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn = pdFALSE;
4044:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4045:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* If the mutex was given back by an interrupt while the queue was
4046:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * locked then the mutex holder might now be NULL.  _RB_ Is this still
4047:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * needed as interrupts can no longer use mutexes? */
4048:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( pxMutexHolder != NULL )
4049:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4050:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* If the holder of the mutex has a priority below the priority of
4051:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * the task attempting to obtain the mutex then it will temporarily
4052:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * inherit the priority of the task attempting to obtain the mutex. */
4053:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4054:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4055:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Adjust the mutex holder state to account for its new
4056:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * priority.  Only reset the event list item value if the value is
4057:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * not being used for anything else. */
4058:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_
4059:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4060:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) 
4061:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4062:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
4063:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4064:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4065:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4066:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4067:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* If the task being modified is in the ready state it will need
4068:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * to be moved into a new list. */
4069:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] )
4070:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4071:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
4072:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
4073:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* It is known that the task is in its ready list so
4074:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * there is no need to check again and the port level
4075:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * reset macro can be called directly. */
4076:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority 
4077:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
4078:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     else
4079:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 84


4080:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4081:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
4082:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4083:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Inherit the priority before being moved into the new list. */
4084:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4085:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
4086:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4087:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
4088:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4089:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Just inherit the priority. */
4090:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4091:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4092:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4093:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4094:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4095:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Inheritance occurred. */
4096:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 xReturn = pdTRUE;
4097:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4098:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
4099:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4100:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4101:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4102:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* The base priority of the mutex holder is lower than the
4103:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * priority of the task attempting to take the mutex, but the
4104:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * current priority of the mutex holder is not lower than the
4105:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * priority of the task attempting to take the mutex.
4106:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * Therefore the mutex holder must have already inherited a
4107:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * priority, but inheritance would have occurred if that had
4108:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * not been the case. */
4109:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     xReturn = pdTRUE;
4110:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4111:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
4112:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4113:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4114:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4115:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4116:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4117:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
4118:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4119:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4120:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4121:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4122:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return xReturn;
4123:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
4124:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4125:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4126:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4127:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4128:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4129:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4130:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4131:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
4132:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4133:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn = pdFALSE;
4134:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4135:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( pxMutexHolder != NULL )
4136:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 85


4137:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* A task can only have an inherited priority if it holds the mutex.
4138:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * If the mutex is held by a task then it cannot be given from an
4139:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * interrupt, and if a mutex is given by the holding task then it must
4140:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * be the running state task. */
4141:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             configASSERT( pxTCB == pxCurrentTCB );
4142:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4143:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
4144:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4145:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Has the holder of the mutex inherited the priority of another
4146:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * task? */
4147:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4148:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4149:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Only disinherit if no other mutexes are held. */
4150:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4151:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4152:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* A task can only have an inherited priority if it holds
4153:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * the mutex.  If the mutex is held by a task then it cannot be
4154:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * given from an interrupt, and if a mutex is given by the
4155:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * holding task then it must be the running state task.  Remove
4156:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * the holding task from the ready list. */
4157:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4158:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
4159:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4160:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
4161:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     else
4162:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
4163:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4164:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
4165:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4166:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Disinherit the priority before adding the task into the
4167:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * new  ready list. */
4168:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4169:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
4170:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4171:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Reset the event list item value.  It cannot be in use for
4172:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * any other purpose if this task is running, and it must be
4173:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * running to give back the mutex. */
4174:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_P
4175:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
4176:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4177:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Return true to indicate that a context switch is required.
4178:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * This is only actually required in the corner case whereby
4179:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * multiple mutexes were held and the mutexes were given back
4180:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * in an order different to that in which they were taken.
4181:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * If a context switch did not occur when the first mutex was
4182:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * returned, even if a task was waiting on it, then a context
4183:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * switch should occur when the last mutex is returned whether
4184:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * a task is waiting on it or not. */
4185:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     xReturn = pdTRUE;
4186:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4187:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
4188:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4189:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4190:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4191:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4192:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
4193:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 86


4194:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4195:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4196:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4197:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
4198:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4199:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4200:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4201:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4202:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return xReturn;
4203:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
4204:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4205:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4206:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4207:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4208:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4209:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4210:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
4211:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                               UBaseType_t uxHighestPriorityWaitingTask )
4212:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
4213:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4214:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4215:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4216:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4217:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( pxMutexHolder != NULL )
4218:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4219:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* If pxMutexHolder is not NULL then the holder must hold at least
4220:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * one mutex. */
4221:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4222:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4223:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Determine the priority to which the priority of the task that
4224:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * holds the mutex should be set.  This will be the greater of the
4225:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * holding task's base priority and the priority of the highest
4226:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * priority task that is waiting to obtain the mutex. */
4227:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4228:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4229:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 uxPriorityToUse = uxHighestPriorityWaitingTask;
4230:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4231:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
4232:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4233:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 uxPriorityToUse = pxTCB->uxBasePriority;
4234:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4235:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4236:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Does the priority need to change? */
4237:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( pxTCB->uxPriority != uxPriorityToUse )
4238:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4239:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Only disinherit if no other mutexes are held.  This is a
4240:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * simplification in the priority inheritance implementation.  If
4241:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * the task that holds the mutex is also holding other mutexes then
4242:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * the other mutexes may have caused the priority inheritance. */
4243:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4244:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4245:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* If a task has timed out because it already holds the
4246:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * mutex it was trying to obtain then it cannot of inherited
4247:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * its own priority. */
4248:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     configASSERT( pxTCB != pxCurrentTCB );
4249:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4250:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Disinherit the priority, remembering the previous
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 87


4251:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * priority to facilitate determining the subject task's
4252:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * state. */
4253:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
4254:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
4255:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
4256:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4257:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Only reset the event list item value if the value is not
4258:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * being used for anything else. */
4259:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_IT
4260:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
4261:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configM
4262:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
4263:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     else
4264:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
4265:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4266:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
4267:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4268:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* If the running task is not the task that holds the mutex
4269:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * then the task that holds the mutex could be in either the
4270:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * Ready, Blocked or Suspended states.  Only remove the task
4271:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * from its current state list if it is in the Ready state as
4272:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * the task's priority is going to change and there is one
4273:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * Ready list per priority. */
4274:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &
4275:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
4276:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4277:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
4278:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             /* It is known that the task is in its ready list so
4279:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                              * there is no need to check again and the port level
4280:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                              * reset macro can be called directly. */
4281:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4282:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
4283:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         else
4284:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
4285:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4286:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
4287:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4288:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
4289:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
4290:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     else
4291:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
4292:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4293:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
4294:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4295:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
4296:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4297:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4298:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4299:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4300:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
4301:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4302:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4303:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4304:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4305:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
4306:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4307:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 88


4308:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4309:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
4310:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4311:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4312:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4313:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4314:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4315:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4316:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     void vTaskEnterCritical( void )
4317:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
4318:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         portDISABLE_INTERRUPTS();
4319:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4320:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4321:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4322:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             ( pxCurrentTCB->uxCriticalNesting )++;
4323:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4324:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* This is not the interrupt safe version of the enter critical
4325:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * function so  assert() if it is being called from an interrupt
4326:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * context.  Only API functions that end in "FromISR" can be used in an
4327:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * interrupt.  Only assert if the critical nesting count is 1 to
4328:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * protect against recursive calls if the assert function also uses a
4329:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * critical section. */
4330:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting == 1 )
4331:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4332:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 portASSERT_IF_IN_ISR();
4333:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4334:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4335:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
4336:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4337:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4338:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4339:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
4340:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4341:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4342:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4343:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4344:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4345:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4346:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     void vTaskExitCritical( void )
4347:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
4348:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4349:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4350:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting > 0U )
4351:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4352:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 ( pxCurrentTCB->uxCriticalNesting )--;
4353:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4354:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( pxCurrentTCB->uxCriticalNesting == 0U )
4355:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4356:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     portENABLE_INTERRUPTS();
4357:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4358:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
4359:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4360:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4361:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4362:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4363:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
4364:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 89


4365:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4366:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4367:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4368:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
4369:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4370:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4371:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4372:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
4373:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4374:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4375:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4376:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4377:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4378:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4379:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
4380:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                         const char * pcTaskName )
4381:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
4382:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         size_t x;
4383:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4384:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Start by copying the entire string. */
4385:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         strcpy( pcBuffer, pcTaskName );
4386:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4387:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Pad the end of the string with spaces to ensure columns line up when
4388:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * printed out. */
4389:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4390:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4391:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pcBuffer[ x ] = ' ';
4392:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4393:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4394:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Terminate. */
4395:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pcBuffer[ x ] = ( char ) 0x00;
4396:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4397:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Return the new end of string. */
4398:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return &( pcBuffer[ x ] );
4399:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
4400:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4401:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4402:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4403:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4404:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4405:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4406:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     void vTaskList( char * pcWriteBuffer )
4407:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
4408:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4409:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxArraySize, x;
4410:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         char cStatus;
4411:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4412:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /*
4413:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * PLEASE NOTE:
4414:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          *
4415:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * This function is provided for convenience only, and is used by many
4416:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4417:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * scheduler.
4418:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          *
4419:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4420:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * uxTaskGetSystemState() output into a human readable table that
4421:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * displays task names, states and stack usage.
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 90


4422:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          *
4423:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * vTaskList() has a dependency on the sprintf() C library function that
4424:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * might bloat the code size, use a lot of stack, and provide different
4425:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * results on different platforms.  An alternative, tiny, third party,
4426:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * and limited functionality implementation of sprintf() is provided in
4427:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * many of the FreeRTOS/Demo sub-directories in a file called
4428:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * printf-stdarg.c (note printf-stdarg.c does not provide a full
4429:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * snprintf() implementation!).
4430:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          *
4431:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4432:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4433:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * through a call to vTaskList().
4434:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          */
4435:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4436:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4437:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4438:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4439:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4440:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4441:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * function is executing. */
4442:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4443:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4444:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Allocate an array index for each task.  NOTE!  if
4445:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4446:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * equate to NULL. */
4447:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4448:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4449:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( pxTaskStatusArray != NULL )
4450:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4451:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Generate the (binary) data. */
4452:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4453:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4454:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Create a human readable table from the binary data. */
4455:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             for( x = 0; x < uxArraySize; x++ )
4456:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4457:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 switch( pxTaskStatusArray[ x ].eCurrentState )
4458:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4459:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     case eRunning:
4460:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         cStatus = tskRUNNING_CHAR;
4461:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         break;
4462:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4463:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     case eReady:
4464:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         cStatus = tskREADY_CHAR;
4465:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         break;
4466:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4467:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     case eBlocked:
4468:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         cStatus = tskBLOCKED_CHAR;
4469:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         break;
4470:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4471:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     case eSuspended:
4472:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         cStatus = tskSUSPENDED_CHAR;
4473:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         break;
4474:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4475:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     case eDeleted:
4476:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         cStatus = tskDELETED_CHAR;
4477:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         break;
4478:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 91


4479:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     case eInvalid: /* Fall through. */
4480:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     default:       /* Should not get here, but it is included
4481:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                     * to prevent static checking errors. */
4482:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         cStatus = ( char ) 0x00;
4483:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         break;
4484:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4485:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4486:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Write the task name to the string, padding with spaces so it
4487:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * can be printed in tabular form more easily. */
4488:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskN
4489:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4490:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Write the rest of the string. */
4491:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskSta
4492:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
4493:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4494:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4495:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4496:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4497:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             vPortFree( pxTaskStatusArray );
4498:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4499:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
4500:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4501:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4502:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4503:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
4504:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4505:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4506:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
4507:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4508:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4509:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4510:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     void vTaskGetRunTimeStats( char * pcWriteBuffer )
4511:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
4512:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4513:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxArraySize, x;
4514:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uint32_t ulTotalTime, ulStatsAsPercentage;
4515:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4516:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #if ( configUSE_TRACE_FACILITY != 1 )
4517:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4518:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vT
4519:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4520:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         #endif
4521:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4522:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /*
4523:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * PLEASE NOTE:
4524:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          *
4525:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * This function is provided for convenience only, and is used by many
4526:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4527:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * scheduler.
4528:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          *
4529:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4530:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * of the uxTaskGetSystemState() output into a human readable table that
4531:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * displays the amount of time each task has spent in the Running state
4532:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * in both absolute and percentage terms.
4533:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          *
4534:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4535:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * function that might bloat the code size, use a lot of stack, and
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 92


4536:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * provide different results on different platforms.  An alternative,
4537:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * tiny, third party, and limited functionality implementation of
4538:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4539:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4540:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * a full snprintf() implementation!).
4541:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          *
4542:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4543:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4544:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * through a call to vTaskGetRunTimeStats().
4545:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          */
4546:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4547:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4548:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4549:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4550:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4551:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * function is executing. */
4552:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4553:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4554:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* Allocate an array index for each task.  NOTE!  If
4555:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4556:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * equate to NULL. */
4557:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4558:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4559:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( pxTaskStatusArray != NULL )
4560:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4561:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Generate the (binary) data. */
4562:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4563:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4564:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* For percentage calculations. */
4565:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             ulTotalTime /= 100UL;
4566:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4567:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Avoid divide by zero errors. */
4568:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( ulTotalTime > 0UL )
4569:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4570:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Create a human readable table from the binary data. */
4571:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 for( x = 0; x < uxArraySize; x++ )
4572:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4573:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* What percentage of the total run time has the task used?
4574:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * This will always be rounded down to the nearest integer.
4575:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * ulTotalRunTimeDiv100 has already been divided by 100. */
4576:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4577:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4578:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Write the task name to the string, padding with
4579:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * spaces so it can be printed in tabular form more
4580:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * easily. */
4581:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcT
4582:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4583:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( ulStatsAsPercentage > 0UL )
4584:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
4585:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4586:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             {
4587:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x 
4588:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             }
4589:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         #else
4590:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             {
4591:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4592:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                  * printf() library can be used. */
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 93


4593:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTask
4594:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             }
4595:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         #endif
4596:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
4597:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     else
4598:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
4599:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* If the percentage is zero here then the task has
4600:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * consumed less than 1% of the total run time. */
4601:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4602:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             {
4603:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ]
4604:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             }
4605:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         #else
4606:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             {
4607:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4608:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                  * printf() library can be used. */
4609:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTask
4610:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             }
4611:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         #endif
4612:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
4613:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4614:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok o
4615:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4616:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4617:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
4618:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4619:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4620:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4621:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4622:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4623:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4624:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             vPortFree( pxTaskStatusArray );
4625:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4626:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         else
4627:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4628:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4629:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4630:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
4631:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4632:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4633:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4634:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4635:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4636:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
4637:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TickType_t uxReturn;
4638:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4639:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4640:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4641:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Reset the event list item to its normal value - so it can be used with
4642:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * queues and semaphores. */
4643:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITI
4644:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4645:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     return uxReturn;
4646:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
4647:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4648:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4649:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 94


4650:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4651:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4652:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
4653:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
4654:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * then pxCurrentTCB will be NULL. */
4655:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         if( pxCurrentTCB != NULL )
4656:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4657:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             ( pxCurrentTCB->uxMutexesHeld )++;
4658:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4659:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4660:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return pxCurrentTCB;
4661:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
4662:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4663:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4664:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4665:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4666:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4667:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4668:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
4669:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                       BaseType_t xClearCountOnExit,
4670:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                       TickType_t xTicksToWait )
4671:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
4672:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uint32_t ulReturn;
4673:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4674:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4675:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4676:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
4677:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4678:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Only block if the notification count is not already non-zero. */
4679:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
4680:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4681:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Mark this task as waiting for a notification. */
4682:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4683:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4684:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
4685:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4686:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4687:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
4688:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4689:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* All ports are written to allow a yield in a critical
4690:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * section (some will yield immediately, others wait until the
4691:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * critical section exits) - but it is not something that
4692:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * application code should ever do. */
4693:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     portYIELD_WITHIN_API();
4694:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4695:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
4696:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4697:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4698:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4699:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4700:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
4701:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4702:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4703:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4704:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4705:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
4706:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 95


4707:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
4708:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4709:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             traceTASK_NOTIFY_TAKE( uxIndexToWait );
4710:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4711:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4712:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( ulReturn != 0UL )
4713:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4714:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( xClearCountOnExit != pdFALSE )
4715:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4716:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
4717:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4718:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
4719:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4720:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
4721:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4722:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4723:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
4724:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4725:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4726:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4727:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4728:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4729:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4730:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
4731:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4732:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return ulReturn;
4733:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
4734:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4735:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4736:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4737:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4738:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4739:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4740:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
4741:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                        uint32_t ulBitsToClearOnEntry,
4742:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                        uint32_t ulBitsToClearOnExit,
4743:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                        uint32_t * pulNotificationValue,
4744:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                        TickType_t xTicksToWait )
4745:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
4746:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn;
4747:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4748:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4749:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4750:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
4751:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4752:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Only block if a notification is not already pending. */
4753:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4754:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4755:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Clear bits in the task's notification value as bits may get
4756:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * set  by the notifying task or interrupt.  This can be used to
4757:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * clear the value to zero. */
4758:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
4759:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4760:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Mark this task as waiting for a notification. */
4761:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4762:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4763:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 96


4764:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4765:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4766:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
4767:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4768:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* All ports are written to allow a yield in a critical
4769:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * section (some will yield immediately, others wait until the
4770:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * critical section exits) - but it is not something that
4771:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * application code should ever do. */
4772:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     portYIELD_WITHIN_API();
4773:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4774:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
4775:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4776:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4777:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4778:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4779:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
4780:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4781:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4782:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4783:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4784:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
4785:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4786:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
4787:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4788:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             traceTASK_NOTIFY_WAIT( uxIndexToWait );
4789:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4790:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( pulNotificationValue != NULL )
4791:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4792:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Output the current notification value, which may or may not
4793:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * have changed. */
4794:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4795:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4796:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4797:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* If ucNotifyValue is set then either the task never entered the
4798:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * blocked state (because a notification was already pending) or the
4799:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * task unblocked because of a notification.  Otherwise the task
4800:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * unblocked because of a timeout. */
4801:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4802:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4803:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* A notification was not received. */
4804:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 xReturn = pdFALSE;
4805:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4806:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
4807:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4808:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* A notification was already pending or a notification was
4809:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * received while the task was waiting. */
4810:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
4811:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 xReturn = pdTRUE;
4812:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4813:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4814:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4815:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4816:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
4817:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4818:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return xReturn;
4819:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
4820:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 97


4821:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4822:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4823:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4824:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4825:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4826:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
4827:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                    UBaseType_t uxIndexToNotify,
4828:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                    uint32_t ulValue,
4829:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                    eNotifyAction eAction,
4830:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                    uint32_t * pulPreviousNotificationValue )
4831:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
4832:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
4833:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn = pdPASS;
4834:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uint8_t ucOriginalNotifyState;
4835:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4836:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4837:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( xTaskToNotify );
4838:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTCB = xTaskToNotify;
4839:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4840:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
4841:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4842:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( pulPreviousNotificationValue != NULL )
4843:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4844:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
4845:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4846:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4847:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
4848:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4849:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
4850:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4851:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             switch( eAction )
4852:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4853:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 case eSetBits:
4854:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
4855:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
4856:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4857:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 case eIncrement:
4858:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
4859:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
4860:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4861:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 case eSetValueWithOverwrite:
4862:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4863:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
4864:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4865:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 case eSetValueWithoutOverwrite:
4866:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4867:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4868:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
4869:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4870:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
4871:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     else
4872:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
4873:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* The value could not be written to the task. */
4874:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         xReturn = pdFAIL;
4875:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
4876:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4877:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 98


4878:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4879:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 case eNoAction:
4880:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4881:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* The task is being notified without its notify value being
4882:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * updated. */
4883:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
4884:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4885:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 default:
4886:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4887:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Should not get here if all enums are handled.
4888:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * Artificially force an assert by testing a value the
4889:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * compiler can't assume is const. */
4890:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
4891:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4892:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
4893:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4894:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4895:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             traceTASK_NOTIFY( uxIndexToNotify );
4896:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4897:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
4898:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * notification then unblock it now. */
4899:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4900:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4901:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4902:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
4903:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4904:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* The task should not have been on an event list. */
4905:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4906:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4907:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #if ( configUSE_TICKLESS_IDLE != 0 )
4908:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
4909:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* If a task is blocked waiting for a notification then
4910:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * xNextTaskUnblockTime might be set to the blocked task's time
4911:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * out time.  If the task is unblocked for a reason other than
4912:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * a timeout xNextTaskUnblockTime is normally left unchanged,
4913:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * because it will automatically get reset to a new value when
4914:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * the tick count equals xNextTaskUnblockTime.  However if
4915:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * tickless idling is used it might be more important to enter
4916:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * sleep mode at the earliest possible time - so reset
4917:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * xNextTaskUnblockTime here to ensure it is updated at the
4918:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                          * earliest possible time. */
4919:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         prvResetNextTaskUnblockTime();
4920:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
4921:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 #endif
4922:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4923:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4924:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4925:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* The notified task has a priority above the currently
4926:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * executing task so a yield is required. */
4927:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
4928:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4929:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
4930:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
4931:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4932:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
4933:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4934:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 99


4935:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4936:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4937:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4938:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
4939:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
4940:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4941:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return xReturn;
4942:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
4943:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4944:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4945:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4946:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4947:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4948:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4949:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
4950:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                           UBaseType_t uxIndexToNotify,
4951:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                           uint32_t ulValue,
4952:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                           eNotifyAction eAction,
4953:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                           uint32_t * pulPreviousNotificationValue,
4954:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                           BaseType_t * pxHigherPriorityTaskWoken )
4955:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
4956:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
4957:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uint8_t ucOriginalNotifyState;
4958:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn = pdPASS;
4959:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
4960:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4961:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( xTaskToNotify );
4962:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4963:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4964:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
4965:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
4966:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
4967:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
4968:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4969:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * is defined in FreeRTOSConfig.h then
4970:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4971:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
4972:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * been assigned a priority above the configured maximum system call
4973:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
4974:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
4975:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
4976:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
4977:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
4978:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * provided on the following link:
4979:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
4980:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4981:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4982:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTCB = xTaskToNotify;
4983:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4984:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4985:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
4986:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( pulPreviousNotificationValue != NULL )
4987:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4988:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
4989:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
4990:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4991:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 100


4992:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
4993:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
4994:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             switch( eAction )
4995:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
4996:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 case eSetBits:
4997:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
4998:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
4999:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5000:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 case eIncrement:
5001:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5002:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
5003:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5004:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 case eSetValueWithOverwrite:
5005:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5006:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
5007:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5008:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 case eSetValueWithoutOverwrite:
5009:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5010:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
5011:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
5012:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5013:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
5014:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     else
5015:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
5016:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         /* The value could not be written to the task. */
5017:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         xReturn = pdFAIL;
5018:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
5019:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5020:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
5021:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5022:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 case eNoAction:
5023:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5024:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* The task is being notified without its notify value being
5025:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * updated. */
5026:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
5027:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5028:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 default:
5029:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5030:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Should not get here if all enums are handled.
5031:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * Artificially force an assert by testing a value the
5032:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * compiler can't assume is const. */
5033:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
5034:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
5035:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
5036:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5037:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );
5038:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5039:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5040:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * notification then unblock it now. */
5041:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5042:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
5043:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* The task should not have been on an event list. */
5044:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5045:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5046:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5047:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
5048:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 101


5049:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
5050:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
5051:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
5052:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
5053:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5054:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * this task pending until the scheduler is resumed. */
5055:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5056:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
5057:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5058:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5059:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
5060:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* The notified task has a priority above the currently
5061:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * executing task so a yield is required. */
5062:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
5063:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
5064:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5065:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
5066:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5067:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5068:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter to an ISR
5069:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * safe FreeRTOS function. */
5070:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     xYieldPending = pdTRUE;
5071:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
5072:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
5073:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
5074:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5075:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
5076:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
5077:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
5078:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5079:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5080:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return xReturn;
5081:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
5082:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5083:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5084:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
5085:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5086:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5087:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5088:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
5089:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                         UBaseType_t uxIndexToNotify,
5090:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                         BaseType_t * pxHigherPriorityTaskWoken )
5091:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
5092:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
5093:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uint8_t ucOriginalNotifyState;
5094:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
5095:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5096:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( xTaskToNotify );
5097:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5098:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5099:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
5100:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
5101:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
5102:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5103:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5104:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * is defined in FreeRTOSConfig.h then
5105:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 102


5106:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
5107:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * been assigned a priority above the configured maximum system call
5108:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5109:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
5110:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5111:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5112:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5113:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * provided on the following link:
5114:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5115:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5116:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5117:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTCB = xTaskToNotify;
5118:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5119:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5120:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
5121:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5122:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5123:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5124:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* 'Giving' is equivalent to incrementing a count in a counting
5125:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * semaphore. */
5126:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5127:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5128:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );
5129:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5130:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5131:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * notification then unblock it now. */
5132:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5133:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
5134:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* The task should not have been on an event list. */
5135:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5136:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5137:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5138:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
5139:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5140:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
5141:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
5142:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
5143:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
5144:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5145:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * this task pending until the scheduler is resumed. */
5146:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5147:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
5148:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5149:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5150:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
5151:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* The notified task has a priority above the currently
5152:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * executing task so a yield is required. */
5153:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
5154:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
5155:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5156:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
5157:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5158:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5159:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter in an ISR
5160:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * safe FreeRTOS function. */
5161:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     xYieldPending = pdTRUE;
5162:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 103


5163:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
5164:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
5165:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5166:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
5167:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
5168:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
5169:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5170:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
5171:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5172:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5173:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
5174:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5175:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5176:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5177:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
5178:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                              UBaseType_t uxIndexToClear )
5179:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
5180:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
5181:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn;
5182:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5183:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5184:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5185:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5186:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * its notification state cleared. */
5187:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
5188:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5189:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
5190:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
5191:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
5192:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
5193:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
5194:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 xReturn = pdPASS;
5195:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
5196:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
5197:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
5198:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 xReturn = pdFAIL;
5199:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
5200:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
5201:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
5202:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5203:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return xReturn;
5204:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
5205:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5206:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5207:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
5208:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5209:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5210:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5211:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
5212:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                             UBaseType_t uxIndexToClear,
5213:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                             uint32_t ulBitsToClear )
5214:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
5215:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
5216:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uint32_t ulReturn;
5217:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5218:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5219:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * its notification state cleared. */
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 104


5220:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
5221:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5222:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
5223:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
5224:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* Return the notification as it was before the bits were cleared,
5225:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * then clear the bit mask. */
5226:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
5227:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
5228:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
5229:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
5230:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5231:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return ulReturn;
5232:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
5233:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5234:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5235:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
5236:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5237:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5238:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5239:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     uint32_t ulTaskGetIdleRunTimeCounter( void )
5240:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
5241:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         return xIdleTaskHandle->ulRunTimeCounter;
5242:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
5243:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5244:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** #endif
5245:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
5246:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5247:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
5248:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely )
5249:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** {
 580              		.loc 1 5249 0
 581              		.cfi_startproc
 582              		@ args = 0, pretend = 0, frame = 0
 583              		@ frame_needed = 0, uses_anonymous_args = 0
 584              	.LVL54:
 585 0000 70B5     		push	{r4, r5, r6, lr}
 586              		.cfi_def_cfa_offset 16
 587              		.cfi_offset 4, -16
 588              		.cfi_offset 5, -12
 589              		.cfi_offset 6, -8
 590              		.cfi_offset 14, -4
 591 0002 0446     		mov	r4, r0
 592 0004 0E46     		mov	r6, r1
5250:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TickType_t xTimeToWake;
5251:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     const TickType_t xConstTickCount = xTickCount;
 593              		.loc 1 5251 0
 594 0006 174B     		ldr	r3, .L58
 595 0008 D3F8EC50 		ldr	r5, [r3, #236]
 596              	.LVL55:
5252:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5253:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
5254:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
5255:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             /* About to enter a delayed list, so ensure the ucDelayAborted flag is
5256:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * reset to pdFALSE so it can be detected as having been set to pdTRUE
5257:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****              * when the task leaves the Blocked state. */
5258:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxCurrentTCB->ucDelayAborted = pdFALSE;
5259:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 105


5260:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #endif
5261:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5262:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Remove the task from the ready list before adding it to the blocked list
5263:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****      * as the same list item is used for both lists. */
5264:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 597              		.loc 1 5264 0
 598 000c D3F8D800 		ldr	r0, [r3, #216]
 599              	.LVL56:
 600 0010 0430     		adds	r0, r0, #4
 601 0012 FFF7FEFF 		bl	uxListRemove
 602              	.LVL57:
5265:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
5266:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         /* The current task must be in a ready list, so there is no need to
5267:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****          * check, and the port reset macro can be called directly. */
5268:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCu
5269:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
5270:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     else
5271:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
5272:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
5273:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
5274:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5275:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
5276:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
5277:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 603              		.loc 1 5277 0
 604 0016 B4F1FF3F 		cmp	r4, #-1
 605 001a 07D1     		bne	.L54
 606              		.loc 1 5277 0 is_stmt 0 discriminator 1
 607 001c 36B1     		cbz	r6, .L54
5278:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
5279:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Add the task to the suspended task list instead of a delayed task
5280:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * list to ensure it is not woken by a timing event.  It will block
5281:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * indefinitely. */
5282:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 608              		.loc 1 5282 0 is_stmt 1
 609 001e 1148     		ldr	r0, .L58
 610 0020 D0F8D810 		ldr	r1, [r0, #216]
 611 0024 0431     		adds	r1, r1, #4
 612 0026 FFF7FEFF 		bl	vListInsertEnd
 613              	.LVL58:
 614 002a 70BD     		pop	{r4, r5, r6, pc}
 615              	.LVL59:
 616              	.L54:
5283:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
5284:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             else
5285:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
5286:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* Calculate the time at which the task should be woken if the event
5287:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * does not occur.  This may overflow but this doesn't matter, the
5288:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                  * kernel will manage it correctly. */
5289:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 xTimeToWake = xConstTickCount + xTicksToWait;
 617              		.loc 1 5289 0
 618 002c 2C44     		add	r4, r4, r5
 619              	.LVL60:
5290:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5291:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 /* The list item will be inserted in wake time order. */
5292:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 620              		.loc 1 5292 0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 106


 621 002e 0D4B     		ldr	r3, .L58
 622 0030 D3F8D830 		ldr	r3, [r3, #216]
 623 0034 5C60     		str	r4, [r3, #4]
5293:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5294:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 if( xTimeToWake < xConstTickCount )
 624              		.loc 1 5294 0
 625 0036 A542     		cmp	r5, r4
 626 0038 08D9     		bls	.L56
5295:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
5296:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* Wake time has overflowed.  Place this item in the overflow
5297:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * list. */
5298:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 627              		.loc 1 5298 0
 628 003a 0A4B     		ldr	r3, .L58
 629 003c D3F8D000 		ldr	r0, [r3, #208]
 630 0040 D3F8D810 		ldr	r1, [r3, #216]
 631 0044 0431     		adds	r1, r1, #4
 632 0046 FFF7FEFF 		bl	vListInsert
 633              	.LVL61:
 634 004a 70BD     		pop	{r4, r5, r6, pc}
 635              	.LVL62:
 636              	.L56:
5299:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
5300:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 else
5301:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
5302:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* The wake time has not overflowed, so the current block list
5303:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * is used. */
5304:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 637              		.loc 1 5304 0
 638 004c 054D     		ldr	r5, .L58
 639              	.LVL63:
 640 004e A86A     		ldr	r0, [r5, #40]
 641 0050 D5F8D810 		ldr	r1, [r5, #216]
 642 0054 0431     		adds	r1, r1, #4
 643 0056 FFF7FEFF 		bl	vListInsert
 644              	.LVL64:
5305:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
5306:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     /* If the task entering the blocked state was placed at the
5307:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * head of the list of blocked tasks then xNextTaskUnblockTime
5308:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                      * needs to be updated too. */
5309:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     if( xTimeToWake < xNextTaskUnblockTime )
 645              		.loc 1 5309 0
 646 005a EB6A     		ldr	r3, [r5, #44]
 647 005c 9C42     		cmp	r4, r3
 648 005e 00D2     		bcs	.L53
5310:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
5311:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         xNextTaskUnblockTime = xTimeToWake;
 649              		.loc 1 5311 0
 650 0060 EC62     		str	r4, [r5, #44]
 651              	.L53:
 652 0062 70BD     		pop	{r4, r5, r6, pc}
 653              	.LVL65:
 654              	.L59:
 655              		.align	2
 656              	.L58:
 657 0064 00000000 		.word	.LANCHOR0
 658              		.cfi_endproc
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 107


 659              	.LFE54:
 660              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 661              		.section	.text.xTaskCreate,"ax",%progbits
 662              		.align	2
 663              		.global	xTaskCreate
 664              		.thumb
 665              		.thumb_func
 666              		.type	xTaskCreate, %function
 667              	xTaskCreate:
 668              	.LFB4:
 727:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxNewTCB;
 669              		.loc 1 727 0
 670              		.cfi_startproc
 671              		@ args = 8, pretend = 0, frame = 0
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 673              	.LVL66:
 674 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 675              		.cfi_def_cfa_offset 28
 676              		.cfi_offset 4, -28
 677              		.cfi_offset 5, -24
 678              		.cfi_offset 6, -20
 679              		.cfi_offset 7, -16
 680              		.cfi_offset 8, -12
 681              		.cfi_offset 9, -8
 682              		.cfi_offset 14, -4
 683 0004 85B0     		sub	sp, sp, #20
 684              		.cfi_def_cfa_offset 48
 685 0006 0646     		mov	r6, r0
 686 0008 0F46     		mov	r7, r1
 687 000a 1546     		mov	r5, r2
 688 000c 9846     		mov	r8, r3
 689              	.LBB23:
 761:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 690              		.loc 1 761 0
 691 000e 9000     		lsls	r0, r2, #2
 692              	.LVL67:
 693 0010 FFF7FEFF 		bl	pvPortMalloc
 694              	.LVL68:
 763:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 695              		.loc 1 763 0
 696 0014 60B1     		cbz	r0, .L64
 697 0016 8146     		mov	r9, r0
 766:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 698              		.loc 1 766 0
 699 0018 6020     		movs	r0, #96
 700              	.LVL69:
 701 001a FFF7FEFF 		bl	pvPortMalloc
 702              	.LVL70:
 768:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
 703              		.loc 1 768 0
 704 001e 0446     		mov	r4, r0
 705 0020 10B1     		cbz	r0, .L62
 771:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
 706              		.loc 1 771 0
 707 0022 C0F83090 		str	r9, [r0, #48]
 708 0026 04E0     		b	.L61
 709              	.L62:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 108


 777:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
 710              		.loc 1 777 0
 711 0028 4846     		mov	r0, r9
 712              	.LVL71:
 713 002a FFF7FEFF 		bl	vPortFree
 714              	.LVL72:
 715 002e 00E0     		b	.L61
 716              	.LVL73:
 717              	.L64:
 782:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 718              		.loc 1 782 0
 719 0030 0024     		movs	r4, #0
 720              	.LVL74:
 721              	.L61:
 722              	.LBE23:
 787:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 723              		.loc 1 787 0
 724 0032 8CB1     		cbz	r4, .L65
 797:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 725              		.loc 1 797 0
 726 0034 0023     		movs	r3, #0
 727 0036 0393     		str	r3, [sp, #12]
 728 0038 0294     		str	r4, [sp, #8]
 729 003a 0D9B     		ldr	r3, [sp, #52]
 730 003c 0193     		str	r3, [sp, #4]
 731 003e 0C9B     		ldr	r3, [sp, #48]
 732 0040 0093     		str	r3, [sp]
 733 0042 4346     		mov	r3, r8
 734 0044 2A46     		mov	r2, r5
 735 0046 3946     		mov	r1, r7
 736 0048 3046     		mov	r0, r6
 737 004a FFF7FEFF 		bl	prvInitialiseNewTask
 738              	.LVL75:
 798:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xReturn = pdPASS;
 739              		.loc 1 798 0
 740 004e 2046     		mov	r0, r4
 741 0050 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 742              	.LVL76:
 799:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 743              		.loc 1 799 0
 744 0054 0120     		movs	r0, #1
 745 0056 01E0     		b	.L63
 746              	.LVL77:
 747              	.L65:
 803:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 748              		.loc 1 803 0
 749 0058 4FF0FF30 		mov	r0, #-1
 750              	.L63:
 751              	.LVL78:
 807:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 752              		.loc 1 807 0
 753 005c 05B0     		add	sp, sp, #20
 754              		.cfi_def_cfa_offset 28
 755              		@ sp needed
 756 005e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 757              		.cfi_endproc
 758              	.LFE4:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 109


 759              		.size	xTaskCreate, .-xTaskCreate
 760 0062 00BF     		.section	.text.vTaskDelete,"ax",%progbits
 761              		.align	2
 762              		.global	vTaskDelete
 763              		.thumb
 764              		.thumb_func
 765              		.type	vTaskDelete, %function
 766              	vTaskDelete:
 767              	.LFB7:
1150:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
 768              		.loc 1 1150 0
 769              		.cfi_startproc
 770              		@ args = 0, pretend = 0, frame = 0
 771              		@ frame_needed = 0, uses_anonymous_args = 0
 772              	.LVL79:
 773 0000 70B5     		push	{r4, r5, r6, lr}
 774              		.cfi_def_cfa_offset 16
 775              		.cfi_offset 4, -16
 776              		.cfi_offset 5, -12
 777              		.cfi_offset 6, -8
 778              		.cfi_offset 14, -4
 779 0002 0446     		mov	r4, r0
1153:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 780              		.loc 1 1153 0
 781 0004 FFF7FEFF 		bl	vPortEnterCritical
 782              	.LVL80:
1157:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 783              		.loc 1 1157 0
 784 0008 14B9     		cbnz	r4, .L68
1157:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 785              		.loc 1 1157 0 is_stmt 0 discriminator 1
 786 000a 214B     		ldr	r3, .L74
 787 000c D3F8D840 		ldr	r4, [r3, #216]
 788              	.LVL81:
 789              	.L68:
1160:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 790              		.loc 1 1160 0 is_stmt 1 discriminator 4
 791 0010 251D     		adds	r5, r4, #4
 792 0012 2846     		mov	r0, r5
 793 0014 FFF7FEFF 		bl	uxListRemove
 794              	.LVL82:
1170:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 795              		.loc 1 1170 0 discriminator 4
 796 0018 A36A     		ldr	r3, [r4, #40]
 797 001a 1BB1     		cbz	r3, .L69
1172:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 798              		.loc 1 1172 0
 799 001c 04F11800 		add	r0, r4, #24
 800 0020 FFF7FEFF 		bl	uxListRemove
 801              	.LVL83:
 802              	.L69:
1183:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 803              		.loc 1 1183 0
 804 0024 1A4B     		ldr	r3, .L74
 805 0026 D3F8E020 		ldr	r2, [r3, #224]
 806 002a 0132     		adds	r2, r2, #1
 807 002c C3F8E020 		str	r2, [r3, #224]
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 110


1185:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 808              		.loc 1 1185 0
 809 0030 D3F8D830 		ldr	r3, [r3, #216]
 810 0034 9C42     		cmp	r4, r3
 811 0036 0BD1     		bne	.L70
1192:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 812              		.loc 1 1192 0
 813 0038 154E     		ldr	r6, .L74
 814 003a 2946     		mov	r1, r5
 815 003c 06F1BC00 		add	r0, r6, #188
 816 0040 FFF7FEFF 		bl	vListInsertEnd
 817              	.LVL84:
1197:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 818              		.loc 1 1197 0
 819 0044 D6F8E830 		ldr	r3, [r6, #232]
 820 0048 0133     		adds	r3, r3, #1
 821 004a C6F8E830 		str	r3, [r6, #232]
 822 004e 0AE0     		b	.L71
 823              	.L70:
1212:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 traceTASK_DELETE( pxTCB );
 824              		.loc 1 1212 0
 825 0050 0F4A     		ldr	r2, .L74
 826 0052 D2F8D430 		ldr	r3, [r2, #212]
 827 0056 013B     		subs	r3, r3, #1
 828 0058 C2F8D430 		str	r3, [r2, #212]
1214:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 829              		.loc 1 1214 0
 830 005c 2046     		mov	r0, r4
 831 005e FFF7FEFF 		bl	prvDeleteTCB
 832              	.LVL85:
1218:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 833              		.loc 1 1218 0
 834 0062 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 835              	.LVL86:
 836              	.L71:
1221:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 837              		.loc 1 1221 0
 838 0066 FFF7FEFF 		bl	vPortExitCritical
 839              	.LVL87:
1225:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 840              		.loc 1 1225 0
 841 006a 094B     		ldr	r3, .L74
 842 006c D3F8DC30 		ldr	r3, [r3, #220]
 843 0070 63B1     		cbz	r3, .L67
1227:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 844              		.loc 1 1227 0
 845 0072 074B     		ldr	r3, .L74
 846 0074 D3F8D830 		ldr	r3, [r3, #216]
 847 0078 9C42     		cmp	r4, r3
 848 007a 07D1     		bne	.L67
1230:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 849              		.loc 1 1230 0
 850 007c 4FF08052 		mov	r2, #268435456
 851 0080 044B     		ldr	r3, .L74+4
 852 0082 1A60     		str	r2, [r3]
 853              		.syntax unified
 854              	@ 1230 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 111


 855 0084 BFF34F8F 		dsb
 856              	@ 0 "" 2
 857              	@ 1230 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 858 0088 BFF36F8F 		isb
 859              	@ 0 "" 2
 860              		.thumb
 861              		.syntax unified
 862              	.L67:
 863 008c 70BD     		pop	{r4, r5, r6, pc}
 864              	.LVL88:
 865              	.L75:
 866 008e 00BF     		.align	2
 867              	.L74:
 868 0090 00000000 		.word	.LANCHOR0
 869 0094 04ED00E0 		.word	-536810236
 870              		.cfi_endproc
 871              	.LFE7:
 872              		.size	vTaskDelete, .-vTaskDelete
 873              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 874              		.align	2
 875              		.global	uxTaskPriorityGet
 876              		.thumb
 877              		.thumb_func
 878              		.type	uxTaskPriorityGet, %function
 879              	uxTaskPriorityGet:
 880              	.LFB10:
1472:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t const * pxTCB;
 881              		.loc 1 1472 0
 882              		.cfi_startproc
 883              		@ args = 0, pretend = 0, frame = 0
 884              		@ frame_needed = 0, uses_anonymous_args = 0
 885              	.LVL89:
 886 0000 10B5     		push	{r4, lr}
 887              		.cfi_def_cfa_offset 8
 888              		.cfi_offset 4, -8
 889              		.cfi_offset 14, -4
 890 0002 0446     		mov	r4, r0
1476:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 891              		.loc 1 1476 0
 892 0004 FFF7FEFF 		bl	vPortEnterCritical
 893              	.LVL90:
1480:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 894              		.loc 1 1480 0
 895 0008 14B9     		cbnz	r4, .L77
1480:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 896              		.loc 1 1480 0 is_stmt 0 discriminator 1
 897 000a 044B     		ldr	r3, .L80
 898 000c D3F8D840 		ldr	r4, [r3, #216]
 899              	.LVL91:
 900              	.L77:
1481:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 901              		.loc 1 1481 0 is_stmt 1 discriminator 4
 902 0010 E46A     		ldr	r4, [r4, #44]
 903              	.LVL92:
1483:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 904              		.loc 1 1483 0 discriminator 4
 905 0012 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 112


 906              	.LVL93:
1486:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 907              		.loc 1 1486 0 discriminator 4
 908 0016 2046     		mov	r0, r4
 909 0018 10BD     		pop	{r4, pc}
 910              	.LVL94:
 911              	.L81:
 912 001a 00BF     		.align	2
 913              	.L80:
 914 001c 00000000 		.word	.LANCHOR0
 915              		.cfi_endproc
 916              	.LFE10:
 917              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 918              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 919              		.align	2
 920              		.global	uxTaskPriorityGetFromISR
 921              		.thumb
 922              		.thumb_func
 923              		.type	uxTaskPriorityGetFromISR, %function
 924              	uxTaskPriorityGetFromISR:
 925              	.LFB11:
1494:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t const * pxTCB;
 926              		.loc 1 1494 0
 927              		.cfi_startproc
 928              		@ args = 0, pretend = 0, frame = 0
 929              		@ frame_needed = 0, uses_anonymous_args = 0
 930              		@ link register save eliminated.
 931              	.LVL95:
 932              	.LBB24:
 933              	.LBB25:
 934              		.file 2 "C:\\FreeRTOS\\FreeRTOS\\FreeRTOS\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*
   2:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * FreeRTOS Kernel V10.4.0
   3:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  *
   5:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * subject to the following conditions:
  11:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  *
  12:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * copies or substantial portions of the Software.
  14:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  *
  15:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  *
  22:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * https://www.FreeRTOS.org
  23:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * https://github.com/FreeRTOS
  24:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  *
  25:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * 1 tab == 4 spaces!
  26:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  */
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 113


  27:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  28:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  29:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** #ifndef PORTMACRO_H
  30:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define PORTMACRO_H
  31:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  32:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #ifdef __cplusplus
  33:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         extern "C" {
  34:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #endif
  35:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  36:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------
  37:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * Port specific definitions.
  38:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  *
  39:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * given hardware and compiler.
  41:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  *
  42:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * These settings should not be altered.
  43:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  *-----------------------------------------------------------
  44:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  */
  45:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  46:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* Type definitions. */
  47:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portCHAR          char
  48:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portFLOAT         float
  49:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portDOUBLE        double
  50:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portLONG          long
  51:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portSHORT         short
  52:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portSTACK_TYPE    uint32_t
  53:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portBASE_TYPE     long
  54:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  55:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  56:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     typedef long             BaseType_t;
  57:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     typedef unsigned long    UBaseType_t;
  58:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  59:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  60:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         typedef uint16_t     TickType_t;
  61:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  62:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #else
  63:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         typedef uint32_t     TickType_t;
  64:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  65:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  66:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * not need to be guarded with a critical section. */
  68:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  69:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #endif
  70:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
  71:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  72:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* Architecture specifics. */
  73:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  74:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portBYTE_ALIGNMENT    8
  76:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  77:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
  78:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  79:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* Scheduler utilities. */
  80:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portYIELD()                                 \
  81:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     {                                                   \
  82:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  83:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 114


  84:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****                                                         \
  85:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  86:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****          * within the specified behaviour for the architecture. */ \
  87:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  88:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         __asm volatile ( "isb" );                                  \
  89:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     }
  90:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  91:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  92:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  93:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    if( xSwitchRequired != pdFALSE ) portYIELD(
  94:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  95:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
  96:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
  97:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* Critical section management. */
  98:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     extern void vPortEnterCritical( void );
  99:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     extern void vPortExitCritical( void );
 100:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 101:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 102:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 103:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 104:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 105:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 106:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 107:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
 108:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 109:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 110:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 111:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****  * (which build with all the ports) will build. */
 112:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 113:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 114:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
 115:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 116:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* Tickless idle/low power functionality. */
 117:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 118:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 119:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 120:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #endif
 121:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
 122:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 123:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* Architecture specific optimisations. */
 124:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 125:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 126:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #endif
 127:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 128:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 129:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 130:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* Generic helper function. */
 131:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 132:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         {
 133:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             uint8_t ucReturn;
 134:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 135:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 136:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 137:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             return ucReturn;
 138:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         }
 139:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 140:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* Check the configuration. */
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 115


 141:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 142:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 143:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #endif
 144:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 145:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 146:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 147:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 148:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 149:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
 150:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 151:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 152:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 153:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 154:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 155:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
 156:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 157:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #ifdef configASSERT
 158:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         void vPortValidateInterruptPriority( void );
 159:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 160:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #endif
 161:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 162:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /* portNOP() is not required by this port. */
 163:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portNOP()
 164:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 165:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #define portINLINE              __inline
 166:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 167:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #ifndef portFORCE_INLINE
 168:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 169:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     #endif
 170:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 171:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
 172:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 173:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 174:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     {
 175:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         uint32_t ulCurrentInterrupt;
 176:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         BaseType_t xReturn;
 177:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 178:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 179:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 180:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 181:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         if( ulCurrentInterrupt == 0 )
 182:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         {
 183:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             xReturn = pdFALSE;
 184:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         }
 185:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         else
 186:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         {
 187:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             xReturn = pdTRUE;
 188:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         }
 189:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 190:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         return xReturn;
 191:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     }
 192:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 193:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
 194:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 195:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 196:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     {
 197:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         uint32_t ulNewBASEPRI;
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 116


 198:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 199:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         __asm volatile
 200:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         (
 201:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             "	mov %0, %1												\n"\
 202:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             "	msr basepri, %0											\n"\
 203:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             "	isb														\n"\
 204:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             "	dsb														\n"\
 205:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 206:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         );
 207:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     }
 208:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 209:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
 210:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 211:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 212:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     {
 213:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 214:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 215:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         __asm volatile
 935              		.loc 2 215 0
 936              		.syntax unified
 937              	@ 215 "C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 938 0000 EFF31183 			mrs r3, basepri											
 939 0004 4FF00402 		mov r2, #4												
 940 0008 82F31188 		msr basepri, r2											
 941 000c BFF36F8F 		isb														
 942 0010 BFF34F8F 		dsb														
 943              	
 944              	@ 0 "" 2
 945              		.thumb
 946              		.syntax unified
 947              	.LBE25:
 948              	.LBE24:
1520:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 949              		.loc 1 1520 0
 950 0014 10B9     		cbnz	r0, .L83
1520:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 951              		.loc 1 1520 0 is_stmt 0 discriminator 1
 952 0016 034A     		ldr	r2, .L85
 953 0018 D2F8D800 		ldr	r0, [r2, #216]
 954              	.LVL96:
 955              	.L83:
1521:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 956              		.loc 1 1521 0 is_stmt 1 discriminator 4
 957 001c C06A     		ldr	r0, [r0, #44]
 958              	.LVL97:
 959              	.LBB26:
 960              	.LBB27:
 216:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         (
 217:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             "	mrs %0, basepri											\n"\
 218:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             "	mov %1, %2												\n"\
 219:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             "	msr basepri, %1											\n"\
 220:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             "	isb														\n"\
 221:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             "	dsb														\n"\
 222:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 223:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         );
 224:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 225:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 117


 226:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****          * warnings. */
 227:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         return ulOriginalBASEPRI;
 228:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     }
 229:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** /*-----------------------------------------------------------*/
 230:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h **** 
 231:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 232:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****     {
 233:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         __asm volatile
 961              		.loc 2 233 0 discriminator 4
 962              		.syntax unified
 963              	@ 233 "C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 964 001e 83F31188 			msr basepri, r3	
 965              	@ 0 "" 2
 966              	.LVL98:
 967              		.thumb
 968              		.syntax unified
 969              	.LBE27:
 970              	.LBE26:
1526:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 971              		.loc 1 1526 0 discriminator 4
 972 0022 7047     		bx	lr
 973              	.L86:
 974              		.align	2
 975              	.L85:
 976 0024 00000000 		.word	.LANCHOR0
 977              		.cfi_endproc
 978              	.LFE11:
 979              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 980              		.section	.text.vTaskPrioritySet,"ax",%progbits
 981              		.align	2
 982              		.global	vTaskPrioritySet
 983              		.thumb
 984              		.thumb_func
 985              		.type	vTaskPrioritySet, %function
 986              	vTaskPrioritySet:
 987              	.LFB12:
1535:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
 988              		.loc 1 1535 0
 989              		.cfi_startproc
 990              		@ args = 0, pretend = 0, frame = 0
 991              		@ frame_needed = 0, uses_anonymous_args = 0
 992              	.LVL99:
 993 0000 70B5     		push	{r4, r5, r6, lr}
 994              		.cfi_def_cfa_offset 16
 995              		.cfi_offset 4, -16
 996              		.cfi_offset 5, -12
 997              		.cfi_offset 6, -8
 998              		.cfi_offset 14, -4
 999 0002 0546     		mov	r5, r0
 1000 0004 0C46     		mov	r4, r1
 1001              	.LVL100:
1543:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 1002              		.loc 1 1543 0
 1003 0006 0429     		cmp	r1, #4
 1004 0008 00D9     		bls	.L88
1545:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 1005              		.loc 1 1545 0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 118


 1006 000a 0424     		movs	r4, #4
 1007              	.L88:
 1008              	.LVL101:
1552:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 1009              		.loc 1 1552 0
 1010 000c FFF7FEFF 		bl	vPortEnterCritical
 1011              	.LVL102:
1556:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1012              		.loc 1 1556 0
 1013 0010 15B9     		cbnz	r5, .L89
1556:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1014              		.loc 1 1556 0 is_stmt 0 discriminator 1
 1015 0012 284B     		ldr	r3, .L101
 1016 0014 D3F8D850 		ldr	r5, [r3, #216]
 1017              	.LVL103:
 1018              	.L89:
1566:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 1019              		.loc 1 1566 0 is_stmt 1 discriminator 4
 1020 0018 EB6A     		ldr	r3, [r5, #44]
 1021              	.LVL104:
1570:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 1022              		.loc 1 1570 0 discriminator 4
 1023 001a 9C42     		cmp	r4, r3
 1024 001c 46D0     		beq	.L90
1574:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 1025              		.loc 1 1574 0
 1026 001e 0CD9     		bls	.L91
1576:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
 1027              		.loc 1 1576 0
 1028 0020 244A     		ldr	r2, .L101
 1029 0022 D2F8D820 		ldr	r2, [r2, #216]
 1030 0026 9542     		cmp	r5, r2
 1031 0028 0ED0     		beq	.L97
1581:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
 1032              		.loc 1 1581 0
 1033 002a 224A     		ldr	r2, .L101
 1034 002c D2F8D820 		ldr	r2, [r2, #216]
 1035 0030 D26A     		ldr	r2, [r2, #44]
 1036 0032 9442     		cmp	r4, r2
 1037 0034 0AD2     		bcs	.L98
1538:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1038              		.loc 1 1538 0
 1039 0036 0026     		movs	r6, #0
 1040 0038 0BE0     		b	.L92
 1041              	.L91:
1597:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 1042              		.loc 1 1597 0
 1043 003a 1E4A     		ldr	r2, .L101
 1044 003c D2F8D820 		ldr	r2, [r2, #216]
 1045 0040 9542     		cmp	r5, r2
 1046 0042 05D0     		beq	.L99
1538:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1047              		.loc 1 1538 0
 1048 0044 0026     		movs	r6, #0
 1049 0046 04E0     		b	.L92
 1050              	.L97:
 1051 0048 0026     		movs	r6, #0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 119


 1052 004a 02E0     		b	.L92
 1053              	.L98:
1583:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
 1054              		.loc 1 1583 0
 1055 004c 0126     		movs	r6, #1
 1056 004e 00E0     		b	.L92
 1057              	.L99:
1602:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 1058              		.loc 1 1602 0
 1059 0050 0126     		movs	r6, #1
 1060              	.L92:
 1061              	.LVL105:
1634:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
 1062              		.loc 1 1634 0
 1063 0052 EC62     		str	r4, [r5, #44]
1640:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 1064              		.loc 1 1640 0
 1065 0054 AA69     		ldr	r2, [r5, #24]
 1066 0056 002A     		cmp	r2, #0
 1067 0058 02DB     		blt	.L93
1642:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 1068              		.loc 1 1642 0
 1069 005a C4F10504 		rsb	r4, r4, #5
 1070              	.LVL106:
 1071 005e AC61     		str	r4, [r5, #24]
 1072              	.L93:
1653:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 1073              		.loc 1 1653 0
 1074 0060 6969     		ldr	r1, [r5, #20]
 1075 0062 03EB8303 		add	r3, r3, r3, lsl #2
 1076              	.LVL107:
 1077 0066 9A00     		lsls	r2, r3, #2
 1078 0068 134B     		ldr	r3, .L101+4
 1079 006a 1A44     		add	r2, r2, r3
 1080 006c 9142     		cmp	r1, r2
 1081 006e 14D1     		bne	.L94
1658:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
 1082              		.loc 1 1658 0
 1083 0070 2C1D     		adds	r4, r5, #4
 1084 0072 2046     		mov	r0, r4
 1085 0074 FFF7FEFF 		bl	uxListRemove
 1086              	.LVL108:
1670:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 1087              		.loc 1 1670 0
 1088 0078 EB6A     		ldr	r3, [r5, #44]
 1089 007a 0E4A     		ldr	r2, .L101
 1090 007c D2F8E420 		ldr	r2, [r2, #228]
 1091 0080 9342     		cmp	r3, r2
 1092 0082 02D9     		bls	.L95
1670:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 1093              		.loc 1 1670 0 is_stmt 0 discriminator 1
 1094 0084 0B4A     		ldr	r2, .L101
 1095 0086 C2F8E430 		str	r3, [r2, #228]
 1096              	.L95:
1670:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 1097              		.loc 1 1670 0 discriminator 3
 1098 008a 03EB8303 		add	r3, r3, r3, lsl #2
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 120


 1099 008e 9A00     		lsls	r2, r3, #2
 1100 0090 2146     		mov	r1, r4
 1101 0092 0948     		ldr	r0, .L101+4
 1102 0094 1044     		add	r0, r0, r2
 1103 0096 FFF7FEFF 		bl	vListInsertEnd
 1104              	.LVL109:
 1105              	.L94:
1677:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 1106              		.loc 1 1677 0 is_stmt 1
 1107 009a 3EB1     		cbz	r6, .L90
1679:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 1108              		.loc 1 1679 0
 1109 009c 4FF08052 		mov	r2, #268435456
 1110 00a0 064B     		ldr	r3, .L101+8
 1111 00a2 1A60     		str	r2, [r3]
 1112              		.syntax unified
 1113              	@ 1679 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 1114 00a4 BFF34F8F 		dsb
 1115              	@ 0 "" 2
 1116              	@ 1679 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 1117 00a8 BFF36F8F 		isb
 1118              	@ 0 "" 2
 1119              	.LVL110:
 1120              		.thumb
 1121              		.syntax unified
 1122              	.L90:
1691:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 1123              		.loc 1 1691 0
 1124 00ac FFF7FEFF 		bl	vPortExitCritical
 1125              	.LVL111:
 1126 00b0 70BD     		pop	{r4, r5, r6, pc}
 1127              	.LVL112:
 1128              	.L102:
 1129 00b2 00BF     		.align	2
 1130              	.L101:
 1131 00b4 00000000 		.word	.LANCHOR0
 1132 00b8 30000000 		.word	.LANCHOR0+48
 1133 00bc 04ED00E0 		.word	-536810236
 1134              		.cfi_endproc
 1135              	.LFE12:
 1136              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1137              		.section	.text.vTaskResume,"ax",%progbits
 1138              		.align	2
 1139              		.global	vTaskResume
 1140              		.thumb
 1141              		.thumb_func
 1142              		.type	vTaskResume, %function
 1143              	vTaskResume:
 1144              	.LFB15:
1852:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1145              		.loc 1 1852 0
 1146              		.cfi_startproc
 1147              		@ args = 0, pretend = 0, frame = 0
 1148              		@ frame_needed = 0, uses_anonymous_args = 0
 1149              	.LVL113:
1860:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 1150              		.loc 1 1860 0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 121


 1151 0000 1B4B     		ldr	r3, .L109
 1152 0002 D3F8D830 		ldr	r3, [r3, #216]
 1153 0006 9842     		cmp	r0, r3
 1154 0008 30D0     		beq	.L108
1860:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 1155              		.loc 1 1860 0 is_stmt 0 discriminator 1
 1156 000a 78B3     		cbz	r0, .L108
1852:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1157              		.loc 1 1852 0 is_stmt 1
 1158 000c 70B5     		push	{r4, r5, r6, lr}
 1159              		.cfi_def_cfa_offset 16
 1160              		.cfi_offset 4, -16
 1161              		.cfi_offset 5, -12
 1162              		.cfi_offset 6, -8
 1163              		.cfi_offset 14, -4
 1164 000e 0446     		mov	r4, r0
1862:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 1165              		.loc 1 1862 0
 1166 0010 FFF7FEFF 		bl	vPortEnterCritical
 1167              	.LVL114:
1864:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 1168              		.loc 1 1864 0
 1169 0014 2046     		mov	r0, r4
 1170 0016 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1171              	.LVL115:
 1172 001a 20B3     		cbz	r0, .L105
1870:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1173              		.loc 1 1870 0
 1174 001c 261D     		adds	r6, r4, #4
 1175 001e 3046     		mov	r0, r6
 1176 0020 FFF7FEFF 		bl	uxListRemove
 1177              	.LVL116:
1871:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1178              		.loc 1 1871 0
 1179 0024 E36A     		ldr	r3, [r4, #44]
 1180 0026 124A     		ldr	r2, .L109
 1181 0028 D2F8E420 		ldr	r2, [r2, #228]
 1182 002c 9342     		cmp	r3, r2
 1183 002e 02D9     		bls	.L106
1871:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1184              		.loc 1 1871 0 is_stmt 0 discriminator 1
 1185 0030 0F4A     		ldr	r2, .L109
 1186 0032 C2F8E430 		str	r3, [r2, #228]
 1187              	.L106:
1871:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1188              		.loc 1 1871 0 discriminator 3
 1189 0036 0E4D     		ldr	r5, .L109
 1190 0038 05F13000 		add	r0, r5, #48
 1191 003c 03EB8303 		add	r3, r3, r3, lsl #2
 1192 0040 9A00     		lsls	r2, r3, #2
 1193 0042 3146     		mov	r1, r6
 1194 0044 1044     		add	r0, r0, r2
 1195 0046 FFF7FEFF 		bl	vListInsertEnd
 1196              	.LVL117:
1874:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
 1197              		.loc 1 1874 0 is_stmt 1 discriminator 3
 1198 004a E26A     		ldr	r2, [r4, #44]
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 122


 1199 004c D5F8D830 		ldr	r3, [r5, #216]
 1200 0050 DB6A     		ldr	r3, [r3, #44]
 1201 0052 9A42     		cmp	r2, r3
 1202 0054 07D3     		bcc	.L105
1879:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
 1203              		.loc 1 1879 0
 1204 0056 4FF08052 		mov	r2, #268435456
 1205 005a 064B     		ldr	r3, .L109+4
 1206 005c 1A60     		str	r2, [r3]
 1207              		.syntax unified
 1208              	@ 1879 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 1209 005e BFF34F8F 		dsb
 1210              	@ 0 "" 2
 1211              	@ 1879 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 1212 0062 BFF36F8F 		isb
 1213              	@ 0 "" 2
 1214              		.thumb
 1215              		.syntax unified
 1216              	.L105:
1891:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 1217              		.loc 1 1891 0
 1218 0066 FFF7FEFF 		bl	vPortExitCritical
 1219              	.LVL118:
 1220 006a 70BD     		pop	{r4, r5, r6, pc}
 1221              	.LVL119:
 1222              	.L108:
 1223              		.cfi_def_cfa_offset 0
 1224              		.cfi_restore 4
 1225              		.cfi_restore 5
 1226              		.cfi_restore 6
 1227              		.cfi_restore 14
 1228 006c 7047     		bx	lr
 1229              	.L110:
 1230 006e 00BF     		.align	2
 1231              	.L109:
 1232 0070 00000000 		.word	.LANCHOR0
 1233 0074 04ED00E0 		.word	-536810236
 1234              		.cfi_endproc
 1235              	.LFE15:
 1236              		.size	vTaskResume, .-vTaskResume
 1237              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1238              		.align	2
 1239              		.global	xTaskResumeFromISR
 1240              		.thumb
 1241              		.thumb_func
 1242              		.type	xTaskResumeFromISR, %function
 1243              	xTaskResumeFromISR:
 1244              	.LFB16:
1906:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1245              		.loc 1 1906 0
 1246              		.cfi_startproc
 1247              		@ args = 0, pretend = 0, frame = 0
 1248              		@ frame_needed = 0, uses_anonymous_args = 0
 1249              	.LVL120:
 1250 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1251              		.cfi_def_cfa_offset 24
 1252              		.cfi_offset 3, -24
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 123


 1253              		.cfi_offset 4, -20
 1254              		.cfi_offset 5, -16
 1255              		.cfi_offset 6, -12
 1256              		.cfi_offset 7, -8
 1257              		.cfi_offset 14, -4
 1258 0002 0446     		mov	r4, r0
 1259              	.LVL121:
 1260              	.LBB28:
 1261              	.LBB29:
 215:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         (
 1262              		.loc 2 215 0
 1263              		.syntax unified
 1264              	@ 215 "C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1265 0004 EFF31185 			mrs r5, basepri											
 1266 0008 4FF00403 		mov r3, #4												
 1267 000c 83F31188 		msr basepri, r3											
 1268 0010 BFF36F8F 		isb														
 1269 0014 BFF34F8F 		dsb														
 1270              	
 1271              	@ 0 "" 2
 1272              		.thumb
 1273              		.syntax unified
 1274              	.LBE29:
 1275              	.LBE28:
1933:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 1276              		.loc 1 1933 0
 1277 0018 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1278              	.LVL122:
 1279 001c 50B3     		cbz	r0, .L116
1938:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 1280              		.loc 1 1938 0
 1281 001e 184B     		ldr	r3, .L119
 1282 0020 D3F8F030 		ldr	r3, [r3, #240]
 1283 0024 FBB9     		cbnz	r3, .L113
1942:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
 1284              		.loc 1 1942 0
 1285 0026 E26A     		ldr	r2, [r4, #44]
 1286 0028 154B     		ldr	r3, .L119
 1287 002a D3F8D830 		ldr	r3, [r3, #216]
 1288 002e DB6A     		ldr	r3, [r3, #44]
 1289 0030 9A42     		cmp	r2, r3
 1290 0032 01D2     		bcs	.L117
1907:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1291              		.loc 1 1907 0
 1292 0034 0026     		movs	r6, #0
 1293 0036 00E0     		b	.L114
 1294              	.L117:
1944:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
 1295              		.loc 1 1944 0
 1296 0038 0126     		movs	r6, #1
 1297              	.L114:
 1298              	.LVL123:
1951:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1299              		.loc 1 1951 0
 1300 003a 271D     		adds	r7, r4, #4
 1301 003c 3846     		mov	r0, r7
 1302 003e FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 124


 1303              	.LVL124:
1952:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 1304              		.loc 1 1952 0
 1305 0042 E36A     		ldr	r3, [r4, #44]
 1306 0044 0E4A     		ldr	r2, .L119
 1307 0046 D2F8E420 		ldr	r2, [r2, #228]
 1308 004a 9342     		cmp	r3, r2
 1309 004c 02D9     		bls	.L115
1952:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 1310              		.loc 1 1952 0 is_stmt 0 discriminator 1
 1311 004e 0C4A     		ldr	r2, .L119
 1312 0050 C2F8E430 		str	r3, [r2, #228]
 1313              	.L115:
1952:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 1314              		.loc 1 1952 0 discriminator 3
 1315 0054 03EB8303 		add	r3, r3, r3, lsl #2
 1316 0058 9A00     		lsls	r2, r3, #2
 1317 005a 3946     		mov	r1, r7
 1318 005c 0948     		ldr	r0, .L119+4
 1319 005e 1044     		add	r0, r0, r2
 1320 0060 FFF7FEFF 		bl	vListInsertEnd
 1321              	.LVL125:
 1322 0064 07E0     		b	.L112
 1323              	.LVL126:
 1324              	.L113:
1959:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 1325              		.loc 1 1959 0 is_stmt 1
 1326 0066 04F11801 		add	r1, r4, #24
 1327 006a 0748     		ldr	r0, .L119+8
 1328 006c FFF7FEFF 		bl	vListInsertEnd
 1329              	.LVL127:
1907:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1330              		.loc 1 1907 0
 1331 0070 0026     		movs	r6, #0
 1332 0072 00E0     		b	.L112
 1333              	.L116:
 1334 0074 0026     		movs	r6, #0
 1335              	.LVL128:
 1336              	.L112:
 1337              	.LBB30:
 1338              	.LBB31:
 1339              		.loc 2 233 0
 1340              		.syntax unified
 1341              	@ 233 "C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1342 0076 85F31188 			msr basepri, r5	
 1343              	@ 0 "" 2
 1344              	.LVL129:
 1345              		.thumb
 1346              		.syntax unified
 1347              	.LBE31:
 1348              	.LBE30:
1970:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1349              		.loc 1 1970 0
 1350 007a 3046     		mov	r0, r6
 1351 007c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1352              	.LVL130:
 1353              	.L120:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 125


 1354 007e 00BF     		.align	2
 1355              	.L119:
 1356 0080 00000000 		.word	.LANCHOR0
 1357 0084 30000000 		.word	.LANCHOR0+48
 1358 0088 14000000 		.word	.LANCHOR0+20
 1359              		.cfi_endproc
 1360              	.LFE16:
 1361              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1362              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1363              		.align	2
 1364              		.global	vTaskStartScheduler
 1365              		.thumb
 1366              		.thumb_func
 1367              		.type	vTaskStartScheduler, %function
 1368              	vTaskStartScheduler:
 1369              	.LFB17:
1976:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xReturn;
 1370              		.loc 1 1976 0
 1371              		.cfi_startproc
 1372              		@ args = 0, pretend = 0, frame = 0
 1373              		@ frame_needed = 0, uses_anonymous_args = 0
 1374 0000 00B5     		push	{lr}
 1375              		.cfi_def_cfa_offset 4
 1376              		.cfi_offset 14, -4
 1377 0002 83B0     		sub	sp, sp, #12
 1378              		.cfi_def_cfa_offset 16
2009:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                                    configIDLE_TASK_NAME,
 1379              		.loc 1 2009 0
 1380 0004 124B     		ldr	r3, .L125
 1381 0006 0193     		str	r3, [sp, #4]
 1382 0008 0023     		movs	r3, #0
 1383 000a 0093     		str	r3, [sp]
 1384 000c 8022     		movs	r2, #128
 1385 000e 1149     		ldr	r1, .L125+4
 1386 0010 1148     		ldr	r0, .L125+8
 1387 0012 FFF7FEFF 		bl	xTaskCreate
 1388              	.LVL131:
2020:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 1389              		.loc 1 2020 0
 1390 0016 0128     		cmp	r0, #1
 1391 0018 01D1     		bne	.L122
2022:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 1392              		.loc 1 2022 0
 1393 001a FFF7FEFF 		bl	xTimerCreateTimerTask
 1394              	.LVL132:
 1395              	.L122:
2031:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 1396              		.loc 1 2031 0
 1397 001e 0128     		cmp	r0, #1
 1398 0020 13D1     		bne	.L121
 1399              	.LBB32:
 1400              	.LBB33:
 199:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         (
 1401              		.loc 2 199 0
 1402              		.syntax unified
 1403              	@ 199 "C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1404 0022 4FF00403 			mov r3, #4												
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 126


 1405 0026 83F31188 		msr basepri, r3											
 1406 002a BFF36F8F 		isb														
 1407 002e BFF34F8F 		dsb														
 1408              	
 1409              	@ 0 "" 2
 1410              		.thumb
 1411              		.syntax unified
 1412              	.LBE33:
 1413              	.LBE32:
2059:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         xSchedulerRunning = pdTRUE;
 1414              		.loc 1 2059 0
 1415 0032 0A4B     		ldr	r3, .L125+12
 1416 0034 4FF0FF32 		mov	r2, #-1
 1417 0038 DA62     		str	r2, [r3, #44]
2060:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1418              		.loc 1 2060 0
 1419 003a 0122     		movs	r2, #1
 1420 003c C3F8DC20 		str	r2, [r3, #220]
2061:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1421              		.loc 1 2061 0
 1422 0040 0022     		movs	r2, #0
 1423 0042 C3F8EC20 		str	r2, [r3, #236]
2075:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 1424              		.loc 1 2075 0
 1425 0046 FFF7FEFF 		bl	xPortStartScheduler
 1426              	.LVL133:
 1427              	.L121:
2096:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1428              		.loc 1 2096 0
 1429 004a 03B0     		add	sp, sp, #12
 1430              		.cfi_def_cfa_offset 4
 1431              		@ sp needed
 1432 004c 5DF804FB 		ldr	pc, [sp], #4
 1433              	.L126:
 1434              		.align	2
 1435              	.L125:
 1436 0050 F4000000 		.word	.LANCHOR0+244
 1437 0054 00000000 		.word	.LC0
 1438 0058 00000000 		.word	prvIdleTask
 1439 005c 00000000 		.word	.LANCHOR0
 1440              		.cfi_endproc
 1441              	.LFE17:
 1442              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1443              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1444              		.align	2
 1445              		.global	vTaskEndScheduler
 1446              		.thumb
 1447              		.thumb_func
 1448              		.type	vTaskEndScheduler, %function
 1449              	vTaskEndScheduler:
 1450              	.LFB18:
2100:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
 1451              		.loc 1 2100 0
 1452              		.cfi_startproc
 1453              		@ args = 0, pretend = 0, frame = 0
 1454              		@ frame_needed = 0, uses_anonymous_args = 0
 1455 0000 08B5     		push	{r3, lr}
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 127


 1456              		.cfi_def_cfa_offset 8
 1457              		.cfi_offset 3, -8
 1458              		.cfi_offset 14, -4
 1459              	.LBB34:
 1460              	.LBB35:
 199:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         (
 1461              		.loc 2 199 0
 1462              		.syntax unified
 1463              	@ 199 "C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1464 0002 4FF00403 			mov r3, #4												
 1465 0006 83F31188 		msr basepri, r3											
 1466 000a BFF36F8F 		isb														
 1467 000e BFF34F8F 		dsb														
 1468              	
 1469              	@ 0 "" 2
 1470              		.thumb
 1471              		.syntax unified
 1472              	.LBE35:
 1473              	.LBE34:
2105:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     vPortEndScheduler();
 1474              		.loc 1 2105 0
 1475 0012 0022     		movs	r2, #0
 1476 0014 024B     		ldr	r3, .L129
 1477 0016 C3F8DC20 		str	r2, [r3, #220]
2106:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
 1478              		.loc 1 2106 0
 1479 001a FFF7FEFF 		bl	vPortEndScheduler
 1480              	.LVL134:
 1481 001e 08BD     		pop	{r3, pc}
 1482              	.L130:
 1483              		.align	2
 1484              	.L129:
 1485 0020 00000000 		.word	.LANCHOR0
 1486              		.cfi_endproc
 1487              	.LFE18:
 1488              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1489              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1490              		.align	2
 1491              		.global	vTaskSuspendAll
 1492              		.thumb
 1493              		.thumb_func
 1494              		.type	vTaskSuspendAll, %function
 1495              	vTaskSuspendAll:
 1496              	.LFB19:
2111:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* A critical section is not required as the variable is of type
 1497              		.loc 1 2111 0
 1498              		.cfi_startproc
 1499              		@ args = 0, pretend = 0, frame = 0
 1500              		@ frame_needed = 0, uses_anonymous_args = 0
 1501              		@ link register save eliminated.
2123:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1502              		.loc 1 2123 0
 1503 0000 034A     		ldr	r2, .L132
 1504 0002 D2F8F030 		ldr	r3, [r2, #240]
 1505 0006 0133     		adds	r3, r3, #1
 1506 0008 C2F8F030 		str	r3, [r2, #240]
2127:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 128


 1507              		.loc 1 2127 0
 1508 000c 7047     		bx	lr
 1509              	.L133:
 1510 000e 00BF     		.align	2
 1511              	.L132:
 1512 0010 00000000 		.word	.LANCHOR0
 1513              		.cfi_endproc
 1514              	.LFE19:
 1515              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1516              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1517              		.align	2
 1518              		.global	xTaskGetTickCount
 1519              		.thumb
 1520              		.thumb_func
 1521              		.type	xTaskGetTickCount, %function
 1522              	xTaskGetTickCount:
 1523              	.LFB21:
2306:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TickType_t xTicks;
 1524              		.loc 1 2306 0
 1525              		.cfi_startproc
 1526              		@ args = 0, pretend = 0, frame = 0
 1527              		@ frame_needed = 0, uses_anonymous_args = 0
 1528              		@ link register save eliminated.
2312:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 1529              		.loc 1 2312 0
 1530 0000 014B     		ldr	r3, .L135
 1531 0002 D3F8EC00 		ldr	r0, [r3, #236]
 1532              	.LVL135:
2317:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1533              		.loc 1 2317 0
 1534 0006 7047     		bx	lr
 1535              	.L136:
 1536              		.align	2
 1537              	.L135:
 1538 0008 00000000 		.word	.LANCHOR0
 1539              		.cfi_endproc
 1540              	.LFE21:
 1541              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1542              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1543              		.align	2
 1544              		.global	xTaskGetTickCountFromISR
 1545              		.thumb
 1546              		.thumb_func
 1547              		.type	xTaskGetTickCountFromISR, %function
 1548              	xTaskGetTickCountFromISR:
 1549              	.LFB22:
2321:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TickType_t xReturn;
 1550              		.loc 1 2321 0
 1551              		.cfi_startproc
 1552              		@ args = 0, pretend = 0, frame = 0
 1553              		@ frame_needed = 0, uses_anonymous_args = 0
 1554              		@ link register save eliminated.
 1555              	.LVL136:
2343:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 1556              		.loc 1 2343 0
 1557 0000 014B     		ldr	r3, .L138
 1558 0002 D3F8EC00 		ldr	r0, [r3, #236]
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 129


 1559              	.LVL137:
2348:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1560              		.loc 1 2348 0
 1561 0006 7047     		bx	lr
 1562              	.L139:
 1563              		.align	2
 1564              	.L138:
 1565 0008 00000000 		.word	.LANCHOR0
 1566              		.cfi_endproc
 1567              	.LFE22:
 1568              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 1569              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1570              		.align	2
 1571              		.global	uxTaskGetNumberOfTasks
 1572              		.thumb
 1573              		.thumb_func
 1574              		.type	uxTaskGetNumberOfTasks, %function
 1575              	uxTaskGetNumberOfTasks:
 1576              	.LFB23:
2352:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* A critical section is not required because the variables are of type
 1577              		.loc 1 2352 0
 1578              		.cfi_startproc
 1579              		@ args = 0, pretend = 0, frame = 0
 1580              		@ frame_needed = 0, uses_anonymous_args = 0
 1581              		@ link register save eliminated.
2355:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
 1582              		.loc 1 2355 0
 1583 0000 014B     		ldr	r3, .L141
 1584 0002 D3F8D400 		ldr	r0, [r3, #212]
2356:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1585              		.loc 1 2356 0
 1586 0006 7047     		bx	lr
 1587              	.L142:
 1588              		.align	2
 1589              	.L141:
 1590 0008 00000000 		.word	.LANCHOR0
 1591              		.cfi_endproc
 1592              	.LFE23:
 1593              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 1594              		.section	.text.pcTaskGetName,"ax",%progbits
 1595              		.align	2
 1596              		.global	pcTaskGetName
 1597              		.thumb
 1598              		.thumb_func
 1599              		.type	pcTaskGetName, %function
 1600              	pcTaskGetName:
 1601              	.LFB24:
2360:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TCB_t * pxTCB;
 1602              		.loc 1 2360 0
 1603              		.cfi_startproc
 1604              		@ args = 0, pretend = 0, frame = 0
 1605              		@ frame_needed = 0, uses_anonymous_args = 0
 1606              		@ link register save eliminated.
 1607              	.LVL138:
2365:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     configASSERT( pxTCB );
 1608              		.loc 1 2365 0
 1609 0000 0346     		mov	r3, r0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 130


 1610 0002 10B9     		cbnz	r0, .L144
2365:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     configASSERT( pxTCB );
 1611              		.loc 1 2365 0 is_stmt 0 discriminator 1
 1612 0004 024B     		ldr	r3, .L145
 1613 0006 D3F8D830 		ldr	r3, [r3, #216]
 1614              	.LVL139:
 1615              	.L144:
2368:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1616              		.loc 1 2368 0 is_stmt 1 discriminator 4
 1617 000a 03F13400 		add	r0, r3, #52
 1618 000e 7047     		bx	lr
 1619              	.L146:
 1620              		.align	2
 1621              	.L145:
 1622 0010 00000000 		.word	.LANCHOR0
 1623              		.cfi_endproc
 1624              	.LFE24:
 1625              		.size	pcTaskGetName, .-pcTaskGetName
 1626              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1627              		.align	2
 1628              		.global	xTaskIncrementTick
 1629              		.thumb
 1630              		.thumb_func
 1631              		.type	xTaskIncrementTick, %function
 1632              	xTaskIncrementTick:
 1633              	.LFB26:
2710:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TCB_t * pxTCB;
 1634              		.loc 1 2710 0
 1635              		.cfi_startproc
 1636              		@ args = 0, pretend = 0, frame = 0
 1637              		@ frame_needed = 0, uses_anonymous_args = 0
 1638 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1639              		.cfi_def_cfa_offset 24
 1640              		.cfi_offset 4, -24
 1641              		.cfi_offset 5, -20
 1642              		.cfi_offset 6, -16
 1643              		.cfi_offset 7, -12
 1644              		.cfi_offset 8, -8
 1645              		.cfi_offset 14, -4
 1646              	.LVL140:
2720:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 1647              		.loc 1 2720 0
 1648 0004 374B     		ldr	r3, .L163
 1649 0006 D3F8F030 		ldr	r3, [r3, #240]
 1650 000a 002B     		cmp	r3, #0
 1651 000c 5BD1     		bne	.L148
 1652              	.LBB36:
2724:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1653              		.loc 1 2724 0
 1654 000e 354B     		ldr	r3, .L163
 1655 0010 D3F8EC70 		ldr	r7, [r3, #236]
 1656 0014 0137     		adds	r7, r7, #1
 1657              	.LVL141:
2728:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1658              		.loc 1 2728 0
 1659 0016 C3F8EC70 		str	r7, [r3, #236]
2730:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 131


 1660              		.loc 1 2730 0
 1661 001a 67B9     		cbnz	r7, .L149
 1662              	.LBB37:
2732:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 1663              		.loc 1 2732 0
 1664 001c 9A6A     		ldr	r2, [r3, #40]
 1665              	.LVL142:
 1666 001e D3F8D010 		ldr	r1, [r3, #208]
 1667 0022 9962     		str	r1, [r3, #40]
 1668 0024 C3F8D020 		str	r2, [r3, #208]
 1669 0028 D3F8F820 		ldr	r2, [r3, #248]
 1670              	.LVL143:
 1671 002c 0132     		adds	r2, r2, #1
 1672 002e C3F8F820 		str	r2, [r3, #248]
 1673              	.LVL144:
 1674 0032 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1675              	.LVL145:
 1676              	.L149:
 1677              	.LBE37:
2743:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 1678              		.loc 1 2743 0
 1679 0036 2B4B     		ldr	r3, .L163
 1680 0038 DB6A     		ldr	r3, [r3, #44]
 1681 003a 9F42     		cmp	r7, r3
 1682 003c 05D2     		bcs	.L159
 1683              	.LBE36:
2713:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1684              		.loc 1 2713 0
 1685 003e 4FF00008 		mov	r8, #0
 1686 0042 3BE0     		b	.L151
 1687              	.LVL146:
 1688              	.L160:
 1689              	.LBB38:
2809:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             }
 1690              		.loc 1 2809 0
 1691 0044 4FF00108 		mov	r8, #1
 1692              	.LVL147:
 1693 0048 01E0     		b	.L150
 1694              	.LVL148:
 1695              	.L159:
 1696 004a 4FF00008 		mov	r8, #0
 1697              	.LVL149:
 1698              	.L150:
2747:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 1699              		.loc 1 2747 0
 1700 004e 254B     		ldr	r3, .L163
 1701 0050 9B6A     		ldr	r3, [r3, #40]
 1702 0052 1B68     		ldr	r3, [r3]
 1703 0054 23B9     		cbnz	r3, .L152
2754:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
 1704              		.loc 1 2754 0
 1705 0056 4FF0FF32 		mov	r2, #-1
 1706 005a 224B     		ldr	r3, .L163
 1707 005c DA62     		str	r2, [r3, #44]
2755:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 1708              		.loc 1 2755 0
 1709 005e 2DE0     		b	.L151
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 132


 1710              	.L152:
2763:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1711              		.loc 1 2763 0
 1712 0060 204B     		ldr	r3, .L163
 1713 0062 9B6A     		ldr	r3, [r3, #40]
 1714 0064 DB68     		ldr	r3, [r3, #12]
 1715 0066 DC68     		ldr	r4, [r3, #12]
 1716              	.LVL150:
2764:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1717              		.loc 1 2764 0
 1718 0068 6368     		ldr	r3, [r4, #4]
 1719              	.LVL151:
2766:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
 1720              		.loc 1 2766 0
 1721 006a 9F42     		cmp	r7, r3
 1722 006c 02D2     		bcs	.L153
2773:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         break; /*lint !e9011 Code structure here is deedmed easier to understand wi
 1723              		.loc 1 2773 0
 1724 006e 1D4A     		ldr	r2, .L163
 1725 0070 D362     		str	r3, [r2, #44]
2774:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
 1726              		.loc 1 2774 0
 1727 0072 23E0     		b	.L151
 1728              	.L153:
2782:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1729              		.loc 1 2782 0
 1730 0074 261D     		adds	r6, r4, #4
 1731 0076 3046     		mov	r0, r6
 1732 0078 FFF7FEFF 		bl	uxListRemove
 1733              	.LVL152:
2786:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
 1734              		.loc 1 2786 0
 1735 007c A36A     		ldr	r3, [r4, #40]
 1736 007e 1BB1     		cbz	r3, .L154
2788:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
 1737              		.loc 1 2788 0
 1738 0080 04F11800 		add	r0, r4, #24
 1739 0084 FFF7FEFF 		bl	uxListRemove
 1740              	.LVL153:
 1741              	.L154:
2797:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1742              		.loc 1 2797 0
 1743 0088 E36A     		ldr	r3, [r4, #44]
 1744 008a 164A     		ldr	r2, .L163
 1745 008c D2F8E420 		ldr	r2, [r2, #228]
 1746 0090 9342     		cmp	r3, r2
 1747 0092 02D9     		bls	.L155
2797:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1748              		.loc 1 2797 0 is_stmt 0 discriminator 1
 1749 0094 134A     		ldr	r2, .L163
 1750 0096 C2F8E430 		str	r3, [r2, #228]
 1751              	.L155:
2797:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1752              		.loc 1 2797 0 discriminator 3
 1753 009a 124D     		ldr	r5, .L163
 1754 009c 05F13000 		add	r0, r5, #48
 1755 00a0 03EB8303 		add	r3, r3, r3, lsl #2
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 133


 1756 00a4 9A00     		lsls	r2, r3, #2
 1757 00a6 3146     		mov	r1, r6
 1758 00a8 1044     		add	r0, r0, r2
 1759 00aa FFF7FEFF 		bl	vListInsertEnd
 1760              	.LVL154:
2807:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             {
 1761              		.loc 1 2807 0 is_stmt 1 discriminator 3
 1762 00ae E26A     		ldr	r2, [r4, #44]
 1763 00b0 D5F8D830 		ldr	r3, [r5, #216]
 1764 00b4 DB6A     		ldr	r3, [r3, #44]
 1765 00b6 9A42     		cmp	r2, r3
 1766 00b8 C4D2     		bcs	.L160
 1767 00ba C8E7     		b	.L150
 1768              	.LVL155:
 1769              	.L151:
2854:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 1770              		.loc 1 2854 0
 1771 00bc 094B     		ldr	r3, .L163
 1772 00be D3F8FC30 		ldr	r3, [r3, #252]
 1773 00c2 4BB9     		cbnz	r3, .L161
 1774 00c4 0AE0     		b	.L158
 1775              	.LVL156:
 1776              	.L148:
 1777              	.LBE38:
2867:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1778              		.loc 1 2867 0
 1779 00c6 074A     		ldr	r2, .L163
 1780 00c8 D2F80031 		ldr	r3, [r2, #256]
 1781 00cc 0133     		adds	r3, r3, #1
 1782 00ce C2F80031 		str	r3, [r2, #256]
2713:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1783              		.loc 1 2713 0
 1784 00d2 4FF00008 		mov	r8, #0
 1785 00d6 01E0     		b	.L158
 1786              	.LVL157:
 1787              	.L161:
 1788              	.LBB39:
2856:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 1789              		.loc 1 2856 0
 1790 00d8 4FF00108 		mov	r8, #1
 1791              	.LVL158:
 1792              	.L158:
 1793              	.LBE39:
2879:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1794              		.loc 1 2879 0
 1795 00dc 4046     		mov	r0, r8
 1796 00de BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1797              	.LVL159:
 1798              	.L164:
 1799 00e2 00BF     		.align	2
 1800              	.L163:
 1801 00e4 00000000 		.word	.LANCHOR0
 1802              		.cfi_endproc
 1803              	.LFE26:
 1804              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 1805              		.section	.text.xTaskResumeAll,"ax",%progbits
 1806              		.align	2
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 134


 1807              		.global	xTaskResumeAll
 1808              		.thumb
 1809              		.thumb_func
 1810              		.type	xTaskResumeAll, %function
 1811              	xTaskResumeAll:
 1812              	.LFB20:
2195:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TCB_t * pxTCB = NULL;
 1813              		.loc 1 2195 0
 1814              		.cfi_startproc
 1815              		@ args = 0, pretend = 0, frame = 0
 1816              		@ frame_needed = 0, uses_anonymous_args = 0
 1817 0000 70B5     		push	{r4, r5, r6, lr}
 1818              		.cfi_def_cfa_offset 16
 1819              		.cfi_offset 4, -16
 1820              		.cfi_offset 5, -12
 1821              		.cfi_offset 6, -8
 1822              		.cfi_offset 14, -4
 1823              	.LVL160:
2208:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 1824              		.loc 1 2208 0
 1825 0002 FFF7FEFF 		bl	vPortEnterCritical
 1826              	.LVL161:
2210:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1827              		.loc 1 2210 0
 1828 0006 324B     		ldr	r3, .L179
 1829 0008 D3F8F020 		ldr	r2, [r3, #240]
 1830 000c 013A     		subs	r2, r2, #1
 1831 000e C3F8F020 		str	r2, [r3, #240]
2212:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 1832              		.loc 1 2212 0
 1833 0012 D3F8F030 		ldr	r3, [r3, #240]
 1834 0016 002B     		cmp	r3, #0
 1835 0018 52D1     		bne	.L175
2214:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 1836              		.loc 1 2214 0
 1837 001a 2D4B     		ldr	r3, .L179
 1838 001c D3F8D430 		ldr	r3, [r3, #212]
 1839 0020 3BBB     		cbnz	r3, .L176
2197:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1840              		.loc 1 2197 0
 1841 0022 0024     		movs	r4, #0
 1842 0024 4FE0     		b	.L166
 1843              	.LVL162:
 1844              	.L170:
2220:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1845              		.loc 1 2220 0
 1846 0026 2A4D     		ldr	r5, .L179
 1847 0028 2B6A     		ldr	r3, [r5, #32]
 1848 002a DC68     		ldr	r4, [r3, #12]
 1849              	.LVL163:
2221:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1850              		.loc 1 2221 0
 1851 002c 04F11800 		add	r0, r4, #24
 1852 0030 FFF7FEFF 		bl	uxListRemove
 1853              	.LVL164:
2222:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1854              		.loc 1 2222 0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 135


 1855 0034 261D     		adds	r6, r4, #4
 1856 0036 3046     		mov	r0, r6
 1857 0038 FFF7FEFF 		bl	uxListRemove
 1858              	.LVL165:
2223:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1859              		.loc 1 2223 0
 1860 003c E36A     		ldr	r3, [r4, #44]
 1861 003e D5F8E420 		ldr	r2, [r5, #228]
 1862 0042 9342     		cmp	r3, r2
 1863 0044 01D9     		bls	.L168
2223:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1864              		.loc 1 2223 0 is_stmt 0 discriminator 1
 1865 0046 C5F8E430 		str	r3, [r5, #228]
 1866              	.L168:
2223:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1867              		.loc 1 2223 0 discriminator 3
 1868 004a 214D     		ldr	r5, .L179
 1869 004c 05F13000 		add	r0, r5, #48
 1870 0050 03EB8303 		add	r3, r3, r3, lsl #2
 1871 0054 9A00     		lsls	r2, r3, #2
 1872 0056 3146     		mov	r1, r6
 1873 0058 1044     		add	r0, r0, r2
 1874 005a FFF7FEFF 		bl	vListInsertEnd
 1875              	.LVL166:
2227:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
 1876              		.loc 1 2227 0 is_stmt 1 discriminator 3
 1877 005e E26A     		ldr	r2, [r4, #44]
 1878 0060 D5F8D830 		ldr	r3, [r5, #216]
 1879 0064 DB6A     		ldr	r3, [r3, #44]
 1880 0066 9A42     		cmp	r2, r3
 1881 0068 04D3     		bcc	.L167
2229:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
 1882              		.loc 1 2229 0
 1883 006a 0122     		movs	r2, #1
 1884 006c C5F8FC20 		str	r2, [r5, #252]
 1885 0070 00E0     		b	.L167
 1886              	.LVL167:
 1887              	.L176:
 1888 0072 0024     		movs	r4, #0
 1889              	.LVL168:
 1890              	.L167:
2218:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 1891              		.loc 1 2218 0
 1892 0074 164B     		ldr	r3, .L179
 1893 0076 5B69     		ldr	r3, [r3, #20]
 1894 0078 002B     		cmp	r3, #0
 1895 007a D4D1     		bne	.L170
2237:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 1896              		.loc 1 2237 0
 1897 007c 0CB1     		cbz	r4, .L171
2245:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 1898              		.loc 1 2245 0
 1899 007e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1900              	.LVL169:
 1901              	.L171:
 1902              	.LBB40:
2253:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 136


 1903              		.loc 1 2253 0
 1904 0082 134B     		ldr	r3, .L179
 1905 0084 D3F80041 		ldr	r4, [r3, #256]
 1906              	.LVL170:
2255:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
 1907              		.loc 1 2255 0
 1908 0088 64B1     		cbz	r4, .L172
 1909              	.L174:
2259:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             {
 1910              		.loc 1 2259 0
 1911 008a FFF7FEFF 		bl	xTaskIncrementTick
 1912              	.LVL171:
 1913 008e 18B1     		cbz	r0, .L173
2261:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                             }
 1914              		.loc 1 2261 0
 1915 0090 0122     		movs	r2, #1
 1916 0092 0F4B     		ldr	r3, .L179
 1917 0094 C3F8FC20 		str	r2, [r3, #252]
 1918              	.L173:
 1919              	.LVL172:
2269:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1920              		.loc 1 2269 0
 1921 0098 013C     		subs	r4, r4, #1
 1922              	.LVL173:
 1923 009a F6D1     		bne	.L174
2271:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
 1924              		.loc 1 2271 0
 1925 009c 0022     		movs	r2, #0
 1926 009e 0C4B     		ldr	r3, .L179
 1927 00a0 C3F80021 		str	r2, [r3, #256]
 1928              	.L172:
 1929              	.LBE40:
2279:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 1930              		.loc 1 2279 0
 1931 00a4 0A4B     		ldr	r3, .L179
 1932 00a6 D3F8FC30 		ldr	r3, [r3, #252]
 1933 00aa 5BB1     		cbz	r3, .L177
 1934              	.LVL174:
2286:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 1935              		.loc 1 2286 0
 1936 00ac 4FF08052 		mov	r2, #268435456
 1937 00b0 084B     		ldr	r3, .L179+4
 1938 00b2 1A60     		str	r2, [r3]
 1939              		.syntax unified
 1940              	@ 2286 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 1941 00b4 BFF34F8F 		dsb
 1942              	@ 0 "" 2
 1943              	@ 2286 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 1944 00b8 BFF36F8F 		isb
 1945              	@ 0 "" 2
2283:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
 1946              		.loc 1 2283 0
 1947              		.thumb
 1948              		.syntax unified
 1949 00bc 0124     		movs	r4, #1
 1950              	.LVL175:
 1951 00be 02E0     		b	.L166
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 137


 1952              	.LVL176:
 1953              	.L175:
2197:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1954              		.loc 1 2197 0
 1955 00c0 0024     		movs	r4, #0
 1956 00c2 00E0     		b	.L166
 1957              	.LVL177:
 1958              	.L177:
 1959 00c4 0024     		movs	r4, #0
 1960              	.LVL178:
 1961              	.L166:
2299:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 1962              		.loc 1 2299 0
 1963 00c6 FFF7FEFF 		bl	vPortExitCritical
 1964              	.LVL179:
2302:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1965              		.loc 1 2302 0
 1966 00ca 2046     		mov	r0, r4
 1967 00cc 70BD     		pop	{r4, r5, r6, pc}
 1968              	.LVL180:
 1969              	.L180:
 1970 00ce 00BF     		.align	2
 1971              	.L179:
 1972 00d0 00000000 		.word	.LANCHOR0
 1973 00d4 04ED00E0 		.word	-536810236
 1974              		.cfi_endproc
 1975              	.LFE20:
 1976              		.size	xTaskResumeAll, .-xTaskResumeAll
 1977              		.section	.text.vTaskDelayUntil,"ax",%progbits
 1978              		.align	2
 1979              		.global	vTaskDelayUntil
 1980              		.thumb
 1981              		.thumb_func
 1982              		.type	vTaskDelayUntil, %function
 1983              	vTaskDelayUntil:
 1984              	.LFB8:
1246:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TickType_t xTimeToWake;
 1985              		.loc 1 1246 0
 1986              		.cfi_startproc
 1987              		@ args = 0, pretend = 0, frame = 0
 1988              		@ frame_needed = 0, uses_anonymous_args = 0
 1989              	.LVL181:
 1990 0000 38B5     		push	{r3, r4, r5, lr}
 1991              		.cfi_def_cfa_offset 16
 1992              		.cfi_offset 3, -16
 1993              		.cfi_offset 4, -12
 1994              		.cfi_offset 5, -8
 1995              		.cfi_offset 14, -4
 1996 0002 0546     		mov	r5, r0
 1997 0004 0C46     		mov	r4, r1
 1998              	.LVL182:
1254:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 1999              		.loc 1 1254 0
 2000 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2001              	.LVL183:
 2002              	.LBB41:
1258:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 138


 2003              		.loc 1 1258 0
 2004 000a 164B     		ldr	r3, .L191
 2005 000c D3F8EC00 		ldr	r0, [r3, #236]
 2006              	.LVL184:
1261:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2007              		.loc 1 1261 0
 2008 0010 2A68     		ldr	r2, [r5]
 2009 0012 1319     		adds	r3, r2, r4
 2010              	.LVL185:
1263:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 2011              		.loc 1 1263 0
 2012 0014 9042     		cmp	r0, r2
 2013 0016 05D2     		bcs	.L182
1270:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 2014              		.loc 1 1270 0
 2015 0018 9A42     		cmp	r2, r3
 2016 001a 09D9     		bls	.L186
1270:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 2017              		.loc 1 1270 0 is_stmt 0 discriminator 1
 2018 001c 9842     		cmp	r0, r3
 2019 001e 09D3     		bcc	.L187
 2020              	.LBE41:
1248:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2021              		.loc 1 1248 0 is_stmt 1
 2022 0020 0022     		movs	r2, #0
 2023 0022 0CE0     		b	.L183
 2024              	.L182:
 2025              	.LBB42:
1284:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 2026              		.loc 1 1284 0
 2027 0024 9A42     		cmp	r2, r3
 2028 0026 07D8     		bhi	.L188
1284:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 2029              		.loc 1 1284 0 is_stmt 0 discriminator 1
 2030 0028 9842     		cmp	r0, r3
 2031 002a 07D3     		bcc	.L189
 2032              	.LBE42:
1248:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2033              		.loc 1 1248 0 is_stmt 1
 2034 002c 0022     		movs	r2, #0
 2035 002e 06E0     		b	.L183
 2036              	.L186:
 2037 0030 0022     		movs	r2, #0
 2038 0032 04E0     		b	.L183
 2039              	.L187:
 2040              	.LBB43:
1272:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 2041              		.loc 1 1272 0
 2042 0034 0122     		movs	r2, #1
 2043 0036 02E0     		b	.L183
 2044              	.L188:
1286:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 2045              		.loc 1 1286 0
 2046 0038 0122     		movs	r2, #1
 2047 003a 00E0     		b	.L183
 2048              	.L189:
 2049 003c 0122     		movs	r2, #1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 139


 2050              	.L183:
 2051              	.LVL186:
1295:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2052              		.loc 1 1295 0
 2053 003e 2B60     		str	r3, [r5]
1297:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 2054              		.loc 1 1297 0
 2055 0040 1AB1     		cbz	r2, .L184
1303:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 2056              		.loc 1 1303 0
 2057 0042 0021     		movs	r1, #0
 2058 0044 181A     		subs	r0, r3, r0
 2059              	.LVL187:
 2060 0046 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2061              	.LVL188:
 2062              	.L184:
 2063              	.LBE43:
1310:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2064              		.loc 1 1310 0
 2065 004a FFF7FEFF 		bl	xTaskResumeAll
 2066              	.LVL189:
1314:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 2067              		.loc 1 1314 0
 2068 004e 38B9     		cbnz	r0, .L181
1316:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 2069              		.loc 1 1316 0
 2070 0050 4FF08052 		mov	r2, #268435456
 2071 0054 044B     		ldr	r3, .L191+4
 2072 0056 1A60     		str	r2, [r3]
 2073              		.syntax unified
 2074              	@ 1316 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 2075 0058 BFF34F8F 		dsb
 2076              	@ 0 "" 2
 2077              	@ 1316 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 2078 005c BFF36F8F 		isb
 2079              	@ 0 "" 2
 2080              		.thumb
 2081              		.syntax unified
 2082              	.L181:
 2083 0060 38BD     		pop	{r3, r4, r5, pc}
 2084              	.LVL190:
 2085              	.L192:
 2086 0062 00BF     		.align	2
 2087              	.L191:
 2088 0064 00000000 		.word	.LANCHOR0
 2089 0068 04ED00E0 		.word	-536810236
 2090              		.cfi_endproc
 2091              	.LFE8:
 2092              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 2093              		.section	.text.vTaskDelay,"ax",%progbits
 2094              		.align	2
 2095              		.global	vTaskDelay
 2096              		.thumb
 2097              		.thumb_func
 2098              		.type	vTaskDelay, %function
 2099              	vTaskDelay:
 2100              	.LFB9:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 140


1330:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 2101              		.loc 1 1330 0
 2102              		.cfi_startproc
 2103              		@ args = 0, pretend = 0, frame = 0
 2104              		@ frame_needed = 0, uses_anonymous_args = 0
 2105              	.LVL191:
 2106 0000 10B5     		push	{r4, lr}
 2107              		.cfi_def_cfa_offset 8
 2108              		.cfi_offset 4, -8
 2109              		.cfi_offset 14, -4
 2110              	.LVL192:
1334:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 2111              		.loc 1 1334 0
 2112 0002 48B1     		cbz	r0, .L196
 2113 0004 0446     		mov	r4, r0
1337:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 2114              		.loc 1 1337 0
 2115 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2116              	.LVL193:
1348:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 2117              		.loc 1 1348 0
 2118 000a 0021     		movs	r1, #0
 2119 000c 2046     		mov	r0, r4
 2120 000e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2121              	.LVL194:
1350:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 2122              		.loc 1 1350 0
 2123 0012 FFF7FEFF 		bl	xTaskResumeAll
 2124              	.LVL195:
 2125 0016 00E0     		b	.L194
 2126              	.LVL196:
 2127              	.L196:
1331:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2128              		.loc 1 1331 0
 2129 0018 0020     		movs	r0, #0
 2130              	.LVL197:
 2131              	.L194:
1359:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 2132              		.loc 1 1359 0
 2133 001a 38B9     		cbnz	r0, .L193
1361:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 2134              		.loc 1 1361 0
 2135 001c 4FF08052 		mov	r2, #268435456
 2136 0020 034B     		ldr	r3, .L198
 2137 0022 1A60     		str	r2, [r3]
 2138              		.syntax unified
 2139              	@ 1361 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 2140 0024 BFF34F8F 		dsb
 2141              	@ 0 "" 2
 2142              	@ 1361 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 2143 0028 BFF36F8F 		isb
 2144              	@ 0 "" 2
 2145              		.thumb
 2146              		.syntax unified
 2147              	.L193:
 2148 002c 10BD     		pop	{r4, pc}
 2149              	.L199:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 141


 2150 002e 00BF     		.align	2
 2151              	.L198:
 2152 0030 04ED00E0 		.word	-536810236
 2153              		.cfi_endproc
 2154              	.LFE9:
 2155              		.size	vTaskDelay, .-vTaskDelay
 2156              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 2157              		.align	2
 2158              		.global	xTaskCatchUpTicks
 2159              		.thumb
 2160              		.thumb_func
 2161              		.type	xTaskCatchUpTicks, %function
 2162              	xTaskCatchUpTicks:
 2163              	.LFB25:
2612:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xYieldOccurred;
 2164              		.loc 1 2612 0
 2165              		.cfi_startproc
 2166              		@ args = 0, pretend = 0, frame = 0
 2167              		@ frame_needed = 0, uses_anonymous_args = 0
 2168              	.LVL198:
 2169 0000 10B5     		push	{r4, lr}
 2170              		.cfi_def_cfa_offset 8
 2171              		.cfi_offset 4, -8
 2172              		.cfi_offset 14, -4
 2173 0002 0446     		mov	r4, r0
2621:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     xPendedTicks += xTicksToCatchUp;
 2174              		.loc 1 2621 0
 2175 0004 FFF7FEFF 		bl	vTaskSuspendAll
 2176              	.LVL199:
2622:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     xYieldOccurred = xTaskResumeAll();
 2177              		.loc 1 2622 0
 2178 0008 044B     		ldr	r3, .L202
 2179 000a D3F80021 		ldr	r2, [r3, #256]
 2180 000e 1444     		add	r4, r4, r2
 2181              	.LVL200:
 2182 0010 C3F80041 		str	r4, [r3, #256]
2623:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2183              		.loc 1 2623 0
 2184 0014 FFF7FEFF 		bl	xTaskResumeAll
 2185              	.LVL201:
2626:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
 2186              		.loc 1 2626 0
 2187 0018 10BD     		pop	{r4, pc}
 2188              	.L203:
 2189 001a 00BF     		.align	2
 2190              	.L202:
 2191 001c 00000000 		.word	.LANCHOR0
 2192              		.cfi_endproc
 2193              	.LFE25:
 2194              		.size	xTaskCatchUpTicks, .-xTaskCatchUpTicks
 2195              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2196              		.align	2
 2197              		.global	vTaskSwitchContext
 2198              		.thumb
 2199              		.thumb_func
 2200              		.type	vTaskSwitchContext, %function
 2201              	vTaskSwitchContext:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 142


 2202              	.LFB27:
2995:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2203              		.loc 1 2995 0
 2204              		.cfi_startproc
 2205              		@ args = 0, pretend = 0, frame = 0
 2206              		@ frame_needed = 0, uses_anonymous_args = 0
 2207              		@ link register save eliminated.
2996:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 2208              		.loc 1 2996 0
 2209 0000 1E4B     		ldr	r3, .L211
 2210 0002 D3F8F030 		ldr	r3, [r3, #240]
 2211 0006 23B1     		cbz	r3, .L205
3000:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 2212              		.loc 1 3000 0
 2213 0008 0122     		movs	r2, #1
 2214 000a 1C4B     		ldr	r3, .L211
 2215 000c C3F8FC20 		str	r2, [r3, #252]
 2216 0010 7047     		bx	lr
 2217              	.L205:
3004:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_OUT();
 2218              		.loc 1 3004 0
 2219 0012 1A4B     		ldr	r3, .L211
 2220 0014 0022     		movs	r2, #0
 2221 0016 C3F8FC20 		str	r2, [r3, #252]
 2222              	.LBB44:
3047:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
 2223              		.loc 1 3047 0
 2224 001a D3F8E430 		ldr	r3, [r3, #228]
 2225              	.LVL202:
 2226 001e 00E0     		b	.L207
 2227              	.L208:
3047:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
 2228              		.loc 1 3047 0 is_stmt 0 discriminator 3
 2229 0020 013B     		subs	r3, r3, #1
 2230              	.LVL203:
 2231              	.L207:
3047:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
 2232              		.loc 1 3047 0 discriminator 1
 2233 0022 03EB8301 		add	r1, r3, r3, lsl #2
 2234 0026 8A00     		lsls	r2, r1, #2
 2235 0028 1449     		ldr	r1, .L211
 2236 002a 0A44     		add	r2, r2, r1
 2237 002c 126B     		ldr	r2, [r2, #48]
 2238 002e 002A     		cmp	r2, #0
 2239 0030 F6D0     		beq	.L208
 2240              	.LBE44:
2995:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2241              		.loc 1 2995 0 is_stmt 1 discriminator 4
 2242 0032 10B4     		push	{r4}
 2243              		.cfi_def_cfa_offset 4
 2244              		.cfi_offset 4, -4
 2245              	.LVL204:
 2246              	.LBB46:
 2247              	.LBB45:
3047:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
 2248              		.loc 1 3047 0 discriminator 4
 2249 0034 0A46     		mov	r2, r1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 143


 2250 0036 9900     		lsls	r1, r3, #2
 2251 0038 CC18     		adds	r4, r1, r3
 2252 003a A000     		lsls	r0, r4, #2
 2253 003c 1044     		add	r0, r0, r2
 2254 003e 446B     		ldr	r4, [r0, #52]
 2255 0040 6468     		ldr	r4, [r4, #4]
 2256 0042 4463     		str	r4, [r0, #52]
 2257 0044 02F13000 		add	r0, r2, #48
 2258 0048 1944     		add	r1, r1, r3
 2259 004a 8A00     		lsls	r2, r1, #2
 2260 004c 0832     		adds	r2, r2, #8
 2261 004e 0244     		add	r2, r2, r0
 2262 0050 9442     		cmp	r4, r2
 2263 0052 06D1     		bne	.L209
3047:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
 2264              		.loc 1 3047 0 is_stmt 0 discriminator 5
 2265 0054 6068     		ldr	r0, [r4, #4]
 2266 0056 03EB8301 		add	r1, r3, r3, lsl #2
 2267 005a 8A00     		lsls	r2, r1, #2
 2268 005c 0749     		ldr	r1, .L211
 2269 005e 0A44     		add	r2, r2, r1
 2270 0060 5063     		str	r0, [r2, #52]
 2271              	.L209:
3047:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
 2272              		.loc 1 3047 0 discriminator 7
 2273 0062 0649     		ldr	r1, .L211
 2274 0064 03EB8300 		add	r0, r3, r3, lsl #2
 2275 0068 8200     		lsls	r2, r0, #2
 2276 006a 0A44     		add	r2, r2, r1
 2277 006c 526B     		ldr	r2, [r2, #52]
 2278 006e D268     		ldr	r2, [r2, #12]
 2279 0070 C1F8D820 		str	r2, [r1, #216]
 2280              	.LBE45:
 2281 0074 C1F8E430 		str	r3, [r1, #228]
 2282              	.LBE46:
3067:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 2283              		.loc 1 3067 0 is_stmt 1 discriminator 7
 2284 0078 10BC     		pop	{r4}
 2285              		.cfi_restore 4
 2286              		.cfi_def_cfa_offset 0
 2287 007a 7047     		bx	lr
 2288              	.L212:
 2289              		.align	2
 2290              	.L211:
 2291 007c 00000000 		.word	.LANCHOR0
 2292              		.cfi_endproc
 2293              	.LFE27:
 2294              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2295              		.section	.text.vTaskSuspend,"ax",%progbits
 2296              		.align	2
 2297              		.global	vTaskSuspend
 2298              		.thumb
 2299              		.thumb_func
 2300              		.type	vTaskSuspend, %function
 2301              	vTaskSuspend:
 2302              	.LFB13:
1700:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 144


 2303              		.loc 1 1700 0
 2304              		.cfi_startproc
 2305              		@ args = 0, pretend = 0, frame = 0
 2306              		@ frame_needed = 0, uses_anonymous_args = 0
 2307              	.LVL205:
 2308 0000 38B5     		push	{r3, r4, r5, lr}
 2309              		.cfi_def_cfa_offset 16
 2310              		.cfi_offset 3, -16
 2311              		.cfi_offset 4, -12
 2312              		.cfi_offset 5, -8
 2313              		.cfi_offset 14, -4
 2314 0002 0446     		mov	r4, r0
1703:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 2315              		.loc 1 1703 0
 2316 0004 FFF7FEFF 		bl	vPortEnterCritical
 2317              	.LVL206:
1707:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2318              		.loc 1 1707 0
 2319 0008 14B9     		cbnz	r4, .L214
1707:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2320              		.loc 1 1707 0 is_stmt 0 discriminator 1
 2321 000a 264B     		ldr	r3, .L224
 2322 000c D3F8D840 		ldr	r4, [r3, #216]
 2323              	.LVL207:
 2324              	.L214:
1713:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 2325              		.loc 1 1713 0 is_stmt 1 discriminator 4
 2326 0010 251D     		adds	r5, r4, #4
 2327 0012 2846     		mov	r0, r5
 2328 0014 FFF7FEFF 		bl	uxListRemove
 2329              	.LVL208:
1723:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 2330              		.loc 1 1723 0 discriminator 4
 2331 0018 A36A     		ldr	r3, [r4, #40]
 2332 001a 1BB1     		cbz	r3, .L215
1725:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 2333              		.loc 1 1725 0
 2334 001c 04F11800 		add	r0, r4, #24
 2335 0020 FFF7FEFF 		bl	uxListRemove
 2336              	.LVL209:
 2337              	.L215:
1732:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2338              		.loc 1 1732 0
 2339 0024 2946     		mov	r1, r5
 2340 0026 1F48     		ldr	r0, .L224
 2341 0028 FFF7FEFF 		bl	vListInsertEnd
 2342              	.LVL210:
 2343              	.LBB47:
1738:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
 2344              		.loc 1 1738 0
 2345 002c 0023     		movs	r3, #0
 2346 002e 0AE0     		b	.L216
 2347              	.LVL211:
 2348              	.L218:
1740:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         {
 2349              		.loc 1 1740 0
 2350 0030 E218     		adds	r2, r4, r3
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 145


 2351 0032 92F85C20 		ldrb	r2, [r2, #92]	@ zero_extendqisi2
 2352 0036 D2B2     		uxtb	r2, r2
 2353 0038 012A     		cmp	r2, #1
 2354 003a 03D1     		bne	.L217
1744:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                         }
 2355              		.loc 1 1744 0
 2356 003c E218     		adds	r2, r4, r3
 2357 003e 0021     		movs	r1, #0
 2358 0040 82F85C10 		strb	r1, [r2, #92]
 2359              	.L217:
1738:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
 2360              		.loc 1 1738 0 discriminator 2
 2361 0044 0133     		adds	r3, r3, #1
 2362              	.LVL212:
 2363              	.L216:
1738:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
 2364              		.loc 1 1738 0 is_stmt 0 discriminator 1
 2365 0046 002B     		cmp	r3, #0
 2366 0048 F2DD     		ble	.L218
 2367              	.LBE47:
1750:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2368              		.loc 1 1750 0 is_stmt 1
 2369 004a FFF7FEFF 		bl	vPortExitCritical
 2370              	.LVL213:
1752:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 2371              		.loc 1 1752 0
 2372 004e 154B     		ldr	r3, .L224
 2373 0050 D3F8DC30 		ldr	r3, [r3, #220]
 2374 0054 2BB1     		cbz	r3, .L219
1756:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 2375              		.loc 1 1756 0
 2376 0056 FFF7FEFF 		bl	vPortEnterCritical
 2377              	.LVL214:
1758:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 2378              		.loc 1 1758 0
 2379 005a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2380              	.LVL215:
1760:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 2381              		.loc 1 1760 0
 2382 005e FFF7FEFF 		bl	vPortExitCritical
 2383              	.LVL216:
 2384              	.L219:
1767:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 2385              		.loc 1 1767 0
 2386 0062 104B     		ldr	r3, .L224
 2387 0064 D3F8D830 		ldr	r3, [r3, #216]
 2388 0068 9C42     		cmp	r4, r3
 2389 006a 19D1     		bne	.L213
1769:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 2390              		.loc 1 1769 0
 2391 006c 0D4B     		ldr	r3, .L224
 2392 006e D3F8DC30 		ldr	r3, [r3, #220]
 2393 0072 43B1     		cbz	r3, .L221
1773:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 2394              		.loc 1 1773 0
 2395 0074 4FF08052 		mov	r2, #268435456
 2396 0078 0B4B     		ldr	r3, .L224+4
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 146


 2397 007a 1A60     		str	r2, [r3]
 2398              		.syntax unified
 2399              	@ 1773 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 2400 007c BFF34F8F 		dsb
 2401              	@ 0 "" 2
 2402              	@ 1773 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 2403 0080 BFF36F8F 		isb
 2404              	@ 0 "" 2
 2405              		.thumb
 2406              		.syntax unified
 2407 0084 38BD     		pop	{r3, r4, r5, pc}
 2408              	.LVL217:
 2409              	.L221:
1780:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 2410              		.loc 1 1780 0
 2411 0086 074B     		ldr	r3, .L224
 2412 0088 1A68     		ldr	r2, [r3]
 2413 008a D3F8D430 		ldr	r3, [r3, #212]
 2414 008e 9A42     		cmp	r2, r3
 2415 0090 04D1     		bne	.L222
1786:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 2416              		.loc 1 1786 0
 2417 0092 0022     		movs	r2, #0
 2418 0094 034B     		ldr	r3, .L224
 2419 0096 C3F8D820 		str	r2, [r3, #216]
 2420 009a 38BD     		pop	{r3, r4, r5, pc}
 2421              	.LVL218:
 2422              	.L222:
1790:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 2423              		.loc 1 1790 0
 2424 009c FFF7FEFF 		bl	vTaskSwitchContext
 2425              	.LVL219:
 2426              	.L213:
 2427 00a0 38BD     		pop	{r3, r4, r5, pc}
 2428              	.LVL220:
 2429              	.L225:
 2430 00a2 00BF     		.align	2
 2431              	.L224:
 2432 00a4 00000000 		.word	.LANCHOR0
 2433 00a8 04ED00E0 		.word	-536810236
 2434              		.cfi_endproc
 2435              	.LFE13:
 2436              		.size	vTaskSuspend, .-vTaskSuspend
 2437              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2438              		.align	2
 2439              		.global	vTaskPlaceOnEventList
 2440              		.thumb
 2441              		.thumb_func
 2442              		.type	vTaskPlaceOnEventList, %function
 2443              	vTaskPlaceOnEventList:
 2444              	.LFB28:
3072:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     configASSERT( pxEventList );
 2445              		.loc 1 3072 0
 2446              		.cfi_startproc
 2447              		@ args = 0, pretend = 0, frame = 0
 2448              		@ frame_needed = 0, uses_anonymous_args = 0
 2449              	.LVL221:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 147


 2450 0000 10B5     		push	{r4, lr}
 2451              		.cfi_def_cfa_offset 8
 2452              		.cfi_offset 4, -8
 2453              		.cfi_offset 14, -4
 2454 0002 0C46     		mov	r4, r1
3082:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2455              		.loc 1 3082 0
 2456 0004 054B     		ldr	r3, .L228
 2457 0006 D3F8D810 		ldr	r1, [r3, #216]
 2458              	.LVL222:
 2459 000a 1831     		adds	r1, r1, #24
 2460 000c FFF7FEFF 		bl	vListInsert
 2461              	.LVL223:
3084:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
 2462              		.loc 1 3084 0
 2463 0010 0121     		movs	r1, #1
 2464 0012 2046     		mov	r0, r4
 2465 0014 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2466              	.LVL224:
 2467 0018 10BD     		pop	{r4, pc}
 2468              	.LVL225:
 2469              	.L229:
 2470 001a 00BF     		.align	2
 2471              	.L228:
 2472 001c 00000000 		.word	.LANCHOR0
 2473              		.cfi_endproc
 2474              	.LFE28:
 2475              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2476              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2477              		.align	2
 2478              		.global	vTaskPlaceOnUnorderedEventList
 2479              		.thumb
 2480              		.thumb_func
 2481              		.type	vTaskPlaceOnUnorderedEventList, %function
 2482              	vTaskPlaceOnUnorderedEventList:
 2483              	.LFB29:
3091:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     configASSERT( pxEventList );
 2484              		.loc 1 3091 0
 2485              		.cfi_startproc
 2486              		@ args = 0, pretend = 0, frame = 0
 2487              		@ frame_needed = 0, uses_anonymous_args = 0
 2488              	.LVL226:
 2489 0000 10B5     		push	{r4, lr}
 2490              		.cfi_def_cfa_offset 8
 2491              		.cfi_offset 4, -8
 2492              		.cfi_offset 14, -4
 2493 0002 1446     		mov	r4, r2
3101:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2494              		.loc 1 3101 0
 2495 0004 074B     		ldr	r3, .L232
 2496 0006 D3F8D820 		ldr	r2, [r3, #216]
 2497              	.LVL227:
 2498 000a 41F00041 		orr	r1, r1, #-2147483648
 2499              	.LVL228:
 2500 000e 9161     		str	r1, [r2, #24]
3108:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2501              		.loc 1 3108 0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 148


 2502 0010 D3F8D810 		ldr	r1, [r3, #216]
 2503 0014 1831     		adds	r1, r1, #24
 2504 0016 FFF7FEFF 		bl	vListInsertEnd
 2505              	.LVL229:
3110:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
 2506              		.loc 1 3110 0
 2507 001a 0121     		movs	r1, #1
 2508 001c 2046     		mov	r0, r4
 2509 001e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2510              	.LVL230:
 2511 0022 10BD     		pop	{r4, pc}
 2512              	.LVL231:
 2513              	.L233:
 2514              		.align	2
 2515              	.L232:
 2516 0024 00000000 		.word	.LANCHOR0
 2517              		.cfi_endproc
 2518              	.LFE29:
 2519              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2520              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 2521              		.align	2
 2522              		.global	vTaskPlaceOnEventListRestricted
 2523              		.thumb
 2524              		.thumb_func
 2525              		.type	vTaskPlaceOnEventListRestricted, %function
 2526              	vTaskPlaceOnEventListRestricted:
 2527              	.LFB30:
3119:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         configASSERT( pxEventList );
 2528              		.loc 1 3119 0
 2529              		.cfi_startproc
 2530              		@ args = 0, pretend = 0, frame = 0
 2531              		@ frame_needed = 0, uses_anonymous_args = 0
 2532              	.LVL232:
 2533 0000 38B5     		push	{r3, r4, r5, lr}
 2534              		.cfi_def_cfa_offset 16
 2535              		.cfi_offset 3, -16
 2536              		.cfi_offset 4, -12
 2537              		.cfi_offset 5, -8
 2538              		.cfi_offset 14, -4
 2539 0002 0D46     		mov	r5, r1
 2540 0004 1446     		mov	r4, r2
3132:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2541              		.loc 1 3132 0
 2542 0006 074B     		ldr	r3, .L238
 2543 0008 D3F8D810 		ldr	r1, [r3, #216]
 2544              	.LVL233:
 2545 000c 1831     		adds	r1, r1, #24
 2546 000e FFF7FEFF 		bl	vListInsertEnd
 2547              	.LVL234:
3137:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 2548              		.loc 1 3137 0
 2549 0012 0CB1     		cbz	r4, .L235
3139:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 2550              		.loc 1 3139 0
 2551 0014 4FF0FF35 		mov	r5, #-1
 2552              	.LVL235:
 2553              	.L235:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 149


3143:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 2554              		.loc 1 3143 0
 2555 0018 2146     		mov	r1, r4
 2556 001a 2846     		mov	r0, r5
 2557 001c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2558              	.LVL236:
 2559 0020 38BD     		pop	{r3, r4, r5, pc}
 2560              	.LVL237:
 2561              	.L239:
 2562 0022 00BF     		.align	2
 2563              	.L238:
 2564 0024 00000000 		.word	.LANCHOR0
 2565              		.cfi_endproc
 2566              	.LFE30:
 2567              		.size	vTaskPlaceOnEventListRestricted, .-vTaskPlaceOnEventListRestricted
 2568              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2569              		.align	2
 2570              		.global	xTaskRemoveFromEventList
 2571              		.thumb
 2572              		.thumb_func
 2573              		.type	xTaskRemoveFromEventList, %function
 2574              	xTaskRemoveFromEventList:
 2575              	.LFB31:
3150:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TCB_t * pxUnblockedTCB;
 2576              		.loc 1 3150 0
 2577              		.cfi_startproc
 2578              		@ args = 0, pretend = 0, frame = 0
 2579              		@ frame_needed = 0, uses_anonymous_args = 0
 2580              	.LVL238:
 2581 0000 38B5     		push	{r3, r4, r5, lr}
 2582              		.cfi_def_cfa_offset 16
 2583              		.cfi_offset 3, -16
 2584              		.cfi_offset 4, -12
 2585              		.cfi_offset 5, -8
 2586              		.cfi_offset 14, -4
3167:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     configASSERT( pxUnblockedTCB );
 2587              		.loc 1 3167 0
 2588 0002 C368     		ldr	r3, [r0, #12]
 2589 0004 DC68     		ldr	r4, [r3, #12]
 2590              	.LVL239:
3169:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2591              		.loc 1 3169 0
 2592 0006 04F11805 		add	r5, r4, #24
 2593 000a 2846     		mov	r0, r5
 2594              	.LVL240:
 2595 000c FFF7FEFF 		bl	uxListRemove
 2596              	.LVL241:
3171:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 2597              		.loc 1 3171 0
 2598 0010 154B     		ldr	r3, .L247
 2599 0012 D3F8F030 		ldr	r3, [r3, #240]
 2600 0016 ABB9     		cbnz	r3, .L241
3173:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 2601              		.loc 1 3173 0
 2602 0018 251D     		adds	r5, r4, #4
 2603 001a 2846     		mov	r0, r5
 2604 001c FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 150


 2605              	.LVL242:
3174:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2606              		.loc 1 3174 0
 2607 0020 E36A     		ldr	r3, [r4, #44]
 2608 0022 114A     		ldr	r2, .L247
 2609 0024 D2F8E420 		ldr	r2, [r2, #228]
 2610 0028 9342     		cmp	r3, r2
 2611 002a 02D9     		bls	.L242
3174:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2612              		.loc 1 3174 0 is_stmt 0 discriminator 1
 2613 002c 0E4A     		ldr	r2, .L247
 2614 002e C2F8E430 		str	r3, [r2, #228]
 2615              	.L242:
3174:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2616              		.loc 1 3174 0 discriminator 3
 2617 0032 03EB8303 		add	r3, r3, r3, lsl #2
 2618 0036 9A00     		lsls	r2, r3, #2
 2619 0038 2946     		mov	r1, r5
 2620 003a 0C48     		ldr	r0, .L247+4
 2621 003c 1044     		add	r0, r0, r2
 2622 003e FFF7FEFF 		bl	vListInsertEnd
 2623              	.LVL243:
 2624 0042 03E0     		b	.L243
 2625              	.L241:
3194:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 2626              		.loc 1 3194 0 is_stmt 1
 2627 0044 2946     		mov	r1, r5
 2628 0046 0A48     		ldr	r0, .L247+8
 2629 0048 FFF7FEFF 		bl	vListInsertEnd
 2630              	.LVL244:
 2631              	.L243:
3197:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 2632              		.loc 1 3197 0
 2633 004c E26A     		ldr	r2, [r4, #44]
 2634 004e 064B     		ldr	r3, .L247
 2635 0050 D3F8D830 		ldr	r3, [r3, #216]
 2636 0054 DB6A     		ldr	r3, [r3, #44]
 2637 0056 9A42     		cmp	r2, r3
 2638 0058 04D9     		bls	.L245
 2639              	.LVL245:
3206:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 2640              		.loc 1 3206 0
 2641 005a 0120     		movs	r0, #1
 2642 005c 024B     		ldr	r3, .L247
 2643 005e C3F8FC00 		str	r0, [r3, #252]
 2644 0062 38BD     		pop	{r3, r4, r5, pc}
 2645              	.LVL246:
 2646              	.L245:
3210:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 2647              		.loc 1 3210 0
 2648 0064 0020     		movs	r0, #0
 2649              	.LVL247:
3214:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 2650              		.loc 1 3214 0
 2651 0066 38BD     		pop	{r3, r4, r5, pc}
 2652              	.LVL248:
 2653              	.L248:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 151


 2654              		.align	2
 2655              	.L247:
 2656 0068 00000000 		.word	.LANCHOR0
 2657 006c 30000000 		.word	.LANCHOR0+48
 2658 0070 14000000 		.word	.LANCHOR0+20
 2659              		.cfi_endproc
 2660              	.LFE31:
 2661              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 2662              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 2663              		.align	2
 2664              		.global	vTaskRemoveFromUnorderedEventList
 2665              		.thumb
 2666              		.thumb_func
 2667              		.type	vTaskRemoveFromUnorderedEventList, %function
 2668              	vTaskRemoveFromUnorderedEventList:
 2669              	.LFB32:
3219:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TCB_t * pxUnblockedTCB;
 2670              		.loc 1 3219 0
 2671              		.cfi_startproc
 2672              		@ args = 0, pretend = 0, frame = 0
 2673              		@ frame_needed = 0, uses_anonymous_args = 0
 2674              	.LVL249:
 2675 0000 70B5     		push	{r4, r5, r6, lr}
 2676              		.cfi_def_cfa_offset 16
 2677              		.cfi_offset 4, -16
 2678              		.cfi_offset 5, -12
 2679              		.cfi_offset 6, -8
 2680              		.cfi_offset 14, -4
3227:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2681              		.loc 1 3227 0
 2682 0002 41F00041 		orr	r1, r1, #-2147483648
 2683              	.LVL250:
 2684 0006 0160     		str	r1, [r0]
3231:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     configASSERT( pxUnblockedTCB );
 2685              		.loc 1 3231 0
 2686 0008 C468     		ldr	r4, [r0, #12]
 2687              	.LVL251:
3233:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2688              		.loc 1 3233 0
 2689 000a FFF7FEFF 		bl	uxListRemove
 2690              	.LVL252:
3252:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 2691              		.loc 1 3252 0
 2692 000e 261D     		adds	r6, r4, #4
 2693 0010 3046     		mov	r0, r6
 2694 0012 FFF7FEFF 		bl	uxListRemove
 2695              	.LVL253:
3253:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2696              		.loc 1 3253 0
 2697 0016 E36A     		ldr	r3, [r4, #44]
 2698 0018 0D4A     		ldr	r2, .L253
 2699 001a D2F8E420 		ldr	r2, [r2, #228]
 2700 001e 9342     		cmp	r3, r2
 2701 0020 02D9     		bls	.L250
3253:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2702              		.loc 1 3253 0 is_stmt 0 discriminator 1
 2703 0022 0B4A     		ldr	r2, .L253
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 152


 2704 0024 C2F8E430 		str	r3, [r2, #228]
 2705              	.L250:
3253:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2706              		.loc 1 3253 0 discriminator 3
 2707 0028 094D     		ldr	r5, .L253
 2708 002a 05F13000 		add	r0, r5, #48
 2709 002e 03EB8303 		add	r3, r3, r3, lsl #2
 2710 0032 9A00     		lsls	r2, r3, #2
 2711 0034 3146     		mov	r1, r6
 2712 0036 1044     		add	r0, r0, r2
 2713 0038 FFF7FEFF 		bl	vListInsertEnd
 2714              	.LVL254:
3255:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 2715              		.loc 1 3255 0 is_stmt 1 discriminator 3
 2716 003c E26A     		ldr	r2, [r4, #44]
 2717 003e D5F8D830 		ldr	r3, [r5, #216]
 2718 0042 DB6A     		ldr	r3, [r3, #44]
 2719 0044 9A42     		cmp	r2, r3
 2720 0046 02D9     		bls	.L249
3261:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 2721              		.loc 1 3261 0
 2722 0048 0122     		movs	r2, #1
 2723 004a C5F8FC20 		str	r2, [r5, #252]
 2724              	.L249:
 2725 004e 70BD     		pop	{r4, r5, r6, pc}
 2726              	.LVL255:
 2727              	.L254:
 2728              		.align	2
 2729              	.L253:
 2730 0050 00000000 		.word	.LANCHOR0
 2731              		.cfi_endproc
 2732              	.LFE32:
 2733              		.size	vTaskRemoveFromUnorderedEventList, .-vTaskRemoveFromUnorderedEventList
 2734              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 2735              		.align	2
 2736              		.global	vTaskSetTimeOutState
 2737              		.thumb
 2738              		.thumb_func
 2739              		.type	vTaskSetTimeOutState, %function
 2740              	vTaskSetTimeOutState:
 2741              	.LFB33:
3267:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     configASSERT( pxTimeOut );
 2742              		.loc 1 3267 0
 2743              		.cfi_startproc
 2744              		@ args = 0, pretend = 0, frame = 0
 2745              		@ frame_needed = 0, uses_anonymous_args = 0
 2746              	.LVL256:
 2747 0000 10B5     		push	{r4, lr}
 2748              		.cfi_def_cfa_offset 8
 2749              		.cfi_offset 4, -8
 2750              		.cfi_offset 14, -4
 2751 0002 0446     		mov	r4, r0
3269:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 2752              		.loc 1 3269 0
 2753 0004 FFF7FEFF 		bl	vPortEnterCritical
 2754              	.LVL257:
3271:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 153


 2755              		.loc 1 3271 0
 2756 0008 044B     		ldr	r3, .L257
 2757 000a D3F8F820 		ldr	r2, [r3, #248]
 2758 000e 2260     		str	r2, [r4]
3272:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     }
 2759              		.loc 1 3272 0
 2760 0010 D3F8EC30 		ldr	r3, [r3, #236]
 2761 0014 6360     		str	r3, [r4, #4]
3274:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
 2762              		.loc 1 3274 0
 2763 0016 FFF7FEFF 		bl	vPortExitCritical
 2764              	.LVL258:
 2765 001a 10BD     		pop	{r4, pc}
 2766              	.LVL259:
 2767              	.L258:
 2768              		.align	2
 2769              	.L257:
 2770 001c 00000000 		.word	.LANCHOR0
 2771              		.cfi_endproc
 2772              	.LFE33:
 2773              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 2774              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 2775              		.align	2
 2776              		.global	vTaskInternalSetTimeOutState
 2777              		.thumb
 2778              		.thumb_func
 2779              		.type	vTaskInternalSetTimeOutState, %function
 2780              	vTaskInternalSetTimeOutState:
 2781              	.LFB34:
3279:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     /* For internal use only as it does not use a critical section. */
 2782              		.loc 1 3279 0
 2783              		.cfi_startproc
 2784              		@ args = 0, pretend = 0, frame = 0
 2785              		@ frame_needed = 0, uses_anonymous_args = 0
 2786              		@ link register save eliminated.
 2787              	.LVL260:
3281:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 2788              		.loc 1 3281 0
 2789 0000 034B     		ldr	r3, .L260
 2790 0002 D3F8F820 		ldr	r2, [r3, #248]
 2791 0006 0260     		str	r2, [r0]
3282:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
 2792              		.loc 1 3282 0
 2793 0008 D3F8EC30 		ldr	r3, [r3, #236]
 2794 000c 4360     		str	r3, [r0, #4]
 2795 000e 7047     		bx	lr
 2796              	.L261:
 2797              		.align	2
 2798              	.L260:
 2799 0010 00000000 		.word	.LANCHOR0
 2800              		.cfi_endproc
 2801              	.LFE34:
 2802              		.size	vTaskInternalSetTimeOutState, .-vTaskInternalSetTimeOutState
 2803              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 2804              		.align	2
 2805              		.global	xTaskCheckForTimeOut
 2806              		.thumb
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 154


 2807              		.thumb_func
 2808              		.type	xTaskCheckForTimeOut, %function
 2809              	xTaskCheckForTimeOut:
 2810              	.LFB35:
3288:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     BaseType_t xReturn;
 2811              		.loc 1 3288 0
 2812              		.cfi_startproc
 2813              		@ args = 0, pretend = 0, frame = 0
 2814              		@ frame_needed = 0, uses_anonymous_args = 0
 2815              	.LVL261:
 2816 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2817              		.cfi_def_cfa_offset 24
 2818              		.cfi_offset 3, -24
 2819              		.cfi_offset 4, -20
 2820              		.cfi_offset 5, -16
 2821              		.cfi_offset 6, -12
 2822              		.cfi_offset 7, -8
 2823              		.cfi_offset 14, -4
 2824 0002 0446     		mov	r4, r0
 2825 0004 0D46     		mov	r5, r1
3294:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     {
 2826              		.loc 1 3294 0
 2827 0006 FFF7FEFF 		bl	vPortEnterCritical
 2828              	.LVL262:
 2829              	.LBB48:
3297:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 2830              		.loc 1 3297 0
 2831 000a 134B     		ldr	r3, .L268
 2832 000c D3F8EC10 		ldr	r1, [r3, #236]
 2833              	.LVL263:
3298:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2834              		.loc 1 3298 0
 2835 0010 6268     		ldr	r2, [r4, #4]
 2836 0012 881A     		subs	r0, r1, r2
 2837              	.LVL264:
3312:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 2838              		.loc 1 3312 0
 2839 0014 2B68     		ldr	r3, [r5]
 2840 0016 B3F1FF3F 		cmp	r3, #-1
 2841 001a 18D0     		beq	.L266
3322:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 2842              		.loc 1 3322 0
 2843 001c 2768     		ldr	r7, [r4]
 2844 001e 0E4E     		ldr	r6, .L268
 2845 0020 D6F8F860 		ldr	r6, [r6, #248]
 2846 0024 B742     		cmp	r7, r6
 2847 0026 05D0     		beq	.L264
3322:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 2848              		.loc 1 3322 0 is_stmt 0 discriminator 1
 2849 0028 9142     		cmp	r1, r2
 2850 002a 03D3     		bcc	.L264
 2851              	.LVL265:
3330:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 2852              		.loc 1 3330 0 is_stmt 1
 2853 002c 0023     		movs	r3, #0
 2854 002e 2B60     		str	r3, [r5]
3329:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 155


 2855              		.loc 1 3329 0
 2856 0030 0124     		movs	r4, #1
 2857              	.LVL266:
3330:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 2858              		.loc 1 3330 0
 2859 0032 0DE0     		b	.L263
 2860              	.LVL267:
 2861              	.L264:
3332:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 2862              		.loc 1 3332 0
 2863 0034 9842     		cmp	r0, r3
 2864 0036 06D2     		bcs	.L265
3335:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 2865              		.loc 1 3335 0
 2866 0038 1B1A     		subs	r3, r3, r0
 2867 003a 2B60     		str	r3, [r5]
3336:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xReturn = pdFALSE;
 2868              		.loc 1 3336 0
 2869 003c 2046     		mov	r0, r4
 2870              	.LVL268:
 2871 003e FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2872              	.LVL269:
3337:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 2873              		.loc 1 3337 0
 2874 0042 0024     		movs	r4, #0
 2875              	.LVL270:
 2876 0044 04E0     		b	.L263
 2877              	.LVL271:
 2878              	.L265:
3341:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             xReturn = pdTRUE;
 2879              		.loc 1 3341 0
 2880 0046 0023     		movs	r3, #0
 2881 0048 2B60     		str	r3, [r5]
 2882              	.LVL272:
3342:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 2883              		.loc 1 3342 0
 2884 004a 0124     		movs	r4, #1
 2885              	.LVL273:
 2886 004c 00E0     		b	.L263
 2887              	.LVL274:
 2888              	.L266:
3317:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 2889              		.loc 1 3317 0
 2890 004e 0024     		movs	r4, #0
 2891              	.LVL275:
 2892              	.L263:
 2893              	.LBE48:
3345:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 2894              		.loc 1 3345 0
 2895 0050 FFF7FEFF 		bl	vPortExitCritical
 2896              	.LVL276:
3348:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 2897              		.loc 1 3348 0
 2898 0054 2046     		mov	r0, r4
 2899 0056 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2900              	.LVL277:
 2901              	.L269:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 156


 2902              		.align	2
 2903              	.L268:
 2904 0058 00000000 		.word	.LANCHOR0
 2905              		.cfi_endproc
 2906              	.LFE35:
 2907              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 2908              		.section	.text.vTaskMissedYield,"ax",%progbits
 2909              		.align	2
 2910              		.global	vTaskMissedYield
 2911              		.thumb
 2912              		.thumb_func
 2913              		.type	vTaskMissedYield, %function
 2914              	vTaskMissedYield:
 2915              	.LFB36:
3352:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     xYieldPending = pdTRUE;
 2916              		.loc 1 3352 0
 2917              		.cfi_startproc
 2918              		@ args = 0, pretend = 0, frame = 0
 2919              		@ frame_needed = 0, uses_anonymous_args = 0
 2920              		@ link register save eliminated.
3353:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** }
 2921              		.loc 1 3353 0
 2922 0000 0122     		movs	r2, #1
 2923 0002 024B     		ldr	r3, .L271
 2924 0004 C3F8FC20 		str	r2, [r3, #252]
 2925 0008 7047     		bx	lr
 2926              	.L272:
 2927 000a 00BF     		.align	2
 2928              	.L271:
 2929 000c 00000000 		.word	.LANCHOR0
 2930              		.cfi_endproc
 2931              	.LFE36:
 2932              		.size	vTaskMissedYield, .-vTaskMissedYield
 2933              		.section	.text.vTaskSetThreadLocalStoragePointer,"ax",%progbits
 2934              		.align	2
 2935              		.global	vTaskSetThreadLocalStoragePointer
 2936              		.thumb
 2937              		.thumb_func
 2938              		.type	vTaskSetThreadLocalStoragePointer, %function
 2939              	vTaskSetThreadLocalStoragePointer:
 2940              	.LFB38:
3577:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
 2941              		.loc 1 3577 0
 2942              		.cfi_startproc
 2943              		@ args = 0, pretend = 0, frame = 0
 2944              		@ frame_needed = 0, uses_anonymous_args = 0
 2945              		@ link register save eliminated.
 2946              	.LVL278:
3580:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 2947              		.loc 1 3580 0
 2948 0000 0429     		cmp	r1, #4
 2949 0002 07DC     		bgt	.L273
3582:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             configASSERT( pxTCB != NULL );
 2950              		.loc 1 3582 0
 2951 0004 10B9     		cbnz	r0, .L275
3582:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             configASSERT( pxTCB != NULL );
 2952              		.loc 1 3582 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 157


 2953 0006 044B     		ldr	r3, .L276
 2954 0008 D3F8D800 		ldr	r0, [r3, #216]
 2955              	.LVL279:
 2956              	.L275:
3584:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 2957              		.loc 1 3584 0 is_stmt 1 discriminator 4
 2958 000c 1031     		adds	r1, r1, #16
 2959              	.LVL280:
 2960 000e 00EB8101 		add	r1, r0, r1, lsl #2
 2961              	.LVL281:
 2962 0012 4A60     		str	r2, [r1, #4]
 2963              	.LVL282:
 2964              	.L273:
 2965 0014 7047     		bx	lr
 2966              	.L277:
 2967 0016 00BF     		.align	2
 2968              	.L276:
 2969 0018 00000000 		.word	.LANCHOR0
 2970              		.cfi_endproc
 2971              	.LFE38:
 2972              		.size	vTaskSetThreadLocalStoragePointer, .-vTaskSetThreadLocalStoragePointer
 2973              		.section	.text.pvTaskGetThreadLocalStoragePointer,"ax",%progbits
 2974              		.align	2
 2975              		.global	pvTaskGetThreadLocalStoragePointer
 2976              		.thumb
 2977              		.thumb_func
 2978              		.type	pvTaskGetThreadLocalStoragePointer, %function
 2979              	pvTaskGetThreadLocalStoragePointer:
 2980              	.LFB39:
3595:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         void * pvReturn = NULL;
 2981              		.loc 1 3595 0
 2982              		.cfi_startproc
 2983              		@ args = 0, pretend = 0, frame = 0
 2984              		@ frame_needed = 0, uses_anonymous_args = 0
 2985              		@ link register save eliminated.
 2986              	.LVL283:
3599:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 2987              		.loc 1 3599 0
 2988 0000 0429     		cmp	r1, #4
 2989 0002 08DC     		bgt	.L281
3601:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 2990              		.loc 1 3601 0
 2991 0004 10B9     		cbnz	r0, .L280
3601:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 2992              		.loc 1 3601 0 is_stmt 0 discriminator 1
 2993 0006 054B     		ldr	r3, .L282
 2994 0008 D3F8D800 		ldr	r0, [r3, #216]
 2995              	.LVL284:
 2996              	.L280:
3602:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 2997              		.loc 1 3602 0 is_stmt 1 discriminator 4
 2998 000c 1031     		adds	r1, r1, #16
 2999              	.LVL285:
 3000 000e 00EB8100 		add	r0, r0, r1, lsl #2
 3001              	.LVL286:
 3002 0012 4068     		ldr	r0, [r0, #4]
 3003              	.LVL287:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 158


 3004 0014 7047     		bx	lr
 3005              	.LVL288:
 3006              	.L281:
3606:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 3007              		.loc 1 3606 0
 3008 0016 0020     		movs	r0, #0
 3009              	.LVL289:
3610:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3010              		.loc 1 3610 0
 3011 0018 7047     		bx	lr
 3012              	.L283:
 3013 001a 00BF     		.align	2
 3014              	.L282:
 3015 001c 00000000 		.word	.LANCHOR0
 3016              		.cfi_endproc
 3017              	.LFE39:
 3018              		.size	pvTaskGetThreadLocalStoragePointer, .-pvTaskGetThreadLocalStoragePointer
 3019              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3020              		.align	2
 3021              		.global	xTaskGetCurrentTaskHandle
 3022              		.thumb
 3023              		.thumb_func
 3024              		.type	xTaskGetCurrentTaskHandle, %function
 3025              	xTaskGetCurrentTaskHandle:
 3026              	.LFB44:
3996:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TaskHandle_t xReturn;
 3027              		.loc 1 3996 0
 3028              		.cfi_startproc
 3029              		@ args = 0, pretend = 0, frame = 0
 3030              		@ frame_needed = 0, uses_anonymous_args = 0
 3031              		@ link register save eliminated.
4002:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3032              		.loc 1 4002 0
 3033 0000 014B     		ldr	r3, .L285
 3034 0002 D3F8D800 		ldr	r0, [r3, #216]
 3035              	.LVL290:
4005:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3036              		.loc 1 4005 0
 3037 0006 7047     		bx	lr
 3038              	.L286:
 3039              		.align	2
 3040              	.L285:
 3041 0008 00000000 		.word	.LANCHOR0
 3042              		.cfi_endproc
 3043              	.LFE44:
 3044              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 3045              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3046              		.align	2
 3047              		.global	xTaskGetSchedulerState
 3048              		.thumb
 3049              		.thumb_func
 3050              		.type	xTaskGetSchedulerState, %function
 3051              	xTaskGetSchedulerState:
 3052              	.LFB45:
4013:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn;
 3053              		.loc 1 4013 0
 3054              		.cfi_startproc
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 159


 3055              		@ args = 0, pretend = 0, frame = 0
 3056              		@ frame_needed = 0, uses_anonymous_args = 0
 3057              		@ link register save eliminated.
4016:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 3058              		.loc 1 4016 0
 3059 0000 064B     		ldr	r3, .L291
 3060 0002 D3F8DC30 		ldr	r3, [r3, #220]
 3061 0006 2BB1     		cbz	r3, .L289
4022:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 3062              		.loc 1 4022 0
 3063 0008 044B     		ldr	r3, .L291
 3064 000a D3F8F030 		ldr	r3, [r3, #240]
 3065 000e 1BB9     		cbnz	r3, .L290
4024:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 3066              		.loc 1 4024 0
 3067 0010 0220     		movs	r0, #2
 3068 0012 7047     		bx	lr
 3069              	.L289:
4018:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 3070              		.loc 1 4018 0
 3071 0014 0120     		movs	r0, #1
 3072 0016 7047     		bx	lr
 3073              	.L290:
4028:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 3074              		.loc 1 4028 0
 3075 0018 0020     		movs	r0, #0
 3076              	.LVL291:
4033:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3077              		.loc 1 4033 0
 3078 001a 7047     		bx	lr
 3079              	.L292:
 3080              		.align	2
 3081              	.L291:
 3082 001c 00000000 		.word	.LANCHOR0
 3083              		.cfi_endproc
 3084              	.LFE45:
 3085              		.size	xTaskGetSchedulerState, .-xTaskGetSchedulerState
 3086              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3087              		.align	2
 3088              		.global	uxTaskResetEventItemValue
 3089              		.thumb
 3090              		.thumb_func
 3091              		.type	uxTaskResetEventItemValue, %function
 3092              	uxTaskResetEventItemValue:
 3093              	.LFB46:
4636:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****     TickType_t uxReturn;
 3094              		.loc 1 4636 0
 3095              		.cfi_startproc
 3096              		@ args = 0, pretend = 0, frame = 0
 3097              		@ frame_needed = 0, uses_anonymous_args = 0
 3098              		@ link register save eliminated.
4639:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3099              		.loc 1 4639 0
 3100 0000 064B     		ldr	r3, .L294
 3101 0002 D3F8D820 		ldr	r2, [r3, #216]
 3102 0006 9069     		ldr	r0, [r2, #24]
 3103              	.LVL292:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 160


4643:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3104              		.loc 1 4643 0
 3105 0008 D3F8D820 		ldr	r2, [r3, #216]
 3106 000c D3F8D830 		ldr	r3, [r3, #216]
 3107 0010 DB6A     		ldr	r3, [r3, #44]
 3108 0012 C3F10503 		rsb	r3, r3, #5
 3109 0016 9361     		str	r3, [r2, #24]
4646:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 3110              		.loc 1 4646 0
 3111 0018 7047     		bx	lr
 3112              	.L295:
 3113 001a 00BF     		.align	2
 3114              	.L294:
 3115 001c 00000000 		.word	.LANCHOR0
 3116              		.cfi_endproc
 3117              	.LFE46:
 3118              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 3119              		.section	.text.ulTaskGenericNotifyTake,"ax",%progbits
 3120              		.align	2
 3121              		.global	ulTaskGenericNotifyTake
 3122              		.thumb
 3123              		.thumb_func
 3124              		.type	ulTaskGenericNotifyTake, %function
 3125              	ulTaskGenericNotifyTake:
 3126              	.LFB47:
4671:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uint32_t ulReturn;
 3127              		.loc 1 4671 0
 3128              		.cfi_startproc
 3129              		@ args = 0, pretend = 0, frame = 0
 3130              		@ frame_needed = 0, uses_anonymous_args = 0
 3131              	.LVL293:
 3132 0000 70B5     		push	{r4, r5, r6, lr}
 3133              		.cfi_def_cfa_offset 16
 3134              		.cfi_offset 4, -16
 3135              		.cfi_offset 5, -12
 3136              		.cfi_offset 6, -8
 3137              		.cfi_offset 14, -4
 3138 0002 0446     		mov	r4, r0
 3139 0004 0E46     		mov	r6, r1
 3140 0006 1546     		mov	r5, r2
4676:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 3141              		.loc 1 4676 0
 3142 0008 FFF7FEFF 		bl	vPortEnterCritical
 3143              	.LVL294:
4679:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 3144              		.loc 1 4679 0
 3145 000c 224B     		ldr	r3, .L301
 3146 000e D3F8D830 		ldr	r3, [r3, #216]
 3147 0012 04F11602 		add	r2, r4, #22
 3148 0016 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3149 001a 9BB9     		cbnz	r3, .L297
4682:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3150              		.loc 1 4682 0
 3151 001c 1E4B     		ldr	r3, .L301
 3152 001e D3F8D830 		ldr	r3, [r3, #216]
 3153 0022 2344     		add	r3, r3, r4
 3154 0024 0122     		movs	r2, #1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 161


 3155 0026 83F85C20 		strb	r2, [r3, #92]
4684:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 3156              		.loc 1 4684 0
 3157 002a 5DB1     		cbz	r5, .L297
4686:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
 3158              		.loc 1 4686 0
 3159 002c 1146     		mov	r1, r2
 3160 002e 2846     		mov	r0, r5
 3161 0030 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3162              	.LVL295:
4693:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 3163              		.loc 1 4693 0
 3164 0034 4FF08052 		mov	r2, #268435456
 3165 0038 184B     		ldr	r3, .L301+4
 3166 003a 1A60     		str	r2, [r3]
 3167              		.syntax unified
 3168              	@ 4693 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 3169 003c BFF34F8F 		dsb
 3170              	@ 0 "" 2
 3171              	@ 4693 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 3172 0040 BFF36F8F 		isb
 3173              	@ 0 "" 2
 3174              		.thumb
 3175              		.syntax unified
 3176              	.L297:
4705:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3177              		.loc 1 4705 0
 3178 0044 FFF7FEFF 		bl	vPortExitCritical
 3179              	.LVL296:
4707:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 3180              		.loc 1 4707 0
 3181 0048 FFF7FEFF 		bl	vPortEnterCritical
 3182              	.LVL297:
4710:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3183              		.loc 1 4710 0
 3184 004c 124B     		ldr	r3, .L301
 3185 004e D3F8D830 		ldr	r3, [r3, #216]
 3186 0052 04F11602 		add	r2, r4, #22
 3187 0056 53F82250 		ldr	r5, [r3, r2, lsl #2]
 3188              	.LVL298:
4712:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 3189              		.loc 1 4712 0
 3190 005a 8DB1     		cbz	r5, .L298
4714:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 3191              		.loc 1 4714 0
 3192 005c 46B1     		cbz	r6, .L299
4716:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 3193              		.loc 1 4716 0
 3194 005e 0E4B     		ldr	r3, .L301
 3195 0060 D3F8D820 		ldr	r2, [r3, #216]
 3196 0064 04F11603 		add	r3, r4, #22
 3197 0068 0021     		movs	r1, #0
 3198 006a 42F82310 		str	r1, [r2, r3, lsl #2]
 3199 006e 07E0     		b	.L298
 3200              	.L299:
4720:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 3201              		.loc 1 4720 0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 162


 3202 0070 094B     		ldr	r3, .L301
 3203 0072 D3F8D820 		ldr	r2, [r3, #216]
 3204 0076 6B1E     		subs	r3, r5, #1
 3205 0078 04F11601 		add	r1, r4, #22
 3206 007c 42F82130 		str	r3, [r2, r1, lsl #2]
 3207              	.L298:
4728:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 3208              		.loc 1 4728 0
 3209 0080 054B     		ldr	r3, .L301
 3210 0082 D3F8D830 		ldr	r3, [r3, #216]
 3211 0086 1C44     		add	r4, r4, r3
 3212              	.LVL299:
 3213 0088 0023     		movs	r3, #0
 3214 008a 84F85C30 		strb	r3, [r4, #92]
4730:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3215              		.loc 1 4730 0
 3216 008e FFF7FEFF 		bl	vPortExitCritical
 3217              	.LVL300:
4733:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3218              		.loc 1 4733 0
 3219 0092 2846     		mov	r0, r5
 3220 0094 70BD     		pop	{r4, r5, r6, pc}
 3221              	.LVL301:
 3222              	.L302:
 3223 0096 00BF     		.align	2
 3224              	.L301:
 3225 0098 00000000 		.word	.LANCHOR0
 3226 009c 04ED00E0 		.word	-536810236
 3227              		.cfi_endproc
 3228              	.LFE47:
 3229              		.size	ulTaskGenericNotifyTake, .-ulTaskGenericNotifyTake
 3230              		.section	.text.xTaskGenericNotifyWait,"ax",%progbits
 3231              		.align	2
 3232              		.global	xTaskGenericNotifyWait
 3233              		.thumb
 3234              		.thumb_func
 3235              		.type	xTaskGenericNotifyWait, %function
 3236              	xTaskGenericNotifyWait:
 3237              	.LFB48:
4745:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn;
 3238              		.loc 1 4745 0
 3239              		.cfi_startproc
 3240              		@ args = 4, pretend = 0, frame = 0
 3241              		@ frame_needed = 0, uses_anonymous_args = 0
 3242              	.LVL302:
 3243 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3244              		.cfi_def_cfa_offset 24
 3245              		.cfi_offset 3, -24
 3246              		.cfi_offset 4, -20
 3247              		.cfi_offset 5, -16
 3248              		.cfi_offset 6, -12
 3249              		.cfi_offset 7, -8
 3250              		.cfi_offset 14, -4
 3251 0002 0446     		mov	r4, r0
 3252 0004 0F46     		mov	r7, r1
 3253 0006 1546     		mov	r5, r2
 3254 0008 1E46     		mov	r6, r3
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 163


4750:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 3255              		.loc 1 4750 0
 3256 000a FFF7FEFF 		bl	vPortEnterCritical
 3257              	.LVL303:
4753:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 3258              		.loc 1 4753 0
 3259 000e 2B4B     		ldr	r3, .L309
 3260 0010 D3F8D830 		ldr	r3, [r3, #216]
 3261 0014 2344     		add	r3, r3, r4
 3262 0016 93F85C30 		ldrb	r3, [r3, #92]	@ zero_extendqisi2
 3263 001a DBB2     		uxtb	r3, r3
 3264 001c 022B     		cmp	r3, #2
 3265 001e 1ED0     		beq	.L304
4758:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3266              		.loc 1 4758 0
 3267 0020 264B     		ldr	r3, .L309
 3268 0022 D3F8D820 		ldr	r2, [r3, #216]
 3269 0026 04F11600 		add	r0, r4, #22
 3270 002a 52F82010 		ldr	r1, [r2, r0, lsl #2]
 3271 002e 21EA0701 		bic	r1, r1, r7
 3272 0032 42F82010 		str	r1, [r2, r0, lsl #2]
4761:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3273              		.loc 1 4761 0
 3274 0036 D3F8D830 		ldr	r3, [r3, #216]
 3275 003a 2344     		add	r3, r3, r4
 3276 003c 0122     		movs	r2, #1
 3277 003e 83F85C20 		strb	r2, [r3, #92]
4763:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 3278              		.loc 1 4763 0
 3279 0042 069B     		ldr	r3, [sp, #24]
 3280 0044 5BB1     		cbz	r3, .L304
4765:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
 3281              		.loc 1 4765 0
 3282 0046 1146     		mov	r1, r2
 3283 0048 1846     		mov	r0, r3
 3284 004a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3285              	.LVL304:
4772:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 3286              		.loc 1 4772 0
 3287 004e 4FF08052 		mov	r2, #268435456
 3288 0052 1B4B     		ldr	r3, .L309+4
 3289 0054 1A60     		str	r2, [r3]
 3290              		.syntax unified
 3291              	@ 4772 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 3292 0056 BFF34F8F 		dsb
 3293              	@ 0 "" 2
 3294              	@ 4772 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 3295 005a BFF36F8F 		isb
 3296              	@ 0 "" 2
 3297              		.thumb
 3298              		.syntax unified
 3299              	.L304:
4784:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3300              		.loc 1 4784 0
 3301 005e FFF7FEFF 		bl	vPortExitCritical
 3302              	.LVL305:
4786:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 164


 3303              		.loc 1 4786 0
 3304 0062 FFF7FEFF 		bl	vPortEnterCritical
 3305              	.LVL306:
4790:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 3306              		.loc 1 4790 0
 3307 0066 3EB1     		cbz	r6, .L305
4794:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 3308              		.loc 1 4794 0
 3309 0068 144B     		ldr	r3, .L309
 3310 006a D3F8D830 		ldr	r3, [r3, #216]
 3311 006e 04F11602 		add	r2, r4, #22
 3312 0072 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3313 0076 3360     		str	r3, [r6]
 3314              	.L305:
4801:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 3315              		.loc 1 4801 0
 3316 0078 104B     		ldr	r3, .L309
 3317 007a D3F8D830 		ldr	r3, [r3, #216]
 3318 007e 2344     		add	r3, r3, r4
 3319 0080 93F85C30 		ldrb	r3, [r3, #92]	@ zero_extendqisi2
 3320 0084 DBB2     		uxtb	r3, r3
 3321 0086 022B     		cmp	r3, #2
 3322 0088 0CD1     		bne	.L307
4810:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 xReturn = pdTRUE;
 3323              		.loc 1 4810 0
 3324 008a 0C4B     		ldr	r3, .L309
 3325 008c D3F8D820 		ldr	r2, [r3, #216]
 3326 0090 04F11601 		add	r1, r4, #22
 3327 0094 52F82130 		ldr	r3, [r2, r1, lsl #2]
 3328 0098 23EA0505 		bic	r5, r3, r5
 3329              	.LVL307:
 3330 009c 42F82150 		str	r5, [r2, r1, lsl #2]
 3331              	.LVL308:
4811:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 3332              		.loc 1 4811 0
 3333 00a0 0125     		movs	r5, #1
 3334 00a2 00E0     		b	.L306
 3335              	.LVL309:
 3336              	.L307:
4804:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 3337              		.loc 1 4804 0
 3338 00a4 0025     		movs	r5, #0
 3339              	.LVL310:
 3340              	.L306:
4814:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 3341              		.loc 1 4814 0
 3342 00a6 054B     		ldr	r3, .L309
 3343 00a8 D3F8D830 		ldr	r3, [r3, #216]
 3344 00ac 1C44     		add	r4, r4, r3
 3345              	.LVL311:
 3346 00ae 0023     		movs	r3, #0
 3347 00b0 84F85C30 		strb	r3, [r4, #92]
4816:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3348              		.loc 1 4816 0
 3349 00b4 FFF7FEFF 		bl	vPortExitCritical
 3350              	.LVL312:
4819:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 165


 3351              		.loc 1 4819 0
 3352 00b8 2846     		mov	r0, r5
 3353 00ba F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3354              	.LVL313:
 3355              	.L310:
 3356              		.align	2
 3357              	.L309:
 3358 00bc 00000000 		.word	.LANCHOR0
 3359 00c0 04ED00E0 		.word	-536810236
 3360              		.cfi_endproc
 3361              	.LFE48:
 3362              		.size	xTaskGenericNotifyWait, .-xTaskGenericNotifyWait
 3363              		.section	.text.xTaskGenericNotify,"ax",%progbits
 3364              		.align	2
 3365              		.global	xTaskGenericNotify
 3366              		.thumb
 3367              		.thumb_func
 3368              		.type	xTaskGenericNotify, %function
 3369              	xTaskGenericNotify:
 3370              	.LFB49:
4831:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
 3371              		.loc 1 4831 0
 3372              		.cfi_startproc
 3373              		@ args = 4, pretend = 0, frame = 0
 3374              		@ frame_needed = 0, uses_anonymous_args = 0
 3375              	.LVL314:
 3376 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3377              		.cfi_def_cfa_offset 24
 3378              		.cfi_offset 4, -24
 3379              		.cfi_offset 5, -20
 3380              		.cfi_offset 6, -16
 3381              		.cfi_offset 7, -12
 3382              		.cfi_offset 8, -8
 3383              		.cfi_offset 14, -4
 3384 0004 0646     		mov	r6, r0
 3385 0006 0C46     		mov	r4, r1
 3386 0008 1746     		mov	r7, r2
 3387 000a 1D46     		mov	r5, r3
 3388 000c DDF81880 		ldr	r8, [sp, #24]
 3389              	.LVL315:
4840:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 3390              		.loc 1 4840 0
 3391 0010 FFF7FEFF 		bl	vPortEnterCritical
 3392              	.LVL316:
4842:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 3393              		.loc 1 4842 0
 3394 0014 B8F1000F 		cmp	r8, #0
 3395 0018 05D0     		beq	.L312
4844:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 3396              		.loc 1 4844 0
 3397 001a 04F11603 		add	r3, r4, #22
 3398 001e 56F82330 		ldr	r3, [r6, r3, lsl #2]
 3399 0022 C8F80030 		str	r3, [r8]
 3400              	.L312:
4847:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3401              		.loc 1 4847 0
 3402 0026 3319     		adds	r3, r6, r4
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 166


 3403 0028 93F85C10 		ldrb	r1, [r3, #92]	@ zero_extendqisi2
 3404 002c C9B2     		uxtb	r1, r1
 3405              	.LVL317:
4849:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3406              		.loc 1 4849 0
 3407 002e 0222     		movs	r2, #2
 3408 0030 83F85C20 		strb	r2, [r3, #92]
4851:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 3409              		.loc 1 4851 0
 3410 0034 6B1E     		subs	r3, r5, #1
 3411 0036 032B     		cmp	r3, #3
 3412 0038 1FD8     		bhi	.L321
 3413 003a DFE803F0 		tbb	[pc, r3]
 3414              	.L315:
 3415 003e 02       		.byte	(.L314-.L315)/2
 3416 003f 0A       		.byte	(.L316-.L315)/2
 3417 0040 12       		.byte	(.L317-.L315)/2
 3418 0041 17       		.byte	(.L318-.L315)/2
 3419              		.p2align 1
 3420              	.L314:
4854:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
 3421              		.loc 1 4854 0
 3422 0042 1634     		adds	r4, r4, #22
 3423              	.LVL318:
 3424 0044 56F82430 		ldr	r3, [r6, r4, lsl #2]
 3425 0048 1F43     		orrs	r7, r7, r3
 3426              	.LVL319:
 3427 004a 46F82470 		str	r7, [r6, r4, lsl #2]
4833:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uint8_t ucOriginalNotifyState;
 3428              		.loc 1 4833 0
 3429 004e 0124     		movs	r4, #1
 3430              	.LVL320:
4855:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3431              		.loc 1 4855 0
 3432 0050 16E0     		b	.L313
 3433              	.LVL321:
 3434              	.L316:
4858:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
 3435              		.loc 1 4858 0
 3436 0052 1634     		adds	r4, r4, #22
 3437              	.LVL322:
 3438 0054 56F82430 		ldr	r3, [r6, r4, lsl #2]
 3439 0058 0133     		adds	r3, r3, #1
 3440 005a 46F82430 		str	r3, [r6, r4, lsl #2]
4833:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uint8_t ucOriginalNotifyState;
 3441              		.loc 1 4833 0
 3442 005e 0124     		movs	r4, #1
 3443              	.LVL323:
4859:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3444              		.loc 1 4859 0
 3445 0060 0EE0     		b	.L313
 3446              	.LVL324:
 3447              	.L317:
4862:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
 3448              		.loc 1 4862 0
 3449 0062 1634     		adds	r4, r4, #22
 3450              	.LVL325:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 167


 3451 0064 46F82470 		str	r7, [r6, r4, lsl #2]
4833:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uint8_t ucOriginalNotifyState;
 3452              		.loc 1 4833 0
 3453 0068 0124     		movs	r4, #1
 3454              	.LVL326:
4863:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3455              		.loc 1 4863 0
 3456 006a 09E0     		b	.L313
 3457              	.LVL327:
 3458              	.L318:
4867:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
 3459              		.loc 1 4867 0
 3460 006c 0229     		cmp	r1, #2
 3461 006e 06D0     		beq	.L322
4869:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
 3462              		.loc 1 4869 0
 3463 0070 1634     		adds	r4, r4, #22
 3464              	.LVL328:
 3465 0072 46F82470 		str	r7, [r6, r4, lsl #2]
4833:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         uint8_t ucOriginalNotifyState;
 3466              		.loc 1 4833 0
 3467 0076 0124     		movs	r4, #1
 3468              	.LVL329:
 3469 0078 02E0     		b	.L313
 3470              	.LVL330:
 3471              	.L321:
 3472 007a 0124     		movs	r4, #1
 3473              	.LVL331:
 3474 007c 00E0     		b	.L313
 3475              	.LVL332:
 3476              	.L322:
4874:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
 3477              		.loc 1 4874 0
 3478 007e 0024     		movs	r4, #0
 3479              	.LVL333:
 3480              	.L313:
4899:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 3481              		.loc 1 4899 0
 3482 0080 0129     		cmp	r1, #1
 3483 0082 24D1     		bne	.L319
4901:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 3484              		.loc 1 4901 0
 3485 0084 371D     		adds	r7, r6, #4
 3486 0086 3846     		mov	r0, r7
 3487 0088 FFF7FEFF 		bl	uxListRemove
 3488              	.LVL334:
4902:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3489              		.loc 1 4902 0
 3490 008c F36A     		ldr	r3, [r6, #44]
 3491 008e 124A     		ldr	r2, .L324
 3492 0090 D2F8E420 		ldr	r2, [r2, #228]
 3493 0094 9342     		cmp	r3, r2
 3494 0096 02D9     		bls	.L320
4902:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3495              		.loc 1 4902 0 is_stmt 0 discriminator 1
 3496 0098 0F4A     		ldr	r2, .L324
 3497 009a C2F8E430 		str	r3, [r2, #228]
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 168


 3498              	.L320:
4902:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3499              		.loc 1 4902 0 discriminator 3
 3500 009e 0E4D     		ldr	r5, .L324
 3501 00a0 05F13000 		add	r0, r5, #48
 3502 00a4 03EB8303 		add	r3, r3, r3, lsl #2
 3503 00a8 9A00     		lsls	r2, r3, #2
 3504 00aa 3946     		mov	r1, r7
 3505 00ac 1044     		add	r0, r0, r2
 3506 00ae FFF7FEFF 		bl	vListInsertEnd
 3507              	.LVL335:
4923:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 3508              		.loc 1 4923 0 is_stmt 1 discriminator 3
 3509 00b2 F26A     		ldr	r2, [r6, #44]
 3510 00b4 D5F8D830 		ldr	r3, [r5, #216]
 3511 00b8 DB6A     		ldr	r3, [r3, #44]
 3512 00ba 9A42     		cmp	r2, r3
 3513 00bc 07D9     		bls	.L319
4927:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 3514              		.loc 1 4927 0
 3515 00be 4FF08052 		mov	r2, #268435456
 3516 00c2 064B     		ldr	r3, .L324+4
 3517 00c4 1A60     		str	r2, [r3]
 3518              		.syntax unified
 3519              	@ 4927 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 3520 00c6 BFF34F8F 		dsb
 3521              	@ 0 "" 2
 3522              	@ 4927 "..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source\tasks.c" 1
 3523 00ca BFF36F8F 		isb
 3524              	@ 0 "" 2
 3525              		.thumb
 3526              		.syntax unified
 3527              	.L319:
4939:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3528              		.loc 1 4939 0
 3529 00ce FFF7FEFF 		bl	vPortExitCritical
 3530              	.LVL336:
4942:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3531              		.loc 1 4942 0
 3532 00d2 2046     		mov	r0, r4
 3533 00d4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3534              	.LVL337:
 3535              	.L325:
 3536              		.align	2
 3537              	.L324:
 3538 00d8 00000000 		.word	.LANCHOR0
 3539 00dc 04ED00E0 		.word	-536810236
 3540              		.cfi_endproc
 3541              	.LFE49:
 3542              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 3543              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 3544              		.align	2
 3545              		.global	xTaskGenericNotifyFromISR
 3546              		.thumb
 3547              		.thumb_func
 3548              		.type	xTaskGenericNotifyFromISR, %function
 3549              	xTaskGenericNotifyFromISR:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 169


 3550              	.LFB50:
4955:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
 3551              		.loc 1 4955 0
 3552              		.cfi_startproc
 3553              		@ args = 8, pretend = 0, frame = 0
 3554              		@ frame_needed = 0, uses_anonymous_args = 0
 3555              	.LVL338:
 3556 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3557              		.cfi_def_cfa_offset 24
 3558              		.cfi_offset 3, -24
 3559              		.cfi_offset 4, -20
 3560              		.cfi_offset 5, -16
 3561              		.cfi_offset 6, -12
 3562              		.cfi_offset 7, -8
 3563              		.cfi_offset 14, -4
 3564 0002 069C     		ldr	r4, [sp, #24]
 3565              	.LVL339:
 3566              	.LBB49:
 3567              	.LBB50:
 215:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         (
 3568              		.loc 2 215 0
 3569              		.syntax unified
 3570              	@ 215 "C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 3571 0004 EFF31186 			mrs r6, basepri											
 3572 0008 4FF00405 		mov r5, #4												
 3573 000c 85F31188 		msr basepri, r5											
 3574 0010 BFF36F8F 		isb														
 3575 0014 BFF34F8F 		dsb														
 3576              	
 3577              	@ 0 "" 2
 3578              		.thumb
 3579              		.syntax unified
 3580              	.LBE50:
 3581              	.LBE49:
4986:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 3582              		.loc 1 4986 0
 3583 0018 24B1     		cbz	r4, .L327
4988:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 3584              		.loc 1 4988 0
 3585 001a 01F11605 		add	r5, r1, #22
 3586 001e 50F82550 		ldr	r5, [r0, r5, lsl #2]
 3587 0022 2560     		str	r5, [r4]
 3588              	.L327:
4991:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 3589              		.loc 1 4991 0
 3590 0024 4518     		adds	r5, r0, r1
 3591 0026 95F85C40 		ldrb	r4, [r5, #92]	@ zero_extendqisi2
 3592 002a E4B2     		uxtb	r4, r4
 3593              	.LVL340:
4992:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3594              		.loc 1 4992 0
 3595 002c 0227     		movs	r7, #2
 3596 002e 85F85C70 		strb	r7, [r5, #92]
4994:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 3597              		.loc 1 4994 0
 3598 0032 013B     		subs	r3, r3, #1
 3599              	.LVL341:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 170


 3600 0034 032B     		cmp	r3, #3
 3601 0036 1FD8     		bhi	.L339
 3602 0038 DFE803F0 		tbb	[pc, r3]
 3603              	.L330:
 3604 003c 02       		.byte	(.L329-.L330)/2
 3605 003d 0A       		.byte	(.L331-.L330)/2
 3606 003e 12       		.byte	(.L332-.L330)/2
 3607 003f 17       		.byte	(.L333-.L330)/2
 3608              		.p2align 1
 3609              	.L329:
4997:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
 3610              		.loc 1 4997 0
 3611 0040 1631     		adds	r1, r1, #22
 3612              	.LVL342:
 3613 0042 50F82130 		ldr	r3, [r0, r1, lsl #2]
 3614 0046 1A43     		orrs	r2, r2, r3
 3615              	.LVL343:
 3616 0048 40F82120 		str	r2, [r0, r1, lsl #2]
4958:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 3617              		.loc 1 4958 0
 3618 004c 0125     		movs	r5, #1
4998:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3619              		.loc 1 4998 0
 3620 004e 16E0     		b	.L328
 3621              	.LVL344:
 3622              	.L331:
5001:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
 3623              		.loc 1 5001 0
 3624 0050 1631     		adds	r1, r1, #22
 3625              	.LVL345:
 3626 0052 50F82130 		ldr	r3, [r0, r1, lsl #2]
 3627 0056 0133     		adds	r3, r3, #1
 3628 0058 40F82130 		str	r3, [r0, r1, lsl #2]
4958:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 3629              		.loc 1 4958 0
 3630 005c 0125     		movs	r5, #1
5002:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3631              		.loc 1 5002 0
 3632 005e 0EE0     		b	.L328
 3633              	.LVL346:
 3634              	.L332:
5005:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     break;
 3635              		.loc 1 5005 0
 3636 0060 1631     		adds	r1, r1, #22
 3637              	.LVL347:
 3638 0062 40F82120 		str	r2, [r0, r1, lsl #2]
4958:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 3639              		.loc 1 4958 0
 3640 0066 0125     		movs	r5, #1
5006:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3641              		.loc 1 5006 0
 3642 0068 09E0     		b	.L328
 3643              	.LVL348:
 3644              	.L333:
5010:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
 3645              		.loc 1 5010 0
 3646 006a 022C     		cmp	r4, #2
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 171


 3647 006c 06D0     		beq	.L340
5012:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
 3648              		.loc 1 5012 0
 3649 006e 1631     		adds	r1, r1, #22
 3650              	.LVL349:
 3651 0070 40F82120 		str	r2, [r0, r1, lsl #2]
4958:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 3652              		.loc 1 4958 0
 3653 0074 0125     		movs	r5, #1
 3654 0076 02E0     		b	.L328
 3655              	.LVL350:
 3656              	.L339:
 3657 0078 0125     		movs	r5, #1
 3658 007a 00E0     		b	.L328
 3659              	.L340:
5017:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
 3660              		.loc 1 5017 0
 3661 007c 0025     		movs	r5, #0
 3662              	.LVL351:
 3663              	.L328:
5041:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 3664              		.loc 1 5041 0
 3665 007e 012C     		cmp	r4, #1
 3666 0080 2FD1     		bne	.L334
 3667 0082 0446     		mov	r4, r0
 3668              	.LVL352:
5046:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 3669              		.loc 1 5046 0
 3670 0084 194B     		ldr	r3, .L342
 3671 0086 D3F8F030 		ldr	r3, [r3, #240]
 3672 008a ABB9     		cbnz	r3, .L335
5048:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3673              		.loc 1 5048 0
 3674 008c 071D     		adds	r7, r0, #4
 3675 008e 3846     		mov	r0, r7
 3676              	.LVL353:
 3677 0090 FFF7FEFF 		bl	uxListRemove
 3678              	.LVL354:
5049:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 3679              		.loc 1 5049 0
 3680 0094 E36A     		ldr	r3, [r4, #44]
 3681 0096 154A     		ldr	r2, .L342
 3682 0098 D2F8E420 		ldr	r2, [r2, #228]
 3683 009c 9342     		cmp	r3, r2
 3684 009e 02D9     		bls	.L336
5049:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 3685              		.loc 1 5049 0 is_stmt 0 discriminator 1
 3686 00a0 124A     		ldr	r2, .L342
 3687 00a2 C2F8E430 		str	r3, [r2, #228]
 3688              	.L336:
5049:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 3689              		.loc 1 5049 0 discriminator 3
 3690 00a6 03EB8303 		add	r3, r3, r3, lsl #2
 3691 00aa 9A00     		lsls	r2, r3, #2
 3692 00ac 3946     		mov	r1, r7
 3693 00ae 1048     		ldr	r0, .L342+4
 3694 00b0 1044     		add	r0, r0, r2
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 172


 3695 00b2 FFF7FEFF 		bl	vListInsertEnd
 3696              	.LVL355:
 3697 00b6 04E0     		b	.L337
 3698              	.LVL356:
 3699              	.L335:
5055:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 3700              		.loc 1 5055 0 is_stmt 1
 3701 00b8 00F11801 		add	r1, r0, #24
 3702 00bc 0D48     		ldr	r0, .L342+8
 3703              	.LVL357:
 3704 00be FFF7FEFF 		bl	vListInsertEnd
 3705              	.LVL358:
 3706              	.L337:
5058:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 3707              		.loc 1 5058 0
 3708 00c2 E26A     		ldr	r2, [r4, #44]
 3709 00c4 094B     		ldr	r3, .L342
 3710 00c6 D3F8D830 		ldr	r3, [r3, #216]
 3711 00ca DB6A     		ldr	r3, [r3, #44]
 3712 00cc 9A42     		cmp	r2, r3
 3713 00ce 08D9     		bls	.L334
5062:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
 3714              		.loc 1 5062 0
 3715 00d0 079B     		ldr	r3, [sp, #28]
 3716 00d2 13B1     		cbz	r3, .L338
5064:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
 3717              		.loc 1 5064 0
 3718 00d4 0123     		movs	r3, #1
 3719 00d6 079A     		ldr	r2, [sp, #28]
 3720 00d8 1360     		str	r3, [r2]
 3721              	.L338:
5070:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 3722              		.loc 1 5070 0
 3723 00da 0122     		movs	r2, #1
 3724 00dc 034B     		ldr	r3, .L342
 3725 00de C3F8FC20 		str	r2, [r3, #252]
 3726              	.LVL359:
 3727              	.L334:
 3728              	.LBB51:
 3729              	.LBB52:
 3730              		.loc 2 233 0
 3731              		.syntax unified
 3732              	@ 233 "C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 3733 00e2 86F31188 			msr basepri, r6	
 3734              	@ 0 "" 2
 3735              	.LVL360:
 3736              		.thumb
 3737              		.syntax unified
 3738              	.LBE52:
 3739              	.LBE51:
5081:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3740              		.loc 1 5081 0
 3741 00e6 2846     		mov	r0, r5
 3742 00e8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3743              	.LVL361:
 3744              	.L343:
 3745 00ea 00BF     		.align	2
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 173


 3746              	.L342:
 3747 00ec 00000000 		.word	.LANCHOR0
 3748 00f0 30000000 		.word	.LANCHOR0+48
 3749 00f4 14000000 		.word	.LANCHOR0+20
 3750              		.cfi_endproc
 3751              	.LFE50:
 3752              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 3753              		.section	.text.vTaskGenericNotifyGiveFromISR,"ax",%progbits
 3754              		.align	2
 3755              		.global	vTaskGenericNotifyGiveFromISR
 3756              		.thumb
 3757              		.thumb_func
 3758              		.type	vTaskGenericNotifyGiveFromISR, %function
 3759              	vTaskGenericNotifyGiveFromISR:
 3760              	.LFB51:
5091:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
 3761              		.loc 1 5091 0
 3762              		.cfi_startproc
 3763              		@ args = 0, pretend = 0, frame = 0
 3764              		@ frame_needed = 0, uses_anonymous_args = 0
 3765              	.LVL362:
 3766 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3767              		.cfi_def_cfa_offset 24
 3768              		.cfi_offset 3, -24
 3769              		.cfi_offset 4, -20
 3770              		.cfi_offset 5, -16
 3771              		.cfi_offset 6, -12
 3772              		.cfi_offset 7, -8
 3773              		.cfi_offset 14, -4
 3774              	.LVL363:
 3775              	.LBB53:
 3776              	.LBB54:
 215:C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h ****         (
 3777              		.loc 2 215 0
 3778              		.syntax unified
 3779              	@ 215 "C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 3780 0002 EFF31185 			mrs r5, basepri											
 3781 0006 4FF00403 		mov r3, #4												
 3782 000a 83F31188 		msr basepri, r3											
 3783 000e BFF36F8F 		isb														
 3784 0012 BFF34F8F 		dsb														
 3785              	
 3786              	@ 0 "" 2
 3787              		.thumb
 3788              		.syntax unified
 3789              	.LBE54:
 3790              	.LBE53:
5121:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 3791              		.loc 1 5121 0
 3792 0016 4418     		adds	r4, r0, r1
 3793 0018 94F85C30 		ldrb	r3, [r4, #92]	@ zero_extendqisi2
 3794 001c DBB2     		uxtb	r3, r3
 3795              	.LVL364:
5122:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3796              		.loc 1 5122 0
 3797 001e 0226     		movs	r6, #2
 3798 0020 84F85C60 		strb	r6, [r4, #92]
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 174


5126:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3799              		.loc 1 5126 0
 3800 0024 1631     		adds	r1, r1, #22
 3801              	.LVL365:
 3802 0026 50F82140 		ldr	r4, [r0, r1, lsl #2]
 3803 002a 0134     		adds	r4, r4, #1
 3804 002c 40F82140 		str	r4, [r0, r1, lsl #2]
5132:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 3805              		.loc 1 5132 0
 3806 0030 012B     		cmp	r3, #1
 3807 0032 2ED1     		bne	.L345
 3808 0034 1446     		mov	r4, r2
 3809 0036 0646     		mov	r6, r0
5137:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 3810              		.loc 1 5137 0
 3811 0038 174B     		ldr	r3, .L351
 3812              	.LVL366:
 3813 003a D3F8F030 		ldr	r3, [r3, #240]
 3814 003e ABB9     		cbnz	r3, .L346
5139:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3815              		.loc 1 5139 0
 3816 0040 071D     		adds	r7, r0, #4
 3817 0042 3846     		mov	r0, r7
 3818              	.LVL367:
 3819 0044 FFF7FEFF 		bl	uxListRemove
 3820              	.LVL368:
5140:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 3821              		.loc 1 5140 0
 3822 0048 F36A     		ldr	r3, [r6, #44]
 3823 004a 134A     		ldr	r2, .L351
 3824 004c D2F8E420 		ldr	r2, [r2, #228]
 3825 0050 9342     		cmp	r3, r2
 3826 0052 02D9     		bls	.L347
5140:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 3827              		.loc 1 5140 0 is_stmt 0 discriminator 1
 3828 0054 104A     		ldr	r2, .L351
 3829 0056 C2F8E430 		str	r3, [r2, #228]
 3830              	.L347:
5140:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 3831              		.loc 1 5140 0 discriminator 3
 3832 005a 03EB8303 		add	r3, r3, r3, lsl #2
 3833 005e 9A00     		lsls	r2, r3, #2
 3834 0060 3946     		mov	r1, r7
 3835 0062 0E48     		ldr	r0, .L351+4
 3836 0064 1044     		add	r0, r0, r2
 3837 0066 FFF7FEFF 		bl	vListInsertEnd
 3838              	.LVL369:
 3839 006a 04E0     		b	.L348
 3840              	.LVL370:
 3841              	.L346:
5146:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 3842              		.loc 1 5146 0 is_stmt 1
 3843 006c 00F11801 		add	r1, r0, #24
 3844 0070 0B48     		ldr	r0, .L351+8
 3845              	.LVL371:
 3846 0072 FFF7FEFF 		bl	vListInsertEnd
 3847              	.LVL372:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 175


 3848              	.L348:
5149:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 {
 3849              		.loc 1 5149 0
 3850 0076 F26A     		ldr	r2, [r6, #44]
 3851 0078 074B     		ldr	r3, .L351
 3852 007a D3F8D830 		ldr	r3, [r3, #216]
 3853 007e DB6A     		ldr	r3, [r3, #44]
 3854 0080 9A42     		cmp	r2, r3
 3855 0082 06D9     		bls	.L345
5153:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     {
 3856              		.loc 1 5153 0
 3857 0084 0CB1     		cbz	r4, .L349
5155:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                     }
 3858              		.loc 1 5155 0
 3859 0086 0123     		movs	r3, #1
 3860 0088 2360     		str	r3, [r4]
 3861              	.L349:
5161:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 }
 3862              		.loc 1 5161 0
 3863 008a 0122     		movs	r2, #1
 3864 008c 024B     		ldr	r3, .L351
 3865 008e C3F8FC20 		str	r2, [r3, #252]
 3866              	.LVL373:
 3867              	.L345:
 3868              	.LBB55:
 3869              	.LBB56:
 3870              		.loc 2 233 0
 3871              		.syntax unified
 3872              	@ 233 "C:\FreeRTOS\FreeRTOS\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 3873 0092 85F31188 			msr basepri, r5	
 3874              	@ 0 "" 2
 3875              	.LVL374:
 3876              		.thumb
 3877              		.syntax unified
 3878 0096 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3879              	.L352:
 3880              		.align	2
 3881              	.L351:
 3882 0098 00000000 		.word	.LANCHOR0
 3883 009c 30000000 		.word	.LANCHOR0+48
 3884 00a0 14000000 		.word	.LANCHOR0+20
 3885              	.LBE56:
 3886              	.LBE55:
 3887              		.cfi_endproc
 3888              	.LFE51:
 3889              		.size	vTaskGenericNotifyGiveFromISR, .-vTaskGenericNotifyGiveFromISR
 3890              		.section	.text.xTaskGenericNotifyStateClear,"ax",%progbits
 3891              		.align	2
 3892              		.global	xTaskGenericNotifyStateClear
 3893              		.thumb
 3894              		.thumb_func
 3895              		.type	xTaskGenericNotifyStateClear, %function
 3896              	xTaskGenericNotifyStateClear:
 3897              	.LFB52:
5179:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
 3898              		.loc 1 5179 0
 3899              		.cfi_startproc
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 176


 3900              		@ args = 0, pretend = 0, frame = 0
 3901              		@ frame_needed = 0, uses_anonymous_args = 0
 3902              	.LVL375:
 3903 0000 38B5     		push	{r3, r4, r5, lr}
 3904              		.cfi_def_cfa_offset 16
 3905              		.cfi_offset 3, -16
 3906              		.cfi_offset 4, -12
 3907              		.cfi_offset 5, -8
 3908              		.cfi_offset 14, -4
 3909 0002 0C46     		mov	r4, r1
5187:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3910              		.loc 1 5187 0
 3911 0004 0546     		mov	r5, r0
 3912 0006 10B9     		cbnz	r0, .L354
5187:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3913              		.loc 1 5187 0 is_stmt 0 discriminator 1
 3914 0008 0A4B     		ldr	r3, .L358
 3915 000a D3F8D850 		ldr	r5, [r3, #216]
 3916              	.LVL376:
 3917              	.L354:
5189:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 3918              		.loc 1 5189 0 is_stmt 1 discriminator 4
 3919 000e FFF7FEFF 		bl	vPortEnterCritical
 3920              	.LVL377:
5191:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             {
 3921              		.loc 1 5191 0 discriminator 4
 3922 0012 2B19     		adds	r3, r5, r4
 3923 0014 93F85C30 		ldrb	r3, [r3, #92]	@ zero_extendqisi2
 3924 0018 DBB2     		uxtb	r3, r3
 3925 001a 022B     		cmp	r3, #2
 3926 001c 05D1     		bne	.L356
5193:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****                 xReturn = pdPASS;
 3927              		.loc 1 5193 0
 3928 001e 2C44     		add	r4, r4, r5
 3929              	.LVL378:
 3930 0020 0023     		movs	r3, #0
 3931 0022 84F85C30 		strb	r3, [r4, #92]
 3932              	.LVL379:
5194:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 3933              		.loc 1 5194 0
 3934 0026 0124     		movs	r4, #1
 3935 0028 00E0     		b	.L355
 3936              	.LVL380:
 3937              	.L356:
5198:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             }
 3938              		.loc 1 5198 0
 3939 002a 0024     		movs	r4, #0
 3940              	.LVL381:
 3941              	.L355:
5201:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3942              		.loc 1 5201 0
 3943 002c FFF7FEFF 		bl	vPortExitCritical
 3944              	.LVL382:
5204:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3945              		.loc 1 5204 0
 3946 0030 2046     		mov	r0, r4
 3947 0032 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 177


 3948              	.LVL383:
 3949              	.L359:
 3950              		.align	2
 3951              	.L358:
 3952 0034 00000000 		.word	.LANCHOR0
 3953              		.cfi_endproc
 3954              	.LFE52:
 3955              		.size	xTaskGenericNotifyStateClear, .-xTaskGenericNotifyStateClear
 3956              		.section	.text.ulTaskGenericNotifyValueClear,"ax",%progbits
 3957              		.align	2
 3958              		.global	ulTaskGenericNotifyValueClear
 3959              		.thumb
 3960              		.thumb_func
 3961              		.type	ulTaskGenericNotifyValueClear, %function
 3962              	ulTaskGenericNotifyValueClear:
 3963              	.LFB53:
5214:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
 3964              		.loc 1 5214 0
 3965              		.cfi_startproc
 3966              		@ args = 0, pretend = 0, frame = 0
 3967              		@ frame_needed = 0, uses_anonymous_args = 0
 3968              	.LVL384:
 3969 0000 70B5     		push	{r4, r5, r6, lr}
 3970              		.cfi_def_cfa_offset 16
 3971              		.cfi_offset 4, -16
 3972              		.cfi_offset 5, -12
 3973              		.cfi_offset 6, -8
 3974              		.cfi_offset 14, -4
 3975 0002 0C46     		mov	r4, r1
 3976 0004 1646     		mov	r6, r2
5220:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3977              		.loc 1 5220 0
 3978 0006 0546     		mov	r5, r0
 3979 0008 10B9     		cbnz	r0, .L361
5220:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3980              		.loc 1 5220 0 is_stmt 0 discriminator 1
 3981 000a 094B     		ldr	r3, .L363
 3982 000c D3F8D850 		ldr	r5, [r3, #216]
 3983              	.LVL385:
 3984              	.L361:
5222:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         {
 3985              		.loc 1 5222 0 is_stmt 1 discriminator 4
 3986 0010 FFF7FEFF 		bl	vPortEnterCritical
 3987              	.LVL386:
5226:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 3988              		.loc 1 5226 0 discriminator 4
 3989 0014 04F11601 		add	r1, r4, #22
 3990 0018 55F82140 		ldr	r4, [r5, r1, lsl #2]
 3991              	.LVL387:
5227:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c ****         }
 3992              		.loc 1 5227 0 discriminator 4
 3993 001c 55F82120 		ldr	r2, [r5, r1, lsl #2]
 3994 0020 22EA0602 		bic	r2, r2, r6
 3995 0024 45F82120 		str	r2, [r5, r1, lsl #2]
5229:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3996              		.loc 1 5229 0 discriminator 4
 3997 0028 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 178


 3998              	.LVL388:
5232:..\..\..\..\..\..\FreeRTOS\FreeRTOS\FreeRTOS\Source/tasks.c **** 
 3999              		.loc 1 5232 0 discriminator 4
 4000 002c 2046     		mov	r0, r4
 4001 002e 70BD     		pop	{r4, r5, r6, pc}
 4002              	.LVL389:
 4003              	.L364:
 4004              		.align	2
 4005              	.L363:
 4006 0030 00000000 		.word	.LANCHOR0
 4007              		.cfi_endproc
 4008              	.LFE53:
 4009              		.size	ulTaskGenericNotifyValueClear, .-ulTaskGenericNotifyValueClear
 4010              		.global	pxCurrentTCB
 4011              		.section	.rodata.str1.4,"aMS",%progbits,1
 4012              		.align	2
 4013              	.LC0:
 4014 0000 49444C45 		.ascii	"IDLE\000"
 4014      00
 4015              		.bss
 4016              		.align	2
 4017              		.set	.LANCHOR0,. + 0
 4018              		.type	xSuspendedTaskList, %object
 4019              		.size	xSuspendedTaskList, 20
 4020              	xSuspendedTaskList:
 4021 0000 00000000 		.space	20
 4021      00000000 
 4021      00000000 
 4021      00000000 
 4021      00000000 
 4022              		.type	xPendingReadyList, %object
 4023              		.size	xPendingReadyList, 20
 4024              	xPendingReadyList:
 4025 0014 00000000 		.space	20
 4025      00000000 
 4025      00000000 
 4025      00000000 
 4025      00000000 
 4026              		.type	pxDelayedTaskList, %object
 4027              		.size	pxDelayedTaskList, 4
 4028              	pxDelayedTaskList:
 4029 0028 00000000 		.space	4
 4030              		.type	xNextTaskUnblockTime, %object
 4031              		.size	xNextTaskUnblockTime, 4
 4032              	xNextTaskUnblockTime:
 4033 002c 00000000 		.space	4
 4034              		.type	pxReadyTasksLists, %object
 4035              		.size	pxReadyTasksLists, 100
 4036              	pxReadyTasksLists:
 4037 0030 00000000 		.space	100
 4037      00000000 
 4037      00000000 
 4037      00000000 
 4037      00000000 
 4038              		.type	xDelayedTaskList1, %object
 4039              		.size	xDelayedTaskList1, 20
 4040              	xDelayedTaskList1:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 179


 4041 0094 00000000 		.space	20
 4041      00000000 
 4041      00000000 
 4041      00000000 
 4041      00000000 
 4042              		.type	xDelayedTaskList2, %object
 4043              		.size	xDelayedTaskList2, 20
 4044              	xDelayedTaskList2:
 4045 00a8 00000000 		.space	20
 4045      00000000 
 4045      00000000 
 4045      00000000 
 4045      00000000 
 4046              		.type	xTasksWaitingTermination, %object
 4047              		.size	xTasksWaitingTermination, 20
 4048              	xTasksWaitingTermination:
 4049 00bc 00000000 		.space	20
 4049      00000000 
 4049      00000000 
 4049      00000000 
 4049      00000000 
 4050              		.type	pxOverflowDelayedTaskList, %object
 4051              		.size	pxOverflowDelayedTaskList, 4
 4052              	pxOverflowDelayedTaskList:
 4053 00d0 00000000 		.space	4
 4054              		.type	uxCurrentNumberOfTasks, %object
 4055              		.size	uxCurrentNumberOfTasks, 4
 4056              	uxCurrentNumberOfTasks:
 4057 00d4 00000000 		.space	4
 4058              		.type	pxCurrentTCB, %object
 4059              		.size	pxCurrentTCB, 4
 4060              	pxCurrentTCB:
 4061 00d8 00000000 		.space	4
 4062              		.type	xSchedulerRunning, %object
 4063              		.size	xSchedulerRunning, 4
 4064              	xSchedulerRunning:
 4065 00dc 00000000 		.space	4
 4066              		.type	uxTaskNumber, %object
 4067              		.size	uxTaskNumber, 4
 4068              	uxTaskNumber:
 4069 00e0 00000000 		.space	4
 4070              		.type	uxTopReadyPriority, %object
 4071              		.size	uxTopReadyPriority, 4
 4072              	uxTopReadyPriority:
 4073 00e4 00000000 		.space	4
 4074              		.type	uxDeletedTasksWaitingCleanUp, %object
 4075              		.size	uxDeletedTasksWaitingCleanUp, 4
 4076              	uxDeletedTasksWaitingCleanUp:
 4077 00e8 00000000 		.space	4
 4078              		.type	xTickCount, %object
 4079              		.size	xTickCount, 4
 4080              	xTickCount:
 4081 00ec 00000000 		.space	4
 4082              		.type	uxSchedulerSuspended, %object
 4083              		.size	uxSchedulerSuspended, 4
 4084              	uxSchedulerSuspended:
 4085 00f0 00000000 		.space	4
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 180


 4086              		.type	xIdleTaskHandle, %object
 4087              		.size	xIdleTaskHandle, 4
 4088              	xIdleTaskHandle:
 4089 00f4 00000000 		.space	4
 4090              		.type	xNumOfOverflows, %object
 4091              		.size	xNumOfOverflows, 4
 4092              	xNumOfOverflows:
 4093 00f8 00000000 		.space	4
 4094              		.type	xYieldPending, %object
 4095              		.size	xYieldPending, 4
 4096              	xYieldPending:
 4097 00fc 00000000 		.space	4
 4098              		.type	xPendedTicks, %object
 4099              		.size	xPendedTicks, 4
 4100              	xPendedTicks:
 4101 0100 00000000 		.space	4
 4102              		.text
 4103              	.Letext0:
 4104              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 4105              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 4106              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 4107              		.file 6 "C:\\FreeRTOS\\FreeRTOS\\FreeRTOS\\Source\\include/projdefs.h"
 4108              		.file 7 "C:\\FreeRTOS\\FreeRTOS\\FreeRTOS\\Source\\include/list.h"
 4109              		.file 8 "C:\\FreeRTOS\\FreeRTOS\\FreeRTOS\\Source\\include/task.h"
 4110              		.file 9 "C:\\FreeRTOS\\FreeRTOS\\FreeRTOS\\Source\\include/portable.h"
 4111              		.file 10 "C:\\FreeRTOS\\FreeRTOS\\FreeRTOS\\Source\\include/timers.h"
 4112              		.section	.debug_info,"",%progbits
 4113              	.Ldebug_info0:
 4114 0000 F51E0000 		.4byte	0x1ef5
 4115 0004 0400     		.2byte	0x4
 4116 0006 00000000 		.4byte	.Ldebug_abbrev0
 4117 000a 04       		.byte	0x4
 4118 000b 01       		.uleb128 0x1
 4119 000c 49040000 		.4byte	.LASF217
 4120 0010 0C       		.byte	0xc
 4121 0011 D7040000 		.4byte	.LASF218
 4122 0015 AA050000 		.4byte	.LASF219
 4123 0019 58000000 		.4byte	.Ldebug_ranges0+0x58
 4124 001d 00000000 		.4byte	0
 4125 0021 00000000 		.4byte	.Ldebug_line0
 4126 0025 02       		.uleb128 0x2
 4127 0026 21050000 		.4byte	.LASF4
 4128 002a 03       		.byte	0x3
 4129 002b D8       		.byte	0xd8
 4130 002c 30000000 		.4byte	0x30
 4131 0030 03       		.uleb128 0x3
 4132 0031 04       		.byte	0x4
 4133 0032 07       		.byte	0x7
 4134 0033 05010000 		.4byte	.LASF0
 4135 0037 04       		.uleb128 0x4
 4136 0038 04       		.byte	0x4
 4137 0039 05       		.byte	0x5
 4138 003a 696E7400 		.ascii	"int\000"
 4139 003e 03       		.uleb128 0x3
 4140 003f 08       		.byte	0x8
 4141 0040 05       		.byte	0x5
 4142 0041 3E080000 		.4byte	.LASF1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 181


 4143 0045 03       		.uleb128 0x3
 4144 0046 08       		.byte	0x8
 4145 0047 04       		.byte	0x4
 4146 0048 FD090000 		.4byte	.LASF2
 4147 004c 03       		.uleb128 0x3
 4148 004d 01       		.byte	0x1
 4149 004e 06       		.byte	0x6
 4150 004f 070E0000 		.4byte	.LASF3
 4151 0053 02       		.uleb128 0x2
 4152 0054 6E0B0000 		.4byte	.LASF5
 4153 0058 04       		.byte	0x4
 4154 0059 1D       		.byte	0x1d
 4155 005a 5E000000 		.4byte	0x5e
 4156 005e 03       		.uleb128 0x3
 4157 005f 01       		.byte	0x1
 4158 0060 08       		.byte	0x8
 4159 0061 6D0C0000 		.4byte	.LASF6
 4160 0065 03       		.uleb128 0x3
 4161 0066 02       		.byte	0x2
 4162 0067 05       		.byte	0x5
 4163 0068 760A0000 		.4byte	.LASF7
 4164 006c 02       		.uleb128 0x2
 4165 006d E8030000 		.4byte	.LASF8
 4166 0071 04       		.byte	0x4
 4167 0072 2B       		.byte	0x2b
 4168 0073 77000000 		.4byte	0x77
 4169 0077 03       		.uleb128 0x3
 4170 0078 02       		.byte	0x2
 4171 0079 07       		.byte	0x7
 4172 007a 130E0000 		.4byte	.LASF9
 4173 007e 03       		.uleb128 0x3
 4174 007f 04       		.byte	0x4
 4175 0080 05       		.byte	0x5
 4176 0081 AC0A0000 		.4byte	.LASF10
 4177 0085 02       		.uleb128 0x2
 4178 0086 9A0C0000 		.4byte	.LASF11
 4179 008a 04       		.byte	0x4
 4180 008b 41       		.byte	0x41
 4181 008c 90000000 		.4byte	0x90
 4182 0090 03       		.uleb128 0x3
 4183 0091 04       		.byte	0x4
 4184 0092 07       		.byte	0x7
 4185 0093 B60B0000 		.4byte	.LASF12
 4186 0097 03       		.uleb128 0x3
 4187 0098 08       		.byte	0x8
 4188 0099 07       		.byte	0x7
 4189 009a 70030000 		.4byte	.LASF13
 4190 009e 03       		.uleb128 0x3
 4191 009f 04       		.byte	0x4
 4192 00a0 07       		.byte	0x7
 4193 00a1 9C0B0000 		.4byte	.LASF14
 4194 00a5 05       		.uleb128 0x5
 4195 00a6 04       		.byte	0x4
 4196 00a7 06       		.uleb128 0x6
 4197 00a8 04       		.byte	0x4
 4198 00a9 AD000000 		.4byte	0xad
 4199 00ad 03       		.uleb128 0x3
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 182


 4200 00ae 01       		.byte	0x1
 4201 00af 08       		.byte	0x8
 4202 00b0 B4060000 		.4byte	.LASF15
 4203 00b4 06       		.uleb128 0x6
 4204 00b5 04       		.byte	0x4
 4205 00b6 BA000000 		.4byte	0xba
 4206 00ba 07       		.uleb128 0x7
 4207 00bb AD000000 		.4byte	0xad
 4208 00bf 02       		.uleb128 0x2
 4209 00c0 C6070000 		.4byte	.LASF16
 4210 00c4 05       		.byte	0x5
 4211 00c5 18       		.byte	0x18
 4212 00c6 53000000 		.4byte	0x53
 4213 00ca 02       		.uleb128 0x2
 4214 00cb 2E0A0000 		.4byte	.LASF17
 4215 00cf 05       		.byte	0x5
 4216 00d0 24       		.byte	0x24
 4217 00d1 6C000000 		.4byte	0x6c
 4218 00d5 02       		.uleb128 0x2
 4219 00d6 C6020000 		.4byte	.LASF18
 4220 00da 05       		.byte	0x5
 4221 00db 30       		.byte	0x30
 4222 00dc 85000000 		.4byte	0x85
 4223 00e0 02       		.uleb128 0x2
 4224 00e1 C8080000 		.4byte	.LASF19
 4225 00e5 06       		.byte	0x6
 4226 00e6 22       		.byte	0x22
 4227 00e7 EB000000 		.4byte	0xeb
 4228 00eb 06       		.uleb128 0x6
 4229 00ec 04       		.byte	0x4
 4230 00ed F1000000 		.4byte	0xf1
 4231 00f1 08       		.uleb128 0x8
 4232 00f2 FC000000 		.4byte	0xfc
 4233 00f6 09       		.uleb128 0x9
 4234 00f7 A5000000 		.4byte	0xa5
 4235 00fb 00       		.byte	0
 4236 00fc 02       		.uleb128 0x2
 4237 00fd 38010000 		.4byte	.LASF20
 4238 0101 02       		.byte	0x2
 4239 0102 37       		.byte	0x37
 4240 0103 D5000000 		.4byte	0xd5
 4241 0107 02       		.uleb128 0x2
 4242 0108 83080000 		.4byte	.LASF21
 4243 010c 02       		.byte	0x2
 4244 010d 38       		.byte	0x38
 4245 010e 7E000000 		.4byte	0x7e
 4246 0112 02       		.uleb128 0x2
 4247 0113 EB060000 		.4byte	.LASF22
 4248 0117 02       		.byte	0x2
 4249 0118 39       		.byte	0x39
 4250 0119 90000000 		.4byte	0x90
 4251 011d 02       		.uleb128 0x2
 4252 011e D5090000 		.4byte	.LASF23
 4253 0122 02       		.byte	0x2
 4254 0123 3F       		.byte	0x3f
 4255 0124 D5000000 		.4byte	0xd5
 4256 0128 0A       		.uleb128 0xa
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 183


 4257 0129 A5000000 		.4byte	0xa5
 4258 012d 38010000 		.4byte	0x138
 4259 0131 0B       		.uleb128 0xb
 4260 0132 9E000000 		.4byte	0x9e
 4261 0136 04       		.byte	0x4
 4262 0137 00       		.byte	0
 4263 0138 0C       		.uleb128 0xc
 4264 0139 87010000 		.4byte	.LASF29
 4265 013d 14       		.byte	0x14
 4266 013e 07       		.byte	0x7
 4267 013f 8E       		.byte	0x8e
 4268 0140 81010000 		.4byte	0x181
 4269 0144 0D       		.uleb128 0xd
 4270 0145 A10A0000 		.4byte	.LASF24
 4271 0149 07       		.byte	0x7
 4272 014a 91       		.byte	0x91
 4273 014b 1D010000 		.4byte	0x11d
 4274 014f 00       		.byte	0
 4275 0150 0D       		.uleb128 0xd
 4276 0151 D7080000 		.4byte	.LASF25
 4277 0155 07       		.byte	0x7
 4278 0156 92       		.byte	0x92
 4279 0157 81010000 		.4byte	0x181
 4280 015b 04       		.byte	0x4
 4281 015c 0D       		.uleb128 0xd
 4282 015d DD030000 		.4byte	.LASF26
 4283 0161 07       		.byte	0x7
 4284 0162 93       		.byte	0x93
 4285 0163 81010000 		.4byte	0x181
 4286 0167 08       		.byte	0x8
 4287 0168 0D       		.uleb128 0xd
 4288 0169 430D0000 		.4byte	.LASF27
 4289 016d 07       		.byte	0x7
 4290 016e 94       		.byte	0x94
 4291 016f A5000000 		.4byte	0xa5
 4292 0173 0C       		.byte	0xc
 4293 0174 0D       		.uleb128 0xd
 4294 0175 3C0C0000 		.4byte	.LASF28
 4295 0179 07       		.byte	0x7
 4296 017a 95       		.byte	0x95
 4297 017b B8010000 		.4byte	0x1b8
 4298 017f 10       		.byte	0x10
 4299 0180 00       		.byte	0
 4300 0181 06       		.uleb128 0x6
 4301 0182 04       		.byte	0x4
 4302 0183 38010000 		.4byte	0x138
 4303 0187 0C       		.uleb128 0xc
 4304 0188 4E050000 		.4byte	.LASF30
 4305 018c 14       		.byte	0x14
 4306 018d 07       		.byte	0x7
 4307 018e A6       		.byte	0xa6
 4308 018f B8010000 		.4byte	0x1b8
 4309 0193 0D       		.uleb128 0xd
 4310 0194 0B000000 		.4byte	.LASF31
 4311 0198 07       		.byte	0x7
 4312 0199 A9       		.byte	0xa9
 4313 019a 05020000 		.4byte	0x205
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 184


 4314 019e 00       		.byte	0
 4315 019f 0D       		.uleb128 0xd
 4316 01a0 30010000 		.4byte	.LASF32
 4317 01a4 07       		.byte	0x7
 4318 01a5 AA       		.byte	0xaa
 4319 01a6 0A020000 		.4byte	0x20a
 4320 01aa 04       		.byte	0x4
 4321 01ab 0D       		.uleb128 0xd
 4322 01ac 51070000 		.4byte	.LASF33
 4323 01b0 07       		.byte	0x7
 4324 01b1 AB       		.byte	0xab
 4325 01b2 FA010000 		.4byte	0x1fa
 4326 01b6 08       		.byte	0x8
 4327 01b7 00       		.byte	0
 4328 01b8 06       		.uleb128 0x6
 4329 01b9 04       		.byte	0x4
 4330 01ba 87010000 		.4byte	0x187
 4331 01be 02       		.uleb128 0x2
 4332 01bf B9060000 		.4byte	.LASF34
 4333 01c3 07       		.byte	0x7
 4334 01c4 98       		.byte	0x98
 4335 01c5 38010000 		.4byte	0x138
 4336 01c9 0C       		.uleb128 0xc
 4337 01ca 33050000 		.4byte	.LASF35
 4338 01ce 0C       		.byte	0xc
 4339 01cf 07       		.byte	0x7
 4340 01d0 9A       		.byte	0x9a
 4341 01d1 FA010000 		.4byte	0x1fa
 4342 01d5 0D       		.uleb128 0xd
 4343 01d6 A10A0000 		.4byte	.LASF24
 4344 01da 07       		.byte	0x7
 4345 01db 9D       		.byte	0x9d
 4346 01dc 1D010000 		.4byte	0x11d
 4347 01e0 00       		.byte	0
 4348 01e1 0D       		.uleb128 0xd
 4349 01e2 D7080000 		.4byte	.LASF25
 4350 01e6 07       		.byte	0x7
 4351 01e7 9E       		.byte	0x9e
 4352 01e8 81010000 		.4byte	0x181
 4353 01ec 04       		.byte	0x4
 4354 01ed 0D       		.uleb128 0xd
 4355 01ee DD030000 		.4byte	.LASF26
 4356 01f2 07       		.byte	0x7
 4357 01f3 9F       		.byte	0x9f
 4358 01f4 81010000 		.4byte	0x181
 4359 01f8 08       		.byte	0x8
 4360 01f9 00       		.byte	0
 4361 01fa 02       		.uleb128 0x2
 4362 01fb 92070000 		.4byte	.LASF36
 4363 01ff 07       		.byte	0x7
 4364 0200 A1       		.byte	0xa1
 4365 0201 C9010000 		.4byte	0x1c9
 4366 0205 0E       		.uleb128 0xe
 4367 0206 12010000 		.4byte	0x112
 4368 020a 06       		.uleb128 0x6
 4369 020b 04       		.byte	0x4
 4370 020c BE010000 		.4byte	0x1be
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 185


 4371 0210 02       		.uleb128 0x2
 4372 0211 C1090000 		.4byte	.LASF37
 4373 0215 07       		.byte	0x7
 4374 0216 AD       		.byte	0xad
 4375 0217 87010000 		.4byte	0x187
 4376 021b 02       		.uleb128 0x2
 4377 021c 72090000 		.4byte	.LASF38
 4378 0220 08       		.byte	0x8
 4379 0221 4E       		.byte	0x4e
 4380 0222 26020000 		.4byte	0x226
 4381 0226 06       		.uleb128 0x6
 4382 0227 04       		.byte	0x4
 4383 0228 2C020000 		.4byte	0x22c
 4384 022c 0C       		.uleb128 0xc
 4385 022d 58000000 		.4byte	.LASF39
 4386 0231 60       		.byte	0x60
 4387 0232 01       		.byte	0x1
 4388 0233 FD       		.byte	0xfd
 4389 0234 AD020000 		.4byte	0x2ad
 4390 0238 0D       		.uleb128 0xd
 4391 0239 790E0000 		.4byte	.LASF40
 4392 023d 01       		.byte	0x1
 4393 023e FF       		.byte	0xff
 4394 023f 5A030000 		.4byte	0x35a
 4395 0243 00       		.byte	0
 4396 0244 0F       		.uleb128 0xf
 4397 0245 320E0000 		.4byte	.LASF41
 4398 0249 01       		.byte	0x1
 4399 024a 0501     		.2byte	0x105
 4400 024c BE010000 		.4byte	0x1be
 4401 0250 04       		.byte	0x4
 4402 0251 0F       		.uleb128 0xf
 4403 0252 FB0C0000 		.4byte	.LASF42
 4404 0256 01       		.byte	0x1
 4405 0257 0601     		.2byte	0x106
 4406 0259 BE010000 		.4byte	0x1be
 4407 025d 18       		.byte	0x18
 4408 025e 0F       		.uleb128 0xf
 4409 025f 41000000 		.4byte	.LASF43
 4410 0263 01       		.byte	0x1
 4411 0264 0701     		.2byte	0x107
 4412 0266 12010000 		.4byte	0x112
 4413 026a 2C       		.byte	0x2c
 4414 026b 0F       		.uleb128 0xf
 4415 026c FD0A0000 		.4byte	.LASF44
 4416 0270 01       		.byte	0x1
 4417 0271 0801     		.2byte	0x108
 4418 0273 54030000 		.4byte	0x354
 4419 0277 30       		.byte	0x30
 4420 0278 0F       		.uleb128 0xf
 4421 0279 00000000 		.4byte	.LASF45
 4422 027d 01       		.byte	0x1
 4423 027e 0901     		.2byte	0x109
 4424 0280 65030000 		.4byte	0x365
 4425 0284 34       		.byte	0x34
 4426 0285 0F       		.uleb128 0xf
 4427 0286 2C040000 		.4byte	.LASF46
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 186


 4428 028a 01       		.byte	0x1
 4429 028b 2201     		.2byte	0x122
 4430 028d 28010000 		.4byte	0x128
 4431 0291 44       		.byte	0x44
 4432 0292 0F       		.uleb128 0xf
 4433 0293 50060000 		.4byte	.LASF47
 4434 0297 01       		.byte	0x1
 4435 0298 3901     		.2byte	0x139
 4436 029a 8A030000 		.4byte	0x38a
 4437 029e 58       		.byte	0x58
 4438 029f 0F       		.uleb128 0xf
 4439 02a0 CF020000 		.4byte	.LASF48
 4440 02a4 01       		.byte	0x1
 4441 02a5 3A01     		.2byte	0x13a
 4442 02a7 A4030000 		.4byte	0x3a4
 4443 02ab 5C       		.byte	0x5c
 4444 02ac 00       		.byte	0
 4445 02ad 10       		.uleb128 0x10
 4446 02ae 01       		.byte	0x1
 4447 02af 5E000000 		.4byte	0x5e
 4448 02b3 08       		.byte	0x8
 4449 02b4 63       		.byte	0x63
 4450 02b5 D8020000 		.4byte	0x2d8
 4451 02b9 11       		.uleb128 0x11
 4452 02ba E8000000 		.4byte	.LASF49
 4453 02be 00       		.byte	0
 4454 02bf 11       		.uleb128 0x11
 4455 02c0 F4090000 		.4byte	.LASF50
 4456 02c4 01       		.byte	0x1
 4457 02c5 11       		.uleb128 0x11
 4458 02c6 28050000 		.4byte	.LASF51
 4459 02ca 02       		.byte	0x2
 4460 02cb 11       		.uleb128 0x11
 4461 02cc 59030000 		.4byte	.LASF52
 4462 02d0 03       		.byte	0x3
 4463 02d1 11       		.uleb128 0x11
 4464 02d2 C4060000 		.4byte	.LASF53
 4465 02d6 04       		.byte	0x4
 4466 02d7 00       		.byte	0
 4467 02d8 02       		.uleb128 0x2
 4468 02d9 13050000 		.4byte	.LASF54
 4469 02dd 08       		.byte	0x8
 4470 02de 69       		.byte	0x69
 4471 02df AD020000 		.4byte	0x2ad
 4472 02e3 0C       		.uleb128 0xc
 4473 02e4 44010000 		.4byte	.LASF55
 4474 02e8 08       		.byte	0x8
 4475 02e9 08       		.byte	0x8
 4476 02ea 6E       		.byte	0x6e
 4477 02eb 08030000 		.4byte	0x308
 4478 02ef 0D       		.uleb128 0xd
 4479 02f0 1C020000 		.4byte	.LASF56
 4480 02f4 08       		.byte	0x8
 4481 02f5 70       		.byte	0x70
 4482 02f6 07010000 		.4byte	0x107
 4483 02fa 00       		.byte	0
 4484 02fb 0D       		.uleb128 0xd
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 187


 4485 02fc AA080000 		.4byte	.LASF57
 4486 0300 08       		.byte	0x8
 4487 0301 71       		.byte	0x71
 4488 0302 1D010000 		.4byte	0x11d
 4489 0306 04       		.byte	0x4
 4490 0307 00       		.byte	0
 4491 0308 02       		.uleb128 0x2
 4492 0309 3E090000 		.4byte	.LASF58
 4493 030d 08       		.byte	0x8
 4494 030e 72       		.byte	0x72
 4495 030f E3020000 		.4byte	0x2e3
 4496 0313 0C       		.uleb128 0xc
 4497 0314 1F0A0000 		.4byte	.LASF59
 4498 0318 0C       		.byte	0xc
 4499 0319 08       		.byte	0x8
 4500 031a 77       		.byte	0x77
 4501 031b 44030000 		.4byte	0x344
 4502 031f 0D       		.uleb128 0xd
 4503 0320 1B070000 		.4byte	.LASF60
 4504 0324 08       		.byte	0x8
 4505 0325 79       		.byte	0x79
 4506 0326 A5000000 		.4byte	0xa5
 4507 032a 00       		.byte	0
 4508 032b 0D       		.uleb128 0xd
 4509 032c 73080000 		.4byte	.LASF61
 4510 0330 08       		.byte	0x8
 4511 0331 7A       		.byte	0x7a
 4512 0332 D5000000 		.4byte	0xd5
 4513 0336 04       		.byte	0x4
 4514 0337 0D       		.uleb128 0xd
 4515 0338 50020000 		.4byte	.LASF62
 4516 033c 08       		.byte	0x8
 4517 033d 7B       		.byte	0x7b
 4518 033e D5000000 		.4byte	0xd5
 4519 0342 08       		.byte	0x8
 4520 0343 00       		.byte	0
 4521 0344 02       		.uleb128 0x2
 4522 0345 F1070000 		.4byte	.LASF63
 4523 0349 08       		.byte	0x8
 4524 034a 7C       		.byte	0x7c
 4525 034b 13030000 		.4byte	0x313
 4526 034f 07       		.uleb128 0x7
 4527 0350 B4000000 		.4byte	0xb4
 4528 0354 06       		.uleb128 0x6
 4529 0355 04       		.byte	0x4
 4530 0356 FC000000 		.4byte	0xfc
 4531 035a 06       		.uleb128 0x6
 4532 035b 04       		.byte	0x4
 4533 035c 60030000 		.4byte	0x360
 4534 0360 0E       		.uleb128 0xe
 4535 0361 FC000000 		.4byte	0xfc
 4536 0365 0A       		.uleb128 0xa
 4537 0366 AD000000 		.4byte	0xad
 4538 036a 75030000 		.4byte	0x375
 4539 036e 0B       		.uleb128 0xb
 4540 036f 9E000000 		.4byte	0x9e
 4541 0373 0F       		.byte	0xf
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 188


 4542 0374 00       		.byte	0
 4543 0375 0A       		.uleb128 0xa
 4544 0376 85030000 		.4byte	0x385
 4545 037a 85030000 		.4byte	0x385
 4546 037e 0B       		.uleb128 0xb
 4547 037f 9E000000 		.4byte	0x9e
 4548 0383 00       		.byte	0
 4549 0384 00       		.byte	0
 4550 0385 0E       		.uleb128 0xe
 4551 0386 D5000000 		.4byte	0xd5
 4552 038a 0E       		.uleb128 0xe
 4553 038b 75030000 		.4byte	0x375
 4554 038f 0A       		.uleb128 0xa
 4555 0390 9F030000 		.4byte	0x39f
 4556 0394 9F030000 		.4byte	0x39f
 4557 0398 0B       		.uleb128 0xb
 4558 0399 9E000000 		.4byte	0x9e
 4559 039d 00       		.byte	0
 4560 039e 00       		.byte	0
 4561 039f 0E       		.uleb128 0xe
 4562 03a0 BF000000 		.4byte	0xbf
 4563 03a4 0E       		.uleb128 0xe
 4564 03a5 8F030000 		.4byte	0x38f
 4565 03a9 12       		.uleb128 0x12
 4566 03aa A8020000 		.4byte	.LASF64
 4567 03ae 01       		.byte	0x1
 4568 03af 4A01     		.2byte	0x14a
 4569 03b1 2C020000 		.4byte	0x22c
 4570 03b5 12       		.uleb128 0x12
 4571 03b6 200D0000 		.4byte	.LASF65
 4572 03ba 01       		.byte	0x1
 4573 03bb 4E01     		.2byte	0x14e
 4574 03bd A9030000 		.4byte	0x3a9
 4575 03c1 13       		.uleb128 0x13
 4576 03c2 15080000 		.4byte	.LASF220
 4577 03c6 02       		.byte	0x2
 4578 03c7 D3       		.byte	0xd3
 4579 03c8 D5000000 		.4byte	0xd5
 4580 03cc 03       		.byte	0x3
 4581 03cd E8030000 		.4byte	0x3e8
 4582 03d1 14       		.uleb128 0x14
 4583 03d2 F9020000 		.4byte	.LASF66
 4584 03d6 02       		.byte	0x2
 4585 03d7 D5       		.byte	0xd5
 4586 03d8 D5000000 		.4byte	0xd5
 4587 03dc 14       		.uleb128 0x14
 4588 03dd DE060000 		.4byte	.LASF67
 4589 03e1 02       		.byte	0x2
 4590 03e2 D5       		.byte	0xd5
 4591 03e3 D5000000 		.4byte	0xd5
 4592 03e7 00       		.byte	0
 4593 03e8 15       		.uleb128 0x15
 4594 03e9 FA050000 		.4byte	.LASF68
 4595 03ed 02       		.byte	0x2
 4596 03ee E7       		.byte	0xe7
 4597 03ef 03       		.byte	0x3
 4598 03f0 00040000 		.4byte	0x400
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 189


 4599 03f4 16       		.uleb128 0x16
 4600 03f5 87090000 		.4byte	.LASF221
 4601 03f9 02       		.byte	0x2
 4602 03fa E7       		.byte	0xe7
 4603 03fb D5000000 		.4byte	0xd5
 4604 03ff 00       		.byte	0
 4605 0400 15       		.uleb128 0x15
 4606 0401 C80B0000 		.4byte	.LASF69
 4607 0405 02       		.byte	0x2
 4608 0406 C3       		.byte	0xc3
 4609 0407 03       		.byte	0x3
 4610 0408 18040000 		.4byte	0x418
 4611 040c 14       		.uleb128 0x14
 4612 040d DE060000 		.4byte	.LASF67
 4613 0411 02       		.byte	0x2
 4614 0412 C5       		.byte	0xc5
 4615 0413 D5000000 		.4byte	0xd5
 4616 0417 00       		.byte	0
 4617 0418 17       		.uleb128 0x17
 4618 0419 D60A0000 		.4byte	.LASF85
 4619 041d 01       		.byte	0x1
 4620 041e 0D07     		.2byte	0x70d
 4621 0420 07010000 		.4byte	0x107
 4622 0424 00000000 		.4byte	.LFB14
 4623 0428 2C000000 		.4byte	.LFE14-.LFB14
 4624 042c 01       		.uleb128 0x1
 4625 042d 9C       		.byte	0x9c
 4626 042e 63040000 		.4byte	0x463
 4627 0432 18       		.uleb128 0x18
 4628 0433 EE090000 		.4byte	.LASF72
 4629 0437 01       		.byte	0x1
 4630 0438 0D07     		.2byte	0x70d
 4631 043a 63040000 		.4byte	0x463
 4632 043e 00000000 		.4byte	.LLST0
 4633 0442 19       		.uleb128 0x19
 4634 0443 940B0000 		.4byte	.LASF70
 4635 0447 01       		.byte	0x1
 4636 0448 0F07     		.2byte	0x70f
 4637 044a 07010000 		.4byte	0x107
 4638 044e 6C000000 		.4byte	.LLST1
 4639 0452 19       		.uleb128 0x19
 4640 0453 410E0000 		.4byte	.LASF71
 4641 0457 01       		.byte	0x1
 4642 0458 1007     		.2byte	0x710
 4643 045a 73040000 		.4byte	0x473
 4644 045e 8B000000 		.4byte	.LLST2
 4645 0462 00       		.byte	0
 4646 0463 07       		.uleb128 0x7
 4647 0464 1B020000 		.4byte	0x21b
 4648 0468 06       		.uleb128 0x6
 4649 0469 04       		.byte	0x4
 4650 046a 6E040000 		.4byte	0x46e
 4651 046e 07       		.uleb128 0x7
 4652 046f B5030000 		.4byte	0x3b5
 4653 0473 07       		.uleb128 0x7
 4654 0474 68040000 		.4byte	0x468
 4655 0478 1A       		.uleb128 0x1a
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 190


 4656 0479 8E080000 		.4byte	.LASF222
 4657 047d 01       		.byte	0x1
 4658 047e 840F     		.2byte	0xf84
 4659 0480 00000000 		.4byte	.LFB43
 4660 0484 24000000 		.4byte	.LFE43-.LFB43
 4661 0488 01       		.uleb128 0x1
 4662 0489 9C       		.byte	0x9c
 4663 048a 1B       		.uleb128 0x1b
 4664 048b 4B0D0000 		.4byte	.LASF73
 4665 048f 01       		.byte	0x1
 4666 0490 4C0F     		.2byte	0xf4c
 4667 0492 00000000 		.4byte	.LFB42
 4668 0496 12000000 		.4byte	.LFE42-.LFB42
 4669 049a 01       		.uleb128 0x1
 4670 049b 9C       		.byte	0x9c
 4671 049c CA040000 		.4byte	0x4ca
 4672 04a0 18       		.uleb128 0x18
 4673 04a1 410E0000 		.4byte	.LASF71
 4674 04a5 01       		.byte	0x1
 4675 04a6 4C0F     		.2byte	0xf4c
 4676 04a8 CA040000 		.4byte	0x4ca
 4677 04ac F7000000 		.4byte	.LLST3
 4678 04b0 1C       		.uleb128 0x1c
 4679 04b1 0A000000 		.4byte	.LVL10
 4680 04b5 631E0000 		.4byte	0x1e63
 4681 04b9 1D       		.uleb128 0x1d
 4682 04ba 10000000 		.4byte	.LVL11
 4683 04be 631E0000 		.4byte	0x1e63
 4684 04c2 1E       		.uleb128 0x1e
 4685 04c3 01       		.uleb128 0x1
 4686 04c4 50       		.byte	0x50
 4687 04c5 02       		.uleb128 0x2
 4688 04c6 74       		.byte	0x74
 4689 04c7 00       		.sleb128 0
 4690 04c8 00       		.byte	0
 4691 04c9 00       		.byte	0
 4692 04ca 06       		.uleb128 0x6
 4693 04cb 04       		.byte	0x4
 4694 04cc B5030000 		.4byte	0x3b5
 4695 04d0 1B       		.uleb128 0x1b
 4696 04d1 A2000000 		.4byte	.LASF74
 4697 04d5 01       		.byte	0x1
 4698 04d6 2C03     		.2byte	0x32c
 4699 04d8 00000000 		.4byte	.LFB5
 4700 04dc 8E000000 		.4byte	.LFE5-.LFB5
 4701 04e0 01       		.uleb128 0x1
 4702 04e1 9C       		.byte	0x9c
 4703 04e2 C4050000 		.4byte	0x5c4
 4704 04e6 18       		.uleb128 0x18
 4705 04e7 D7070000 		.4byte	.LASF75
 4706 04eb 01       		.byte	0x1
 4707 04ec 2C03     		.2byte	0x32c
 4708 04ee E0000000 		.4byte	0xe0
 4709 04f2 15010000 		.4byte	.LLST4
 4710 04f6 18       		.uleb128 0x18
 4711 04f7 A1020000 		.4byte	.LASF76
 4712 04fb 01       		.byte	0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 191


 4713 04fc 2D03     		.2byte	0x32d
 4714 04fe 4F030000 		.4byte	0x34f
 4715 0502 5F010000 		.4byte	.LLST5
 4716 0506 18       		.uleb128 0x18
 4717 0507 F7060000 		.4byte	.LASF77
 4718 050b 01       		.byte	0x1
 4719 050c 2E03     		.2byte	0x32e
 4720 050e C4050000 		.4byte	0x5c4
 4721 0512 AC010000 		.4byte	.LLST6
 4722 0516 18       		.uleb128 0x18
 4723 0517 940A0000 		.4byte	.LASF78
 4724 051b 01       		.byte	0x1
 4725 051c 2F03     		.2byte	0x32f
 4726 051e C9050000 		.4byte	0x5c9
 4727 0522 EF010000 		.4byte	.LLST7
 4728 0526 18       		.uleb128 0x18
 4729 0527 41000000 		.4byte	.LASF43
 4730 052b 01       		.byte	0x1
 4731 052c 3003     		.2byte	0x330
 4732 052e 12010000 		.4byte	0x112
 4733 0532 0D020000 		.4byte	.LLST8
 4734 0536 1F       		.uleb128 0x1f
 4735 0537 C10E0000 		.4byte	.LASF79
 4736 053b 01       		.byte	0x1
 4737 053c 3103     		.2byte	0x331
 4738 053e D4050000 		.4byte	0x5d4
 4739 0542 02       		.uleb128 0x2
 4740 0543 91       		.byte	0x91
 4741 0544 04       		.sleb128 4
 4742 0545 1F       		.uleb128 0x1f
 4743 0546 CE070000 		.4byte	.LASF80
 4744 054a 01       		.byte	0x1
 4745 054b 3203     		.2byte	0x332
 4746 054d CA040000 		.4byte	0x4ca
 4747 0551 02       		.uleb128 0x2
 4748 0552 91       		.byte	0x91
 4749 0553 08       		.sleb128 8
 4750 0554 1F       		.uleb128 0x1f
 4751 0555 AC0D0000 		.4byte	.LASF81
 4752 0559 01       		.byte	0x1
 4753 055a 3303     		.2byte	0x333
 4754 055c E4050000 		.4byte	0x5e4
 4755 0560 02       		.uleb128 0x2
 4756 0561 91       		.byte	0x91
 4757 0562 0C       		.sleb128 12
 4758 0563 20       		.uleb128 0x20
 4759 0564 790E0000 		.4byte	.LASF40
 4760 0568 01       		.byte	0x1
 4761 0569 3503     		.2byte	0x335
 4762 056b 54030000 		.4byte	0x354
 4763 056f 01       		.uleb128 0x1
 4764 0570 56       		.byte	0x56
 4765 0571 21       		.uleb128 0x21
 4766 0572 7800     		.ascii	"x\000"
 4767 0574 01       		.byte	0x1
 4768 0575 3603     		.2byte	0x336
 4769 0577 12010000 		.4byte	0x112
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 192


 4770 057b 2C020000 		.4byte	.LLST9
 4771 057f 22       		.uleb128 0x22
 4772 0580 56000000 		.4byte	.LVL26
 4773 0584 6E1E0000 		.4byte	0x1e6e
 4774 0588 93050000 		.4byte	0x593
 4775 058c 1E       		.uleb128 0x1e
 4776 058d 01       		.uleb128 0x1
 4777 058e 50       		.byte	0x50
 4778 058f 02       		.uleb128 0x2
 4779 0590 74       		.byte	0x74
 4780 0591 04       		.sleb128 4
 4781 0592 00       		.byte	0
 4782 0593 22       		.uleb128 0x22
 4783 0594 5E000000 		.4byte	.LVL27
 4784 0598 6E1E0000 		.4byte	0x1e6e
 4785 059c A7050000 		.4byte	0x5a7
 4786 05a0 1E       		.uleb128 0x1e
 4787 05a1 01       		.uleb128 0x1
 4788 05a2 50       		.byte	0x50
 4789 05a3 02       		.uleb128 0x2
 4790 05a4 74       		.byte	0x74
 4791 05a5 18       		.sleb128 24
 4792 05a6 00       		.byte	0
 4793 05a7 1D       		.uleb128 0x1d
 4794 05a8 84000000 		.4byte	.LVL29
 4795 05ac 7A1E0000 		.4byte	0x1e7a
 4796 05b0 1E       		.uleb128 0x1e
 4797 05b1 01       		.uleb128 0x1
 4798 05b2 50       		.byte	0x50
 4799 05b3 02       		.uleb128 0x2
 4800 05b4 76       		.byte	0x76
 4801 05b5 00       		.sleb128 0
 4802 05b6 1E       		.uleb128 0x1e
 4803 05b7 01       		.uleb128 0x1
 4804 05b8 51       		.byte	0x51
 4805 05b9 02       		.uleb128 0x2
 4806 05ba 78       		.byte	0x78
 4807 05bb 00       		.sleb128 0
 4808 05bc 1E       		.uleb128 0x1e
 4809 05bd 01       		.uleb128 0x1
 4810 05be 52       		.byte	0x52
 4811 05bf 02       		.uleb128 0x2
 4812 05c0 79       		.byte	0x79
 4813 05c1 00       		.sleb128 0
 4814 05c2 00       		.byte	0
 4815 05c3 00       		.byte	0
 4816 05c4 07       		.uleb128 0x7
 4817 05c5 D5000000 		.4byte	0xd5
 4818 05c9 07       		.uleb128 0x7
 4819 05ca A5000000 		.4byte	0xa5
 4820 05ce 06       		.uleb128 0x6
 4821 05cf 04       		.byte	0x4
 4822 05d0 1B020000 		.4byte	0x21b
 4823 05d4 07       		.uleb128 0x7
 4824 05d5 CE050000 		.4byte	0x5ce
 4825 05d9 06       		.uleb128 0x6
 4826 05da 04       		.byte	0x4
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 193


 4827 05db DF050000 		.4byte	0x5df
 4828 05df 07       		.uleb128 0x7
 4829 05e0 44030000 		.4byte	0x344
 4830 05e4 07       		.uleb128 0x7
 4831 05e5 D9050000 		.4byte	0x5d9
 4832 05e9 1B       		.uleb128 0x1b
 4833 05ea 920E0000 		.4byte	.LASF82
 4834 05ee 01       		.byte	0x1
 4835 05ef 300E     		.2byte	0xe30
 4836 05f1 00000000 		.4byte	.LFB40
 4837 05f5 58000000 		.4byte	.LFE40-.LFB40
 4838 05f9 01       		.uleb128 0x1
 4839 05fa 9C       		.byte	0x9c
 4840 05fb 92060000 		.4byte	0x692
 4841 05ff 19       		.uleb128 0x19
 4842 0600 41000000 		.4byte	.LASF43
 4843 0604 01       		.byte	0x1
 4844 0605 320E     		.2byte	0xe32
 4845 0607 12010000 		.4byte	0x112
 4846 060b 4A020000 		.4byte	.LLST10
 4847 060f 22       		.uleb128 0x22
 4848 0610 14000000 		.4byte	.LVL32
 4849 0614 851E0000 		.4byte	0x1e85
 4850 0618 30060000 		.4byte	0x630
 4851 061c 1E       		.uleb128 0x1e
 4852 061d 01       		.uleb128 0x1
 4853 061e 50       		.byte	0x50
 4854 061f 0F       		.uleb128 0xf
 4855 0620 74       		.byte	0x74
 4856 0621 00       		.sleb128 0
 4857 0622 32       		.byte	0x32
 4858 0623 24       		.byte	0x24
 4859 0624 74       		.byte	0x74
 4860 0625 00       		.sleb128 0
 4861 0626 22       		.byte	0x22
 4862 0627 32       		.byte	0x32
 4863 0628 24       		.byte	0x24
 4864 0629 03       		.byte	0x3
 4865 062a 30000000 		.4byte	.LANCHOR0+48
 4866 062e 22       		.byte	0x22
 4867 062f 00       		.byte	0
 4868 0630 22       		.uleb128 0x22
 4869 0631 26000000 		.4byte	.LVL35
 4870 0635 851E0000 		.4byte	0x1e85
 4871 0639 44060000 		.4byte	0x644
 4872 063d 1E       		.uleb128 0x1e
 4873 063e 01       		.uleb128 0x1
 4874 063f 50       		.byte	0x50
 4875 0640 02       		.uleb128 0x2
 4876 0641 76       		.byte	0x76
 4877 0642 00       		.sleb128 0
 4878 0643 00       		.byte	0
 4879 0644 22       		.uleb128 0x22
 4880 0645 30000000 		.4byte	.LVL36
 4881 0649 851E0000 		.4byte	0x1e85
 4882 064d 58060000 		.4byte	0x658
 4883 0651 1E       		.uleb128 0x1e
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 194


 4884 0652 01       		.uleb128 0x1
 4885 0653 50       		.byte	0x50
 4886 0654 02       		.uleb128 0x2
 4887 0655 75       		.byte	0x75
 4888 0656 00       		.sleb128 0
 4889 0657 00       		.byte	0
 4890 0658 22       		.uleb128 0x22
 4891 0659 38000000 		.4byte	.LVL37
 4892 065d 851E0000 		.4byte	0x1e85
 4893 0661 6C060000 		.4byte	0x66c
 4894 0665 1E       		.uleb128 0x1e
 4895 0666 01       		.uleb128 0x1
 4896 0667 50       		.byte	0x50
 4897 0668 02       		.uleb128 0x2
 4898 0669 74       		.byte	0x74
 4899 066a 14       		.sleb128 20
 4900 066b 00       		.byte	0
 4901 066c 22       		.uleb128 0x22
 4902 066d 40000000 		.4byte	.LVL38
 4903 0671 851E0000 		.4byte	0x1e85
 4904 0675 81060000 		.4byte	0x681
 4905 0679 1E       		.uleb128 0x1e
 4906 067a 01       		.uleb128 0x1
 4907 067b 50       		.byte	0x50
 4908 067c 03       		.uleb128 0x3
 4909 067d 74       		.byte	0x74
 4910 067e BC01     		.sleb128 188
 4911 0680 00       		.byte	0
 4912 0681 1D       		.uleb128 0x1d
 4913 0682 46000000 		.4byte	.LVL39
 4914 0686 851E0000 		.4byte	0x1e85
 4915 068a 1E       		.uleb128 0x1e
 4916 068b 01       		.uleb128 0x1
 4917 068c 50       		.byte	0x50
 4918 068d 02       		.uleb128 0x2
 4919 068e 74       		.byte	0x74
 4920 068f 00       		.sleb128 0
 4921 0690 00       		.byte	0
 4922 0691 00       		.byte	0
 4923 0692 1B       		.uleb128 0x1b
 4924 0693 AD070000 		.4byte	.LASF83
 4925 0697 01       		.byte	0x1
 4926 0698 2704     		.2byte	0x427
 4927 069a 00000000 		.4byte	.LFB6
 4928 069e AC000000 		.4byte	.LFE6-.LFB6
 4929 06a2 01       		.uleb128 0x1
 4930 06a3 9C       		.byte	0x9c
 4931 06a4 E8060000 		.4byte	0x6e8
 4932 06a8 18       		.uleb128 0x18
 4933 06a9 CE070000 		.4byte	.LASF80
 4934 06ad 01       		.byte	0x1
 4935 06ae 2704     		.2byte	0x427
 4936 06b0 CA040000 		.4byte	0x4ca
 4937 06b4 69020000 		.4byte	.LLST11
 4938 06b8 1C       		.uleb128 0x1c
 4939 06b9 08000000 		.4byte	.LVL41
 4940 06bd 911E0000 		.4byte	0x1e91
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 195


 4941 06c1 1C       		.uleb128 0x1c
 4942 06c2 2C000000 		.4byte	.LVL42
 4943 06c6 E9050000 		.4byte	0x5e9
 4944 06ca 22       		.uleb128 0x22
 4945 06cb 7A000000 		.4byte	.LVL43
 4946 06cf 9C1E0000 		.4byte	0x1e9c
 4947 06d3 DE060000 		.4byte	0x6de
 4948 06d7 1E       		.uleb128 0x1e
 4949 06d8 01       		.uleb128 0x1
 4950 06d9 51       		.byte	0x51
 4951 06da 02       		.uleb128 0x2
 4952 06db 74       		.byte	0x74
 4953 06dc 04       		.sleb128 4
 4954 06dd 00       		.byte	0
 4955 06de 1C       		.uleb128 0x1c
 4956 06df 7E000000 		.4byte	.LVL44
 4957 06e3 A81E0000 		.4byte	0x1ea8
 4958 06e7 00       		.byte	0
 4959 06e8 1B       		.uleb128 0x1b
 4960 06e9 CF0E0000 		.4byte	.LASF84
 4961 06ed 01       		.byte	0x1
 4962 06ee 500E     		.2byte	0xe50
 4963 06f0 00000000 		.4byte	.LFB41
 4964 06f4 44000000 		.4byte	.LFE41-.LFB41
 4965 06f8 01       		.uleb128 0x1
 4966 06f9 9C       		.byte	0x9c
 4967 06fa 4F070000 		.4byte	0x74f
 4968 06fe 23       		.uleb128 0x23
 4969 06ff 02000000 		.4byte	.LBB22
 4970 0703 3C000000 		.4byte	.LBE22-.LBB22
 4971 0707 19       		.uleb128 0x19
 4972 0708 410E0000 		.4byte	.LASF71
 4973 070c 01       		.byte	0x1
 4974 070d 560E     		.2byte	0xe56
 4975 070f CA040000 		.4byte	0x4ca
 4976 0713 95020000 		.4byte	.LLST12
 4977 0717 1C       		.uleb128 0x1c
 4978 0718 08000000 		.4byte	.LVL46
 4979 071c 911E0000 		.4byte	0x1e91
 4980 0720 22       		.uleb128 0x22
 4981 0721 16000000 		.4byte	.LVL48
 4982 0725 B31E0000 		.4byte	0x1eb3
 4983 0729 34070000 		.4byte	0x734
 4984 072d 1E       		.uleb128 0x1e
 4985 072e 01       		.uleb128 0x1
 4986 072f 50       		.byte	0x50
 4987 0730 02       		.uleb128 0x2
 4988 0731 75       		.byte	0x75
 4989 0732 04       		.sleb128 4
 4990 0733 00       		.byte	0
 4991 0734 1C       		.uleb128 0x1c
 4992 0735 2E000000 		.4byte	.LVL49
 4993 0739 A81E0000 		.4byte	0x1ea8
 4994 073d 1D       		.uleb128 0x1d
 4995 073e 34000000 		.4byte	.LVL50
 4996 0742 8A040000 		.4byte	0x48a
 4997 0746 1E       		.uleb128 0x1e
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 196


 4998 0747 01       		.uleb128 0x1
 4999 0748 50       		.byte	0x50
 5000 0749 02       		.uleb128 0x2
 5001 074a 75       		.byte	0x75
 5002 074b 00       		.sleb128 0
 5003 074c 00       		.byte	0
 5004 074d 00       		.byte	0
 5005 074e 00       		.byte	0
 5006 074f 24       		.uleb128 0x24
 5007 0750 45070000 		.4byte	.LASF86
 5008 0754 01       		.byte	0x1
 5009 0755 4F0D     		.2byte	0xd4f
 5010 0757 00000000 		.4byte	.LFB37
 5011 075b 28000000 		.4byte	.LFE37-.LFB37
 5012 075f 01       		.uleb128 0x1
 5013 0760 9C       		.byte	0x9c
 5014 0761 7F070000 		.4byte	0x77f
 5015 0765 18       		.uleb128 0x18
 5016 0766 940A0000 		.4byte	.LASF78
 5017 076a 01       		.byte	0x1
 5018 076b 4F0D     		.2byte	0xd4f
 5019 076d A5000000 		.4byte	0xa5
 5020 0771 A8020000 		.4byte	.LLST13
 5021 0775 1C       		.uleb128 0x1c
 5022 0776 06000000 		.4byte	.LVL53
 5023 077a E8060000 		.4byte	0x6e8
 5024 077e 00       		.byte	0
 5025 077f 1B       		.uleb128 0x1b
 5026 0780 B50D0000 		.4byte	.LASF87
 5027 0784 01       		.byte	0x1
 5028 0785 7F14     		.2byte	0x147f
 5029 0787 00000000 		.4byte	.LFB54
 5030 078b 68000000 		.4byte	.LFE54-.LFB54
 5031 078f 01       		.uleb128 0x1
 5032 0790 9C       		.byte	0x9c
 5033 0791 08080000 		.4byte	0x808
 5034 0795 18       		.uleb128 0x18
 5035 0796 360D0000 		.4byte	.LASF88
 5036 079a 01       		.byte	0x1
 5037 079b 7F14     		.2byte	0x147f
 5038 079d 1D010000 		.4byte	0x11d
 5039 07a1 C9020000 		.4byte	.LLST14
 5040 07a5 18       		.uleb128 0x18
 5041 07a6 030C0000 		.4byte	.LASF89
 5042 07aa 01       		.byte	0x1
 5043 07ab 8014     		.2byte	0x1480
 5044 07ad 08080000 		.4byte	0x808
 5045 07b1 F5020000 		.4byte	.LLST15
 5046 07b5 19       		.uleb128 0x19
 5047 07b6 260E0000 		.4byte	.LASF90
 5048 07ba 01       		.byte	0x1
 5049 07bb 8214     		.2byte	0x1482
 5050 07bd 1D010000 		.4byte	0x11d
 5051 07c1 21030000 		.4byte	.LLST16
 5052 07c5 19       		.uleb128 0x19
 5053 07c6 78050000 		.4byte	.LASF91
 5054 07ca 01       		.byte	0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 197


 5055 07cb 8314     		.2byte	0x1483
 5056 07cd 0D080000 		.4byte	0x80d
 5057 07d1 34030000 		.4byte	.LLST17
 5058 07d5 1C       		.uleb128 0x1c
 5059 07d6 16000000 		.4byte	.LVL57
 5060 07da B31E0000 		.4byte	0x1eb3
 5061 07de 22       		.uleb128 0x22
 5062 07df 2A000000 		.4byte	.LVL58
 5063 07e3 9C1E0000 		.4byte	0x1e9c
 5064 07e7 F5070000 		.4byte	0x7f5
 5065 07eb 1E       		.uleb128 0x1e
 5066 07ec 01       		.uleb128 0x1
 5067 07ed 50       		.byte	0x50
 5068 07ee 05       		.uleb128 0x5
 5069 07ef 03       		.byte	0x3
 5070 07f0 00000000 		.4byte	.LANCHOR0
 5071 07f4 00       		.byte	0
 5072 07f5 1C       		.uleb128 0x1c
 5073 07f6 4A000000 		.4byte	.LVL61
 5074 07fa BF1E0000 		.4byte	0x1ebf
 5075 07fe 1C       		.uleb128 0x1c
 5076 07ff 5A000000 		.4byte	.LVL64
 5077 0803 BF1E0000 		.4byte	0x1ebf
 5078 0807 00       		.byte	0
 5079 0808 07       		.uleb128 0x7
 5080 0809 07010000 		.4byte	0x107
 5081 080d 07       		.uleb128 0x7
 5082 080e 1D010000 		.4byte	0x11d
 5083 0812 25       		.uleb128 0x25
 5084 0813 A1070000 		.4byte	.LASF94
 5085 0817 01       		.byte	0x1
 5086 0818 D102     		.2byte	0x2d1
 5087 081a 07010000 		.4byte	0x107
 5088 081e 00000000 		.4byte	.LFB4
 5089 0822 62000000 		.4byte	.LFE4-.LFB4
 5090 0826 01       		.uleb128 0x1
 5091 0827 9C       		.byte	0x9c
 5092 0828 56090000 		.4byte	0x956
 5093 082c 18       		.uleb128 0x18
 5094 082d D7070000 		.4byte	.LASF75
 5095 0831 01       		.byte	0x1
 5096 0832 D102     		.2byte	0x2d1
 5097 0834 E0000000 		.4byte	0xe0
 5098 0838 47030000 		.4byte	.LLST18
 5099 083c 18       		.uleb128 0x18
 5100 083d A1020000 		.4byte	.LASF76
 5101 0841 01       		.byte	0x1
 5102 0842 D202     		.2byte	0x2d2
 5103 0844 4F030000 		.4byte	0x34f
 5104 0848 65030000 		.4byte	.LLST19
 5105 084c 18       		.uleb128 0x18
 5106 084d 2D030000 		.4byte	.LASF92
 5107 0851 01       		.byte	0x1
 5108 0852 D302     		.2byte	0x2d3
 5109 0854 56090000 		.4byte	0x956
 5110 0858 83030000 		.4byte	.LLST20
 5111 085c 18       		.uleb128 0x18
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 198


 5112 085d 940A0000 		.4byte	.LASF78
 5113 0861 01       		.byte	0x1
 5114 0862 D402     		.2byte	0x2d4
 5115 0864 C9050000 		.4byte	0x5c9
 5116 0868 A4030000 		.4byte	.LLST21
 5117 086c 1F       		.uleb128 0x1f
 5118 086d 41000000 		.4byte	.LASF43
 5119 0871 01       		.byte	0x1
 5120 0872 D502     		.2byte	0x2d5
 5121 0874 12010000 		.4byte	0x112
 5122 0878 02       		.uleb128 0x2
 5123 0879 91       		.byte	0x91
 5124 087a 00       		.sleb128 0
 5125 087b 1F       		.uleb128 0x1f
 5126 087c C10E0000 		.4byte	.LASF79
 5127 0880 01       		.byte	0x1
 5128 0881 D602     		.2byte	0x2d6
 5129 0883 D4050000 		.4byte	0x5d4
 5130 0887 02       		.uleb128 0x2
 5131 0888 91       		.byte	0x91
 5132 0889 04       		.sleb128 4
 5133 088a 19       		.uleb128 0x19
 5134 088b CE070000 		.4byte	.LASF80
 5135 088f 01       		.byte	0x1
 5136 0890 D802     		.2byte	0x2d8
 5137 0892 CA040000 		.4byte	0x4ca
 5138 0896 C2030000 		.4byte	.LLST22
 5139 089a 19       		.uleb128 0x19
 5140 089b 940B0000 		.4byte	.LASF70
 5141 089f 01       		.byte	0x1
 5142 08a0 D902     		.2byte	0x2d9
 5143 08a2 07010000 		.4byte	0x107
 5144 08a6 EB030000 		.4byte	.LLST23
 5145 08aa 26       		.uleb128 0x26
 5146 08ab 0E000000 		.4byte	.LBB23
 5147 08af 24000000 		.4byte	.LBE23-.LBB23
 5148 08b3 02090000 		.4byte	0x902
 5149 08b7 19       		.uleb128 0x19
 5150 08b8 FD0A0000 		.4byte	.LASF44
 5151 08bc 01       		.byte	0x1
 5152 08bd F602     		.2byte	0x2f6
 5153 08bf 54030000 		.4byte	0x354
 5154 08c3 0A040000 		.4byte	.LLST24
 5155 08c7 22       		.uleb128 0x22
 5156 08c8 14000000 		.4byte	.LVL68
 5157 08cc CB1E0000 		.4byte	0x1ecb
 5158 08d0 DD080000 		.4byte	0x8dd
 5159 08d4 1E       		.uleb128 0x1e
 5160 08d5 01       		.uleb128 0x1
 5161 08d6 50       		.byte	0x50
 5162 08d7 04       		.uleb128 0x4
 5163 08d8 75       		.byte	0x75
 5164 08d9 00       		.sleb128 0
 5165 08da 32       		.byte	0x32
 5166 08db 24       		.byte	0x24
 5167 08dc 00       		.byte	0
 5168 08dd 22       		.uleb128 0x22
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 199


 5169 08de 1E000000 		.4byte	.LVL70
 5170 08e2 CB1E0000 		.4byte	0x1ecb
 5171 08e6 F1080000 		.4byte	0x8f1
 5172 08ea 1E       		.uleb128 0x1e
 5173 08eb 01       		.uleb128 0x1
 5174 08ec 50       		.byte	0x50
 5175 08ed 02       		.uleb128 0x2
 5176 08ee 08       		.byte	0x8
 5177 08ef 60       		.byte	0x60
 5178 08f0 00       		.byte	0
 5179 08f1 1D       		.uleb128 0x1d
 5180 08f2 2E000000 		.4byte	.LVL72
 5181 08f6 631E0000 		.4byte	0x1e63
 5182 08fa 1E       		.uleb128 0x1e
 5183 08fb 01       		.uleb128 0x1
 5184 08fc 50       		.byte	0x50
 5185 08fd 02       		.uleb128 0x2
 5186 08fe 79       		.byte	0x79
 5187 08ff 00       		.sleb128 0
 5188 0900 00       		.byte	0
 5189 0901 00       		.byte	0
 5190 0902 22       		.uleb128 0x22
 5191 0903 4E000000 		.4byte	.LVL75
 5192 0907 D0040000 		.4byte	0x4d0
 5193 090b 45090000 		.4byte	0x945
 5194 090f 1E       		.uleb128 0x1e
 5195 0910 01       		.uleb128 0x1
 5196 0911 50       		.byte	0x50
 5197 0912 02       		.uleb128 0x2
 5198 0913 76       		.byte	0x76
 5199 0914 00       		.sleb128 0
 5200 0915 1E       		.uleb128 0x1e
 5201 0916 01       		.uleb128 0x1
 5202 0917 51       		.byte	0x51
 5203 0918 02       		.uleb128 0x2
 5204 0919 77       		.byte	0x77
 5205 091a 00       		.sleb128 0
 5206 091b 1E       		.uleb128 0x1e
 5207 091c 01       		.uleb128 0x1
 5208 091d 52       		.byte	0x52
 5209 091e 02       		.uleb128 0x2
 5210 091f 75       		.byte	0x75
 5211 0920 00       		.sleb128 0
 5212 0921 1E       		.uleb128 0x1e
 5213 0922 01       		.uleb128 0x1
 5214 0923 53       		.byte	0x53
 5215 0924 02       		.uleb128 0x2
 5216 0925 78       		.byte	0x78
 5217 0926 00       		.sleb128 0
 5218 0927 1E       		.uleb128 0x1e
 5219 0928 02       		.uleb128 0x2
 5220 0929 7D       		.byte	0x7d
 5221 092a 00       		.sleb128 0
 5222 092b 03       		.uleb128 0x3
 5223 092c 91       		.byte	0x91
 5224 092d 00       		.sleb128 0
 5225 092e 06       		.byte	0x6
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 200


 5226 092f 1E       		.uleb128 0x1e
 5227 0930 02       		.uleb128 0x2
 5228 0931 7D       		.byte	0x7d
 5229 0932 04       		.sleb128 4
 5230 0933 03       		.uleb128 0x3
 5231 0934 91       		.byte	0x91
 5232 0935 04       		.sleb128 4
 5233 0936 06       		.byte	0x6
 5234 0937 1E       		.uleb128 0x1e
 5235 0938 02       		.uleb128 0x2
 5236 0939 7D       		.byte	0x7d
 5237 093a 08       		.sleb128 8
 5238 093b 02       		.uleb128 0x2
 5239 093c 74       		.byte	0x74
 5240 093d 00       		.sleb128 0
 5241 093e 1E       		.uleb128 0x1e
 5242 093f 02       		.uleb128 0x2
 5243 0940 7D       		.byte	0x7d
 5244 0941 0C       		.sleb128 12
 5245 0942 01       		.uleb128 0x1
 5246 0943 30       		.byte	0x30
 5247 0944 00       		.byte	0
 5248 0945 1D       		.uleb128 0x1d
 5249 0946 54000000 		.4byte	.LVL76
 5250 094a 92060000 		.4byte	0x692
 5251 094e 1E       		.uleb128 0x1e
 5252 094f 01       		.uleb128 0x1
 5253 0950 50       		.byte	0x50
 5254 0951 02       		.uleb128 0x2
 5255 0952 74       		.byte	0x74
 5256 0953 00       		.sleb128 0
 5257 0954 00       		.byte	0
 5258 0955 00       		.byte	0
 5259 0956 07       		.uleb128 0x7
 5260 0957 CA000000 		.4byte	0xca
 5261 095b 27       		.uleb128 0x27
 5262 095c 370A0000 		.4byte	.LASF99
 5263 0960 01       		.byte	0x1
 5264 0961 7D04     		.2byte	0x47d
 5265 0963 00000000 		.4byte	.LFB7
 5266 0967 98000000 		.4byte	.LFE7-.LFB7
 5267 096b 01       		.uleb128 0x1
 5268 096c 9C       		.byte	0x9c
 5269 096d 040A0000 		.4byte	0xa04
 5270 0971 18       		.uleb128 0x18
 5271 0972 050B0000 		.4byte	.LASF93
 5272 0976 01       		.byte	0x1
 5273 0977 7D04     		.2byte	0x47d
 5274 0979 1B020000 		.4byte	0x21b
 5275 097d 33040000 		.4byte	.LLST25
 5276 0981 19       		.uleb128 0x19
 5277 0982 410E0000 		.4byte	.LASF71
 5278 0986 01       		.byte	0x1
 5279 0987 7F04     		.2byte	0x47f
 5280 0989 CA040000 		.4byte	0x4ca
 5281 098d 51040000 		.4byte	.LLST26
 5282 0991 1C       		.uleb128 0x1c
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 201


 5283 0992 08000000 		.4byte	.LVL80
 5284 0996 911E0000 		.4byte	0x1e91
 5285 099a 22       		.uleb128 0x22
 5286 099b 18000000 		.4byte	.LVL82
 5287 099f B31E0000 		.4byte	0x1eb3
 5288 09a3 AE090000 		.4byte	0x9ae
 5289 09a7 1E       		.uleb128 0x1e
 5290 09a8 01       		.uleb128 0x1
 5291 09a9 50       		.byte	0x50
 5292 09aa 02       		.uleb128 0x2
 5293 09ab 75       		.byte	0x75
 5294 09ac 00       		.sleb128 0
 5295 09ad 00       		.byte	0
 5296 09ae 22       		.uleb128 0x22
 5297 09af 24000000 		.4byte	.LVL83
 5298 09b3 B31E0000 		.4byte	0x1eb3
 5299 09b7 C2090000 		.4byte	0x9c2
 5300 09bb 1E       		.uleb128 0x1e
 5301 09bc 01       		.uleb128 0x1
 5302 09bd 50       		.byte	0x50
 5303 09be 02       		.uleb128 0x2
 5304 09bf 74       		.byte	0x74
 5305 09c0 18       		.sleb128 24
 5306 09c1 00       		.byte	0
 5307 09c2 22       		.uleb128 0x22
 5308 09c3 44000000 		.4byte	.LVL84
 5309 09c7 9C1E0000 		.4byte	0x1e9c
 5310 09cb DD090000 		.4byte	0x9dd
 5311 09cf 1E       		.uleb128 0x1e
 5312 09d0 01       		.uleb128 0x1
 5313 09d1 50       		.byte	0x50
 5314 09d2 03       		.uleb128 0x3
 5315 09d3 76       		.byte	0x76
 5316 09d4 BC01     		.sleb128 188
 5317 09d6 1E       		.uleb128 0x1e
 5318 09d7 01       		.uleb128 0x1
 5319 09d8 51       		.byte	0x51
 5320 09d9 02       		.uleb128 0x2
 5321 09da 75       		.byte	0x75
 5322 09db 00       		.sleb128 0
 5323 09dc 00       		.byte	0
 5324 09dd 22       		.uleb128 0x22
 5325 09de 62000000 		.4byte	.LVL85
 5326 09e2 8A040000 		.4byte	0x48a
 5327 09e6 F1090000 		.4byte	0x9f1
 5328 09ea 1E       		.uleb128 0x1e
 5329 09eb 01       		.uleb128 0x1
 5330 09ec 50       		.byte	0x50
 5331 09ed 02       		.uleb128 0x2
 5332 09ee 74       		.byte	0x74
 5333 09ef 00       		.sleb128 0
 5334 09f0 00       		.byte	0
 5335 09f1 1C       		.uleb128 0x1c
 5336 09f2 66000000 		.4byte	.LVL86
 5337 09f6 78040000 		.4byte	0x478
 5338 09fa 1C       		.uleb128 0x1c
 5339 09fb 6A000000 		.4byte	.LVL87
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 202


 5340 09ff A81E0000 		.4byte	0x1ea8
 5341 0a03 00       		.byte	0
 5342 0a04 25       		.uleb128 0x25
 5343 0a05 66050000 		.4byte	.LASF95
 5344 0a09 01       		.byte	0x1
 5345 0a0a BF05     		.2byte	0x5bf
 5346 0a0c 12010000 		.4byte	0x112
 5347 0a10 00000000 		.4byte	.LFB10
 5348 0a14 20000000 		.4byte	.LFE10-.LFB10
 5349 0a18 01       		.uleb128 0x1
 5350 0a19 9C       		.byte	0x9c
 5351 0a1a 610A0000 		.4byte	0xa61
 5352 0a1e 18       		.uleb128 0x18
 5353 0a1f EE090000 		.4byte	.LASF72
 5354 0a23 01       		.byte	0x1
 5355 0a24 BF05     		.2byte	0x5bf
 5356 0a26 63040000 		.4byte	0x463
 5357 0a2a 64040000 		.4byte	.LLST27
 5358 0a2e 19       		.uleb128 0x19
 5359 0a2f 410E0000 		.4byte	.LASF71
 5360 0a33 01       		.byte	0x1
 5361 0a34 C105     		.2byte	0x5c1
 5362 0a36 68040000 		.4byte	0x468
 5363 0a3a 90040000 		.4byte	.LLST28
 5364 0a3e 19       		.uleb128 0x19
 5365 0a3f 6B020000 		.4byte	.LASF96
 5366 0a43 01       		.byte	0x1
 5367 0a44 C205     		.2byte	0x5c2
 5368 0a46 12010000 		.4byte	0x112
 5369 0a4a A3040000 		.4byte	.LLST29
 5370 0a4e 1C       		.uleb128 0x1c
 5371 0a4f 08000000 		.4byte	.LVL90
 5372 0a53 911E0000 		.4byte	0x1e91
 5373 0a57 1C       		.uleb128 0x1c
 5374 0a58 16000000 		.4byte	.LVL93
 5375 0a5c A81E0000 		.4byte	0x1ea8
 5376 0a60 00       		.byte	0
 5377 0a61 25       		.uleb128 0x25
 5378 0a62 13090000 		.4byte	.LASF97
 5379 0a66 01       		.byte	0x1
 5380 0a67 D505     		.2byte	0x5d5
 5381 0a69 12010000 		.4byte	0x112
 5382 0a6d 00000000 		.4byte	.LFB11
 5383 0a71 28000000 		.4byte	.LFE11-.LFB11
 5384 0a75 01       		.uleb128 0x1
 5385 0a76 9C       		.byte	0x9c
 5386 0a77 F90A0000 		.4byte	0xaf9
 5387 0a7b 18       		.uleb128 0x18
 5388 0a7c EE090000 		.4byte	.LASF72
 5389 0a80 01       		.byte	0x1
 5390 0a81 D505     		.2byte	0x5d5
 5391 0a83 63040000 		.4byte	0x463
 5392 0a87 C1040000 		.4byte	.LLST30
 5393 0a8b 19       		.uleb128 0x19
 5394 0a8c 410E0000 		.4byte	.LASF71
 5395 0a90 01       		.byte	0x1
 5396 0a91 D705     		.2byte	0x5d7
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 203


 5397 0a93 68040000 		.4byte	0x468
 5398 0a97 E2040000 		.4byte	.LLST31
 5399 0a9b 20       		.uleb128 0x20
 5400 0a9c 6B020000 		.4byte	.LASF96
 5401 0aa0 01       		.byte	0x1
 5402 0aa1 D805     		.2byte	0x5d8
 5403 0aa3 12010000 		.4byte	0x112
 5404 0aa7 01       		.uleb128 0x1
 5405 0aa8 50       		.byte	0x50
 5406 0aa9 28       		.uleb128 0x28
 5407 0aaa A0030000 		.4byte	.LASF98
 5408 0aae 01       		.byte	0x1
 5409 0aaf D805     		.2byte	0x5d8
 5410 0ab1 12010000 		.4byte	0x112
 5411 0ab5 29       		.uleb128 0x29
 5412 0ab6 C1030000 		.4byte	0x3c1
 5413 0aba 00000000 		.4byte	.LBB24
 5414 0abe 14000000 		.4byte	.LBE24-.LBB24
 5415 0ac2 01       		.byte	0x1
 5416 0ac3 EC05     		.2byte	0x5ec
 5417 0ac5 DE0A0000 		.4byte	0xade
 5418 0ac9 23       		.uleb128 0x23
 5419 0aca 00000000 		.4byte	.LBB25
 5420 0ace 14000000 		.4byte	.LBE25-.LBB25
 5421 0ad2 2A       		.uleb128 0x2a
 5422 0ad3 D1030000 		.4byte	0x3d1
 5423 0ad7 2A       		.uleb128 0x2a
 5424 0ad8 DC030000 		.4byte	0x3dc
 5425 0adc 00       		.byte	0
 5426 0add 00       		.byte	0
 5427 0ade 2B       		.uleb128 0x2b
 5428 0adf E8030000 		.4byte	0x3e8
 5429 0ae3 1E000000 		.4byte	.LBB26
 5430 0ae7 04000000 		.4byte	.LBE26-.LBB26
 5431 0aeb 01       		.byte	0x1
 5432 0aec F305     		.2byte	0x5f3
 5433 0aee 2C       		.uleb128 0x2c
 5434 0aef F4030000 		.4byte	0x3f4
 5435 0af3 F5040000 		.4byte	.LLST32
 5436 0af7 00       		.byte	0
 5437 0af8 00       		.byte	0
 5438 0af9 27       		.uleb128 0x27
 5439 0afa B0090000 		.4byte	.LASF100
 5440 0afe 01       		.byte	0x1
 5441 0aff FD05     		.2byte	0x5fd
 5442 0b01 00000000 		.4byte	.LFB12
 5443 0b05 C0000000 		.4byte	.LFE12-.LFB12
 5444 0b09 01       		.uleb128 0x1
 5445 0b0a 9C       		.byte	0x9c
 5446 0b0b AA0B0000 		.4byte	0xbaa
 5447 0b0f 18       		.uleb128 0x18
 5448 0b10 EE090000 		.4byte	.LASF72
 5449 0b14 01       		.byte	0x1
 5450 0b15 FD05     		.2byte	0x5fd
 5451 0b17 1B020000 		.4byte	0x21b
 5452 0b1b 08050000 		.4byte	.LLST33
 5453 0b1f 18       		.uleb128 0x18
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 204


 5454 0b20 BA080000 		.4byte	.LASF101
 5455 0b24 01       		.byte	0x1
 5456 0b25 FE05     		.2byte	0x5fe
 5457 0b27 12010000 		.4byte	0x112
 5458 0b2b 26050000 		.4byte	.LLST34
 5459 0b2f 19       		.uleb128 0x19
 5460 0b30 410E0000 		.4byte	.LASF71
 5461 0b34 01       		.byte	0x1
 5462 0b35 0006     		.2byte	0x600
 5463 0b37 CA040000 		.4byte	0x4ca
 5464 0b3b 50050000 		.4byte	.LLST35
 5465 0b3f 19       		.uleb128 0x19
 5466 0b40 EF0E0000 		.4byte	.LASF102
 5467 0b44 01       		.byte	0x1
 5468 0b45 0106     		.2byte	0x601
 5469 0b47 12010000 		.4byte	0x112
 5470 0b4b 63050000 		.4byte	.LLST36
 5471 0b4f 19       		.uleb128 0x19
 5472 0b50 0A0D0000 		.4byte	.LASF103
 5473 0b54 01       		.byte	0x1
 5474 0b55 0106     		.2byte	0x601
 5475 0b57 12010000 		.4byte	0x112
 5476 0b5b 76050000 		.4byte	.LLST37
 5477 0b5f 19       		.uleb128 0x19
 5478 0b60 EA020000 		.4byte	.LASF104
 5479 0b64 01       		.byte	0x1
 5480 0b65 0206     		.2byte	0x602
 5481 0b67 07010000 		.4byte	0x107
 5482 0b6b 89050000 		.4byte	.LLST38
 5483 0b6f 1C       		.uleb128 0x1c
 5484 0b70 10000000 		.4byte	.LVL102
 5485 0b74 911E0000 		.4byte	0x1e91
 5486 0b78 22       		.uleb128 0x22
 5487 0b79 78000000 		.4byte	.LVL108
 5488 0b7d B31E0000 		.4byte	0x1eb3
 5489 0b81 8C0B0000 		.4byte	0xb8c
 5490 0b85 1E       		.uleb128 0x1e
 5491 0b86 01       		.uleb128 0x1
 5492 0b87 50       		.byte	0x50
 5493 0b88 02       		.uleb128 0x2
 5494 0b89 74       		.byte	0x74
 5495 0b8a 00       		.sleb128 0
 5496 0b8b 00       		.byte	0
 5497 0b8c 22       		.uleb128 0x22
 5498 0b8d 9A000000 		.4byte	.LVL109
 5499 0b91 9C1E0000 		.4byte	0x1e9c
 5500 0b95 A00B0000 		.4byte	0xba0
 5501 0b99 1E       		.uleb128 0x1e
 5502 0b9a 01       		.uleb128 0x1
 5503 0b9b 51       		.byte	0x51
 5504 0b9c 02       		.uleb128 0x2
 5505 0b9d 74       		.byte	0x74
 5506 0b9e 00       		.sleb128 0
 5507 0b9f 00       		.byte	0
 5508 0ba0 1C       		.uleb128 0x1c
 5509 0ba1 B0000000 		.4byte	.LVL111
 5510 0ba5 A81E0000 		.4byte	0x1ea8
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 205


 5511 0ba9 00       		.byte	0
 5512 0baa 27       		.uleb128 0x27
 5513 0bab 860E0000 		.4byte	.LASF105
 5514 0baf 01       		.byte	0x1
 5515 0bb0 3B07     		.2byte	0x73b
 5516 0bb2 00000000 		.4byte	.LFB15
 5517 0bb6 78000000 		.4byte	.LFE15-.LFB15
 5518 0bba 01       		.uleb128 0x1
 5519 0bbb 9C       		.byte	0x9c
 5520 0bbc 2F0C0000 		.4byte	0xc2f
 5521 0bc0 18       		.uleb128 0x18
 5522 0bc1 5D020000 		.4byte	.LASF106
 5523 0bc5 01       		.byte	0x1
 5524 0bc6 3B07     		.2byte	0x73b
 5525 0bc8 1B020000 		.4byte	0x21b
 5526 0bcc A8050000 		.4byte	.LLST39
 5527 0bd0 19       		.uleb128 0x19
 5528 0bd1 410E0000 		.4byte	.LASF71
 5529 0bd5 01       		.byte	0x1
 5530 0bd6 3D07     		.2byte	0x73d
 5531 0bd8 2F0C0000 		.4byte	0xc2f
 5532 0bdc A8050000 		.4byte	.LLST39
 5533 0be0 1C       		.uleb128 0x1c
 5534 0be1 14000000 		.4byte	.LVL114
 5535 0be5 911E0000 		.4byte	0x1e91
 5536 0be9 22       		.uleb128 0x22
 5537 0bea 1A000000 		.4byte	.LVL115
 5538 0bee 18040000 		.4byte	0x418
 5539 0bf2 FD0B0000 		.4byte	0xbfd
 5540 0bf6 1E       		.uleb128 0x1e
 5541 0bf7 01       		.uleb128 0x1
 5542 0bf8 50       		.byte	0x50
 5543 0bf9 02       		.uleb128 0x2
 5544 0bfa 74       		.byte	0x74
 5545 0bfb 00       		.sleb128 0
 5546 0bfc 00       		.byte	0
 5547 0bfd 22       		.uleb128 0x22
 5548 0bfe 24000000 		.4byte	.LVL116
 5549 0c02 B31E0000 		.4byte	0x1eb3
 5550 0c06 110C0000 		.4byte	0xc11
 5551 0c0a 1E       		.uleb128 0x1e
 5552 0c0b 01       		.uleb128 0x1
 5553 0c0c 50       		.byte	0x50
 5554 0c0d 02       		.uleb128 0x2
 5555 0c0e 76       		.byte	0x76
 5556 0c0f 00       		.sleb128 0
 5557 0c10 00       		.byte	0
 5558 0c11 22       		.uleb128 0x22
 5559 0c12 4A000000 		.4byte	.LVL117
 5560 0c16 9C1E0000 		.4byte	0x1e9c
 5561 0c1a 250C0000 		.4byte	0xc25
 5562 0c1e 1E       		.uleb128 0x1e
 5563 0c1f 01       		.uleb128 0x1
 5564 0c20 51       		.byte	0x51
 5565 0c21 02       		.uleb128 0x2
 5566 0c22 76       		.byte	0x76
 5567 0c23 00       		.sleb128 0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 206


 5568 0c24 00       		.byte	0
 5569 0c25 1C       		.uleb128 0x1c
 5570 0c26 6A000000 		.4byte	.LVL118
 5571 0c2a A81E0000 		.4byte	0x1ea8
 5572 0c2e 00       		.byte	0
 5573 0c2f 07       		.uleb128 0x7
 5574 0c30 CA040000 		.4byte	0x4ca
 5575 0c34 25       		.uleb128 0x25
 5576 0c35 FC030000 		.4byte	.LASF107
 5577 0c39 01       		.byte	0x1
 5578 0c3a 7107     		.2byte	0x771
 5579 0c3c 07010000 		.4byte	0x107
 5580 0c40 00000000 		.4byte	.LFB16
 5581 0c44 8C000000 		.4byte	.LFE16-.LFB16
 5582 0c48 01       		.uleb128 0x1
 5583 0c49 9C       		.byte	0x9c
 5584 0c4a 270D0000 		.4byte	0xd27
 5585 0c4e 18       		.uleb128 0x18
 5586 0c4f 5D020000 		.4byte	.LASF106
 5587 0c53 01       		.byte	0x1
 5588 0c54 7107     		.2byte	0x771
 5589 0c56 1B020000 		.4byte	0x21b
 5590 0c5a D1050000 		.4byte	.LLST41
 5591 0c5e 19       		.uleb128 0x19
 5592 0c5f EA020000 		.4byte	.LASF104
 5593 0c63 01       		.byte	0x1
 5594 0c64 7307     		.2byte	0x773
 5595 0c66 07010000 		.4byte	0x107
 5596 0c6a FD050000 		.4byte	.LLST42
 5597 0c6e 19       		.uleb128 0x19
 5598 0c6f 410E0000 		.4byte	.LASF71
 5599 0c73 01       		.byte	0x1
 5600 0c74 7407     		.2byte	0x774
 5601 0c76 2F0C0000 		.4byte	0xc2f
 5602 0c7a 3E060000 		.4byte	.LLST43
 5603 0c7e 28       		.uleb128 0x28
 5604 0c7f AF020000 		.4byte	.LASF108
 5605 0c83 01       		.byte	0x1
 5606 0c84 7507     		.2byte	0x775
 5607 0c86 12010000 		.4byte	0x112
 5608 0c8a 29       		.uleb128 0x29
 5609 0c8b C1030000 		.4byte	0x3c1
 5610 0c8f 04000000 		.4byte	.LBB28
 5611 0c93 14000000 		.4byte	.LBE28-.LBB28
 5612 0c97 01       		.byte	0x1
 5613 0c98 8B07     		.2byte	0x78b
 5614 0c9a B30C0000 		.4byte	0xcb3
 5615 0c9e 23       		.uleb128 0x23
 5616 0c9f 04000000 		.4byte	.LBB29
 5617 0ca3 14000000 		.4byte	.LBE29-.LBB29
 5618 0ca7 2A       		.uleb128 0x2a
 5619 0ca8 D1030000 		.4byte	0x3d1
 5620 0cac 2A       		.uleb128 0x2a
 5621 0cad DC030000 		.4byte	0x3dc
 5622 0cb1 00       		.byte	0
 5623 0cb2 00       		.byte	0
 5624 0cb3 29       		.uleb128 0x29
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 207


 5625 0cb4 E8030000 		.4byte	0x3e8
 5626 0cb8 76000000 		.4byte	.LBB30
 5627 0cbc 04000000 		.4byte	.LBE30-.LBB30
 5628 0cc0 01       		.byte	0x1
 5629 0cc1 AF07     		.2byte	0x7af
 5630 0cc3 D10C0000 		.4byte	0xcd1
 5631 0cc7 2C       		.uleb128 0x2c
 5632 0cc8 F4030000 		.4byte	0x3f4
 5633 0ccc 6A060000 		.4byte	.LLST44
 5634 0cd0 00       		.byte	0
 5635 0cd1 22       		.uleb128 0x22
 5636 0cd2 1C000000 		.4byte	.LVL122
 5637 0cd6 18040000 		.4byte	0x418
 5638 0cda E50C0000 		.4byte	0xce5
 5639 0cde 1E       		.uleb128 0x1e
 5640 0cdf 01       		.uleb128 0x1
 5641 0ce0 50       		.byte	0x50
 5642 0ce1 02       		.uleb128 0x2
 5643 0ce2 74       		.byte	0x74
 5644 0ce3 00       		.sleb128 0
 5645 0ce4 00       		.byte	0
 5646 0ce5 22       		.uleb128 0x22
 5647 0ce6 42000000 		.4byte	.LVL124
 5648 0cea B31E0000 		.4byte	0x1eb3
 5649 0cee F90C0000 		.4byte	0xcf9
 5650 0cf2 1E       		.uleb128 0x1e
 5651 0cf3 01       		.uleb128 0x1
 5652 0cf4 50       		.byte	0x50
 5653 0cf5 02       		.uleb128 0x2
 5654 0cf6 77       		.byte	0x77
 5655 0cf7 00       		.sleb128 0
 5656 0cf8 00       		.byte	0
 5657 0cf9 22       		.uleb128 0x22
 5658 0cfa 64000000 		.4byte	.LVL125
 5659 0cfe 9C1E0000 		.4byte	0x1e9c
 5660 0d02 0D0D0000 		.4byte	0xd0d
 5661 0d06 1E       		.uleb128 0x1e
 5662 0d07 01       		.uleb128 0x1
 5663 0d08 51       		.byte	0x51
 5664 0d09 02       		.uleb128 0x2
 5665 0d0a 77       		.byte	0x77
 5666 0d0b 00       		.sleb128 0
 5667 0d0c 00       		.byte	0
 5668 0d0d 1D       		.uleb128 0x1d
 5669 0d0e 70000000 		.4byte	.LVL127
 5670 0d12 9C1E0000 		.4byte	0x1e9c
 5671 0d16 1E       		.uleb128 0x1e
 5672 0d17 01       		.uleb128 0x1
 5673 0d18 50       		.byte	0x50
 5674 0d19 05       		.uleb128 0x5
 5675 0d1a 03       		.byte	0x3
 5676 0d1b 14000000 		.4byte	.LANCHOR0+20
 5677 0d1f 1E       		.uleb128 0x1e
 5678 0d20 01       		.uleb128 0x1
 5679 0d21 51       		.byte	0x51
 5680 0d22 02       		.uleb128 0x2
 5681 0d23 74       		.byte	0x74
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 208


 5682 0d24 18       		.sleb128 24
 5683 0d25 00       		.byte	0
 5684 0d26 00       		.byte	0
 5685 0d27 27       		.uleb128 0x27
 5686 0d28 EF0B0000 		.4byte	.LASF109
 5687 0d2c 01       		.byte	0x1
 5688 0d2d B707     		.2byte	0x7b7
 5689 0d2f 00000000 		.4byte	.LFB17
 5690 0d33 60000000 		.4byte	.LFE17-.LFB17
 5691 0d37 01       		.uleb128 0x1
 5692 0d38 9C       		.byte	0x9c
 5693 0d39 BF0D0000 		.4byte	0xdbf
 5694 0d3d 19       		.uleb128 0x19
 5695 0d3e 940B0000 		.4byte	.LASF70
 5696 0d42 01       		.byte	0x1
 5697 0d43 B907     		.2byte	0x7b9
 5698 0d45 07010000 		.4byte	0x107
 5699 0d49 7D060000 		.4byte	.LLST45
 5700 0d4d 29       		.uleb128 0x29
 5701 0d4e 00040000 		.4byte	0x400
 5702 0d52 22000000 		.4byte	.LBB32
 5703 0d56 10000000 		.4byte	.LBE32-.LBB32
 5704 0d5a 01       		.byte	0x1
 5705 0d5b FF07     		.2byte	0x7ff
 5706 0d5d 710D0000 		.4byte	0xd71
 5707 0d61 23       		.uleb128 0x23
 5708 0d62 22000000 		.4byte	.LBB33
 5709 0d66 10000000 		.4byte	.LBE33-.LBB33
 5710 0d6a 2A       		.uleb128 0x2a
 5711 0d6b 0C040000 		.4byte	0x40c
 5712 0d6f 00       		.byte	0
 5713 0d70 00       		.byte	0
 5714 0d71 22       		.uleb128 0x22
 5715 0d72 16000000 		.4byte	.LVL131
 5716 0d76 12080000 		.4byte	0x812
 5717 0d7a AC0D0000 		.4byte	0xdac
 5718 0d7e 1E       		.uleb128 0x1e
 5719 0d7f 01       		.uleb128 0x1
 5720 0d80 50       		.byte	0x50
 5721 0d81 05       		.uleb128 0x5
 5722 0d82 03       		.byte	0x3
 5723 0d83 00000000 		.4byte	prvIdleTask
 5724 0d87 1E       		.uleb128 0x1e
 5725 0d88 01       		.uleb128 0x1
 5726 0d89 51       		.byte	0x51
 5727 0d8a 05       		.uleb128 0x5
 5728 0d8b 03       		.byte	0x3
 5729 0d8c 00000000 		.4byte	.LC0
 5730 0d90 1E       		.uleb128 0x1e
 5731 0d91 01       		.uleb128 0x1
 5732 0d92 52       		.byte	0x52
 5733 0d93 02       		.uleb128 0x2
 5734 0d94 08       		.byte	0x8
 5735 0d95 80       		.byte	0x80
 5736 0d96 1E       		.uleb128 0x1e
 5737 0d97 01       		.uleb128 0x1
 5738 0d98 53       		.byte	0x53
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 209


 5739 0d99 01       		.uleb128 0x1
 5740 0d9a 30       		.byte	0x30
 5741 0d9b 1E       		.uleb128 0x1e
 5742 0d9c 02       		.uleb128 0x2
 5743 0d9d 7D       		.byte	0x7d
 5744 0d9e 00       		.sleb128 0
 5745 0d9f 01       		.uleb128 0x1
 5746 0da0 30       		.byte	0x30
 5747 0da1 1E       		.uleb128 0x1e
 5748 0da2 02       		.uleb128 0x2
 5749 0da3 7D       		.byte	0x7d
 5750 0da4 04       		.sleb128 4
 5751 0da5 05       		.uleb128 0x5
 5752 0da6 03       		.byte	0x3
 5753 0da7 F4000000 		.4byte	.LANCHOR0+244
 5754 0dab 00       		.byte	0
 5755 0dac 1C       		.uleb128 0x1c
 5756 0dad 1E000000 		.4byte	.LVL132
 5757 0db1 D61E0000 		.4byte	0x1ed6
 5758 0db5 1C       		.uleb128 0x1c
 5759 0db6 4A000000 		.4byte	.LVL133
 5760 0dba E21E0000 		.4byte	0x1ee2
 5761 0dbe 00       		.byte	0
 5762 0dbf 27       		.uleb128 0x27
 5763 0dc0 54050000 		.4byte	.LASF110
 5764 0dc4 01       		.byte	0x1
 5765 0dc5 3308     		.2byte	0x833
 5766 0dc7 00000000 		.4byte	.LFB18
 5767 0dcb 24000000 		.4byte	.LFE18-.LFB18
 5768 0dcf 01       		.uleb128 0x1
 5769 0dd0 9C       		.byte	0x9c
 5770 0dd1 030E0000 		.4byte	0xe03
 5771 0dd5 29       		.uleb128 0x29
 5772 0dd6 00040000 		.4byte	0x400
 5773 0dda 02000000 		.4byte	.LBB34
 5774 0dde 10000000 		.4byte	.LBE34-.LBB34
 5775 0de2 01       		.byte	0x1
 5776 0de3 3808     		.2byte	0x838
 5777 0de5 F90D0000 		.4byte	0xdf9
 5778 0de9 23       		.uleb128 0x23
 5779 0dea 02000000 		.4byte	.LBB35
 5780 0dee 10000000 		.4byte	.LBE35-.LBB35
 5781 0df2 2A       		.uleb128 0x2a
 5782 0df3 0C040000 		.4byte	0x40c
 5783 0df7 00       		.byte	0
 5784 0df8 00       		.byte	0
 5785 0df9 1C       		.uleb128 0x1c
 5786 0dfa 1E000000 		.4byte	.LVL134
 5787 0dfe ED1E0000 		.4byte	0x1eed
 5788 0e02 00       		.byte	0
 5789 0e03 2D       		.uleb128 0x2d
 5790 0e04 1C040000 		.4byte	.LASF151
 5791 0e08 01       		.byte	0x1
 5792 0e09 3E08     		.2byte	0x83e
 5793 0e0b 00000000 		.4byte	.LFB19
 5794 0e0f 14000000 		.4byte	.LFE19-.LFB19
 5795 0e13 01       		.uleb128 0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 210


 5796 0e14 9C       		.byte	0x9c
 5797 0e15 25       		.uleb128 0x25
 5798 0e16 2C090000 		.4byte	.LASF111
 5799 0e1a 01       		.byte	0x1
 5800 0e1b 0109     		.2byte	0x901
 5801 0e1d 1D010000 		.4byte	0x11d
 5802 0e21 00000000 		.4byte	.LFB21
 5803 0e25 0C000000 		.4byte	.LFE21-.LFB21
 5804 0e29 01       		.uleb128 0x1
 5805 0e2a 9C       		.byte	0x9c
 5806 0e2b 3E0E0000 		.4byte	0xe3e
 5807 0e2f 20       		.uleb128 0x20
 5808 0e30 E80B0000 		.4byte	.LASF112
 5809 0e34 01       		.byte	0x1
 5810 0e35 0309     		.2byte	0x903
 5811 0e37 1D010000 		.4byte	0x11d
 5812 0e3b 01       		.uleb128 0x1
 5813 0e3c 50       		.byte	0x50
 5814 0e3d 00       		.byte	0
 5815 0e3e 25       		.uleb128 0x25
 5816 0e3f 87030000 		.4byte	.LASF113
 5817 0e43 01       		.byte	0x1
 5818 0e44 1009     		.2byte	0x910
 5819 0e46 1D010000 		.4byte	0x11d
 5820 0e4a 00000000 		.4byte	.LFB22
 5821 0e4e 0C000000 		.4byte	.LFE22-.LFB22
 5822 0e52 01       		.uleb128 0x1
 5823 0e53 9C       		.byte	0x9c
 5824 0e54 740E0000 		.4byte	0xe74
 5825 0e58 20       		.uleb128 0x20
 5826 0e59 940B0000 		.4byte	.LASF70
 5827 0e5d 01       		.byte	0x1
 5828 0e5e 1209     		.2byte	0x912
 5829 0e60 1D010000 		.4byte	0x11d
 5830 0e64 01       		.uleb128 0x1
 5831 0e65 50       		.byte	0x50
 5832 0e66 2E       		.uleb128 0x2e
 5833 0e67 AF020000 		.4byte	.LASF108
 5834 0e6b 01       		.byte	0x1
 5835 0e6c 1309     		.2byte	0x913
 5836 0e6e 12010000 		.4byte	0x112
 5837 0e72 00       		.byte	0
 5838 0e73 00       		.byte	0
 5839 0e74 2F       		.uleb128 0x2f
 5840 0e75 74020000 		.4byte	.LASF223
 5841 0e79 01       		.byte	0x1
 5842 0e7a 2F09     		.2byte	0x92f
 5843 0e7c 12010000 		.4byte	0x112
 5844 0e80 00000000 		.4byte	.LFB23
 5845 0e84 0C000000 		.4byte	.LFE23-.LFB23
 5846 0e88 01       		.uleb128 0x1
 5847 0e89 9C       		.byte	0x9c
 5848 0e8a 25       		.uleb128 0x25
 5849 0e8b DA0B0000 		.4byte	.LASF114
 5850 0e8f 01       		.byte	0x1
 5851 0e90 3709     		.2byte	0x937
 5852 0e92 A7000000 		.4byte	0xa7
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 211


 5853 0e96 00000000 		.4byte	.LFB24
 5854 0e9a 14000000 		.4byte	.LFE24-.LFB24
 5855 0e9e 01       		.uleb128 0x1
 5856 0e9f 9C       		.byte	0x9c
 5857 0ea0 C30E0000 		.4byte	0xec3
 5858 0ea4 18       		.uleb128 0x18
 5859 0ea5 C8090000 		.4byte	.LASF115
 5860 0ea9 01       		.byte	0x1
 5861 0eaa 3709     		.2byte	0x937
 5862 0eac 1B020000 		.4byte	0x21b
 5863 0eb0 9B060000 		.4byte	.LLST46
 5864 0eb4 20       		.uleb128 0x20
 5865 0eb5 410E0000 		.4byte	.LASF71
 5866 0eb9 01       		.byte	0x1
 5867 0eba 3909     		.2byte	0x939
 5868 0ebc CA040000 		.4byte	0x4ca
 5869 0ec0 01       		.uleb128 0x1
 5870 0ec1 53       		.byte	0x53
 5871 0ec2 00       		.byte	0
 5872 0ec3 25       		.uleb128 0x25
 5873 0ec4 E5010000 		.4byte	.LASF116
 5874 0ec8 01       		.byte	0x1
 5875 0ec9 950A     		.2byte	0xa95
 5876 0ecb 07010000 		.4byte	0x107
 5877 0ecf 00000000 		.4byte	.LFB26
 5878 0ed3 E8000000 		.4byte	.LFE26-.LFB26
 5879 0ed7 01       		.uleb128 0x1
 5880 0ed8 9C       		.byte	0x9c
 5881 0ed9 830F0000 		.4byte	0xf83
 5882 0edd 19       		.uleb128 0x19
 5883 0ede 410E0000 		.4byte	.LASF71
 5884 0ee2 01       		.byte	0x1
 5885 0ee3 970A     		.2byte	0xa97
 5886 0ee5 CA040000 		.4byte	0x4ca
 5887 0ee9 AE060000 		.4byte	.LLST47
 5888 0eed 19       		.uleb128 0x19
 5889 0eee A10A0000 		.4byte	.LASF24
 5890 0ef2 01       		.byte	0x1
 5891 0ef3 980A     		.2byte	0xa98
 5892 0ef5 1D010000 		.4byte	0x11d
 5893 0ef9 CC060000 		.4byte	.LLST48
 5894 0efd 19       		.uleb128 0x19
 5895 0efe ED0A0000 		.4byte	.LASF117
 5896 0f02 01       		.byte	0x1
 5897 0f03 990A     		.2byte	0xa99
 5898 0f05 07010000 		.4byte	0x107
 5899 0f09 DF060000 		.4byte	.LLST49
 5900 0f0d 30       		.uleb128 0x30
 5901 0f0e 00000000 		.4byte	.Ldebug_ranges0+0
 5902 0f12 19       		.uleb128 0x19
 5903 0f13 78050000 		.4byte	.LASF91
 5904 0f17 01       		.byte	0x1
 5905 0f18 A40A     		.2byte	0xaa4
 5906 0f1a 0D080000 		.4byte	0x80d
 5907 0f1e 37070000 		.4byte	.LLST50
 5908 0f22 26       		.uleb128 0x26
 5909 0f23 1C000000 		.4byte	.LBB37
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 212


 5910 0f27 1A000000 		.4byte	.LBE37-.LBB37
 5911 0f2b 490F0000 		.4byte	0xf49
 5912 0f2f 19       		.uleb128 0x19
 5913 0f30 480C0000 		.4byte	.LASF118
 5914 0f34 01       		.byte	0x1
 5915 0f35 AC0A     		.2byte	0xaac
 5916 0f37 830F0000 		.4byte	0xf83
 5917 0f3b 55070000 		.4byte	.LLST51
 5918 0f3f 1C       		.uleb128 0x1c
 5919 0f40 36000000 		.4byte	.LVL145
 5920 0f44 78040000 		.4byte	0x478
 5921 0f48 00       		.byte	0
 5922 0f49 22       		.uleb128 0x22
 5923 0f4a 7C000000 		.4byte	.LVL152
 5924 0f4e B31E0000 		.4byte	0x1eb3
 5925 0f52 5D0F0000 		.4byte	0xf5d
 5926 0f56 1E       		.uleb128 0x1e
 5927 0f57 01       		.uleb128 0x1
 5928 0f58 50       		.byte	0x50
 5929 0f59 02       		.uleb128 0x2
 5930 0f5a 76       		.byte	0x76
 5931 0f5b 00       		.sleb128 0
 5932 0f5c 00       		.byte	0
 5933 0f5d 22       		.uleb128 0x22
 5934 0f5e 88000000 		.4byte	.LVL153
 5935 0f62 B31E0000 		.4byte	0x1eb3
 5936 0f66 710F0000 		.4byte	0xf71
 5937 0f6a 1E       		.uleb128 0x1e
 5938 0f6b 01       		.uleb128 0x1
 5939 0f6c 50       		.byte	0x50
 5940 0f6d 02       		.uleb128 0x2
 5941 0f6e 74       		.byte	0x74
 5942 0f6f 18       		.sleb128 24
 5943 0f70 00       		.byte	0
 5944 0f71 1D       		.uleb128 0x1d
 5945 0f72 AE000000 		.4byte	.LVL154
 5946 0f76 9C1E0000 		.4byte	0x1e9c
 5947 0f7a 1E       		.uleb128 0x1e
 5948 0f7b 01       		.uleb128 0x1
 5949 0f7c 51       		.byte	0x51
 5950 0f7d 02       		.uleb128 0x2
 5951 0f7e 76       		.byte	0x76
 5952 0f7f 00       		.sleb128 0
 5953 0f80 00       		.byte	0
 5954 0f81 00       		.byte	0
 5955 0f82 00       		.byte	0
 5956 0f83 06       		.uleb128 0x6
 5957 0f84 04       		.byte	0x4
 5958 0f85 10020000 		.4byte	0x210
 5959 0f89 25       		.uleb128 0x25
 5960 0f8a B50A0000 		.4byte	.LASF119
 5961 0f8e 01       		.byte	0x1
 5962 0f8f 9208     		.2byte	0x892
 5963 0f91 07010000 		.4byte	0x107
 5964 0f95 00000000 		.4byte	.LFB20
 5965 0f99 D8000000 		.4byte	.LFE20-.LFB20
 5966 0f9d 01       		.uleb128 0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 213


 5967 0f9e 9C       		.byte	0x9c
 5968 0f9f 42100000 		.4byte	0x1042
 5969 0fa3 19       		.uleb128 0x19
 5970 0fa4 410E0000 		.4byte	.LASF71
 5971 0fa8 01       		.byte	0x1
 5972 0fa9 9408     		.2byte	0x894
 5973 0fab CA040000 		.4byte	0x4ca
 5974 0faf 77070000 		.4byte	.LLST52
 5975 0fb3 19       		.uleb128 0x19
 5976 0fb4 650D0000 		.4byte	.LASF120
 5977 0fb8 01       		.byte	0x1
 5978 0fb9 9508     		.2byte	0x895
 5979 0fbb 07010000 		.4byte	0x107
 5980 0fbf B9070000 		.4byte	.LLST53
 5981 0fc3 26       		.uleb128 0x26
 5982 0fc4 82000000 		.4byte	.LBB40
 5983 0fc8 22000000 		.4byte	.LBE40-.LBB40
 5984 0fcc EA0F0000 		.4byte	0xfea
 5985 0fd0 19       		.uleb128 0x19
 5986 0fd1 79010000 		.4byte	.LASF121
 5987 0fd5 01       		.byte	0x1
 5988 0fd6 CD08     		.2byte	0x8cd
 5989 0fd8 1D010000 		.4byte	0x11d
 5990 0fdc FB070000 		.4byte	.LLST54
 5991 0fe0 1C       		.uleb128 0x1c
 5992 0fe1 8E000000 		.4byte	.LVL171
 5993 0fe5 C30E0000 		.4byte	0xec3
 5994 0fe9 00       		.byte	0
 5995 0fea 1C       		.uleb128 0x1c
 5996 0feb 06000000 		.4byte	.LVL161
 5997 0fef 911E0000 		.4byte	0x1e91
 5998 0ff3 22       		.uleb128 0x22
 5999 0ff4 34000000 		.4byte	.LVL164
 6000 0ff8 B31E0000 		.4byte	0x1eb3
 6001 0ffc 07100000 		.4byte	0x1007
 6002 1000 1E       		.uleb128 0x1e
 6003 1001 01       		.uleb128 0x1
 6004 1002 50       		.byte	0x50
 6005 1003 02       		.uleb128 0x2
 6006 1004 74       		.byte	0x74
 6007 1005 18       		.sleb128 24
 6008 1006 00       		.byte	0
 6009 1007 22       		.uleb128 0x22
 6010 1008 3C000000 		.4byte	.LVL165
 6011 100c B31E0000 		.4byte	0x1eb3
 6012 1010 1B100000 		.4byte	0x101b
 6013 1014 1E       		.uleb128 0x1e
 6014 1015 01       		.uleb128 0x1
 6015 1016 50       		.byte	0x50
 6016 1017 02       		.uleb128 0x2
 6017 1018 76       		.byte	0x76
 6018 1019 00       		.sleb128 0
 6019 101a 00       		.byte	0
 6020 101b 22       		.uleb128 0x22
 6021 101c 5E000000 		.4byte	.LVL166
 6022 1020 9C1E0000 		.4byte	0x1e9c
 6023 1024 2F100000 		.4byte	0x102f
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 214


 6024 1028 1E       		.uleb128 0x1e
 6025 1029 01       		.uleb128 0x1
 6026 102a 51       		.byte	0x51
 6027 102b 02       		.uleb128 0x2
 6028 102c 76       		.byte	0x76
 6029 102d 00       		.sleb128 0
 6030 102e 00       		.byte	0
 6031 102f 1C       		.uleb128 0x1c
 6032 1030 82000000 		.4byte	.LVL169
 6033 1034 78040000 		.4byte	0x478
 6034 1038 1C       		.uleb128 0x1c
 6035 1039 CA000000 		.4byte	.LVL179
 6036 103d A81E0000 		.4byte	0x1ea8
 6037 1041 00       		.byte	0
 6038 1042 27       		.uleb128 0x27
 6039 1043 EB0C0000 		.4byte	.LASF122
 6040 1047 01       		.byte	0x1
 6041 1048 DC04     		.2byte	0x4dc
 6042 104a 00000000 		.4byte	.LFB8
 6043 104e 6C000000 		.4byte	.LFE8-.LFB8
 6044 1052 01       		.uleb128 0x1
 6045 1053 9C       		.byte	0x9c
 6046 1054 E2100000 		.4byte	0x10e2
 6047 1058 18       		.uleb128 0x18
 6048 1059 5B0B0000 		.4byte	.LASF123
 6049 105d 01       		.byte	0x1
 6050 105e DC04     		.2byte	0x4dc
 6051 1060 E8100000 		.4byte	0x10e8
 6052 1064 31080000 		.4byte	.LLST55
 6053 1068 18       		.uleb128 0x18
 6054 1069 F80D0000 		.4byte	.LASF124
 6055 106d 01       		.byte	0x1
 6056 106e DD04     		.2byte	0x4dd
 6057 1070 0D080000 		.4byte	0x80d
 6058 1074 5D080000 		.4byte	.LLST56
 6059 1078 19       		.uleb128 0x19
 6060 1079 260E0000 		.4byte	.LASF90
 6061 107d 01       		.byte	0x1
 6062 107e DF04     		.2byte	0x4df
 6063 1080 1D010000 		.4byte	0x11d
 6064 1084 89080000 		.4byte	.LLST57
 6065 1088 20       		.uleb128 0x20
 6066 1089 650D0000 		.4byte	.LASF120
 6067 108d 01       		.byte	0x1
 6068 108e E004     		.2byte	0x4e0
 6069 1090 07010000 		.4byte	0x107
 6070 1094 01       		.uleb128 0x1
 6071 1095 50       		.byte	0x50
 6072 1096 19       		.uleb128 0x19
 6073 1097 38070000 		.4byte	.LASF125
 6074 109b 01       		.byte	0x1
 6075 109c E004     		.2byte	0x4e0
 6076 109e 07010000 		.4byte	0x107
 6077 10a2 9C080000 		.4byte	.LLST58
 6078 10a6 31       		.uleb128 0x31
 6079 10a7 20000000 		.4byte	.Ldebug_ranges0+0x20
 6080 10ab CF100000 		.4byte	0x10cf
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 215


 6081 10af 19       		.uleb128 0x19
 6082 10b0 78050000 		.4byte	.LASF91
 6083 10b4 01       		.byte	0x1
 6084 10b5 EA04     		.2byte	0x4ea
 6085 10b7 0D080000 		.4byte	0x80d
 6086 10bb BB080000 		.4byte	.LLST59
 6087 10bf 1D       		.uleb128 0x1d
 6088 10c0 4A000000 		.4byte	.LVL188
 6089 10c4 7F070000 		.4byte	0x77f
 6090 10c8 1E       		.uleb128 0x1e
 6091 10c9 01       		.uleb128 0x1
 6092 10ca 51       		.byte	0x51
 6093 10cb 01       		.uleb128 0x1
 6094 10cc 30       		.byte	0x30
 6095 10cd 00       		.byte	0
 6096 10ce 00       		.byte	0
 6097 10cf 1C       		.uleb128 0x1c
 6098 10d0 0A000000 		.4byte	.LVL183
 6099 10d4 030E0000 		.4byte	0xe03
 6100 10d8 1C       		.uleb128 0x1c
 6101 10d9 4E000000 		.4byte	.LVL189
 6102 10dd 890F0000 		.4byte	0xf89
 6103 10e1 00       		.byte	0
 6104 10e2 06       		.uleb128 0x6
 6105 10e3 04       		.byte	0x4
 6106 10e4 1D010000 		.4byte	0x11d
 6107 10e8 07       		.uleb128 0x7
 6108 10e9 E2100000 		.4byte	0x10e2
 6109 10ed 27       		.uleb128 0x27
 6110 10ee 45060000 		.4byte	.LASF126
 6111 10f2 01       		.byte	0x1
 6112 10f3 3105     		.2byte	0x531
 6113 10f5 00000000 		.4byte	.LFB9
 6114 10f9 34000000 		.4byte	.LFE9-.LFB9
 6115 10fd 01       		.uleb128 0x1
 6116 10fe 9C       		.byte	0x9c
 6117 10ff 4F110000 		.4byte	0x114f
 6118 1103 18       		.uleb128 0x18
 6119 1104 05090000 		.4byte	.LASF127
 6120 1108 01       		.byte	0x1
 6121 1109 3105     		.2byte	0x531
 6122 110b 0D080000 		.4byte	0x80d
 6123 110f CE080000 		.4byte	.LLST60
 6124 1113 19       		.uleb128 0x19
 6125 1114 650D0000 		.4byte	.LASF120
 6126 1118 01       		.byte	0x1
 6127 1119 3305     		.2byte	0x533
 6128 111b 07010000 		.4byte	0x107
 6129 111f 05090000 		.4byte	.LLST61
 6130 1123 1C       		.uleb128 0x1c
 6131 1124 0A000000 		.4byte	.LVL193
 6132 1128 030E0000 		.4byte	0xe03
 6133 112c 22       		.uleb128 0x22
 6134 112d 12000000 		.4byte	.LVL194
 6135 1131 7F070000 		.4byte	0x77f
 6136 1135 45110000 		.4byte	0x1145
 6137 1139 1E       		.uleb128 0x1e
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 216


 6138 113a 01       		.uleb128 0x1
 6139 113b 50       		.byte	0x50
 6140 113c 02       		.uleb128 0x2
 6141 113d 74       		.byte	0x74
 6142 113e 00       		.sleb128 0
 6143 113f 1E       		.uleb128 0x1e
 6144 1140 01       		.uleb128 0x1
 6145 1141 51       		.byte	0x51
 6146 1142 01       		.uleb128 0x1
 6147 1143 30       		.byte	0x30
 6148 1144 00       		.byte	0
 6149 1145 1C       		.uleb128 0x1c
 6150 1146 16000000 		.4byte	.LVL195
 6151 114a 890F0000 		.4byte	0xf89
 6152 114e 00       		.byte	0
 6153 114f 25       		.uleb128 0x25
 6154 1150 3E020000 		.4byte	.LASF128
 6155 1154 01       		.byte	0x1
 6156 1155 330A     		.2byte	0xa33
 6157 1157 07010000 		.4byte	0x107
 6158 115b 00000000 		.4byte	.LFB25
 6159 115f 20000000 		.4byte	.LFE25-.LFB25
 6160 1163 01       		.uleb128 0x1
 6161 1164 9C       		.byte	0x9c
 6162 1165 9A110000 		.4byte	0x119a
 6163 1169 18       		.uleb128 0x18
 6164 116a 9C0D0000 		.4byte	.LASF129
 6165 116e 01       		.byte	0x1
 6166 116f 330A     		.2byte	0xa33
 6167 1171 1D010000 		.4byte	0x11d
 6168 1175 3B090000 		.4byte	.LLST62
 6169 1179 20       		.uleb128 0x20
 6170 117a E2070000 		.4byte	.LASF130
 6171 117e 01       		.byte	0x1
 6172 117f 350A     		.2byte	0xa35
 6173 1181 07010000 		.4byte	0x107
 6174 1185 01       		.uleb128 0x1
 6175 1186 50       		.byte	0x50
 6176 1187 1C       		.uleb128 0x1c
 6177 1188 08000000 		.4byte	.LVL199
 6178 118c 030E0000 		.4byte	0xe03
 6179 1190 1C       		.uleb128 0x1c
 6180 1191 18000000 		.4byte	.LVL201
 6181 1195 890F0000 		.4byte	0xf89
 6182 1199 00       		.byte	0
 6183 119a 27       		.uleb128 0x27
 6184 119b 430A0000 		.4byte	.LASF131
 6185 119f 01       		.byte	0x1
 6186 11a0 B20B     		.2byte	0xbb2
 6187 11a2 00000000 		.4byte	.LFB27
 6188 11a6 80000000 		.4byte	.LFE27-.LFB27
 6189 11aa 01       		.uleb128 0x1
 6190 11ab 9C       		.byte	0x9c
 6191 11ac E7110000 		.4byte	0x11e7
 6192 11b0 30       		.uleb128 0x30
 6193 11b1 40000000 		.4byte	.Ldebug_ranges0+0x40
 6194 11b5 20       		.uleb128 0x20
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 217


 6195 11b6 DD0C0000 		.4byte	.LASF132
 6196 11ba 01       		.byte	0x1
 6197 11bb E70B     		.2byte	0xbe7
 6198 11bd 12010000 		.4byte	0x112
 6199 11c1 01       		.uleb128 0x1
 6200 11c2 53       		.byte	0x53
 6201 11c3 23       		.uleb128 0x23
 6202 11c4 34000000 		.4byte	.LBB45
 6203 11c8 40000000 		.4byte	.LBE45-.LBB45
 6204 11cc 20       		.uleb128 0x20
 6205 11cd 4C000000 		.4byte	.LASF133
 6206 11d1 01       		.byte	0x1
 6207 11d2 E70B     		.2byte	0xbe7
 6208 11d4 E7110000 		.4byte	0x11e7
 6209 11d8 0B       		.uleb128 0xb
 6210 11d9 73       		.byte	0x73
 6211 11da 00       		.sleb128 0
 6212 11db 44       		.byte	0x44
 6213 11dc 1E       		.byte	0x1e
 6214 11dd 03       		.byte	0x3
 6215 11de 30000000 		.4byte	pxReadyTasksLists
 6216 11e2 22       		.byte	0x22
 6217 11e3 9F       		.byte	0x9f
 6218 11e4 00       		.byte	0
 6219 11e5 00       		.byte	0
 6220 11e6 00       		.byte	0
 6221 11e7 07       		.uleb128 0x7
 6222 11e8 830F0000 		.4byte	0xf83
 6223 11ec 27       		.uleb128 0x27
 6224 11ed 580D0000 		.4byte	.LASF134
 6225 11f1 01       		.byte	0x1
 6226 11f2 A306     		.2byte	0x6a3
 6227 11f4 00000000 		.4byte	.LFB13
 6228 11f8 AC000000 		.4byte	.LFE13-.LFB13
 6229 11fc 01       		.uleb128 0x1
 6230 11fd 9C       		.byte	0x9c
 6231 11fe BA120000 		.4byte	0x12ba
 6232 1202 18       		.uleb128 0x18
 6233 1203 1B0B0000 		.4byte	.LASF135
 6234 1207 01       		.byte	0x1
 6235 1208 A306     		.2byte	0x6a3
 6236 120a 1B020000 		.4byte	0x21b
 6237 120e 67090000 		.4byte	.LLST63
 6238 1212 19       		.uleb128 0x19
 6239 1213 410E0000 		.4byte	.LASF71
 6240 1217 01       		.byte	0x1
 6241 1218 A506     		.2byte	0x6a5
 6242 121a CA040000 		.4byte	0x4ca
 6243 121e 85090000 		.4byte	.LLST64
 6244 1222 26       		.uleb128 0x26
 6245 1223 2C000000 		.4byte	.LBB47
 6246 1227 1E000000 		.4byte	.LBE47-.LBB47
 6247 122b 3E120000 		.4byte	0x123e
 6248 122f 21       		.uleb128 0x21
 6249 1230 7800     		.ascii	"x\000"
 6250 1232 01       		.byte	0x1
 6251 1233 C806     		.2byte	0x6c8
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 218


 6252 1235 07010000 		.4byte	0x107
 6253 1239 98090000 		.4byte	.LLST65
 6254 123d 00       		.byte	0
 6255 123e 1C       		.uleb128 0x1c
 6256 123f 08000000 		.4byte	.LVL206
 6257 1243 911E0000 		.4byte	0x1e91
 6258 1247 22       		.uleb128 0x22
 6259 1248 18000000 		.4byte	.LVL208
 6260 124c B31E0000 		.4byte	0x1eb3
 6261 1250 5B120000 		.4byte	0x125b
 6262 1254 1E       		.uleb128 0x1e
 6263 1255 01       		.uleb128 0x1
 6264 1256 50       		.byte	0x50
 6265 1257 02       		.uleb128 0x2
 6266 1258 75       		.byte	0x75
 6267 1259 00       		.sleb128 0
 6268 125a 00       		.byte	0
 6269 125b 22       		.uleb128 0x22
 6270 125c 24000000 		.4byte	.LVL209
 6271 1260 B31E0000 		.4byte	0x1eb3
 6272 1264 6F120000 		.4byte	0x126f
 6273 1268 1E       		.uleb128 0x1e
 6274 1269 01       		.uleb128 0x1
 6275 126a 50       		.byte	0x50
 6276 126b 02       		.uleb128 0x2
 6277 126c 74       		.byte	0x74
 6278 126d 18       		.sleb128 24
 6279 126e 00       		.byte	0
 6280 126f 22       		.uleb128 0x22
 6281 1270 2C000000 		.4byte	.LVL210
 6282 1274 9C1E0000 		.4byte	0x1e9c
 6283 1278 8C120000 		.4byte	0x128c
 6284 127c 1E       		.uleb128 0x1e
 6285 127d 01       		.uleb128 0x1
 6286 127e 50       		.byte	0x50
 6287 127f 05       		.uleb128 0x5
 6288 1280 03       		.byte	0x3
 6289 1281 00000000 		.4byte	.LANCHOR0
 6290 1285 1E       		.uleb128 0x1e
 6291 1286 01       		.uleb128 0x1
 6292 1287 51       		.byte	0x51
 6293 1288 02       		.uleb128 0x2
 6294 1289 75       		.byte	0x75
 6295 128a 00       		.sleb128 0
 6296 128b 00       		.byte	0
 6297 128c 1C       		.uleb128 0x1c
 6298 128d 4E000000 		.4byte	.LVL213
 6299 1291 A81E0000 		.4byte	0x1ea8
 6300 1295 1C       		.uleb128 0x1c
 6301 1296 5A000000 		.4byte	.LVL214
 6302 129a 911E0000 		.4byte	0x1e91
 6303 129e 1C       		.uleb128 0x1c
 6304 129f 5E000000 		.4byte	.LVL215
 6305 12a3 78040000 		.4byte	0x478
 6306 12a7 1C       		.uleb128 0x1c
 6307 12a8 62000000 		.4byte	.LVL216
 6308 12ac A81E0000 		.4byte	0x1ea8
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 219


 6309 12b0 1C       		.uleb128 0x1c
 6310 12b1 A0000000 		.4byte	.LVL219
 6311 12b5 9A110000 		.4byte	0x119a
 6312 12b9 00       		.byte	0
 6313 12ba 27       		.uleb128 0x27
 6314 12bb 2F060000 		.4byte	.LASF136
 6315 12bf 01       		.byte	0x1
 6316 12c0 FE0B     		.2byte	0xbfe
 6317 12c2 00000000 		.4byte	.LFB28
 6318 12c6 20000000 		.4byte	.LFE28-.LFB28
 6319 12ca 01       		.uleb128 0x1
 6320 12cb 9C       		.byte	0x9c
 6321 12cc 1B130000 		.4byte	0x131b
 6322 12d0 18       		.uleb128 0x18
 6323 12d1 12010000 		.4byte	.LASF137
 6324 12d5 01       		.byte	0x1
 6325 12d6 FE0B     		.2byte	0xbfe
 6326 12d8 E7110000 		.4byte	0x11e7
 6327 12dc B7090000 		.4byte	.LLST66
 6328 12e0 18       		.uleb128 0x18
 6329 12e1 360D0000 		.4byte	.LASF88
 6330 12e5 01       		.byte	0x1
 6331 12e6 FF0B     		.2byte	0xbff
 6332 12e8 0D080000 		.4byte	0x80d
 6333 12ec D8090000 		.4byte	.LLST67
 6334 12f0 22       		.uleb128 0x22
 6335 12f1 10000000 		.4byte	.LVL223
 6336 12f5 BF1E0000 		.4byte	0x1ebf
 6337 12f9 05130000 		.4byte	0x1305
 6338 12fd 1E       		.uleb128 0x1e
 6339 12fe 01       		.uleb128 0x1
 6340 12ff 50       		.byte	0x50
 6341 1300 03       		.uleb128 0x3
 6342 1301 F3       		.byte	0xf3
 6343 1302 01       		.uleb128 0x1
 6344 1303 50       		.byte	0x50
 6345 1304 00       		.byte	0
 6346 1305 1D       		.uleb128 0x1d
 6347 1306 18000000 		.4byte	.LVL224
 6348 130a 7F070000 		.4byte	0x77f
 6349 130e 1E       		.uleb128 0x1e
 6350 130f 01       		.uleb128 0x1
 6351 1310 50       		.byte	0x50
 6352 1311 02       		.uleb128 0x2
 6353 1312 74       		.byte	0x74
 6354 1313 00       		.sleb128 0
 6355 1314 1E       		.uleb128 0x1e
 6356 1315 01       		.uleb128 0x1
 6357 1316 51       		.byte	0x51
 6358 1317 01       		.uleb128 0x1
 6359 1318 31       		.byte	0x31
 6360 1319 00       		.byte	0
 6361 131a 00       		.byte	0
 6362 131b 27       		.uleb128 0x27
 6363 131c 7B0C0000 		.4byte	.LASF138
 6364 1320 01       		.byte	0x1
 6365 1321 100C     		.2byte	0xc10
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 220


 6366 1323 00000000 		.4byte	.LFB29
 6367 1327 28000000 		.4byte	.LFE29-.LFB29
 6368 132b 01       		.uleb128 0x1
 6369 132c 9C       		.byte	0x9c
 6370 132d 8C130000 		.4byte	0x138c
 6371 1331 18       		.uleb128 0x18
 6372 1332 12010000 		.4byte	.LASF137
 6373 1336 01       		.byte	0x1
 6374 1337 100C     		.2byte	0xc10
 6375 1339 830F0000 		.4byte	0xf83
 6376 133d 040A0000 		.4byte	.LLST68
 6377 1341 18       		.uleb128 0x18
 6378 1342 A10A0000 		.4byte	.LASF24
 6379 1346 01       		.byte	0x1
 6380 1347 110C     		.2byte	0xc11
 6381 1349 0D080000 		.4byte	0x80d
 6382 134d 250A0000 		.4byte	.LLST69
 6383 1351 18       		.uleb128 0x18
 6384 1352 360D0000 		.4byte	.LASF88
 6385 1356 01       		.byte	0x1
 6386 1357 120C     		.2byte	0xc12
 6387 1359 0D080000 		.4byte	0x80d
 6388 135d 460A0000 		.4byte	.LLST70
 6389 1361 22       		.uleb128 0x22
 6390 1362 1A000000 		.4byte	.LVL229
 6391 1366 9C1E0000 		.4byte	0x1e9c
 6392 136a 76130000 		.4byte	0x1376
 6393 136e 1E       		.uleb128 0x1e
 6394 136f 01       		.uleb128 0x1
 6395 1370 50       		.byte	0x50
 6396 1371 03       		.uleb128 0x3
 6397 1372 F3       		.byte	0xf3
 6398 1373 01       		.uleb128 0x1
 6399 1374 50       		.byte	0x50
 6400 1375 00       		.byte	0
 6401 1376 1D       		.uleb128 0x1d
 6402 1377 22000000 		.4byte	.LVL230
 6403 137b 7F070000 		.4byte	0x77f
 6404 137f 1E       		.uleb128 0x1e
 6405 1380 01       		.uleb128 0x1
 6406 1381 50       		.byte	0x50
 6407 1382 02       		.uleb128 0x2
 6408 1383 74       		.byte	0x74
 6409 1384 00       		.sleb128 0
 6410 1385 1E       		.uleb128 0x1e
 6411 1386 01       		.uleb128 0x1
 6412 1387 51       		.byte	0x51
 6413 1388 01       		.uleb128 0x1
 6414 1389 31       		.byte	0x31
 6415 138a 00       		.byte	0
 6416 138b 00       		.byte	0
 6417 138c 27       		.uleb128 0x27
 6418 138d 72070000 		.4byte	.LASF139
 6419 1391 01       		.byte	0x1
 6420 1392 2C0C     		.2byte	0xc2c
 6421 1394 00000000 		.4byte	.LFB30
 6422 1398 28000000 		.4byte	.LFE30-.LFB30
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 221


 6423 139c 01       		.uleb128 0x1
 6424 139d 9C       		.byte	0x9c
 6425 139e FE130000 		.4byte	0x13fe
 6426 13a2 18       		.uleb128 0x18
 6427 13a3 12010000 		.4byte	.LASF137
 6428 13a7 01       		.byte	0x1
 6429 13a8 2C0C     		.2byte	0xc2c
 6430 13aa E7110000 		.4byte	0x11e7
 6431 13ae 720A0000 		.4byte	.LLST71
 6432 13b2 18       		.uleb128 0x18
 6433 13b3 360D0000 		.4byte	.LASF88
 6434 13b7 01       		.byte	0x1
 6435 13b8 2D0C     		.2byte	0xc2d
 6436 13ba 1D010000 		.4byte	0x11d
 6437 13be 930A0000 		.4byte	.LLST72
 6438 13c2 18       		.uleb128 0x18
 6439 13c3 A4010000 		.4byte	.LASF140
 6440 13c7 01       		.byte	0x1
 6441 13c8 2E0C     		.2byte	0xc2e
 6442 13ca 08080000 		.4byte	0x808
 6443 13ce B10A0000 		.4byte	.LLST73
 6444 13d2 22       		.uleb128 0x22
 6445 13d3 12000000 		.4byte	.LVL234
 6446 13d7 9C1E0000 		.4byte	0x1e9c
 6447 13db E7130000 		.4byte	0x13e7
 6448 13df 1E       		.uleb128 0x1e
 6449 13e0 01       		.uleb128 0x1
 6450 13e1 50       		.byte	0x50
 6451 13e2 03       		.uleb128 0x3
 6452 13e3 F3       		.byte	0xf3
 6453 13e4 01       		.uleb128 0x1
 6454 13e5 50       		.byte	0x50
 6455 13e6 00       		.byte	0
 6456 13e7 1D       		.uleb128 0x1d
 6457 13e8 20000000 		.4byte	.LVL236
 6458 13ec 7F070000 		.4byte	0x77f
 6459 13f0 1E       		.uleb128 0x1e
 6460 13f1 01       		.uleb128 0x1
 6461 13f2 50       		.byte	0x50
 6462 13f3 02       		.uleb128 0x2
 6463 13f4 75       		.byte	0x75
 6464 13f5 00       		.sleb128 0
 6465 13f6 1E       		.uleb128 0x1e
 6466 13f7 01       		.uleb128 0x1
 6467 13f8 51       		.byte	0x51
 6468 13f9 02       		.uleb128 0x2
 6469 13fa 74       		.byte	0x74
 6470 13fb 00       		.sleb128 0
 6471 13fc 00       		.byte	0
 6472 13fd 00       		.byte	0
 6473 13fe 25       		.uleb128 0x25
 6474 13ff 9B060000 		.4byte	.LASF141
 6475 1403 01       		.byte	0x1
 6476 1404 4D0C     		.2byte	0xc4d
 6477 1406 07010000 		.4byte	0x107
 6478 140a 00000000 		.4byte	.LFB31
 6479 140e 74000000 		.4byte	.LFE31-.LFB31
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 222


 6480 1412 01       		.uleb128 0x1
 6481 1413 9C       		.byte	0x9c
 6482 1414 9E140000 		.4byte	0x149e
 6483 1418 18       		.uleb128 0x18
 6484 1419 12010000 		.4byte	.LASF137
 6485 141d 01       		.byte	0x1
 6486 141e 4D0C     		.2byte	0xc4d
 6487 1420 A9140000 		.4byte	0x14a9
 6488 1424 DD0A0000 		.4byte	.LLST74
 6489 1428 19       		.uleb128 0x19
 6490 1429 1E030000 		.4byte	.LASF142
 6491 142d 01       		.byte	0x1
 6492 142e 4F0C     		.2byte	0xc4f
 6493 1430 CA040000 		.4byte	0x4ca
 6494 1434 FE0A0000 		.4byte	.LLST75
 6495 1438 19       		.uleb128 0x19
 6496 1439 940B0000 		.4byte	.LASF70
 6497 143d 01       		.byte	0x1
 6498 143e 500C     		.2byte	0xc50
 6499 1440 07010000 		.4byte	0x107
 6500 1444 110B0000 		.4byte	.LLST76
 6501 1448 22       		.uleb128 0x22
 6502 1449 10000000 		.4byte	.LVL241
 6503 144d B31E0000 		.4byte	0x1eb3
 6504 1451 5C140000 		.4byte	0x145c
 6505 1455 1E       		.uleb128 0x1e
 6506 1456 01       		.uleb128 0x1
 6507 1457 50       		.byte	0x50
 6508 1458 02       		.uleb128 0x2
 6509 1459 75       		.byte	0x75
 6510 145a 00       		.sleb128 0
 6511 145b 00       		.byte	0
 6512 145c 22       		.uleb128 0x22
 6513 145d 20000000 		.4byte	.LVL242
 6514 1461 B31E0000 		.4byte	0x1eb3
 6515 1465 70140000 		.4byte	0x1470
 6516 1469 1E       		.uleb128 0x1e
 6517 146a 01       		.uleb128 0x1
 6518 146b 50       		.byte	0x50
 6519 146c 02       		.uleb128 0x2
 6520 146d 75       		.byte	0x75
 6521 146e 00       		.sleb128 0
 6522 146f 00       		.byte	0
 6523 1470 22       		.uleb128 0x22
 6524 1471 42000000 		.4byte	.LVL243
 6525 1475 9C1E0000 		.4byte	0x1e9c
 6526 1479 84140000 		.4byte	0x1484
 6527 147d 1E       		.uleb128 0x1e
 6528 147e 01       		.uleb128 0x1
 6529 147f 51       		.byte	0x51
 6530 1480 02       		.uleb128 0x2
 6531 1481 75       		.byte	0x75
 6532 1482 00       		.sleb128 0
 6533 1483 00       		.byte	0
 6534 1484 1D       		.uleb128 0x1d
 6535 1485 4C000000 		.4byte	.LVL244
 6536 1489 9C1E0000 		.4byte	0x1e9c
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 223


 6537 148d 1E       		.uleb128 0x1e
 6538 148e 01       		.uleb128 0x1
 6539 148f 50       		.byte	0x50
 6540 1490 05       		.uleb128 0x5
 6541 1491 03       		.byte	0x3
 6542 1492 14000000 		.4byte	.LANCHOR0+20
 6543 1496 1E       		.uleb128 0x1e
 6544 1497 01       		.uleb128 0x1
 6545 1498 51       		.byte	0x51
 6546 1499 02       		.uleb128 0x2
 6547 149a 75       		.byte	0x75
 6548 149b 00       		.sleb128 0
 6549 149c 00       		.byte	0
 6550 149d 00       		.byte	0
 6551 149e 06       		.uleb128 0x6
 6552 149f 04       		.byte	0x4
 6553 14a0 A4140000 		.4byte	0x14a4
 6554 14a4 07       		.uleb128 0x7
 6555 14a5 10020000 		.4byte	0x210
 6556 14a9 07       		.uleb128 0x7
 6557 14aa 9E140000 		.4byte	0x149e
 6558 14ae 27       		.uleb128 0x27
 6559 14af 60060000 		.4byte	.LASF143
 6560 14b3 01       		.byte	0x1
 6561 14b4 910C     		.2byte	0xc91
 6562 14b6 00000000 		.4byte	.LFB32
 6563 14ba 54000000 		.4byte	.LFE32-.LFB32
 6564 14be 01       		.uleb128 0x1
 6565 14bf 9C       		.byte	0x9c
 6566 14c0 2E150000 		.4byte	0x152e
 6567 14c4 18       		.uleb128 0x18
 6568 14c5 A90E0000 		.4byte	.LASF144
 6569 14c9 01       		.byte	0x1
 6570 14ca 910C     		.2byte	0xc91
 6571 14cc 0A020000 		.4byte	0x20a
 6572 14d0 300B0000 		.4byte	.LLST77
 6573 14d4 18       		.uleb128 0x18
 6574 14d5 A10A0000 		.4byte	.LASF24
 6575 14d9 01       		.byte	0x1
 6576 14da 920C     		.2byte	0xc92
 6577 14dc 0D080000 		.4byte	0x80d
 6578 14e0 510B0000 		.4byte	.LLST78
 6579 14e4 19       		.uleb128 0x19
 6580 14e5 1E030000 		.4byte	.LASF142
 6581 14e9 01       		.byte	0x1
 6582 14ea 940C     		.2byte	0xc94
 6583 14ec CA040000 		.4byte	0x4ca
 6584 14f0 720B0000 		.4byte	.LLST79
 6585 14f4 22       		.uleb128 0x22
 6586 14f5 0E000000 		.4byte	.LVL252
 6587 14f9 B31E0000 		.4byte	0x1eb3
 6588 14fd 09150000 		.4byte	0x1509
 6589 1501 1E       		.uleb128 0x1e
 6590 1502 01       		.uleb128 0x1
 6591 1503 50       		.byte	0x50
 6592 1504 03       		.uleb128 0x3
 6593 1505 F3       		.byte	0xf3
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 224


 6594 1506 01       		.uleb128 0x1
 6595 1507 50       		.byte	0x50
 6596 1508 00       		.byte	0
 6597 1509 22       		.uleb128 0x22
 6598 150a 16000000 		.4byte	.LVL253
 6599 150e B31E0000 		.4byte	0x1eb3
 6600 1512 1D150000 		.4byte	0x151d
 6601 1516 1E       		.uleb128 0x1e
 6602 1517 01       		.uleb128 0x1
 6603 1518 50       		.byte	0x50
 6604 1519 02       		.uleb128 0x2
 6605 151a 76       		.byte	0x76
 6606 151b 00       		.sleb128 0
 6607 151c 00       		.byte	0
 6608 151d 1D       		.uleb128 0x1d
 6609 151e 3C000000 		.4byte	.LVL254
 6610 1522 9C1E0000 		.4byte	0x1e9c
 6611 1526 1E       		.uleb128 0x1e
 6612 1527 01       		.uleb128 0x1
 6613 1528 51       		.byte	0x51
 6614 1529 02       		.uleb128 0x2
 6615 152a 76       		.byte	0x76
 6616 152b 00       		.sleb128 0
 6617 152c 00       		.byte	0
 6618 152d 00       		.byte	0
 6619 152e 27       		.uleb128 0x27
 6620 152f B6010000 		.4byte	.LASF145
 6621 1533 01       		.byte	0x1
 6622 1534 C20C     		.2byte	0xcc2
 6623 1536 00000000 		.4byte	.LFB33
 6624 153a 20000000 		.4byte	.LFE33-.LFB33
 6625 153e 01       		.uleb128 0x1
 6626 153f 9C       		.byte	0x9c
 6627 1540 67150000 		.4byte	0x1567
 6628 1544 18       		.uleb128 0x18
 6629 1545 FB080000 		.4byte	.LASF146
 6630 1549 01       		.byte	0x1
 6631 154a C20C     		.2byte	0xcc2
 6632 154c 6D150000 		.4byte	0x156d
 6633 1550 850B0000 		.4byte	.LLST80
 6634 1554 1C       		.uleb128 0x1c
 6635 1555 08000000 		.4byte	.LVL257
 6636 1559 911E0000 		.4byte	0x1e91
 6637 155d 1C       		.uleb128 0x1c
 6638 155e 1A000000 		.4byte	.LVL258
 6639 1562 A81E0000 		.4byte	0x1ea8
 6640 1566 00       		.byte	0
 6641 1567 06       		.uleb128 0x6
 6642 1568 04       		.byte	0x4
 6643 1569 08030000 		.4byte	0x308
 6644 156d 07       		.uleb128 0x7
 6645 156e 67150000 		.4byte	0x1567
 6646 1572 27       		.uleb128 0x27
 6647 1573 48090000 		.4byte	.LASF147
 6648 1577 01       		.byte	0x1
 6649 1578 CE0C     		.2byte	0xcce
 6650 157a 00000000 		.4byte	.LFB34
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 225


 6651 157e 14000000 		.4byte	.LFE34-.LFB34
 6652 1582 01       		.uleb128 0x1
 6653 1583 9C       		.byte	0x9c
 6654 1584 97150000 		.4byte	0x1597
 6655 1588 1F       		.uleb128 0x1f
 6656 1589 FB080000 		.4byte	.LASF146
 6657 158d 01       		.byte	0x1
 6658 158e CE0C     		.2byte	0xcce
 6659 1590 6D150000 		.4byte	0x156d
 6660 1594 01       		.uleb128 0x1
 6661 1595 50       		.byte	0x50
 6662 1596 00       		.byte	0
 6663 1597 25       		.uleb128 0x25
 6664 1598 2A0B0000 		.4byte	.LASF148
 6665 159c 01       		.byte	0x1
 6666 159d D60C     		.2byte	0xcd6
 6667 159f 07010000 		.4byte	0x107
 6668 15a3 00000000 		.4byte	.LFB35
 6669 15a7 5C000000 		.4byte	.LFE35-.LFB35
 6670 15ab 01       		.uleb128 0x1
 6671 15ac 9C       		.byte	0x9c
 6672 15ad 32160000 		.4byte	0x1632
 6673 15b1 18       		.uleb128 0x18
 6674 15b2 FB080000 		.4byte	.LASF146
 6675 15b6 01       		.byte	0x1
 6676 15b7 D60C     		.2byte	0xcd6
 6677 15b9 6D150000 		.4byte	0x156d
 6678 15bd B10B0000 		.4byte	.LLST81
 6679 15c1 18       		.uleb128 0x18
 6680 15c2 C30C0000 		.4byte	.LASF149
 6681 15c6 01       		.byte	0x1
 6682 15c7 D70C     		.2byte	0xcd7
 6683 15c9 E8100000 		.4byte	0x10e8
 6684 15cd 280C0000 		.4byte	.LLST82
 6685 15d1 19       		.uleb128 0x19
 6686 15d2 940B0000 		.4byte	.LASF70
 6687 15d6 01       		.byte	0x1
 6688 15d7 D90C     		.2byte	0xcd9
 6689 15d9 07010000 		.4byte	0x107
 6690 15dd 540C0000 		.4byte	.LLST83
 6691 15e1 26       		.uleb128 0x26
 6692 15e2 0A000000 		.4byte	.LBB48
 6693 15e6 46000000 		.4byte	.LBE48-.LBB48
 6694 15ea 1F160000 		.4byte	0x161f
 6695 15ee 19       		.uleb128 0x19
 6696 15ef 78050000 		.4byte	.LASF91
 6697 15f3 01       		.byte	0x1
 6698 15f4 E10C     		.2byte	0xce1
 6699 15f6 0D080000 		.4byte	0x80d
 6700 15fa 960C0000 		.4byte	.LLST84
 6701 15fe 19       		.uleb128 0x19
 6702 15ff 4C030000 		.4byte	.LASF150
 6703 1603 01       		.byte	0x1
 6704 1604 E20C     		.2byte	0xce2
 6705 1606 0D080000 		.4byte	0x80d
 6706 160a B40C0000 		.4byte	.LLST85
 6707 160e 1D       		.uleb128 0x1d
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 226


 6708 160f 42000000 		.4byte	.LVL269
 6709 1613 72150000 		.4byte	0x1572
 6710 1617 1E       		.uleb128 0x1e
 6711 1618 01       		.uleb128 0x1
 6712 1619 50       		.byte	0x50
 6713 161a 02       		.uleb128 0x2
 6714 161b 74       		.byte	0x74
 6715 161c 00       		.sleb128 0
 6716 161d 00       		.byte	0
 6717 161e 00       		.byte	0
 6718 161f 1C       		.uleb128 0x1c
 6719 1620 0A000000 		.4byte	.LVL262
 6720 1624 911E0000 		.4byte	0x1e91
 6721 1628 1C       		.uleb128 0x1c
 6722 1629 54000000 		.4byte	.LVL276
 6723 162d A81E0000 		.4byte	0x1ea8
 6724 1631 00       		.byte	0
 6725 1632 2D       		.uleb128 0x2d
 6726 1633 A50B0000 		.4byte	.LASF152
 6727 1637 01       		.byte	0x1
 6728 1638 170D     		.2byte	0xd17
 6729 163a 00000000 		.4byte	.LFB36
 6730 163e 10000000 		.4byte	.LFE36-.LFB36
 6731 1642 01       		.uleb128 0x1
 6732 1643 9C       		.byte	0x9c
 6733 1644 27       		.uleb128 0x27
 6734 1645 6C000000 		.4byte	.LASF153
 6735 1649 01       		.byte	0x1
 6736 164a F60D     		.2byte	0xdf6
 6737 164c 00000000 		.4byte	.LFB38
 6738 1650 1C000000 		.4byte	.LFE38-.LFB38
 6739 1654 01       		.uleb128 0x1
 6740 1655 9C       		.byte	0x9c
 6741 1656 99160000 		.4byte	0x1699
 6742 165a 18       		.uleb128 0x18
 6743 165b 0A060000 		.4byte	.LASF154
 6744 165f 01       		.byte	0x1
 6745 1660 F60D     		.2byte	0xdf6
 6746 1662 1B020000 		.4byte	0x21b
 6747 1666 E20C0000 		.4byte	.LLST86
 6748 166a 18       		.uleb128 0x18
 6749 166b 780B0000 		.4byte	.LASF155
 6750 166f 01       		.byte	0x1
 6751 1670 F70D     		.2byte	0xdf7
 6752 1672 07010000 		.4byte	0x107
 6753 1676 F50C0000 		.4byte	.LLST87
 6754 167a 1F       		.uleb128 0x1f
 6755 167b B90E0000 		.4byte	.LASF156
 6756 167f 01       		.byte	0x1
 6757 1680 F80D     		.2byte	0xdf8
 6758 1682 A5000000 		.4byte	0xa5
 6759 1686 01       		.uleb128 0x1
 6760 1687 52       		.byte	0x52
 6761 1688 19       		.uleb128 0x19
 6762 1689 410E0000 		.4byte	.LASF71
 6763 168d 01       		.byte	0x1
 6764 168e FA0D     		.2byte	0xdfa
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 227


 6765 1690 CA040000 		.4byte	0x4ca
 6766 1694 230D0000 		.4byte	.LLST88
 6767 1698 00       		.byte	0
 6768 1699 25       		.uleb128 0x25
 6769 169a 190C0000 		.4byte	.LASF157
 6770 169e 01       		.byte	0x1
 6771 169f 090E     		.2byte	0xe09
 6772 16a1 A5000000 		.4byte	0xa5
 6773 16a5 00000000 		.4byte	.LFB39
 6774 16a9 20000000 		.4byte	.LFE39-.LFB39
 6775 16ad 01       		.uleb128 0x1
 6776 16ae 9C       		.byte	0x9c
 6777 16af F4160000 		.4byte	0x16f4
 6778 16b3 18       		.uleb128 0x18
 6779 16b4 C8090000 		.4byte	.LASF115
 6780 16b8 01       		.byte	0x1
 6781 16b9 090E     		.2byte	0xe09
 6782 16bb 1B020000 		.4byte	0x21b
 6783 16bf 360D0000 		.4byte	.LLST89
 6784 16c3 18       		.uleb128 0x18
 6785 16c4 780B0000 		.4byte	.LASF155
 6786 16c8 01       		.byte	0x1
 6787 16c9 0A0E     		.2byte	0xe0a
 6788 16cb 07010000 		.4byte	0x107
 6789 16cf 620D0000 		.4byte	.LLST90
 6790 16d3 19       		.uleb128 0x19
 6791 16d4 F3030000 		.4byte	.LASF158
 6792 16d8 01       		.byte	0x1
 6793 16d9 0C0E     		.2byte	0xe0c
 6794 16db A5000000 		.4byte	0xa5
 6795 16df 8D0D0000 		.4byte	.LLST91
 6796 16e3 19       		.uleb128 0x19
 6797 16e4 410E0000 		.4byte	.LASF71
 6798 16e8 01       		.byte	0x1
 6799 16e9 0D0E     		.2byte	0xe0d
 6800 16eb CA040000 		.4byte	0x4ca
 6801 16ef C30D0000 		.4byte	.LLST92
 6802 16f3 00       		.byte	0
 6803 16f4 25       		.uleb128 0x25
 6804 16f5 750D0000 		.4byte	.LASF159
 6805 16f9 01       		.byte	0x1
 6806 16fa 9B0F     		.2byte	0xf9b
 6807 16fc 1B020000 		.4byte	0x21b
 6808 1700 00000000 		.4byte	.LFB44
 6809 1704 0C000000 		.4byte	.LFE44-.LFB44
 6810 1708 01       		.uleb128 0x1
 6811 1709 9C       		.byte	0x9c
 6812 170a 1D170000 		.4byte	0x171d
 6813 170e 20       		.uleb128 0x20
 6814 170f 940B0000 		.4byte	.LASF70
 6815 1713 01       		.byte	0x1
 6816 1714 9D0F     		.2byte	0xf9d
 6817 1716 1B020000 		.4byte	0x21b
 6818 171a 01       		.uleb128 0x1
 6819 171b 50       		.byte	0x50
 6820 171c 00       		.byte	0
 6821 171d 25       		.uleb128 0x25
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 228


 6822 171e B7000000 		.4byte	.LASF160
 6823 1722 01       		.byte	0x1
 6824 1723 AC0F     		.2byte	0xfac
 6825 1725 07010000 		.4byte	0x107
 6826 1729 00000000 		.4byte	.LFB45
 6827 172d 20000000 		.4byte	.LFE45-.LFB45
 6828 1731 01       		.uleb128 0x1
 6829 1732 9C       		.byte	0x9c
 6830 1733 46170000 		.4byte	0x1746
 6831 1737 20       		.uleb128 0x20
 6832 1738 940B0000 		.4byte	.LASF70
 6833 173c 01       		.byte	0x1
 6834 173d AE0F     		.2byte	0xfae
 6835 173f 07010000 		.4byte	0x107
 6836 1743 01       		.uleb128 0x1
 6837 1744 50       		.byte	0x50
 6838 1745 00       		.byte	0
 6839 1746 25       		.uleb128 0x25
 6840 1747 96090000 		.4byte	.LASF161
 6841 174b 01       		.byte	0x1
 6842 174c 1B12     		.2byte	0x121b
 6843 174e 1D010000 		.4byte	0x11d
 6844 1752 00000000 		.4byte	.LFB46
 6845 1756 20000000 		.4byte	.LFE46-.LFB46
 6846 175a 01       		.uleb128 0x1
 6847 175b 9C       		.byte	0x9c
 6848 175c 6F170000 		.4byte	0x176f
 6849 1760 20       		.uleb128 0x20
 6850 1761 6B020000 		.4byte	.LASF96
 6851 1765 01       		.byte	0x1
 6852 1766 1D12     		.2byte	0x121d
 6853 1768 1D010000 		.4byte	0x11d
 6854 176c 01       		.uleb128 0x1
 6855 176d 50       		.byte	0x50
 6856 176e 00       		.byte	0
 6857 176f 25       		.uleb128 0x25
 6858 1770 5A070000 		.4byte	.LASF162
 6859 1774 01       		.byte	0x1
 6860 1775 3C12     		.2byte	0x123c
 6861 1777 D5000000 		.4byte	0xd5
 6862 177b 00000000 		.4byte	.LFB47
 6863 177f A0000000 		.4byte	.LFE47-.LFB47
 6864 1783 01       		.uleb128 0x1
 6865 1784 9C       		.byte	0x9c
 6866 1785 07180000 		.4byte	0x1807
 6867 1789 18       		.uleb128 0x18
 6868 178a B50C0000 		.4byte	.LASF163
 6869 178e 01       		.byte	0x1
 6870 178f 3C12     		.2byte	0x123c
 6871 1791 12010000 		.4byte	0x112
 6872 1795 D60D0000 		.4byte	.LLST93
 6873 1799 18       		.uleb128 0x18
 6874 179a 3A030000 		.4byte	.LASF164
 6875 179e 01       		.byte	0x1
 6876 179f 3D12     		.2byte	0x123d
 6877 17a1 07010000 		.4byte	0x107
 6878 17a5 020E0000 		.4byte	.LLST94
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 229


 6879 17a9 18       		.uleb128 0x18
 6880 17aa 360D0000 		.4byte	.LASF88
 6881 17ae 01       		.byte	0x1
 6882 17af 3E12     		.2byte	0x123e
 6883 17b1 1D010000 		.4byte	0x11d
 6884 17b5 2E0E0000 		.4byte	.LLST95
 6885 17b9 19       		.uleb128 0x19
 6886 17ba 4C080000 		.4byte	.LASF165
 6887 17be 01       		.byte	0x1
 6888 17bf 4012     		.2byte	0x1240
 6889 17c1 D5000000 		.4byte	0xd5
 6890 17c5 5A0E0000 		.4byte	.LLST96
 6891 17c9 1C       		.uleb128 0x1c
 6892 17ca 0C000000 		.4byte	.LVL294
 6893 17ce 911E0000 		.4byte	0x1e91
 6894 17d2 22       		.uleb128 0x22
 6895 17d3 34000000 		.4byte	.LVL295
 6896 17d7 7F070000 		.4byte	0x77f
 6897 17db EB170000 		.4byte	0x17eb
 6898 17df 1E       		.uleb128 0x1e
 6899 17e0 01       		.uleb128 0x1
 6900 17e1 50       		.byte	0x50
 6901 17e2 02       		.uleb128 0x2
 6902 17e3 75       		.byte	0x75
 6903 17e4 00       		.sleb128 0
 6904 17e5 1E       		.uleb128 0x1e
 6905 17e6 01       		.uleb128 0x1
 6906 17e7 51       		.byte	0x51
 6907 17e8 01       		.uleb128 0x1
 6908 17e9 31       		.byte	0x31
 6909 17ea 00       		.byte	0
 6910 17eb 1C       		.uleb128 0x1c
 6911 17ec 48000000 		.4byte	.LVL296
 6912 17f0 A81E0000 		.4byte	0x1ea8
 6913 17f4 1C       		.uleb128 0x1c
 6914 17f5 4C000000 		.4byte	.LVL297
 6915 17f9 911E0000 		.4byte	0x1e91
 6916 17fd 1C       		.uleb128 0x1c
 6917 17fe 92000000 		.4byte	.LVL300
 6918 1802 A81E0000 		.4byte	0x1ea8
 6919 1806 00       		.byte	0
 6920 1807 25       		.uleb128 0x25
 6921 1808 04070000 		.4byte	.LASF166
 6922 180c 01       		.byte	0x1
 6923 180d 8412     		.2byte	0x1284
 6924 180f 07010000 		.4byte	0x107
 6925 1813 00000000 		.4byte	.LFB48
 6926 1817 C4000000 		.4byte	.LFE48-.LFB48
 6927 181b 01       		.uleb128 0x1
 6928 181c 9C       		.byte	0x9c
 6929 181d C0180000 		.4byte	0x18c0
 6930 1821 18       		.uleb128 0x18
 6931 1822 B50C0000 		.4byte	.LASF163
 6932 1826 01       		.byte	0x1
 6933 1827 8412     		.2byte	0x1284
 6934 1829 12010000 		.4byte	0x112
 6935 182d 780E0000 		.4byte	.LLST97
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 230


 6936 1831 18       		.uleb128 0x18
 6937 1832 B6030000 		.4byte	.LASF167
 6938 1836 01       		.byte	0x1
 6939 1837 8512     		.2byte	0x1285
 6940 1839 D5000000 		.4byte	0xd5
 6941 183d A40E0000 		.4byte	.LLST98
 6942 1841 18       		.uleb128 0x18
 6943 1842 8E000000 		.4byte	.LASF168
 6944 1846 01       		.byte	0x1
 6945 1847 8612     		.2byte	0x1286
 6946 1849 D5000000 		.4byte	0xd5
 6947 184d D00E0000 		.4byte	.LLST99
 6948 1851 18       		.uleb128 0x18
 6949 1852 7F0B0000 		.4byte	.LASF169
 6950 1856 01       		.byte	0x1
 6951 1857 8712     		.2byte	0x1287
 6952 1859 C0180000 		.4byte	0x18c0
 6953 185d 150F0000 		.4byte	.LLST100
 6954 1861 18       		.uleb128 0x18
 6955 1862 360D0000 		.4byte	.LASF88
 6956 1866 01       		.byte	0x1
 6957 1867 8812     		.2byte	0x1288
 6958 1869 1D010000 		.4byte	0x11d
 6959 186d 410F0000 		.4byte	.LLST101
 6960 1871 19       		.uleb128 0x19
 6961 1872 940B0000 		.4byte	.LASF70
 6962 1876 01       		.byte	0x1
 6963 1877 8A12     		.2byte	0x128a
 6964 1879 07010000 		.4byte	0x107
 6965 187d 610F0000 		.4byte	.LLST102
 6966 1881 1C       		.uleb128 0x1c
 6967 1882 0E000000 		.4byte	.LVL303
 6968 1886 911E0000 		.4byte	0x1e91
 6969 188a 22       		.uleb128 0x22
 6970 188b 4E000000 		.4byte	.LVL304
 6971 188f 7F070000 		.4byte	0x77f
 6972 1893 A4180000 		.4byte	0x18a4
 6973 1897 1E       		.uleb128 0x1e
 6974 1898 01       		.uleb128 0x1
 6975 1899 50       		.byte	0x50
 6976 189a 03       		.uleb128 0x3
 6977 189b 91       		.byte	0x91
 6978 189c 00       		.sleb128 0
 6979 189d 06       		.byte	0x6
 6980 189e 1E       		.uleb128 0x1e
 6981 189f 01       		.uleb128 0x1
 6982 18a0 51       		.byte	0x51
 6983 18a1 01       		.uleb128 0x1
 6984 18a2 31       		.byte	0x31
 6985 18a3 00       		.byte	0
 6986 18a4 1C       		.uleb128 0x1c
 6987 18a5 62000000 		.4byte	.LVL305
 6988 18a9 A81E0000 		.4byte	0x1ea8
 6989 18ad 1C       		.uleb128 0x1c
 6990 18ae 66000000 		.4byte	.LVL306
 6991 18b2 911E0000 		.4byte	0x1e91
 6992 18b6 1C       		.uleb128 0x1c
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 231


 6993 18b7 B8000000 		.4byte	.LVL312
 6994 18bb A81E0000 		.4byte	0x1ea8
 6995 18bf 00       		.byte	0
 6996 18c0 06       		.uleb128 0x6
 6997 18c1 04       		.byte	0x4
 6998 18c2 D5000000 		.4byte	0xd5
 6999 18c6 25       		.uleb128 0x25
 7000 18c7 0B030000 		.4byte	.LASF170
 7001 18cb 01       		.byte	0x1
 7002 18cc DA12     		.2byte	0x12da
 7003 18ce 07010000 		.4byte	0x107
 7004 18d2 00000000 		.4byte	.LFB49
 7005 18d6 E0000000 		.4byte	.LFE49-.LFB49
 7006 18da 01       		.uleb128 0x1
 7007 18db 9C       		.byte	0x9c
 7008 18dc 9B190000 		.4byte	0x199b
 7009 18e0 18       		.uleb128 0x18
 7010 18e1 E0090000 		.4byte	.LASF171
 7011 18e5 01       		.byte	0x1
 7012 18e6 DA12     		.2byte	0x12da
 7013 18e8 1B020000 		.4byte	0x21b
 7014 18ec 8B0F0000 		.4byte	.LLST103
 7015 18f0 18       		.uleb128 0x18
 7016 18f1 260D0000 		.4byte	.LASF172
 7017 18f5 01       		.byte	0x1
 7018 18f6 DB12     		.2byte	0x12db
 7019 18f8 12010000 		.4byte	0x112
 7020 18fc B70F0000 		.4byte	.LLST104
 7021 1900 18       		.uleb128 0x18
 7022 1901 130B0000 		.4byte	.LASF173
 7023 1905 01       		.byte	0x1
 7024 1906 DC12     		.2byte	0x12dc
 7025 1908 D5000000 		.4byte	0xd5
 7026 190c 94100000 		.4byte	.LLST105
 7027 1910 18       		.uleb128 0x18
 7028 1911 7F090000 		.4byte	.LASF174
 7029 1915 01       		.byte	0x1
 7030 1916 DD12     		.2byte	0x12dd
 7031 1918 D8020000 		.4byte	0x2d8
 7032 191c D9100000 		.4byte	.LLST106
 7033 1920 18       		.uleb128 0x18
 7034 1921 DE080000 		.4byte	.LASF175
 7035 1925 01       		.byte	0x1
 7036 1926 DE12     		.2byte	0x12de
 7037 1928 C0180000 		.4byte	0x18c0
 7038 192c FA100000 		.4byte	.LLST107
 7039 1930 19       		.uleb128 0x19
 7040 1931 410E0000 		.4byte	.LASF71
 7041 1935 01       		.byte	0x1
 7042 1936 E012     		.2byte	0x12e0
 7043 1938 CA040000 		.4byte	0x4ca
 7044 193c 1A110000 		.4byte	.LLST108
 7045 1940 19       		.uleb128 0x19
 7046 1941 940B0000 		.4byte	.LASF70
 7047 1945 01       		.byte	0x1
 7048 1946 E112     		.2byte	0x12e1
 7049 1948 07010000 		.4byte	0x107
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 232


 7050 194c 46110000 		.4byte	.LLST109
 7051 1950 19       		.uleb128 0x19
 7052 1951 090A0000 		.4byte	.LASF176
 7053 1955 01       		.byte	0x1
 7054 1956 E212     		.2byte	0x12e2
 7055 1958 BF000000 		.4byte	0xbf
 7056 195c 70110000 		.4byte	.LLST110
 7057 1960 1C       		.uleb128 0x1c
 7058 1961 14000000 		.4byte	.LVL316
 7059 1965 911E0000 		.4byte	0x1e91
 7060 1969 22       		.uleb128 0x22
 7061 196a 8C000000 		.4byte	.LVL334
 7062 196e B31E0000 		.4byte	0x1eb3
 7063 1972 7D190000 		.4byte	0x197d
 7064 1976 1E       		.uleb128 0x1e
 7065 1977 01       		.uleb128 0x1
 7066 1978 50       		.byte	0x50
 7067 1979 02       		.uleb128 0x2
 7068 197a 77       		.byte	0x77
 7069 197b 00       		.sleb128 0
 7070 197c 00       		.byte	0
 7071 197d 22       		.uleb128 0x22
 7072 197e B2000000 		.4byte	.LVL335
 7073 1982 9C1E0000 		.4byte	0x1e9c
 7074 1986 91190000 		.4byte	0x1991
 7075 198a 1E       		.uleb128 0x1e
 7076 198b 01       		.uleb128 0x1
 7077 198c 51       		.byte	0x51
 7078 198d 02       		.uleb128 0x2
 7079 198e 77       		.byte	0x77
 7080 198f 00       		.sleb128 0
 7081 1990 00       		.byte	0
 7082 1991 1C       		.uleb128 0x1c
 7083 1992 D2000000 		.4byte	.LVL336
 7084 1996 A81E0000 		.4byte	0x1ea8
 7085 199a 00       		.byte	0
 7086 199b 25       		.uleb128 0x25
 7087 199c CB010000 		.4byte	.LASF177
 7088 19a0 01       		.byte	0x1
 7089 19a1 5513     		.2byte	0x1355
 7090 19a3 07010000 		.4byte	0x107
 7091 19a7 00000000 		.4byte	.LFB50
 7092 19ab F8000000 		.4byte	.LFE50-.LFB50
 7093 19af 01       		.uleb128 0x1
 7094 19b0 9C       		.byte	0x9c
 7095 19b1 DA1A0000 		.4byte	0x1ada
 7096 19b5 18       		.uleb128 0x18
 7097 19b6 E0090000 		.4byte	.LASF171
 7098 19ba 01       		.byte	0x1
 7099 19bb 5513     		.2byte	0x1355
 7100 19bd 1B020000 		.4byte	0x21b
 7101 19c1 83110000 		.4byte	.LLST111
 7102 19c5 18       		.uleb128 0x18
 7103 19c6 260D0000 		.4byte	.LASF172
 7104 19ca 01       		.byte	0x1
 7105 19cb 5613     		.2byte	0x1356
 7106 19cd 12010000 		.4byte	0x112
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 233


 7107 19d1 C5110000 		.4byte	.LLST112
 7108 19d5 18       		.uleb128 0x18
 7109 19d6 130B0000 		.4byte	.LASF173
 7110 19da 01       		.byte	0x1
 7111 19db 5713     		.2byte	0x1357
 7112 19dd D5000000 		.4byte	0xd5
 7113 19e1 46120000 		.4byte	.LLST113
 7114 19e5 18       		.uleb128 0x18
 7115 19e6 7F090000 		.4byte	.LASF174
 7116 19ea 01       		.byte	0x1
 7117 19eb 5813     		.2byte	0x1358
 7118 19ed D8020000 		.4byte	0x2d8
 7119 19f1 80120000 		.4byte	.LLST114
 7120 19f5 18       		.uleb128 0x18
 7121 19f6 DE080000 		.4byte	.LASF175
 7122 19fa 01       		.byte	0x1
 7123 19fb 5913     		.2byte	0x1359
 7124 19fd C0180000 		.4byte	0x18c0
 7125 1a01 A1120000 		.4byte	.LLST115
 7126 1a05 18       		.uleb128 0x18
 7127 1a06 CE000000 		.4byte	.LASF178
 7128 1a0a 01       		.byte	0x1
 7129 1a0b 5A13     		.2byte	0x135a
 7130 1a0d DA1A0000 		.4byte	0x1ada
 7131 1a11 C1120000 		.4byte	.LLST116
 7132 1a15 19       		.uleb128 0x19
 7133 1a16 410E0000 		.4byte	.LASF71
 7134 1a1a 01       		.byte	0x1
 7135 1a1b 5C13     		.2byte	0x135c
 7136 1a1d CA040000 		.4byte	0x4ca
 7137 1a21 E1120000 		.4byte	.LLST117
 7138 1a25 19       		.uleb128 0x19
 7139 1a26 090A0000 		.4byte	.LASF176
 7140 1a2a 01       		.byte	0x1
 7141 1a2b 5D13     		.2byte	0x135d
 7142 1a2d BF000000 		.4byte	0xbf
 7143 1a31 23130000 		.4byte	.LLST118
 7144 1a35 19       		.uleb128 0x19
 7145 1a36 940B0000 		.4byte	.LASF70
 7146 1a3a 01       		.byte	0x1
 7147 1a3b 5E13     		.2byte	0x135e
 7148 1a3d 07010000 		.4byte	0x107
 7149 1a41 36130000 		.4byte	.LLST119
 7150 1a45 28       		.uleb128 0x28
 7151 1a46 AF020000 		.4byte	.LASF108
 7152 1a4a 01       		.byte	0x1
 7153 1a4b 5F13     		.2byte	0x135f
 7154 1a4d 12010000 		.4byte	0x112
 7155 1a51 29       		.uleb128 0x29
 7156 1a52 C1030000 		.4byte	0x3c1
 7157 1a56 04000000 		.4byte	.LBB49
 7158 1a5a 14000000 		.4byte	.LBE49-.LBB49
 7159 1a5e 01       		.byte	0x1
 7160 1a5f 7813     		.2byte	0x1378
 7161 1a61 7A1A0000 		.4byte	0x1a7a
 7162 1a65 23       		.uleb128 0x23
 7163 1a66 04000000 		.4byte	.LBB50
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 234


 7164 1a6a 14000000 		.4byte	.LBE50-.LBB50
 7165 1a6e 2A       		.uleb128 0x2a
 7166 1a6f D1030000 		.4byte	0x3d1
 7167 1a73 2A       		.uleb128 0x2a
 7168 1a74 DC030000 		.4byte	0x3dc
 7169 1a78 00       		.byte	0
 7170 1a79 00       		.byte	0
 7171 1a7a 29       		.uleb128 0x29
 7172 1a7b E8030000 		.4byte	0x3e8
 7173 1a7f E2000000 		.4byte	.LBB51
 7174 1a83 04000000 		.4byte	.LBE51-.LBB51
 7175 1a87 01       		.byte	0x1
 7176 1a88 D613     		.2byte	0x13d6
 7177 1a8a 981A0000 		.4byte	0x1a98
 7178 1a8e 2C       		.uleb128 0x2c
 7179 1a8f F4030000 		.4byte	0x3f4
 7180 1a93 60130000 		.4byte	.LLST120
 7181 1a97 00       		.byte	0
 7182 1a98 22       		.uleb128 0x22
 7183 1a99 94000000 		.4byte	.LVL354
 7184 1a9d B31E0000 		.4byte	0x1eb3
 7185 1aa1 AC1A0000 		.4byte	0x1aac
 7186 1aa5 1E       		.uleb128 0x1e
 7187 1aa6 01       		.uleb128 0x1
 7188 1aa7 50       		.byte	0x50
 7189 1aa8 02       		.uleb128 0x2
 7190 1aa9 77       		.byte	0x77
 7191 1aaa 00       		.sleb128 0
 7192 1aab 00       		.byte	0
 7193 1aac 22       		.uleb128 0x22
 7194 1aad B6000000 		.4byte	.LVL355
 7195 1ab1 9C1E0000 		.4byte	0x1e9c
 7196 1ab5 C01A0000 		.4byte	0x1ac0
 7197 1ab9 1E       		.uleb128 0x1e
 7198 1aba 01       		.uleb128 0x1
 7199 1abb 51       		.byte	0x51
 7200 1abc 02       		.uleb128 0x2
 7201 1abd 77       		.byte	0x77
 7202 1abe 00       		.sleb128 0
 7203 1abf 00       		.byte	0
 7204 1ac0 1D       		.uleb128 0x1d
 7205 1ac1 C2000000 		.4byte	.LVL358
 7206 1ac5 9C1E0000 		.4byte	0x1e9c
 7207 1ac9 1E       		.uleb128 0x1e
 7208 1aca 01       		.uleb128 0x1
 7209 1acb 50       		.byte	0x50
 7210 1acc 05       		.uleb128 0x5
 7211 1acd 03       		.byte	0x3
 7212 1ace 14000000 		.4byte	.LANCHOR0+20
 7213 1ad2 1E       		.uleb128 0x1e
 7214 1ad3 01       		.uleb128 0x1
 7215 1ad4 51       		.byte	0x51
 7216 1ad5 02       		.uleb128 0x2
 7217 1ad6 74       		.byte	0x74
 7218 1ad7 18       		.sleb128 24
 7219 1ad8 00       		.byte	0
 7220 1ad9 00       		.byte	0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 235


 7221 1ada 06       		.uleb128 0x6
 7222 1adb 04       		.byte	0x4
 7223 1adc 07010000 		.4byte	0x107
 7224 1ae0 27       		.uleb128 0x27
 7225 1ae1 4F0C0000 		.4byte	.LASF179
 7226 1ae5 01       		.byte	0x1
 7227 1ae6 E013     		.2byte	0x13e0
 7228 1ae8 00000000 		.4byte	.LFB51
 7229 1aec A4000000 		.4byte	.LFE51-.LFB51
 7230 1af0 01       		.uleb128 0x1
 7231 1af1 9C       		.byte	0x9c
 7232 1af2 DB1B0000 		.4byte	0x1bdb
 7233 1af6 18       		.uleb128 0x18
 7234 1af7 E0090000 		.4byte	.LASF171
 7235 1afb 01       		.byte	0x1
 7236 1afc E013     		.2byte	0x13e0
 7237 1afe 1B020000 		.4byte	0x21b
 7238 1b02 73130000 		.4byte	.LLST121
 7239 1b06 18       		.uleb128 0x18
 7240 1b07 260D0000 		.4byte	.LASF172
 7241 1b0b 01       		.byte	0x1
 7242 1b0c E113     		.2byte	0x13e1
 7243 1b0e 12010000 		.4byte	0x112
 7244 1b12 B5130000 		.4byte	.LLST122
 7245 1b16 18       		.uleb128 0x18
 7246 1b17 CE000000 		.4byte	.LASF178
 7247 1b1b 01       		.byte	0x1
 7248 1b1c E213     		.2byte	0x13e2
 7249 1b1e DA1A0000 		.4byte	0x1ada
 7250 1b22 E3130000 		.4byte	.LLST123
 7251 1b26 19       		.uleb128 0x19
 7252 1b27 410E0000 		.4byte	.LASF71
 7253 1b2b 01       		.byte	0x1
 7254 1b2c E413     		.2byte	0x13e4
 7255 1b2e CA040000 		.4byte	0x4ca
 7256 1b32 25140000 		.4byte	.LLST124
 7257 1b36 19       		.uleb128 0x19
 7258 1b37 090A0000 		.4byte	.LASF176
 7259 1b3b 01       		.byte	0x1
 7260 1b3c E513     		.2byte	0x13e5
 7261 1b3e BF000000 		.4byte	0xbf
 7262 1b42 67140000 		.4byte	.LLST125
 7263 1b46 28       		.uleb128 0x28
 7264 1b47 AF020000 		.4byte	.LASF108
 7265 1b4b 01       		.byte	0x1
 7266 1b4c E613     		.2byte	0x13e6
 7267 1b4e 12010000 		.4byte	0x112
 7268 1b52 29       		.uleb128 0x29
 7269 1b53 C1030000 		.4byte	0x3c1
 7270 1b57 02000000 		.4byte	.LBB53
 7271 1b5b 14000000 		.4byte	.LBE53-.LBB53
 7272 1b5f 01       		.byte	0x1
 7273 1b60 FF13     		.2byte	0x13ff
 7274 1b62 7B1B0000 		.4byte	0x1b7b
 7275 1b66 23       		.uleb128 0x23
 7276 1b67 02000000 		.4byte	.LBB54
 7277 1b6b 14000000 		.4byte	.LBE54-.LBB54
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 236


 7278 1b6f 2A       		.uleb128 0x2a
 7279 1b70 D1030000 		.4byte	0x3d1
 7280 1b74 2A       		.uleb128 0x2a
 7281 1b75 DC030000 		.4byte	0x3dc
 7282 1b79 00       		.byte	0
 7283 1b7a 00       		.byte	0
 7284 1b7b 29       		.uleb128 0x29
 7285 1b7c E8030000 		.4byte	0x3e8
 7286 1b80 92000000 		.4byte	.LBB55
 7287 1b84 12000000 		.4byte	.LBE55-.LBB55
 7288 1b88 01       		.byte	0x1
 7289 1b89 3114     		.2byte	0x1431
 7290 1b8b 991B0000 		.4byte	0x1b99
 7291 1b8f 2C       		.uleb128 0x2c
 7292 1b90 F4030000 		.4byte	0x3f4
 7293 1b94 7A140000 		.4byte	.LLST126
 7294 1b98 00       		.byte	0
 7295 1b99 22       		.uleb128 0x22
 7296 1b9a 48000000 		.4byte	.LVL368
 7297 1b9e B31E0000 		.4byte	0x1eb3
 7298 1ba2 AD1B0000 		.4byte	0x1bad
 7299 1ba6 1E       		.uleb128 0x1e
 7300 1ba7 01       		.uleb128 0x1
 7301 1ba8 50       		.byte	0x50
 7302 1ba9 02       		.uleb128 0x2
 7303 1baa 77       		.byte	0x77
 7304 1bab 00       		.sleb128 0
 7305 1bac 00       		.byte	0
 7306 1bad 22       		.uleb128 0x22
 7307 1bae 6A000000 		.4byte	.LVL369
 7308 1bb2 9C1E0000 		.4byte	0x1e9c
 7309 1bb6 C11B0000 		.4byte	0x1bc1
 7310 1bba 1E       		.uleb128 0x1e
 7311 1bbb 01       		.uleb128 0x1
 7312 1bbc 51       		.byte	0x51
 7313 1bbd 02       		.uleb128 0x2
 7314 1bbe 77       		.byte	0x77
 7315 1bbf 00       		.sleb128 0
 7316 1bc0 00       		.byte	0
 7317 1bc1 1D       		.uleb128 0x1d
 7318 1bc2 76000000 		.4byte	.LVL372
 7319 1bc6 9C1E0000 		.4byte	0x1e9c
 7320 1bca 1E       		.uleb128 0x1e
 7321 1bcb 01       		.uleb128 0x1
 7322 1bcc 50       		.byte	0x50
 7323 1bcd 05       		.uleb128 0x5
 7324 1bce 03       		.byte	0x3
 7325 1bcf 14000000 		.4byte	.LANCHOR0+20
 7326 1bd3 1E       		.uleb128 0x1e
 7327 1bd4 01       		.uleb128 0x1
 7328 1bd5 51       		.byte	0x51
 7329 1bd6 02       		.uleb128 0x2
 7330 1bd7 76       		.byte	0x76
 7331 1bd8 18       		.sleb128 24
 7332 1bd9 00       		.byte	0
 7333 1bda 00       		.byte	0
 7334 1bdb 25       		.uleb128 0x25
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 237


 7335 1bdc 470E0000 		.4byte	.LASF180
 7336 1be0 01       		.byte	0x1
 7337 1be1 3914     		.2byte	0x1439
 7338 1be3 07010000 		.4byte	0x107
 7339 1be7 00000000 		.4byte	.LFB52
 7340 1beb 38000000 		.4byte	.LFE52-.LFB52
 7341 1bef 01       		.uleb128 0x1
 7342 1bf0 9C       		.byte	0x9c
 7343 1bf1 481C0000 		.4byte	0x1c48
 7344 1bf5 18       		.uleb128 0x18
 7345 1bf6 EE090000 		.4byte	.LASF72
 7346 1bfa 01       		.byte	0x1
 7347 1bfb 3914     		.2byte	0x1439
 7348 1bfd 1B020000 		.4byte	0x21b
 7349 1c01 8D140000 		.4byte	.LLST127
 7350 1c05 18       		.uleb128 0x18
 7351 1c06 29070000 		.4byte	.LASF181
 7352 1c0a 01       		.byte	0x1
 7353 1c0b 3A14     		.2byte	0x143a
 7354 1c0d 12010000 		.4byte	0x112
 7355 1c11 A0140000 		.4byte	.LLST128
 7356 1c15 19       		.uleb128 0x19
 7357 1c16 410E0000 		.4byte	.LASF71
 7358 1c1a 01       		.byte	0x1
 7359 1c1b 3C14     		.2byte	0x143c
 7360 1c1d CA040000 		.4byte	0x4ca
 7361 1c21 E5140000 		.4byte	.LLST129
 7362 1c25 19       		.uleb128 0x19
 7363 1c26 940B0000 		.4byte	.LASF70
 7364 1c2a 01       		.byte	0x1
 7365 1c2b 3D14     		.2byte	0x143d
 7366 1c2d 07010000 		.4byte	0x107
 7367 1c31 F8140000 		.4byte	.LLST130
 7368 1c35 1C       		.uleb128 0x1c
 7369 1c36 12000000 		.4byte	.LVL377
 7370 1c3a 911E0000 		.4byte	0x1e91
 7371 1c3e 1C       		.uleb128 0x1c
 7372 1c3f 30000000 		.4byte	.LVL382
 7373 1c43 A81E0000 		.4byte	0x1ea8
 7374 1c47 00       		.byte	0
 7375 1c48 25       		.uleb128 0x25
 7376 1c49 55080000 		.4byte	.LASF182
 7377 1c4d 01       		.byte	0x1
 7378 1c4e 5B14     		.2byte	0x145b
 7379 1c50 D5000000 		.4byte	0xd5
 7380 1c54 00000000 		.4byte	.LFB53
 7381 1c58 34000000 		.4byte	.LFE53-.LFB53
 7382 1c5c 01       		.uleb128 0x1
 7383 1c5d 9C       		.byte	0x9c
 7384 1c5e C51C0000 		.4byte	0x1cc5
 7385 1c62 18       		.uleb128 0x18
 7386 1c63 EE090000 		.4byte	.LASF72
 7387 1c67 01       		.byte	0x1
 7388 1c68 5B14     		.2byte	0x145b
 7389 1c6a 1B020000 		.4byte	0x21b
 7390 1c6e 22150000 		.4byte	.LLST131
 7391 1c72 18       		.uleb128 0x18
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 238


 7392 1c73 29070000 		.4byte	.LASF181
 7393 1c77 01       		.byte	0x1
 7394 1c78 5C14     		.2byte	0x145c
 7395 1c7a 12010000 		.4byte	0x112
 7396 1c7e 35150000 		.4byte	.LLST132
 7397 1c82 18       		.uleb128 0x18
 7398 1c83 4E010000 		.4byte	.LASF183
 7399 1c87 01       		.byte	0x1
 7400 1c88 5D14     		.2byte	0x145d
 7401 1c8a D5000000 		.4byte	0xd5
 7402 1c8e 6E150000 		.4byte	.LLST133
 7403 1c92 19       		.uleb128 0x19
 7404 1c93 410E0000 		.4byte	.LASF71
 7405 1c97 01       		.byte	0x1
 7406 1c98 5F14     		.2byte	0x145f
 7407 1c9a CA040000 		.4byte	0x4ca
 7408 1c9e 9A150000 		.4byte	.LLST134
 7409 1ca2 19       		.uleb128 0x19
 7410 1ca3 4C080000 		.4byte	.LASF165
 7411 1ca7 01       		.byte	0x1
 7412 1ca8 6014     		.2byte	0x1460
 7413 1caa D5000000 		.4byte	0xd5
 7414 1cae AD150000 		.4byte	.LLST135
 7415 1cb2 1C       		.uleb128 0x1c
 7416 1cb3 14000000 		.4byte	.LVL386
 7417 1cb7 911E0000 		.4byte	0x1e91
 7418 1cbb 1C       		.uleb128 0x1c
 7419 1cbc 2C000000 		.4byte	.LVL388
 7420 1cc0 A81E0000 		.4byte	0x1ea8
 7421 1cc4 00       		.byte	0
 7422 1cc5 0A       		.uleb128 0xa
 7423 1cc6 10020000 		.4byte	0x210
 7424 1cca D51C0000 		.4byte	0x1cd5
 7425 1cce 0B       		.uleb128 0xb
 7426 1ccf 9E000000 		.4byte	0x9e
 7427 1cd3 04       		.byte	0x4
 7428 1cd4 00       		.byte	0
 7429 1cd5 20       		.uleb128 0x20
 7430 1cd6 92010000 		.4byte	.LASF184
 7431 1cda 01       		.byte	0x1
 7432 1cdb 5801     		.2byte	0x158
 7433 1cdd C51C0000 		.4byte	0x1cc5
 7434 1ce1 05       		.uleb128 0x5
 7435 1ce2 03       		.byte	0x3
 7436 1ce3 30000000 		.4byte	pxReadyTasksLists
 7437 1ce7 20       		.uleb128 0x20
 7438 1ce8 F8010000 		.4byte	.LASF185
 7439 1cec 01       		.byte	0x1
 7440 1ced 5901     		.2byte	0x159
 7441 1cef 10020000 		.4byte	0x210
 7442 1cf3 05       		.uleb128 0x5
 7443 1cf4 03       		.byte	0x3
 7444 1cf5 94000000 		.4byte	xDelayedTaskList1
 7445 1cf9 20       		.uleb128 0x20
 7446 1cfa 0A020000 		.4byte	.LASF186
 7447 1cfe 01       		.byte	0x1
 7448 1cff 5A01     		.2byte	0x15a
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 239


 7449 1d01 10020000 		.4byte	0x210
 7450 1d05 05       		.uleb128 0x5
 7451 1d06 03       		.byte	0x3
 7452 1d07 A8000000 		.4byte	xDelayedTaskList2
 7453 1d0b 20       		.uleb128 0x20
 7454 1d0c C40A0000 		.4byte	.LASF187
 7455 1d10 01       		.byte	0x1
 7456 1d11 5B01     		.2byte	0x15b
 7457 1d13 1D1D0000 		.4byte	0x1d1d
 7458 1d17 05       		.uleb128 0x5
 7459 1d18 03       		.byte	0x3
 7460 1d19 28000000 		.4byte	pxDelayedTaskList
 7461 1d1d 0E       		.uleb128 0xe
 7462 1d1e 830F0000 		.4byte	0xf83
 7463 1d22 20       		.uleb128 0x20
 7464 1d23 15060000 		.4byte	.LASF188
 7465 1d27 01       		.byte	0x1
 7466 1d28 5C01     		.2byte	0x15c
 7467 1d2a 1D1D0000 		.4byte	0x1d1d
 7468 1d2e 05       		.uleb128 0x5
 7469 1d2f 03       		.byte	0x3
 7470 1d30 D0000000 		.4byte	pxOverflowDelayedTaskList
 7471 1d34 20       		.uleb128 0x20
 7472 1d35 CB030000 		.4byte	.LASF189
 7473 1d39 01       		.byte	0x1
 7474 1d3a 5D01     		.2byte	0x15d
 7475 1d3c 10020000 		.4byte	0x210
 7476 1d40 05       		.uleb128 0x5
 7477 1d41 03       		.byte	0x3
 7478 1d42 14000000 		.4byte	xPendingReadyList
 7479 1d46 20       		.uleb128 0x20
 7480 1d47 82060000 		.4byte	.LASF190
 7481 1d4b 01       		.byte	0x1
 7482 1d4c 6101     		.2byte	0x161
 7483 1d4e 10020000 		.4byte	0x210
 7484 1d52 05       		.uleb128 0x5
 7485 1d53 03       		.byte	0x3
 7486 1d54 BC000000 		.4byte	xTasksWaitingTermination
 7487 1d58 20       		.uleb128 0x20
 7488 1d59 5C010000 		.4byte	.LASF191
 7489 1d5d 01       		.byte	0x1
 7490 1d5e 6201     		.2byte	0x162
 7491 1d60 05020000 		.4byte	0x205
 7492 1d64 05       		.uleb128 0x5
 7493 1d65 03       		.byte	0x3
 7494 1d66 E8000000 		.4byte	uxDeletedTasksWaitingCleanUp
 7495 1d6a 20       		.uleb128 0x20
 7496 1d6b 97050000 		.4byte	.LASF192
 7497 1d6f 01       		.byte	0x1
 7498 1d70 6801     		.2byte	0x168
 7499 1d72 10020000 		.4byte	0x210
 7500 1d76 05       		.uleb128 0x5
 7501 1d77 03       		.byte	0x3
 7502 1d78 00000000 		.4byte	xSuspendedTaskList
 7503 1d7c 20       		.uleb128 0x20
 7504 1d7d E10D0000 		.4byte	.LASF193
 7505 1d81 01       		.byte	0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 240


 7506 1d82 7301     		.2byte	0x173
 7507 1d84 05020000 		.4byte	0x205
 7508 1d88 05       		.uleb128 0x5
 7509 1d89 03       		.byte	0x3
 7510 1d8a D4000000 		.4byte	uxCurrentNumberOfTasks
 7511 1d8e 20       		.uleb128 0x20
 7512 1d8f 43050000 		.4byte	.LASF194
 7513 1d93 01       		.byte	0x1
 7514 1d94 7401     		.2byte	0x174
 7515 1d96 A01D0000 		.4byte	0x1da0
 7516 1d9a 05       		.uleb128 0x5
 7517 1d9b 03       		.byte	0x3
 7518 1d9c EC000000 		.4byte	xTickCount
 7519 1da0 0E       		.uleb128 0xe
 7520 1da1 1D010000 		.4byte	0x11d
 7521 1da5 20       		.uleb128 0x20
 7522 1da6 F2000000 		.4byte	.LASF195
 7523 1daa 01       		.byte	0x1
 7524 1dab 7501     		.2byte	0x175
 7525 1dad 05020000 		.4byte	0x205
 7526 1db1 05       		.uleb128 0x5
 7527 1db2 03       		.byte	0x3
 7528 1db3 E4000000 		.4byte	uxTopReadyPriority
 7529 1db7 20       		.uleb128 0x20
 7530 1db8 1E010000 		.4byte	.LASF196
 7531 1dbc 01       		.byte	0x1
 7532 1dbd 7601     		.2byte	0x176
 7533 1dbf C91D0000 		.4byte	0x1dc9
 7534 1dc3 05       		.uleb128 0x5
 7535 1dc4 03       		.byte	0x3
 7536 1dc5 DC000000 		.4byte	xSchedulerRunning
 7537 1dc9 0E       		.uleb128 0xe
 7538 1dca 07010000 		.4byte	0x107
 7539 1dce 20       		.uleb128 0x20
 7540 1dcf 8F0D0000 		.4byte	.LASF197
 7541 1dd3 01       		.byte	0x1
 7542 1dd4 7701     		.2byte	0x177
 7543 1dd6 A01D0000 		.4byte	0x1da0
 7544 1dda 05       		.uleb128 0x5
 7545 1ddb 03       		.byte	0x3
 7546 1ddc 00010000 		.4byte	xPendedTicks
 7547 1de0 20       		.uleb128 0x20
 7548 1de1 050F0000 		.4byte	.LASF198
 7549 1de5 01       		.byte	0x1
 7550 1de6 7801     		.2byte	0x178
 7551 1de8 C91D0000 		.4byte	0x1dc9
 7552 1dec 05       		.uleb128 0x5
 7553 1ded 03       		.byte	0x3
 7554 1dee FC000000 		.4byte	xYieldPending
 7555 1df2 20       		.uleb128 0x20
 7556 1df3 560A0000 		.4byte	.LASF199
 7557 1df7 01       		.byte	0x1
 7558 1df8 7901     		.2byte	0x179
 7559 1dfa C91D0000 		.4byte	0x1dc9
 7560 1dfe 05       		.uleb128 0x5
 7561 1dff 03       		.byte	0x3
 7562 1e00 F8000000 		.4byte	xNumOfOverflows
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 241


 7563 1e04 20       		.uleb128 0x20
 7564 1e05 65090000 		.4byte	.LASF200
 7565 1e09 01       		.byte	0x1
 7566 1e0a 7A01     		.2byte	0x17a
 7567 1e0c 12010000 		.4byte	0x112
 7568 1e10 05       		.uleb128 0x5
 7569 1e11 03       		.byte	0x3
 7570 1e12 E0000000 		.4byte	uxTaskNumber
 7571 1e16 20       		.uleb128 0x20
 7572 1e17 00080000 		.4byte	.LASF201
 7573 1e1b 01       		.byte	0x1
 7574 1e1c 7B01     		.2byte	0x17b
 7575 1e1e A01D0000 		.4byte	0x1da0
 7576 1e22 05       		.uleb128 0x5
 7577 1e23 03       		.byte	0x3
 7578 1e24 2C000000 		.4byte	xNextTaskUnblockTime
 7579 1e28 20       		.uleb128 0x20
 7580 1e29 660A0000 		.4byte	.LASF202
 7581 1e2d 01       		.byte	0x1
 7582 1e2e 7C01     		.2byte	0x17c
 7583 1e30 1B020000 		.4byte	0x21b
 7584 1e34 05       		.uleb128 0x5
 7585 1e35 03       		.byte	0x3
 7586 1e36 F4000000 		.4byte	xIdleTaskHandle
 7587 1e3a 20       		.uleb128 0x20
 7588 1e3b 640E0000 		.4byte	.LASF203
 7589 1e3f 01       		.byte	0x1
 7590 1e40 8601     		.2byte	0x186
 7591 1e42 05020000 		.4byte	0x205
 7592 1e46 05       		.uleb128 0x5
 7593 1e47 03       		.byte	0x3
 7594 1e48 F0000000 		.4byte	uxSchedulerSuspended
 7595 1e4c 32       		.uleb128 0x32
 7596 1e4d D40D0000 		.4byte	.LASF224
 7597 1e51 01       		.byte	0x1
 7598 1e52 5201     		.2byte	0x152
 7599 1e54 5E1E0000 		.4byte	0x1e5e
 7600 1e58 05       		.uleb128 0x5
 7601 1e59 03       		.byte	0x3
 7602 1e5a 00000000 		.4byte	pxCurrentTCB
 7603 1e5e 0E       		.uleb128 0xe
 7604 1e5f CA040000 		.4byte	0x4ca
 7605 1e63 33       		.uleb128 0x33
 7606 1e64 510B0000 		.4byte	.LASF204
 7607 1e68 510B0000 		.4byte	.LASF204
 7608 1e6c 09       		.byte	0x9
 7609 1e6d B1       		.byte	0xb1
 7610 1e6e 34       		.uleb128 0x34
 7611 1e6f 800A0000 		.4byte	.LASF205
 7612 1e73 800A0000 		.4byte	.LASF205
 7613 1e77 07       		.byte	0x7
 7614 1e78 6601     		.2byte	0x166
 7615 1e7a 33       		.uleb128 0x33
 7616 1e7b 28080000 		.4byte	.LASF206
 7617 1e7f 28080000 		.4byte	.LASF206
 7618 1e83 09       		.byte	0x9
 7619 1e84 80       		.byte	0x80
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 242


 7620 1e85 34       		.uleb128 0x34
 7621 1e86 A50C0000 		.4byte	.LASF207
 7622 1e8a A50C0000 		.4byte	.LASF207
 7623 1e8e 07       		.byte	0x7
 7624 1e8f 5B01     		.2byte	0x15b
 7625 1e91 33       		.uleb128 0x33
 7626 1e92 2B020000 		.4byte	.LASF208
 7627 1e96 2B020000 		.4byte	.LASF208
 7628 1e9a 02       		.byte	0x2
 7629 1e9b 62       		.byte	0x62
 7630 1e9c 34       		.uleb128 0x34
 7631 1e9d 88050000 		.4byte	.LASF209
 7632 1ea1 88050000 		.4byte	.LASF209
 7633 1ea5 07       		.byte	0x7
 7634 1ea6 8901     		.2byte	0x189
 7635 1ea8 33       		.uleb128 0x33
 7636 1ea9 1B000000 		.4byte	.LASF210
 7637 1ead 1B000000 		.4byte	.LASF210
 7638 1eb1 02       		.byte	0x2
 7639 1eb2 63       		.byte	0x63
 7640 1eb3 34       		.uleb128 0x34
 7641 1eb4 DD020000 		.4byte	.LASF211
 7642 1eb8 DD020000 		.4byte	.LASF211
 7643 1ebc 07       		.byte	0x7
 7644 1ebd 9901     		.2byte	0x199
 7645 1ebf 34       		.uleb128 0x34
 7646 1ec0 D10C0000 		.4byte	.LASF212
 7647 1ec4 D10C0000 		.4byte	.LASF212
 7648 1ec8 07       		.byte	0x7
 7649 1ec9 7301     		.2byte	0x173
 7650 1ecb 33       		.uleb128 0x33
 7651 1ecc 0F040000 		.4byte	.LASF213
 7652 1ed0 0F040000 		.4byte	.LASF213
 7653 1ed4 09       		.byte	0x9
 7654 1ed5 B0       		.byte	0xb0
 7655 1ed6 34       		.uleb128 0x34
 7656 1ed7 8B020000 		.4byte	.LASF214
 7657 1edb 8B020000 		.4byte	.LASF214
 7658 1edf 0A       		.byte	0xa
 7659 1ee0 2205     		.2byte	0x522
 7660 1ee2 33       		.uleb128 0x33
 7661 1ee3 2D000000 		.4byte	.LASF215
 7662 1ee7 2D000000 		.4byte	.LASF215
 7663 1eeb 09       		.byte	0x9
 7664 1eec BA       		.byte	0xba
 7665 1eed 33       		.uleb128 0x33
 7666 1eee 3F0B0000 		.4byte	.LASF216
 7667 1ef2 3F0B0000 		.4byte	.LASF216
 7668 1ef6 09       		.byte	0x9
 7669 1ef7 C1       		.byte	0xc1
 7670 1ef8 00       		.byte	0
 7671              		.section	.debug_abbrev,"",%progbits
 7672              	.Ldebug_abbrev0:
 7673 0000 01       		.uleb128 0x1
 7674 0001 11       		.uleb128 0x11
 7675 0002 01       		.byte	0x1
 7676 0003 25       		.uleb128 0x25
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 243


 7677 0004 0E       		.uleb128 0xe
 7678 0005 13       		.uleb128 0x13
 7679 0006 0B       		.uleb128 0xb
 7680 0007 03       		.uleb128 0x3
 7681 0008 0E       		.uleb128 0xe
 7682 0009 1B       		.uleb128 0x1b
 7683 000a 0E       		.uleb128 0xe
 7684 000b 55       		.uleb128 0x55
 7685 000c 17       		.uleb128 0x17
 7686 000d 11       		.uleb128 0x11
 7687 000e 01       		.uleb128 0x1
 7688 000f 10       		.uleb128 0x10
 7689 0010 17       		.uleb128 0x17
 7690 0011 00       		.byte	0
 7691 0012 00       		.byte	0
 7692 0013 02       		.uleb128 0x2
 7693 0014 16       		.uleb128 0x16
 7694 0015 00       		.byte	0
 7695 0016 03       		.uleb128 0x3
 7696 0017 0E       		.uleb128 0xe
 7697 0018 3A       		.uleb128 0x3a
 7698 0019 0B       		.uleb128 0xb
 7699 001a 3B       		.uleb128 0x3b
 7700 001b 0B       		.uleb128 0xb
 7701 001c 49       		.uleb128 0x49
 7702 001d 13       		.uleb128 0x13
 7703 001e 00       		.byte	0
 7704 001f 00       		.byte	0
 7705 0020 03       		.uleb128 0x3
 7706 0021 24       		.uleb128 0x24
 7707 0022 00       		.byte	0
 7708 0023 0B       		.uleb128 0xb
 7709 0024 0B       		.uleb128 0xb
 7710 0025 3E       		.uleb128 0x3e
 7711 0026 0B       		.uleb128 0xb
 7712 0027 03       		.uleb128 0x3
 7713 0028 0E       		.uleb128 0xe
 7714 0029 00       		.byte	0
 7715 002a 00       		.byte	0
 7716 002b 04       		.uleb128 0x4
 7717 002c 24       		.uleb128 0x24
 7718 002d 00       		.byte	0
 7719 002e 0B       		.uleb128 0xb
 7720 002f 0B       		.uleb128 0xb
 7721 0030 3E       		.uleb128 0x3e
 7722 0031 0B       		.uleb128 0xb
 7723 0032 03       		.uleb128 0x3
 7724 0033 08       		.uleb128 0x8
 7725 0034 00       		.byte	0
 7726 0035 00       		.byte	0
 7727 0036 05       		.uleb128 0x5
 7728 0037 0F       		.uleb128 0xf
 7729 0038 00       		.byte	0
 7730 0039 0B       		.uleb128 0xb
 7731 003a 0B       		.uleb128 0xb
 7732 003b 00       		.byte	0
 7733 003c 00       		.byte	0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 244


 7734 003d 06       		.uleb128 0x6
 7735 003e 0F       		.uleb128 0xf
 7736 003f 00       		.byte	0
 7737 0040 0B       		.uleb128 0xb
 7738 0041 0B       		.uleb128 0xb
 7739 0042 49       		.uleb128 0x49
 7740 0043 13       		.uleb128 0x13
 7741 0044 00       		.byte	0
 7742 0045 00       		.byte	0
 7743 0046 07       		.uleb128 0x7
 7744 0047 26       		.uleb128 0x26
 7745 0048 00       		.byte	0
 7746 0049 49       		.uleb128 0x49
 7747 004a 13       		.uleb128 0x13
 7748 004b 00       		.byte	0
 7749 004c 00       		.byte	0
 7750 004d 08       		.uleb128 0x8
 7751 004e 15       		.uleb128 0x15
 7752 004f 01       		.byte	0x1
 7753 0050 27       		.uleb128 0x27
 7754 0051 19       		.uleb128 0x19
 7755 0052 01       		.uleb128 0x1
 7756 0053 13       		.uleb128 0x13
 7757 0054 00       		.byte	0
 7758 0055 00       		.byte	0
 7759 0056 09       		.uleb128 0x9
 7760 0057 05       		.uleb128 0x5
 7761 0058 00       		.byte	0
 7762 0059 49       		.uleb128 0x49
 7763 005a 13       		.uleb128 0x13
 7764 005b 00       		.byte	0
 7765 005c 00       		.byte	0
 7766 005d 0A       		.uleb128 0xa
 7767 005e 01       		.uleb128 0x1
 7768 005f 01       		.byte	0x1
 7769 0060 49       		.uleb128 0x49
 7770 0061 13       		.uleb128 0x13
 7771 0062 01       		.uleb128 0x1
 7772 0063 13       		.uleb128 0x13
 7773 0064 00       		.byte	0
 7774 0065 00       		.byte	0
 7775 0066 0B       		.uleb128 0xb
 7776 0067 21       		.uleb128 0x21
 7777 0068 00       		.byte	0
 7778 0069 49       		.uleb128 0x49
 7779 006a 13       		.uleb128 0x13
 7780 006b 2F       		.uleb128 0x2f
 7781 006c 0B       		.uleb128 0xb
 7782 006d 00       		.byte	0
 7783 006e 00       		.byte	0
 7784 006f 0C       		.uleb128 0xc
 7785 0070 13       		.uleb128 0x13
 7786 0071 01       		.byte	0x1
 7787 0072 03       		.uleb128 0x3
 7788 0073 0E       		.uleb128 0xe
 7789 0074 0B       		.uleb128 0xb
 7790 0075 0B       		.uleb128 0xb
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 245


 7791 0076 3A       		.uleb128 0x3a
 7792 0077 0B       		.uleb128 0xb
 7793 0078 3B       		.uleb128 0x3b
 7794 0079 0B       		.uleb128 0xb
 7795 007a 01       		.uleb128 0x1
 7796 007b 13       		.uleb128 0x13
 7797 007c 00       		.byte	0
 7798 007d 00       		.byte	0
 7799 007e 0D       		.uleb128 0xd
 7800 007f 0D       		.uleb128 0xd
 7801 0080 00       		.byte	0
 7802 0081 03       		.uleb128 0x3
 7803 0082 0E       		.uleb128 0xe
 7804 0083 3A       		.uleb128 0x3a
 7805 0084 0B       		.uleb128 0xb
 7806 0085 3B       		.uleb128 0x3b
 7807 0086 0B       		.uleb128 0xb
 7808 0087 49       		.uleb128 0x49
 7809 0088 13       		.uleb128 0x13
 7810 0089 38       		.uleb128 0x38
 7811 008a 0B       		.uleb128 0xb
 7812 008b 00       		.byte	0
 7813 008c 00       		.byte	0
 7814 008d 0E       		.uleb128 0xe
 7815 008e 35       		.uleb128 0x35
 7816 008f 00       		.byte	0
 7817 0090 49       		.uleb128 0x49
 7818 0091 13       		.uleb128 0x13
 7819 0092 00       		.byte	0
 7820 0093 00       		.byte	0
 7821 0094 0F       		.uleb128 0xf
 7822 0095 0D       		.uleb128 0xd
 7823 0096 00       		.byte	0
 7824 0097 03       		.uleb128 0x3
 7825 0098 0E       		.uleb128 0xe
 7826 0099 3A       		.uleb128 0x3a
 7827 009a 0B       		.uleb128 0xb
 7828 009b 3B       		.uleb128 0x3b
 7829 009c 05       		.uleb128 0x5
 7830 009d 49       		.uleb128 0x49
 7831 009e 13       		.uleb128 0x13
 7832 009f 38       		.uleb128 0x38
 7833 00a0 0B       		.uleb128 0xb
 7834 00a1 00       		.byte	0
 7835 00a2 00       		.byte	0
 7836 00a3 10       		.uleb128 0x10
 7837 00a4 04       		.uleb128 0x4
 7838 00a5 01       		.byte	0x1
 7839 00a6 0B       		.uleb128 0xb
 7840 00a7 0B       		.uleb128 0xb
 7841 00a8 49       		.uleb128 0x49
 7842 00a9 13       		.uleb128 0x13
 7843 00aa 3A       		.uleb128 0x3a
 7844 00ab 0B       		.uleb128 0xb
 7845 00ac 3B       		.uleb128 0x3b
 7846 00ad 0B       		.uleb128 0xb
 7847 00ae 01       		.uleb128 0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 246


 7848 00af 13       		.uleb128 0x13
 7849 00b0 00       		.byte	0
 7850 00b1 00       		.byte	0
 7851 00b2 11       		.uleb128 0x11
 7852 00b3 28       		.uleb128 0x28
 7853 00b4 00       		.byte	0
 7854 00b5 03       		.uleb128 0x3
 7855 00b6 0E       		.uleb128 0xe
 7856 00b7 1C       		.uleb128 0x1c
 7857 00b8 0B       		.uleb128 0xb
 7858 00b9 00       		.byte	0
 7859 00ba 00       		.byte	0
 7860 00bb 12       		.uleb128 0x12
 7861 00bc 16       		.uleb128 0x16
 7862 00bd 00       		.byte	0
 7863 00be 03       		.uleb128 0x3
 7864 00bf 0E       		.uleb128 0xe
 7865 00c0 3A       		.uleb128 0x3a
 7866 00c1 0B       		.uleb128 0xb
 7867 00c2 3B       		.uleb128 0x3b
 7868 00c3 05       		.uleb128 0x5
 7869 00c4 49       		.uleb128 0x49
 7870 00c5 13       		.uleb128 0x13
 7871 00c6 00       		.byte	0
 7872 00c7 00       		.byte	0
 7873 00c8 13       		.uleb128 0x13
 7874 00c9 2E       		.uleb128 0x2e
 7875 00ca 01       		.byte	0x1
 7876 00cb 03       		.uleb128 0x3
 7877 00cc 0E       		.uleb128 0xe
 7878 00cd 3A       		.uleb128 0x3a
 7879 00ce 0B       		.uleb128 0xb
 7880 00cf 3B       		.uleb128 0x3b
 7881 00d0 0B       		.uleb128 0xb
 7882 00d1 27       		.uleb128 0x27
 7883 00d2 19       		.uleb128 0x19
 7884 00d3 49       		.uleb128 0x49
 7885 00d4 13       		.uleb128 0x13
 7886 00d5 20       		.uleb128 0x20
 7887 00d6 0B       		.uleb128 0xb
 7888 00d7 01       		.uleb128 0x1
 7889 00d8 13       		.uleb128 0x13
 7890 00d9 00       		.byte	0
 7891 00da 00       		.byte	0
 7892 00db 14       		.uleb128 0x14
 7893 00dc 34       		.uleb128 0x34
 7894 00dd 00       		.byte	0
 7895 00de 03       		.uleb128 0x3
 7896 00df 0E       		.uleb128 0xe
 7897 00e0 3A       		.uleb128 0x3a
 7898 00e1 0B       		.uleb128 0xb
 7899 00e2 3B       		.uleb128 0x3b
 7900 00e3 0B       		.uleb128 0xb
 7901 00e4 49       		.uleb128 0x49
 7902 00e5 13       		.uleb128 0x13
 7903 00e6 00       		.byte	0
 7904 00e7 00       		.byte	0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 247


 7905 00e8 15       		.uleb128 0x15
 7906 00e9 2E       		.uleb128 0x2e
 7907 00ea 01       		.byte	0x1
 7908 00eb 03       		.uleb128 0x3
 7909 00ec 0E       		.uleb128 0xe
 7910 00ed 3A       		.uleb128 0x3a
 7911 00ee 0B       		.uleb128 0xb
 7912 00ef 3B       		.uleb128 0x3b
 7913 00f0 0B       		.uleb128 0xb
 7914 00f1 27       		.uleb128 0x27
 7915 00f2 19       		.uleb128 0x19
 7916 00f3 20       		.uleb128 0x20
 7917 00f4 0B       		.uleb128 0xb
 7918 00f5 01       		.uleb128 0x1
 7919 00f6 13       		.uleb128 0x13
 7920 00f7 00       		.byte	0
 7921 00f8 00       		.byte	0
 7922 00f9 16       		.uleb128 0x16
 7923 00fa 05       		.uleb128 0x5
 7924 00fb 00       		.byte	0
 7925 00fc 03       		.uleb128 0x3
 7926 00fd 0E       		.uleb128 0xe
 7927 00fe 3A       		.uleb128 0x3a
 7928 00ff 0B       		.uleb128 0xb
 7929 0100 3B       		.uleb128 0x3b
 7930 0101 0B       		.uleb128 0xb
 7931 0102 49       		.uleb128 0x49
 7932 0103 13       		.uleb128 0x13
 7933 0104 00       		.byte	0
 7934 0105 00       		.byte	0
 7935 0106 17       		.uleb128 0x17
 7936 0107 2E       		.uleb128 0x2e
 7937 0108 01       		.byte	0x1
 7938 0109 03       		.uleb128 0x3
 7939 010a 0E       		.uleb128 0xe
 7940 010b 3A       		.uleb128 0x3a
 7941 010c 0B       		.uleb128 0xb
 7942 010d 3B       		.uleb128 0x3b
 7943 010e 05       		.uleb128 0x5
 7944 010f 27       		.uleb128 0x27
 7945 0110 19       		.uleb128 0x19
 7946 0111 49       		.uleb128 0x49
 7947 0112 13       		.uleb128 0x13
 7948 0113 11       		.uleb128 0x11
 7949 0114 01       		.uleb128 0x1
 7950 0115 12       		.uleb128 0x12
 7951 0116 06       		.uleb128 0x6
 7952 0117 40       		.uleb128 0x40
 7953 0118 18       		.uleb128 0x18
 7954 0119 9742     		.uleb128 0x2117
 7955 011b 19       		.uleb128 0x19
 7956 011c 01       		.uleb128 0x1
 7957 011d 13       		.uleb128 0x13
 7958 011e 00       		.byte	0
 7959 011f 00       		.byte	0
 7960 0120 18       		.uleb128 0x18
 7961 0121 05       		.uleb128 0x5
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 248


 7962 0122 00       		.byte	0
 7963 0123 03       		.uleb128 0x3
 7964 0124 0E       		.uleb128 0xe
 7965 0125 3A       		.uleb128 0x3a
 7966 0126 0B       		.uleb128 0xb
 7967 0127 3B       		.uleb128 0x3b
 7968 0128 05       		.uleb128 0x5
 7969 0129 49       		.uleb128 0x49
 7970 012a 13       		.uleb128 0x13
 7971 012b 02       		.uleb128 0x2
 7972 012c 17       		.uleb128 0x17
 7973 012d 00       		.byte	0
 7974 012e 00       		.byte	0
 7975 012f 19       		.uleb128 0x19
 7976 0130 34       		.uleb128 0x34
 7977 0131 00       		.byte	0
 7978 0132 03       		.uleb128 0x3
 7979 0133 0E       		.uleb128 0xe
 7980 0134 3A       		.uleb128 0x3a
 7981 0135 0B       		.uleb128 0xb
 7982 0136 3B       		.uleb128 0x3b
 7983 0137 05       		.uleb128 0x5
 7984 0138 49       		.uleb128 0x49
 7985 0139 13       		.uleb128 0x13
 7986 013a 02       		.uleb128 0x2
 7987 013b 17       		.uleb128 0x17
 7988 013c 00       		.byte	0
 7989 013d 00       		.byte	0
 7990 013e 1A       		.uleb128 0x1a
 7991 013f 2E       		.uleb128 0x2e
 7992 0140 00       		.byte	0
 7993 0141 03       		.uleb128 0x3
 7994 0142 0E       		.uleb128 0xe
 7995 0143 3A       		.uleb128 0x3a
 7996 0144 0B       		.uleb128 0xb
 7997 0145 3B       		.uleb128 0x3b
 7998 0146 05       		.uleb128 0x5
 7999 0147 27       		.uleb128 0x27
 8000 0148 19       		.uleb128 0x19
 8001 0149 11       		.uleb128 0x11
 8002 014a 01       		.uleb128 0x1
 8003 014b 12       		.uleb128 0x12
 8004 014c 06       		.uleb128 0x6
 8005 014d 40       		.uleb128 0x40
 8006 014e 18       		.uleb128 0x18
 8007 014f 9742     		.uleb128 0x2117
 8008 0151 19       		.uleb128 0x19
 8009 0152 00       		.byte	0
 8010 0153 00       		.byte	0
 8011 0154 1B       		.uleb128 0x1b
 8012 0155 2E       		.uleb128 0x2e
 8013 0156 01       		.byte	0x1
 8014 0157 03       		.uleb128 0x3
 8015 0158 0E       		.uleb128 0xe
 8016 0159 3A       		.uleb128 0x3a
 8017 015a 0B       		.uleb128 0xb
 8018 015b 3B       		.uleb128 0x3b
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 249


 8019 015c 05       		.uleb128 0x5
 8020 015d 27       		.uleb128 0x27
 8021 015e 19       		.uleb128 0x19
 8022 015f 11       		.uleb128 0x11
 8023 0160 01       		.uleb128 0x1
 8024 0161 12       		.uleb128 0x12
 8025 0162 06       		.uleb128 0x6
 8026 0163 40       		.uleb128 0x40
 8027 0164 18       		.uleb128 0x18
 8028 0165 9742     		.uleb128 0x2117
 8029 0167 19       		.uleb128 0x19
 8030 0168 01       		.uleb128 0x1
 8031 0169 13       		.uleb128 0x13
 8032 016a 00       		.byte	0
 8033 016b 00       		.byte	0
 8034 016c 1C       		.uleb128 0x1c
 8035 016d 898201   		.uleb128 0x4109
 8036 0170 00       		.byte	0
 8037 0171 11       		.uleb128 0x11
 8038 0172 01       		.uleb128 0x1
 8039 0173 31       		.uleb128 0x31
 8040 0174 13       		.uleb128 0x13
 8041 0175 00       		.byte	0
 8042 0176 00       		.byte	0
 8043 0177 1D       		.uleb128 0x1d
 8044 0178 898201   		.uleb128 0x4109
 8045 017b 01       		.byte	0x1
 8046 017c 11       		.uleb128 0x11
 8047 017d 01       		.uleb128 0x1
 8048 017e 31       		.uleb128 0x31
 8049 017f 13       		.uleb128 0x13
 8050 0180 00       		.byte	0
 8051 0181 00       		.byte	0
 8052 0182 1E       		.uleb128 0x1e
 8053 0183 8A8201   		.uleb128 0x410a
 8054 0186 00       		.byte	0
 8055 0187 02       		.uleb128 0x2
 8056 0188 18       		.uleb128 0x18
 8057 0189 9142     		.uleb128 0x2111
 8058 018b 18       		.uleb128 0x18
 8059 018c 00       		.byte	0
 8060 018d 00       		.byte	0
 8061 018e 1F       		.uleb128 0x1f
 8062 018f 05       		.uleb128 0x5
 8063 0190 00       		.byte	0
 8064 0191 03       		.uleb128 0x3
 8065 0192 0E       		.uleb128 0xe
 8066 0193 3A       		.uleb128 0x3a
 8067 0194 0B       		.uleb128 0xb
 8068 0195 3B       		.uleb128 0x3b
 8069 0196 05       		.uleb128 0x5
 8070 0197 49       		.uleb128 0x49
 8071 0198 13       		.uleb128 0x13
 8072 0199 02       		.uleb128 0x2
 8073 019a 18       		.uleb128 0x18
 8074 019b 00       		.byte	0
 8075 019c 00       		.byte	0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 250


 8076 019d 20       		.uleb128 0x20
 8077 019e 34       		.uleb128 0x34
 8078 019f 00       		.byte	0
 8079 01a0 03       		.uleb128 0x3
 8080 01a1 0E       		.uleb128 0xe
 8081 01a2 3A       		.uleb128 0x3a
 8082 01a3 0B       		.uleb128 0xb
 8083 01a4 3B       		.uleb128 0x3b
 8084 01a5 05       		.uleb128 0x5
 8085 01a6 49       		.uleb128 0x49
 8086 01a7 13       		.uleb128 0x13
 8087 01a8 02       		.uleb128 0x2
 8088 01a9 18       		.uleb128 0x18
 8089 01aa 00       		.byte	0
 8090 01ab 00       		.byte	0
 8091 01ac 21       		.uleb128 0x21
 8092 01ad 34       		.uleb128 0x34
 8093 01ae 00       		.byte	0
 8094 01af 03       		.uleb128 0x3
 8095 01b0 08       		.uleb128 0x8
 8096 01b1 3A       		.uleb128 0x3a
 8097 01b2 0B       		.uleb128 0xb
 8098 01b3 3B       		.uleb128 0x3b
 8099 01b4 05       		.uleb128 0x5
 8100 01b5 49       		.uleb128 0x49
 8101 01b6 13       		.uleb128 0x13
 8102 01b7 02       		.uleb128 0x2
 8103 01b8 17       		.uleb128 0x17
 8104 01b9 00       		.byte	0
 8105 01ba 00       		.byte	0
 8106 01bb 22       		.uleb128 0x22
 8107 01bc 898201   		.uleb128 0x4109
 8108 01bf 01       		.byte	0x1
 8109 01c0 11       		.uleb128 0x11
 8110 01c1 01       		.uleb128 0x1
 8111 01c2 31       		.uleb128 0x31
 8112 01c3 13       		.uleb128 0x13
 8113 01c4 01       		.uleb128 0x1
 8114 01c5 13       		.uleb128 0x13
 8115 01c6 00       		.byte	0
 8116 01c7 00       		.byte	0
 8117 01c8 23       		.uleb128 0x23
 8118 01c9 0B       		.uleb128 0xb
 8119 01ca 01       		.byte	0x1
 8120 01cb 11       		.uleb128 0x11
 8121 01cc 01       		.uleb128 0x1
 8122 01cd 12       		.uleb128 0x12
 8123 01ce 06       		.uleb128 0x6
 8124 01cf 00       		.byte	0
 8125 01d0 00       		.byte	0
 8126 01d1 24       		.uleb128 0x24
 8127 01d2 2E       		.uleb128 0x2e
 8128 01d3 01       		.byte	0x1
 8129 01d4 03       		.uleb128 0x3
 8130 01d5 0E       		.uleb128 0xe
 8131 01d6 3A       		.uleb128 0x3a
 8132 01d7 0B       		.uleb128 0xb
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 251


 8133 01d8 3B       		.uleb128 0x3b
 8134 01d9 05       		.uleb128 0x5
 8135 01da 27       		.uleb128 0x27
 8136 01db 19       		.uleb128 0x19
 8137 01dc 8701     		.uleb128 0x87
 8138 01de 19       		.uleb128 0x19
 8139 01df 11       		.uleb128 0x11
 8140 01e0 01       		.uleb128 0x1
 8141 01e1 12       		.uleb128 0x12
 8142 01e2 06       		.uleb128 0x6
 8143 01e3 40       		.uleb128 0x40
 8144 01e4 18       		.uleb128 0x18
 8145 01e5 9742     		.uleb128 0x2117
 8146 01e7 19       		.uleb128 0x19
 8147 01e8 01       		.uleb128 0x1
 8148 01e9 13       		.uleb128 0x13
 8149 01ea 00       		.byte	0
 8150 01eb 00       		.byte	0
 8151 01ec 25       		.uleb128 0x25
 8152 01ed 2E       		.uleb128 0x2e
 8153 01ee 01       		.byte	0x1
 8154 01ef 3F       		.uleb128 0x3f
 8155 01f0 19       		.uleb128 0x19
 8156 01f1 03       		.uleb128 0x3
 8157 01f2 0E       		.uleb128 0xe
 8158 01f3 3A       		.uleb128 0x3a
 8159 01f4 0B       		.uleb128 0xb
 8160 01f5 3B       		.uleb128 0x3b
 8161 01f6 05       		.uleb128 0x5
 8162 01f7 27       		.uleb128 0x27
 8163 01f8 19       		.uleb128 0x19
 8164 01f9 49       		.uleb128 0x49
 8165 01fa 13       		.uleb128 0x13
 8166 01fb 11       		.uleb128 0x11
 8167 01fc 01       		.uleb128 0x1
 8168 01fd 12       		.uleb128 0x12
 8169 01fe 06       		.uleb128 0x6
 8170 01ff 40       		.uleb128 0x40
 8171 0200 18       		.uleb128 0x18
 8172 0201 9742     		.uleb128 0x2117
 8173 0203 19       		.uleb128 0x19
 8174 0204 01       		.uleb128 0x1
 8175 0205 13       		.uleb128 0x13
 8176 0206 00       		.byte	0
 8177 0207 00       		.byte	0
 8178 0208 26       		.uleb128 0x26
 8179 0209 0B       		.uleb128 0xb
 8180 020a 01       		.byte	0x1
 8181 020b 11       		.uleb128 0x11
 8182 020c 01       		.uleb128 0x1
 8183 020d 12       		.uleb128 0x12
 8184 020e 06       		.uleb128 0x6
 8185 020f 01       		.uleb128 0x1
 8186 0210 13       		.uleb128 0x13
 8187 0211 00       		.byte	0
 8188 0212 00       		.byte	0
 8189 0213 27       		.uleb128 0x27
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 252


 8190 0214 2E       		.uleb128 0x2e
 8191 0215 01       		.byte	0x1
 8192 0216 3F       		.uleb128 0x3f
 8193 0217 19       		.uleb128 0x19
 8194 0218 03       		.uleb128 0x3
 8195 0219 0E       		.uleb128 0xe
 8196 021a 3A       		.uleb128 0x3a
 8197 021b 0B       		.uleb128 0xb
 8198 021c 3B       		.uleb128 0x3b
 8199 021d 05       		.uleb128 0x5
 8200 021e 27       		.uleb128 0x27
 8201 021f 19       		.uleb128 0x19
 8202 0220 11       		.uleb128 0x11
 8203 0221 01       		.uleb128 0x1
 8204 0222 12       		.uleb128 0x12
 8205 0223 06       		.uleb128 0x6
 8206 0224 40       		.uleb128 0x40
 8207 0225 18       		.uleb128 0x18
 8208 0226 9742     		.uleb128 0x2117
 8209 0228 19       		.uleb128 0x19
 8210 0229 01       		.uleb128 0x1
 8211 022a 13       		.uleb128 0x13
 8212 022b 00       		.byte	0
 8213 022c 00       		.byte	0
 8214 022d 28       		.uleb128 0x28
 8215 022e 34       		.uleb128 0x34
 8216 022f 00       		.byte	0
 8217 0230 03       		.uleb128 0x3
 8218 0231 0E       		.uleb128 0xe
 8219 0232 3A       		.uleb128 0x3a
 8220 0233 0B       		.uleb128 0xb
 8221 0234 3B       		.uleb128 0x3b
 8222 0235 05       		.uleb128 0x5
 8223 0236 49       		.uleb128 0x49
 8224 0237 13       		.uleb128 0x13
 8225 0238 00       		.byte	0
 8226 0239 00       		.byte	0
 8227 023a 29       		.uleb128 0x29
 8228 023b 1D       		.uleb128 0x1d
 8229 023c 01       		.byte	0x1
 8230 023d 31       		.uleb128 0x31
 8231 023e 13       		.uleb128 0x13
 8232 023f 11       		.uleb128 0x11
 8233 0240 01       		.uleb128 0x1
 8234 0241 12       		.uleb128 0x12
 8235 0242 06       		.uleb128 0x6
 8236 0243 58       		.uleb128 0x58
 8237 0244 0B       		.uleb128 0xb
 8238 0245 59       		.uleb128 0x59
 8239 0246 05       		.uleb128 0x5
 8240 0247 01       		.uleb128 0x1
 8241 0248 13       		.uleb128 0x13
 8242 0249 00       		.byte	0
 8243 024a 00       		.byte	0
 8244 024b 2A       		.uleb128 0x2a
 8245 024c 34       		.uleb128 0x34
 8246 024d 00       		.byte	0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 253


 8247 024e 31       		.uleb128 0x31
 8248 024f 13       		.uleb128 0x13
 8249 0250 00       		.byte	0
 8250 0251 00       		.byte	0
 8251 0252 2B       		.uleb128 0x2b
 8252 0253 1D       		.uleb128 0x1d
 8253 0254 01       		.byte	0x1
 8254 0255 31       		.uleb128 0x31
 8255 0256 13       		.uleb128 0x13
 8256 0257 11       		.uleb128 0x11
 8257 0258 01       		.uleb128 0x1
 8258 0259 12       		.uleb128 0x12
 8259 025a 06       		.uleb128 0x6
 8260 025b 58       		.uleb128 0x58
 8261 025c 0B       		.uleb128 0xb
 8262 025d 59       		.uleb128 0x59
 8263 025e 05       		.uleb128 0x5
 8264 025f 00       		.byte	0
 8265 0260 00       		.byte	0
 8266 0261 2C       		.uleb128 0x2c
 8267 0262 05       		.uleb128 0x5
 8268 0263 00       		.byte	0
 8269 0264 31       		.uleb128 0x31
 8270 0265 13       		.uleb128 0x13
 8271 0266 02       		.uleb128 0x2
 8272 0267 17       		.uleb128 0x17
 8273 0268 00       		.byte	0
 8274 0269 00       		.byte	0
 8275 026a 2D       		.uleb128 0x2d
 8276 026b 2E       		.uleb128 0x2e
 8277 026c 00       		.byte	0
 8278 026d 3F       		.uleb128 0x3f
 8279 026e 19       		.uleb128 0x19
 8280 026f 03       		.uleb128 0x3
 8281 0270 0E       		.uleb128 0xe
 8282 0271 3A       		.uleb128 0x3a
 8283 0272 0B       		.uleb128 0xb
 8284 0273 3B       		.uleb128 0x3b
 8285 0274 05       		.uleb128 0x5
 8286 0275 27       		.uleb128 0x27
 8287 0276 19       		.uleb128 0x19
 8288 0277 11       		.uleb128 0x11
 8289 0278 01       		.uleb128 0x1
 8290 0279 12       		.uleb128 0x12
 8291 027a 06       		.uleb128 0x6
 8292 027b 40       		.uleb128 0x40
 8293 027c 18       		.uleb128 0x18
 8294 027d 9742     		.uleb128 0x2117
 8295 027f 19       		.uleb128 0x19
 8296 0280 00       		.byte	0
 8297 0281 00       		.byte	0
 8298 0282 2E       		.uleb128 0x2e
 8299 0283 34       		.uleb128 0x34
 8300 0284 00       		.byte	0
 8301 0285 03       		.uleb128 0x3
 8302 0286 0E       		.uleb128 0xe
 8303 0287 3A       		.uleb128 0x3a
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 254


 8304 0288 0B       		.uleb128 0xb
 8305 0289 3B       		.uleb128 0x3b
 8306 028a 05       		.uleb128 0x5
 8307 028b 49       		.uleb128 0x49
 8308 028c 13       		.uleb128 0x13
 8309 028d 1C       		.uleb128 0x1c
 8310 028e 0B       		.uleb128 0xb
 8311 028f 00       		.byte	0
 8312 0290 00       		.byte	0
 8313 0291 2F       		.uleb128 0x2f
 8314 0292 2E       		.uleb128 0x2e
 8315 0293 00       		.byte	0
 8316 0294 3F       		.uleb128 0x3f
 8317 0295 19       		.uleb128 0x19
 8318 0296 03       		.uleb128 0x3
 8319 0297 0E       		.uleb128 0xe
 8320 0298 3A       		.uleb128 0x3a
 8321 0299 0B       		.uleb128 0xb
 8322 029a 3B       		.uleb128 0x3b
 8323 029b 05       		.uleb128 0x5
 8324 029c 27       		.uleb128 0x27
 8325 029d 19       		.uleb128 0x19
 8326 029e 49       		.uleb128 0x49
 8327 029f 13       		.uleb128 0x13
 8328 02a0 11       		.uleb128 0x11
 8329 02a1 01       		.uleb128 0x1
 8330 02a2 12       		.uleb128 0x12
 8331 02a3 06       		.uleb128 0x6
 8332 02a4 40       		.uleb128 0x40
 8333 02a5 18       		.uleb128 0x18
 8334 02a6 9742     		.uleb128 0x2117
 8335 02a8 19       		.uleb128 0x19
 8336 02a9 00       		.byte	0
 8337 02aa 00       		.byte	0
 8338 02ab 30       		.uleb128 0x30
 8339 02ac 0B       		.uleb128 0xb
 8340 02ad 01       		.byte	0x1
 8341 02ae 55       		.uleb128 0x55
 8342 02af 17       		.uleb128 0x17
 8343 02b0 00       		.byte	0
 8344 02b1 00       		.byte	0
 8345 02b2 31       		.uleb128 0x31
 8346 02b3 0B       		.uleb128 0xb
 8347 02b4 01       		.byte	0x1
 8348 02b5 55       		.uleb128 0x55
 8349 02b6 17       		.uleb128 0x17
 8350 02b7 01       		.uleb128 0x1
 8351 02b8 13       		.uleb128 0x13
 8352 02b9 00       		.byte	0
 8353 02ba 00       		.byte	0
 8354 02bb 32       		.uleb128 0x32
 8355 02bc 34       		.uleb128 0x34
 8356 02bd 00       		.byte	0
 8357 02be 03       		.uleb128 0x3
 8358 02bf 0E       		.uleb128 0xe
 8359 02c0 3A       		.uleb128 0x3a
 8360 02c1 0B       		.uleb128 0xb
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 255


 8361 02c2 3B       		.uleb128 0x3b
 8362 02c3 05       		.uleb128 0x5
 8363 02c4 49       		.uleb128 0x49
 8364 02c5 13       		.uleb128 0x13
 8365 02c6 3F       		.uleb128 0x3f
 8366 02c7 19       		.uleb128 0x19
 8367 02c8 02       		.uleb128 0x2
 8368 02c9 18       		.uleb128 0x18
 8369 02ca 00       		.byte	0
 8370 02cb 00       		.byte	0
 8371 02cc 33       		.uleb128 0x33
 8372 02cd 2E       		.uleb128 0x2e
 8373 02ce 00       		.byte	0
 8374 02cf 3F       		.uleb128 0x3f
 8375 02d0 19       		.uleb128 0x19
 8376 02d1 3C       		.uleb128 0x3c
 8377 02d2 19       		.uleb128 0x19
 8378 02d3 6E       		.uleb128 0x6e
 8379 02d4 0E       		.uleb128 0xe
 8380 02d5 03       		.uleb128 0x3
 8381 02d6 0E       		.uleb128 0xe
 8382 02d7 3A       		.uleb128 0x3a
 8383 02d8 0B       		.uleb128 0xb
 8384 02d9 3B       		.uleb128 0x3b
 8385 02da 0B       		.uleb128 0xb
 8386 02db 00       		.byte	0
 8387 02dc 00       		.byte	0
 8388 02dd 34       		.uleb128 0x34
 8389 02de 2E       		.uleb128 0x2e
 8390 02df 00       		.byte	0
 8391 02e0 3F       		.uleb128 0x3f
 8392 02e1 19       		.uleb128 0x19
 8393 02e2 3C       		.uleb128 0x3c
 8394 02e3 19       		.uleb128 0x19
 8395 02e4 6E       		.uleb128 0x6e
 8396 02e5 0E       		.uleb128 0xe
 8397 02e6 03       		.uleb128 0x3
 8398 02e7 0E       		.uleb128 0xe
 8399 02e8 3A       		.uleb128 0x3a
 8400 02e9 0B       		.uleb128 0xb
 8401 02ea 3B       		.uleb128 0x3b
 8402 02eb 05       		.uleb128 0x5
 8403 02ec 00       		.byte	0
 8404 02ed 00       		.byte	0
 8405 02ee 00       		.byte	0
 8406              		.section	.debug_loc,"",%progbits
 8407              	.Ldebug_loc0:
 8408              	.LLST0:
 8409 0000 00000000 		.4byte	.LVL0
 8410 0004 14000000 		.4byte	.LVL1
 8411 0008 0100     		.2byte	0x1
 8412 000a 50       		.byte	0x50
 8413 000b 14000000 		.4byte	.LVL1
 8414 000f 16000000 		.4byte	.LVL2
 8415 0013 0400     		.2byte	0x4
 8416 0015 F3       		.byte	0xf3
 8417 0016 01       		.uleb128 0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 256


 8418 0017 50       		.byte	0x50
 8419 0018 9F       		.byte	0x9f
 8420 0019 16000000 		.4byte	.LVL2
 8421 001d 18000000 		.4byte	.LVL3
 8422 0021 0100     		.2byte	0x1
 8423 0023 50       		.byte	0x50
 8424 0024 18000000 		.4byte	.LVL3
 8425 0028 1A000000 		.4byte	.LVL4
 8426 002c 0400     		.2byte	0x4
 8427 002e F3       		.byte	0xf3
 8428 002f 01       		.uleb128 0x1
 8429 0030 50       		.byte	0x50
 8430 0031 9F       		.byte	0x9f
 8431 0032 1A000000 		.4byte	.LVL4
 8432 0036 1C000000 		.4byte	.LVL5
 8433 003a 0100     		.2byte	0x1
 8434 003c 50       		.byte	0x50
 8435 003d 1C000000 		.4byte	.LVL5
 8436 0041 1E000000 		.4byte	.LVL6
 8437 0045 0400     		.2byte	0x4
 8438 0047 F3       		.byte	0xf3
 8439 0048 01       		.uleb128 0x1
 8440 0049 50       		.byte	0x50
 8441 004a 9F       		.byte	0x9f
 8442 004b 1E000000 		.4byte	.LVL6
 8443 004f 20000000 		.4byte	.LVL7
 8444 0053 0100     		.2byte	0x1
 8445 0055 50       		.byte	0x50
 8446 0056 20000000 		.4byte	.LVL7
 8447 005a 2C000000 		.4byte	.LFE14
 8448 005e 0400     		.2byte	0x4
 8449 0060 F3       		.byte	0xf3
 8450 0061 01       		.uleb128 0x1
 8451 0062 50       		.byte	0x50
 8452 0063 9F       		.byte	0x9f
 8453 0064 00000000 		.4byte	0
 8454 0068 00000000 		.4byte	0
 8455              	.LLST1:
 8456 006c 00000000 		.4byte	.LVL0
 8457 0070 20000000 		.4byte	.LVL7
 8458 0074 0200     		.2byte	0x2
 8459 0076 30       		.byte	0x30
 8460 0077 9F       		.byte	0x9f
 8461 0078 20000000 		.4byte	.LVL7
 8462 007c 2C000000 		.4byte	.LFE14
 8463 0080 0100     		.2byte	0x1
 8464 0082 50       		.byte	0x50
 8465 0083 00000000 		.4byte	0
 8466 0087 00000000 		.4byte	0
 8467              	.LLST2:
 8468 008b 00000000 		.4byte	.LVL0
 8469 008f 14000000 		.4byte	.LVL1
 8470 0093 0100     		.2byte	0x1
 8471 0095 50       		.byte	0x50
 8472 0096 14000000 		.4byte	.LVL1
 8473 009a 16000000 		.4byte	.LVL2
 8474 009e 0400     		.2byte	0x4
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 257


 8475 00a0 F3       		.byte	0xf3
 8476 00a1 01       		.uleb128 0x1
 8477 00a2 50       		.byte	0x50
 8478 00a3 9F       		.byte	0x9f
 8479 00a4 16000000 		.4byte	.LVL2
 8480 00a8 18000000 		.4byte	.LVL3
 8481 00ac 0100     		.2byte	0x1
 8482 00ae 50       		.byte	0x50
 8483 00af 18000000 		.4byte	.LVL3
 8484 00b3 1A000000 		.4byte	.LVL4
 8485 00b7 0400     		.2byte	0x4
 8486 00b9 F3       		.byte	0xf3
 8487 00ba 01       		.uleb128 0x1
 8488 00bb 50       		.byte	0x50
 8489 00bc 9F       		.byte	0x9f
 8490 00bd 1A000000 		.4byte	.LVL4
 8491 00c1 1C000000 		.4byte	.LVL5
 8492 00c5 0100     		.2byte	0x1
 8493 00c7 50       		.byte	0x50
 8494 00c8 1C000000 		.4byte	.LVL5
 8495 00cc 1E000000 		.4byte	.LVL6
 8496 00d0 0400     		.2byte	0x4
 8497 00d2 F3       		.byte	0xf3
 8498 00d3 01       		.uleb128 0x1
 8499 00d4 50       		.byte	0x50
 8500 00d5 9F       		.byte	0x9f
 8501 00d6 1E000000 		.4byte	.LVL6
 8502 00da 20000000 		.4byte	.LVL7
 8503 00de 0100     		.2byte	0x1
 8504 00e0 50       		.byte	0x50
 8505 00e1 20000000 		.4byte	.LVL7
 8506 00e5 2C000000 		.4byte	.LFE14
 8507 00e9 0400     		.2byte	0x4
 8508 00eb F3       		.byte	0xf3
 8509 00ec 01       		.uleb128 0x1
 8510 00ed 50       		.byte	0x50
 8511 00ee 9F       		.byte	0x9f
 8512 00ef 00000000 		.4byte	0
 8513 00f3 00000000 		.4byte	0
 8514              	.LLST3:
 8515 00f7 00000000 		.4byte	.LVL8
 8516 00fb 06000000 		.4byte	.LVL9
 8517 00ff 0100     		.2byte	0x1
 8518 0101 50       		.byte	0x50
 8519 0102 06000000 		.4byte	.LVL9
 8520 0106 12000000 		.4byte	.LFE42
 8521 010a 0100     		.2byte	0x1
 8522 010c 54       		.byte	0x54
 8523 010d 00000000 		.4byte	0
 8524 0111 00000000 		.4byte	0
 8525              	.LLST4:
 8526 0115 00000000 		.4byte	.LVL12
 8527 0119 22000000 		.4byte	.LVL18
 8528 011d 0100     		.2byte	0x1
 8529 011f 50       		.byte	0x50
 8530 0120 22000000 		.4byte	.LVL18
 8531 0124 32000000 		.4byte	.LVL20
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 258


 8532 0128 0100     		.2byte	0x1
 8533 012a 58       		.byte	0x58
 8534 012b 32000000 		.4byte	.LVL20
 8535 012f 36000000 		.4byte	.LVL21
 8536 0133 0100     		.2byte	0x1
 8537 0135 50       		.byte	0x50
 8538 0136 36000000 		.4byte	.LVL21
 8539 013a 42000000 		.4byte	.LVL23
 8540 013e 0100     		.2byte	0x1
 8541 0140 58       		.byte	0x58
 8542 0141 42000000 		.4byte	.LVL23
 8543 0145 48000000 		.4byte	.LVL24
 8544 0149 0100     		.2byte	0x1
 8545 014b 50       		.byte	0x50
 8546 014c 48000000 		.4byte	.LVL24
 8547 0150 8E000000 		.4byte	.LFE5
 8548 0154 0100     		.2byte	0x1
 8549 0156 58       		.byte	0x58
 8550 0157 00000000 		.4byte	0
 8551 015b 00000000 		.4byte	0
 8552              	.LLST5:
 8553 015f 00000000 		.4byte	.LVL12
 8554 0163 22000000 		.4byte	.LVL18
 8555 0167 0100     		.2byte	0x1
 8556 0169 51       		.byte	0x51
 8557 016a 22000000 		.4byte	.LVL18
 8558 016e 32000000 		.4byte	.LVL20
 8559 0172 0100     		.2byte	0x1
 8560 0174 52       		.byte	0x52
 8561 0175 32000000 		.4byte	.LVL20
 8562 0179 36000000 		.4byte	.LVL21
 8563 017d 0100     		.2byte	0x1
 8564 017f 51       		.byte	0x51
 8565 0180 36000000 		.4byte	.LVL21
 8566 0184 42000000 		.4byte	.LVL23
 8567 0188 0100     		.2byte	0x1
 8568 018a 52       		.byte	0x52
 8569 018b 42000000 		.4byte	.LVL23
 8570 018f 48000000 		.4byte	.LVL24
 8571 0193 0100     		.2byte	0x1
 8572 0195 51       		.byte	0x51
 8573 0196 48000000 		.4byte	.LVL24
 8574 019a 8E000000 		.4byte	.LFE5
 8575 019e 0400     		.2byte	0x4
 8576 01a0 F3       		.byte	0xf3
 8577 01a1 01       		.uleb128 0x1
 8578 01a2 51       		.byte	0x51
 8579 01a3 9F       		.byte	0x9f
 8580 01a4 00000000 		.4byte	0
 8581 01a8 00000000 		.4byte	0
 8582              	.LLST6:
 8583 01ac 00000000 		.4byte	.LVL12
 8584 01b0 14000000 		.4byte	.LVL14
 8585 01b4 0100     		.2byte	0x1
 8586 01b6 52       		.byte	0x52
 8587 01b7 14000000 		.4byte	.LVL14
 8588 01bb 16000000 		.4byte	.LVL15
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 259


 8589 01bf 0700     		.2byte	0x7
 8590 01c1 72       		.byte	0x72
 8591 01c2 80808080 		.sleb128 -1073741824
 8591      7C
 8592 01c7 9F       		.byte	0x9f
 8593 01c8 16000000 		.4byte	.LVL15
 8594 01cc 22000000 		.4byte	.LVL18
 8595 01d0 0700     		.2byte	0x7
 8596 01d2 72       		.byte	0x72
 8597 01d3 81808080 		.sleb128 -1073741823
 8597      7C
 8598 01d8 9F       		.byte	0x9f
 8599 01d9 22000000 		.4byte	.LVL18
 8600 01dd 8E000000 		.4byte	.LFE5
 8601 01e1 0400     		.2byte	0x4
 8602 01e3 F3       		.byte	0xf3
 8603 01e4 01       		.uleb128 0x1
 8604 01e5 52       		.byte	0x52
 8605 01e6 9F       		.byte	0x9f
 8606 01e7 00000000 		.4byte	0
 8607 01eb 00000000 		.4byte	0
 8608              	.LLST7:
 8609 01ef 00000000 		.4byte	.LVL12
 8610 01f3 10000000 		.4byte	.LVL13
 8611 01f7 0100     		.2byte	0x1
 8612 01f9 53       		.byte	0x53
 8613 01fa 10000000 		.4byte	.LVL13
 8614 01fe 8E000000 		.4byte	.LFE5
 8615 0202 0100     		.2byte	0x1
 8616 0204 59       		.byte	0x59
 8617 0205 00000000 		.4byte	0
 8618 0209 00000000 		.4byte	0
 8619              	.LLST8:
 8620 020d 00000000 		.4byte	.LVL12
 8621 0211 4E000000 		.4byte	.LVL25
 8622 0215 0200     		.2byte	0x2
 8623 0217 91       		.byte	0x91
 8624 0218 00       		.sleb128 0
 8625 0219 4E000000 		.4byte	.LVL25
 8626 021d 64000000 		.4byte	.LVL28
 8627 0221 0100     		.2byte	0x1
 8628 0223 55       		.byte	0x55
 8629 0224 00000000 		.4byte	0
 8630 0228 00000000 		.4byte	0
 8631              	.LLST9:
 8632 022c 22000000 		.4byte	.LVL18
 8633 0230 32000000 		.4byte	.LVL20
 8634 0234 0100     		.2byte	0x1
 8635 0236 53       		.byte	0x53
 8636 0237 36000000 		.4byte	.LVL21
 8637 023b 3C000000 		.4byte	.LVL22
 8638 023f 0100     		.2byte	0x1
 8639 0241 53       		.byte	0x53
 8640 0242 00000000 		.4byte	0
 8641 0246 00000000 		.4byte	0
 8642              	.LLST10:
 8643 024a 02000000 		.4byte	.LVL30
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 260


 8644 024e 06000000 		.4byte	.LVL31
 8645 0252 0200     		.2byte	0x2
 8646 0254 30       		.byte	0x30
 8647 0255 9F       		.byte	0x9f
 8648 0256 06000000 		.4byte	.LVL31
 8649 025a 1C000000 		.4byte	.LVL34
 8650 025e 0100     		.2byte	0x1
 8651 0260 54       		.byte	0x54
 8652 0261 00000000 		.4byte	0
 8653 0265 00000000 		.4byte	0
 8654              	.LLST11:
 8655 0269 00000000 		.4byte	.LVL40
 8656 026d 07000000 		.4byte	.LVL41-1
 8657 0271 0100     		.2byte	0x1
 8658 0273 50       		.byte	0x50
 8659 0274 07000000 		.4byte	.LVL41-1
 8660 0278 A2000000 		.4byte	.LVL45
 8661 027c 0100     		.2byte	0x1
 8662 027e 54       		.byte	0x54
 8663 027f A2000000 		.4byte	.LVL45
 8664 0283 AC000000 		.4byte	.LFE6
 8665 0287 0400     		.2byte	0x4
 8666 0289 F3       		.byte	0xf3
 8667 028a 01       		.uleb128 0x1
 8668 028b 50       		.byte	0x50
 8669 028c 9F       		.byte	0x9f
 8670 028d 00000000 		.4byte	0
 8671 0291 00000000 		.4byte	0
 8672              	.LLST12:
 8673 0295 10000000 		.4byte	.LVL47
 8674 0299 34000000 		.4byte	.LVL50
 8675 029d 0100     		.2byte	0x1
 8676 029f 55       		.byte	0x55
 8677 02a0 00000000 		.4byte	0
 8678 02a4 00000000 		.4byte	0
 8679              	.LLST13:
 8680 02a8 00000000 		.4byte	.LVL51
 8681 02ac 02000000 		.4byte	.LVL52
 8682 02b0 0100     		.2byte	0x1
 8683 02b2 50       		.byte	0x50
 8684 02b3 02000000 		.4byte	.LVL52
 8685 02b7 28000000 		.4byte	.LFE37
 8686 02bb 0400     		.2byte	0x4
 8687 02bd F3       		.byte	0xf3
 8688 02be 01       		.uleb128 0x1
 8689 02bf 50       		.byte	0x50
 8690 02c0 9F       		.byte	0x9f
 8691 02c1 00000000 		.4byte	0
 8692 02c5 00000000 		.4byte	0
 8693              	.LLST14:
 8694 02c9 00000000 		.4byte	.LVL54
 8695 02cd 10000000 		.4byte	.LVL56
 8696 02d1 0100     		.2byte	0x1
 8697 02d3 50       		.byte	0x50
 8698 02d4 10000000 		.4byte	.LVL56
 8699 02d8 2E000000 		.4byte	.LVL60
 8700 02dc 0100     		.2byte	0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 261


 8701 02de 54       		.byte	0x54
 8702 02df 2E000000 		.4byte	.LVL60
 8703 02e3 68000000 		.4byte	.LFE54
 8704 02e7 0400     		.2byte	0x4
 8705 02e9 F3       		.byte	0xf3
 8706 02ea 01       		.uleb128 0x1
 8707 02eb 50       		.byte	0x50
 8708 02ec 9F       		.byte	0x9f
 8709 02ed 00000000 		.4byte	0
 8710 02f1 00000000 		.4byte	0
 8711              	.LLST15:
 8712 02f5 00000000 		.4byte	.LVL54
 8713 02f9 15000000 		.4byte	.LVL57-1
 8714 02fd 0100     		.2byte	0x1
 8715 02ff 51       		.byte	0x51
 8716 0300 15000000 		.4byte	.LVL57-1
 8717 0304 64000000 		.4byte	.LVL65
 8718 0308 0100     		.2byte	0x1
 8719 030a 56       		.byte	0x56
 8720 030b 64000000 		.4byte	.LVL65
 8721 030f 68000000 		.4byte	.LFE54
 8722 0313 0400     		.2byte	0x4
 8723 0315 F3       		.byte	0xf3
 8724 0316 01       		.uleb128 0x1
 8725 0317 51       		.byte	0x51
 8726 0318 9F       		.byte	0x9f
 8727 0319 00000000 		.4byte	0
 8728 031d 00000000 		.4byte	0
 8729              	.LLST16:
 8730 0321 2E000000 		.4byte	.LVL60
 8731 0325 64000000 		.4byte	.LVL65
 8732 0329 0100     		.2byte	0x1
 8733 032b 54       		.byte	0x54
 8734 032c 00000000 		.4byte	0
 8735 0330 00000000 		.4byte	0
 8736              	.LLST17:
 8737 0334 0C000000 		.4byte	.LVL55
 8738 0338 4E000000 		.4byte	.LVL63
 8739 033c 0100     		.2byte	0x1
 8740 033e 55       		.byte	0x55
 8741 033f 00000000 		.4byte	0
 8742 0343 00000000 		.4byte	0
 8743              	.LLST18:
 8744 0347 00000000 		.4byte	.LVL66
 8745 034b 10000000 		.4byte	.LVL67
 8746 034f 0100     		.2byte	0x1
 8747 0351 50       		.byte	0x50
 8748 0352 10000000 		.4byte	.LVL67
 8749 0356 62000000 		.4byte	.LFE4
 8750 035a 0100     		.2byte	0x1
 8751 035c 56       		.byte	0x56
 8752 035d 00000000 		.4byte	0
 8753 0361 00000000 		.4byte	0
 8754              	.LLST19:
 8755 0365 00000000 		.4byte	.LVL66
 8756 0369 13000000 		.4byte	.LVL68-1
 8757 036d 0100     		.2byte	0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 262


 8758 036f 51       		.byte	0x51
 8759 0370 13000000 		.4byte	.LVL68-1
 8760 0374 62000000 		.4byte	.LFE4
 8761 0378 0100     		.2byte	0x1
 8762 037a 57       		.byte	0x57
 8763 037b 00000000 		.4byte	0
 8764 037f 00000000 		.4byte	0
 8765              	.LLST20:
 8766 0383 00000000 		.4byte	.LVL66
 8767 0387 13000000 		.4byte	.LVL68-1
 8768 038b 0100     		.2byte	0x1
 8769 038d 52       		.byte	0x52
 8770 038e 13000000 		.4byte	.LVL68-1
 8771 0392 62000000 		.4byte	.LFE4
 8772 0396 0400     		.2byte	0x4
 8773 0398 F3       		.byte	0xf3
 8774 0399 01       		.uleb128 0x1
 8775 039a 52       		.byte	0x52
 8776 039b 9F       		.byte	0x9f
 8777 039c 00000000 		.4byte	0
 8778 03a0 00000000 		.4byte	0
 8779              	.LLST21:
 8780 03a4 00000000 		.4byte	.LVL66
 8781 03a8 13000000 		.4byte	.LVL68-1
 8782 03ac 0100     		.2byte	0x1
 8783 03ae 53       		.byte	0x53
 8784 03af 13000000 		.4byte	.LVL68-1
 8785 03b3 62000000 		.4byte	.LFE4
 8786 03b7 0100     		.2byte	0x1
 8787 03b9 58       		.byte	0x58
 8788 03ba 00000000 		.4byte	0
 8789 03be 00000000 		.4byte	0
 8790              	.LLST22:
 8791 03c2 1E000000 		.4byte	.LVL70
 8792 03c6 2A000000 		.4byte	.LVL71
 8793 03ca 0100     		.2byte	0x1
 8794 03cc 50       		.byte	0x50
 8795 03cd 2A000000 		.4byte	.LVL71
 8796 03d1 30000000 		.4byte	.LVL73
 8797 03d5 0100     		.2byte	0x1
 8798 03d7 54       		.byte	0x54
 8799 03d8 32000000 		.4byte	.LVL74
 8800 03dc 62000000 		.4byte	.LFE4
 8801 03e0 0100     		.2byte	0x1
 8802 03e2 54       		.byte	0x54
 8803 03e3 00000000 		.4byte	0
 8804 03e7 00000000 		.4byte	0
 8805              	.LLST23:
 8806 03eb 54000000 		.4byte	.LVL76
 8807 03ef 58000000 		.4byte	.LVL77
 8808 03f3 0200     		.2byte	0x2
 8809 03f5 31       		.byte	0x31
 8810 03f6 9F       		.byte	0x9f
 8811 03f7 5C000000 		.4byte	.LVL78
 8812 03fb 62000000 		.4byte	.LFE4
 8813 03ff 0100     		.2byte	0x1
 8814 0401 50       		.byte	0x50
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 263


 8815 0402 00000000 		.4byte	0
 8816 0406 00000000 		.4byte	0
 8817              	.LLST24:
 8818 040a 14000000 		.4byte	.LVL68
 8819 040e 1A000000 		.4byte	.LVL69
 8820 0412 0100     		.2byte	0x1
 8821 0414 50       		.byte	0x50
 8822 0415 1A000000 		.4byte	.LVL69
 8823 0419 30000000 		.4byte	.LVL73
 8824 041d 0100     		.2byte	0x1
 8825 041f 59       		.byte	0x59
 8826 0420 30000000 		.4byte	.LVL73
 8827 0424 32000000 		.4byte	.LVL74
 8828 0428 0100     		.2byte	0x1
 8829 042a 50       		.byte	0x50
 8830 042b 00000000 		.4byte	0
 8831 042f 00000000 		.4byte	0
 8832              	.LLST25:
 8833 0433 00000000 		.4byte	.LVL79
 8834 0437 07000000 		.4byte	.LVL80-1
 8835 043b 0100     		.2byte	0x1
 8836 043d 50       		.byte	0x50
 8837 043e 07000000 		.4byte	.LVL80-1
 8838 0442 10000000 		.4byte	.LVL81
 8839 0446 0100     		.2byte	0x1
 8840 0448 54       		.byte	0x54
 8841 0449 00000000 		.4byte	0
 8842 044d 00000000 		.4byte	0
 8843              	.LLST26:
 8844 0451 10000000 		.4byte	.LVL81
 8845 0455 8E000000 		.4byte	.LVL88
 8846 0459 0100     		.2byte	0x1
 8847 045b 54       		.byte	0x54
 8848 045c 00000000 		.4byte	0
 8849 0460 00000000 		.4byte	0
 8850              	.LLST27:
 8851 0464 00000000 		.4byte	.LVL89
 8852 0468 07000000 		.4byte	.LVL90-1
 8853 046c 0100     		.2byte	0x1
 8854 046e 50       		.byte	0x50
 8855 046f 07000000 		.4byte	.LVL90-1
 8856 0473 10000000 		.4byte	.LVL91
 8857 0477 0100     		.2byte	0x1
 8858 0479 54       		.byte	0x54
 8859 047a 10000000 		.4byte	.LVL91
 8860 047e 20000000 		.4byte	.LFE10
 8861 0482 0400     		.2byte	0x4
 8862 0484 F3       		.byte	0xf3
 8863 0485 01       		.uleb128 0x1
 8864 0486 50       		.byte	0x50
 8865 0487 9F       		.byte	0x9f
 8866 0488 00000000 		.4byte	0
 8867 048c 00000000 		.4byte	0
 8868              	.LLST28:
 8869 0490 10000000 		.4byte	.LVL91
 8870 0494 12000000 		.4byte	.LVL92
 8871 0498 0100     		.2byte	0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 264


 8872 049a 54       		.byte	0x54
 8873 049b 00000000 		.4byte	0
 8874 049f 00000000 		.4byte	0
 8875              	.LLST29:
 8876 04a3 12000000 		.4byte	.LVL92
 8877 04a7 1A000000 		.4byte	.LVL94
 8878 04ab 0100     		.2byte	0x1
 8879 04ad 54       		.byte	0x54
 8880 04ae 1A000000 		.4byte	.LVL94
 8881 04b2 20000000 		.4byte	.LFE10
 8882 04b6 0100     		.2byte	0x1
 8883 04b8 50       		.byte	0x50
 8884 04b9 00000000 		.4byte	0
 8885 04bd 00000000 		.4byte	0
 8886              	.LLST30:
 8887 04c1 00000000 		.4byte	.LVL95
 8888 04c5 1C000000 		.4byte	.LVL96
 8889 04c9 0100     		.2byte	0x1
 8890 04cb 50       		.byte	0x50
 8891 04cc 1C000000 		.4byte	.LVL96
 8892 04d0 28000000 		.4byte	.LFE11
 8893 04d4 0400     		.2byte	0x4
 8894 04d6 F3       		.byte	0xf3
 8895 04d7 01       		.uleb128 0x1
 8896 04d8 50       		.byte	0x50
 8897 04d9 9F       		.byte	0x9f
 8898 04da 00000000 		.4byte	0
 8899 04de 00000000 		.4byte	0
 8900              	.LLST31:
 8901 04e2 1C000000 		.4byte	.LVL96
 8902 04e6 1E000000 		.4byte	.LVL97
 8903 04ea 0100     		.2byte	0x1
 8904 04ec 50       		.byte	0x50
 8905 04ed 00000000 		.4byte	0
 8906 04f1 00000000 		.4byte	0
 8907              	.LLST32:
 8908 04f5 1E000000 		.4byte	.LVL97
 8909 04f9 22000000 		.4byte	.LVL98
 8910 04fd 0100     		.2byte	0x1
 8911 04ff 53       		.byte	0x53
 8912 0500 00000000 		.4byte	0
 8913 0504 00000000 		.4byte	0
 8914              	.LLST33:
 8915 0508 00000000 		.4byte	.LVL99
 8916 050c 0F000000 		.4byte	.LVL102-1
 8917 0510 0100     		.2byte	0x1
 8918 0512 50       		.byte	0x50
 8919 0513 0F000000 		.4byte	.LVL102-1
 8920 0517 18000000 		.4byte	.LVL103
 8921 051b 0100     		.2byte	0x1
 8922 051d 55       		.byte	0x55
 8923 051e 00000000 		.4byte	0
 8924 0522 00000000 		.4byte	0
 8925              	.LLST34:
 8926 0526 00000000 		.4byte	.LVL99
 8927 052a 0C000000 		.4byte	.LVL101
 8928 052e 0100     		.2byte	0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 265


 8929 0530 51       		.byte	0x51
 8930 0531 0C000000 		.4byte	.LVL101
 8931 0535 5E000000 		.4byte	.LVL106
 8932 0539 0100     		.2byte	0x1
 8933 053b 54       		.byte	0x54
 8934 053c 5E000000 		.4byte	.LVL106
 8935 0540 77000000 		.4byte	.LVL108-1
 8936 0544 0200     		.2byte	0x2
 8937 0546 75       		.byte	0x75
 8938 0547 2C       		.sleb128 44
 8939 0548 00000000 		.4byte	0
 8940 054c 00000000 		.4byte	0
 8941              	.LLST35:
 8942 0550 18000000 		.4byte	.LVL103
 8943 0554 B2000000 		.4byte	.LVL112
 8944 0558 0100     		.2byte	0x1
 8945 055a 55       		.byte	0x55
 8946 055b 00000000 		.4byte	0
 8947 055f 00000000 		.4byte	0
 8948              	.LLST36:
 8949 0563 1A000000 		.4byte	.LVL104
 8950 0567 66000000 		.4byte	.LVL107
 8951 056b 0100     		.2byte	0x1
 8952 056d 53       		.byte	0x53
 8953 056e 00000000 		.4byte	0
 8954 0572 00000000 		.4byte	0
 8955              	.LLST37:
 8956 0576 52000000 		.4byte	.LVL105
 8957 057a 66000000 		.4byte	.LVL107
 8958 057e 0100     		.2byte	0x1
 8959 0580 53       		.byte	0x53
 8960 0581 00000000 		.4byte	0
 8961 0585 00000000 		.4byte	0
 8962              	.LLST38:
 8963 0589 06000000 		.4byte	.LVL100
 8964 058d 52000000 		.4byte	.LVL105
 8965 0591 0200     		.2byte	0x2
 8966 0593 30       		.byte	0x30
 8967 0594 9F       		.byte	0x9f
 8968 0595 52000000 		.4byte	.LVL105
 8969 0599 AC000000 		.4byte	.LVL110
 8970 059d 0100     		.2byte	0x1
 8971 059f 56       		.byte	0x56
 8972 05a0 00000000 		.4byte	0
 8973 05a4 00000000 		.4byte	0
 8974              	.LLST39:
 8975 05a8 00000000 		.4byte	.LVL113
 8976 05ac 13000000 		.4byte	.LVL114-1
 8977 05b0 0100     		.2byte	0x1
 8978 05b2 50       		.byte	0x50
 8979 05b3 13000000 		.4byte	.LVL114-1
 8980 05b7 6C000000 		.4byte	.LVL119
 8981 05bb 0100     		.2byte	0x1
 8982 05bd 54       		.byte	0x54
 8983 05be 6C000000 		.4byte	.LVL119
 8984 05c2 78000000 		.4byte	.LFE15
 8985 05c6 0100     		.2byte	0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 266


 8986 05c8 50       		.byte	0x50
 8987 05c9 00000000 		.4byte	0
 8988 05cd 00000000 		.4byte	0
 8989              	.LLST41:
 8990 05d1 00000000 		.4byte	.LVL120
 8991 05d5 1B000000 		.4byte	.LVL122-1
 8992 05d9 0100     		.2byte	0x1
 8993 05db 50       		.byte	0x50
 8994 05dc 1B000000 		.4byte	.LVL122-1
 8995 05e0 7E000000 		.4byte	.LVL130
 8996 05e4 0100     		.2byte	0x1
 8997 05e6 54       		.byte	0x54
 8998 05e7 7E000000 		.4byte	.LVL130
 8999 05eb 8C000000 		.4byte	.LFE16
 9000 05ef 0400     		.2byte	0x4
 9001 05f1 F3       		.byte	0xf3
 9002 05f2 01       		.uleb128 0x1
 9003 05f3 50       		.byte	0x50
 9004 05f4 9F       		.byte	0x9f
 9005 05f5 00000000 		.4byte	0
 9006 05f9 00000000 		.4byte	0
 9007              	.LLST42:
 9008 05fd 04000000 		.4byte	.LVL121
 9009 0601 3A000000 		.4byte	.LVL123
 9010 0605 0200     		.2byte	0x2
 9011 0607 30       		.byte	0x30
 9012 0608 9F       		.byte	0x9f
 9013 0609 3A000000 		.4byte	.LVL123
 9014 060d 66000000 		.4byte	.LVL126
 9015 0611 0100     		.2byte	0x1
 9016 0613 56       		.byte	0x56
 9017 0614 66000000 		.4byte	.LVL126
 9018 0618 76000000 		.4byte	.LVL128
 9019 061c 0200     		.2byte	0x2
 9020 061e 30       		.byte	0x30
 9021 061f 9F       		.byte	0x9f
 9022 0620 76000000 		.4byte	.LVL128
 9023 0624 7E000000 		.4byte	.LVL130
 9024 0628 0100     		.2byte	0x1
 9025 062a 56       		.byte	0x56
 9026 062b 7E000000 		.4byte	.LVL130
 9027 062f 8C000000 		.4byte	.LFE16
 9028 0633 0100     		.2byte	0x1
 9029 0635 50       		.byte	0x50
 9030 0636 00000000 		.4byte	0
 9031 063a 00000000 		.4byte	0
 9032              	.LLST43:
 9033 063e 04000000 		.4byte	.LVL121
 9034 0642 1B000000 		.4byte	.LVL122-1
 9035 0646 0100     		.2byte	0x1
 9036 0648 50       		.byte	0x50
 9037 0649 1B000000 		.4byte	.LVL122-1
 9038 064d 7E000000 		.4byte	.LVL130
 9039 0651 0100     		.2byte	0x1
 9040 0653 54       		.byte	0x54
 9041 0654 7E000000 		.4byte	.LVL130
 9042 0658 8C000000 		.4byte	.LFE16
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 267


 9043 065c 0400     		.2byte	0x4
 9044 065e F3       		.byte	0xf3
 9045 065f 01       		.uleb128 0x1
 9046 0660 50       		.byte	0x50
 9047 0661 9F       		.byte	0x9f
 9048 0662 00000000 		.4byte	0
 9049 0666 00000000 		.4byte	0
 9050              	.LLST44:
 9051 066a 76000000 		.4byte	.LVL128
 9052 066e 7A000000 		.4byte	.LVL129
 9053 0672 0100     		.2byte	0x1
 9054 0674 55       		.byte	0x55
 9055 0675 00000000 		.4byte	0
 9056 0679 00000000 		.4byte	0
 9057              	.LLST45:
 9058 067d 16000000 		.4byte	.LVL131
 9059 0681 1D000000 		.4byte	.LVL132-1
 9060 0685 0100     		.2byte	0x1
 9061 0687 50       		.byte	0x50
 9062 0688 1E000000 		.4byte	.LVL132
 9063 068c 49000000 		.4byte	.LVL133-1
 9064 0690 0100     		.2byte	0x1
 9065 0692 50       		.byte	0x50
 9066 0693 00000000 		.4byte	0
 9067 0697 00000000 		.4byte	0
 9068              	.LLST46:
 9069 069b 00000000 		.4byte	.LVL138
 9070 069f 0A000000 		.4byte	.LVL139
 9071 06a3 0100     		.2byte	0x1
 9072 06a5 50       		.byte	0x50
 9073 06a6 00000000 		.4byte	0
 9074 06aa 00000000 		.4byte	0
 9075              	.LLST47:
 9076 06ae 44000000 		.4byte	.LVL146
 9077 06b2 4A000000 		.4byte	.LVL148
 9078 06b6 0100     		.2byte	0x1
 9079 06b8 54       		.byte	0x54
 9080 06b9 68000000 		.4byte	.LVL150
 9081 06bd BC000000 		.4byte	.LVL155
 9082 06c1 0100     		.2byte	0x1
 9083 06c3 54       		.byte	0x54
 9084 06c4 00000000 		.4byte	0
 9085 06c8 00000000 		.4byte	0
 9086              	.LLST48:
 9087 06cc 6A000000 		.4byte	.LVL151
 9088 06d0 7B000000 		.4byte	.LVL152-1
 9089 06d4 0100     		.2byte	0x1
 9090 06d6 53       		.byte	0x53
 9091 06d7 00000000 		.4byte	0
 9092 06db 00000000 		.4byte	0
 9093              	.LLST49:
 9094 06df 04000000 		.4byte	.LVL140
 9095 06e3 44000000 		.4byte	.LVL146
 9096 06e7 0200     		.2byte	0x2
 9097 06e9 30       		.byte	0x30
 9098 06ea 9F       		.byte	0x9f
 9099 06eb 44000000 		.4byte	.LVL146
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 268


 9100 06ef 48000000 		.4byte	.LVL147
 9101 06f3 0100     		.2byte	0x1
 9102 06f5 58       		.byte	0x58
 9103 06f6 4A000000 		.4byte	.LVL148
 9104 06fa 4E000000 		.4byte	.LVL149
 9105 06fe 0200     		.2byte	0x2
 9106 0700 30       		.byte	0x30
 9107 0701 9F       		.byte	0x9f
 9108 0702 4E000000 		.4byte	.LVL149
 9109 0706 C6000000 		.4byte	.LVL156
 9110 070a 0100     		.2byte	0x1
 9111 070c 58       		.byte	0x58
 9112 070d C6000000 		.4byte	.LVL156
 9113 0711 D8000000 		.4byte	.LVL157
 9114 0715 0200     		.2byte	0x2
 9115 0717 30       		.byte	0x30
 9116 0718 9F       		.byte	0x9f
 9117 0719 D8000000 		.4byte	.LVL157
 9118 071d E2000000 		.4byte	.LVL159
 9119 0721 0100     		.2byte	0x1
 9120 0723 58       		.byte	0x58
 9121 0724 E2000000 		.4byte	.LVL159
 9122 0728 E8000000 		.4byte	.LFE26
 9123 072c 0100     		.2byte	0x1
 9124 072e 50       		.byte	0x50
 9125 072f 00000000 		.4byte	0
 9126 0733 00000000 		.4byte	0
 9127              	.LLST50:
 9128 0737 16000000 		.4byte	.LVL141
 9129 073b C6000000 		.4byte	.LVL156
 9130 073f 0100     		.2byte	0x1
 9131 0741 57       		.byte	0x57
 9132 0742 D8000000 		.4byte	.LVL157
 9133 0746 DC000000 		.4byte	.LVL158
 9134 074a 0100     		.2byte	0x1
 9135 074c 57       		.byte	0x57
 9136 074d 00000000 		.4byte	0
 9137 0751 00000000 		.4byte	0
 9138              	.LLST51:
 9139 0755 1E000000 		.4byte	.LVL142
 9140 0759 2C000000 		.4byte	.LVL143
 9141 075d 0100     		.2byte	0x1
 9142 075f 52       		.byte	0x52
 9143 0760 2C000000 		.4byte	.LVL143
 9144 0764 32000000 		.4byte	.LVL144
 9145 0768 0500     		.2byte	0x5
 9146 076a 03       		.byte	0x3
 9147 076b D0000000 		.4byte	pxOverflowDelayedTaskList
 9148 076f 00000000 		.4byte	0
 9149 0773 00000000 		.4byte	0
 9150              	.LLST52:
 9151 0777 02000000 		.4byte	.LVL160
 9152 077b 26000000 		.4byte	.LVL162
 9153 077f 0200     		.2byte	0x2
 9154 0781 30       		.byte	0x30
 9155 0782 9F       		.byte	0x9f
 9156 0783 26000000 		.4byte	.LVL162
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 269


 9157 0787 72000000 		.4byte	.LVL167
 9158 078b 0100     		.2byte	0x1
 9159 078d 54       		.byte	0x54
 9160 078e 72000000 		.4byte	.LVL167
 9161 0792 74000000 		.4byte	.LVL168
 9162 0796 0200     		.2byte	0x2
 9163 0798 30       		.byte	0x30
 9164 0799 9F       		.byte	0x9f
 9165 079a 74000000 		.4byte	.LVL168
 9166 079e 88000000 		.4byte	.LVL170
 9167 07a2 0100     		.2byte	0x1
 9168 07a4 54       		.byte	0x54
 9169 07a5 C0000000 		.4byte	.LVL176
 9170 07a9 C4000000 		.4byte	.LVL177
 9171 07ad 0200     		.2byte	0x2
 9172 07af 30       		.byte	0x30
 9173 07b0 9F       		.byte	0x9f
 9174 07b1 00000000 		.4byte	0
 9175 07b5 00000000 		.4byte	0
 9176              	.LLST53:
 9177 07b9 02000000 		.4byte	.LVL160
 9178 07bd AC000000 		.4byte	.LVL174
 9179 07c1 0200     		.2byte	0x2
 9180 07c3 30       		.byte	0x30
 9181 07c4 9F       		.byte	0x9f
 9182 07c5 AC000000 		.4byte	.LVL174
 9183 07c9 C0000000 		.4byte	.LVL176
 9184 07cd 0200     		.2byte	0x2
 9185 07cf 31       		.byte	0x31
 9186 07d0 9F       		.byte	0x9f
 9187 07d1 C0000000 		.4byte	.LVL176
 9188 07d5 C6000000 		.4byte	.LVL178
 9189 07d9 0200     		.2byte	0x2
 9190 07db 30       		.byte	0x30
 9191 07dc 9F       		.byte	0x9f
 9192 07dd C6000000 		.4byte	.LVL178
 9193 07e1 CE000000 		.4byte	.LVL180
 9194 07e5 0100     		.2byte	0x1
 9195 07e7 54       		.byte	0x54
 9196 07e8 CE000000 		.4byte	.LVL180
 9197 07ec D8000000 		.4byte	.LFE20
 9198 07f0 0100     		.2byte	0x1
 9199 07f2 50       		.byte	0x50
 9200 07f3 00000000 		.4byte	0
 9201 07f7 00000000 		.4byte	0
 9202              	.LLST54:
 9203 07fb 88000000 		.4byte	.LVL170
 9204 07ff 98000000 		.4byte	.LVL172
 9205 0803 0100     		.2byte	0x1
 9206 0805 54       		.byte	0x54
 9207 0806 98000000 		.4byte	.LVL172
 9208 080a 9A000000 		.4byte	.LVL173
 9209 080e 0300     		.2byte	0x3
 9210 0810 74       		.byte	0x74
 9211 0811 7F       		.sleb128 -1
 9212 0812 9F       		.byte	0x9f
 9213 0813 9A000000 		.4byte	.LVL173
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 270


 9214 0817 BE000000 		.4byte	.LVL175
 9215 081b 0100     		.2byte	0x1
 9216 081d 54       		.byte	0x54
 9217 081e C4000000 		.4byte	.LVL177
 9218 0822 C6000000 		.4byte	.LVL178
 9219 0826 0100     		.2byte	0x1
 9220 0828 54       		.byte	0x54
 9221 0829 00000000 		.4byte	0
 9222 082d 00000000 		.4byte	0
 9223              	.LLST55:
 9224 0831 00000000 		.4byte	.LVL181
 9225 0835 09000000 		.4byte	.LVL183-1
 9226 0839 0100     		.2byte	0x1
 9227 083b 50       		.byte	0x50
 9228 083c 09000000 		.4byte	.LVL183-1
 9229 0840 62000000 		.4byte	.LVL190
 9230 0844 0100     		.2byte	0x1
 9231 0846 55       		.byte	0x55
 9232 0847 62000000 		.4byte	.LVL190
 9233 084b 6C000000 		.4byte	.LFE8
 9234 084f 0400     		.2byte	0x4
 9235 0851 F3       		.byte	0xf3
 9236 0852 01       		.uleb128 0x1
 9237 0853 50       		.byte	0x50
 9238 0854 9F       		.byte	0x9f
 9239 0855 00000000 		.4byte	0
 9240 0859 00000000 		.4byte	0
 9241              	.LLST56:
 9242 085d 00000000 		.4byte	.LVL181
 9243 0861 09000000 		.4byte	.LVL183-1
 9244 0865 0100     		.2byte	0x1
 9245 0867 51       		.byte	0x51
 9246 0868 09000000 		.4byte	.LVL183-1
 9247 086c 62000000 		.4byte	.LVL190
 9248 0870 0100     		.2byte	0x1
 9249 0872 54       		.byte	0x54
 9250 0873 62000000 		.4byte	.LVL190
 9251 0877 6C000000 		.4byte	.LFE8
 9252 087b 0400     		.2byte	0x4
 9253 087d F3       		.byte	0xf3
 9254 087e 01       		.uleb128 0x1
 9255 087f 51       		.byte	0x51
 9256 0880 9F       		.byte	0x9f
 9257 0881 00000000 		.4byte	0
 9258 0885 00000000 		.4byte	0
 9259              	.LLST57:
 9260 0889 14000000 		.4byte	.LVL185
 9261 088d 49000000 		.4byte	.LVL188-1
 9262 0891 0100     		.2byte	0x1
 9263 0893 53       		.byte	0x53
 9264 0894 00000000 		.4byte	0
 9265 0898 00000000 		.4byte	0
 9266              	.LLST58:
 9267 089c 06000000 		.4byte	.LVL182
 9268 08a0 3E000000 		.4byte	.LVL186
 9269 08a4 0200     		.2byte	0x2
 9270 08a6 30       		.byte	0x30
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 271


 9271 08a7 9F       		.byte	0x9f
 9272 08a8 3E000000 		.4byte	.LVL186
 9273 08ac 49000000 		.4byte	.LVL188-1
 9274 08b0 0100     		.2byte	0x1
 9275 08b2 52       		.byte	0x52
 9276 08b3 00000000 		.4byte	0
 9277 08b7 00000000 		.4byte	0
 9278              	.LLST59:
 9279 08bb 10000000 		.4byte	.LVL184
 9280 08bf 46000000 		.4byte	.LVL187
 9281 08c3 0100     		.2byte	0x1
 9282 08c5 50       		.byte	0x50
 9283 08c6 00000000 		.4byte	0
 9284 08ca 00000000 		.4byte	0
 9285              	.LLST60:
 9286 08ce 00000000 		.4byte	.LVL191
 9287 08d2 09000000 		.4byte	.LVL193-1
 9288 08d6 0100     		.2byte	0x1
 9289 08d8 50       		.byte	0x50
 9290 08d9 09000000 		.4byte	.LVL193-1
 9291 08dd 18000000 		.4byte	.LVL196
 9292 08e1 0100     		.2byte	0x1
 9293 08e3 54       		.byte	0x54
 9294 08e4 18000000 		.4byte	.LVL196
 9295 08e8 1A000000 		.4byte	.LVL197
 9296 08ec 0100     		.2byte	0x1
 9297 08ee 50       		.byte	0x50
 9298 08ef 1A000000 		.4byte	.LVL197
 9299 08f3 34000000 		.4byte	.LFE9
 9300 08f7 0400     		.2byte	0x4
 9301 08f9 F3       		.byte	0xf3
 9302 08fa 01       		.uleb128 0x1
 9303 08fb 50       		.byte	0x50
 9304 08fc 9F       		.byte	0x9f
 9305 08fd 00000000 		.4byte	0
 9306 0901 00000000 		.4byte	0
 9307              	.LLST61:
 9308 0905 02000000 		.4byte	.LVL192
 9309 0909 16000000 		.4byte	.LVL195
 9310 090d 0200     		.2byte	0x2
 9311 090f 30       		.byte	0x30
 9312 0910 9F       		.byte	0x9f
 9313 0911 16000000 		.4byte	.LVL195
 9314 0915 18000000 		.4byte	.LVL196
 9315 0919 0100     		.2byte	0x1
 9316 091b 50       		.byte	0x50
 9317 091c 18000000 		.4byte	.LVL196
 9318 0920 1A000000 		.4byte	.LVL197
 9319 0924 0200     		.2byte	0x2
 9320 0926 30       		.byte	0x30
 9321 0927 9F       		.byte	0x9f
 9322 0928 1A000000 		.4byte	.LVL197
 9323 092c 34000000 		.4byte	.LFE9
 9324 0930 0100     		.2byte	0x1
 9325 0932 50       		.byte	0x50
 9326 0933 00000000 		.4byte	0
 9327 0937 00000000 		.4byte	0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 272


 9328              	.LLST62:
 9329 093b 00000000 		.4byte	.LVL198
 9330 093f 07000000 		.4byte	.LVL199-1
 9331 0943 0100     		.2byte	0x1
 9332 0945 50       		.byte	0x50
 9333 0946 07000000 		.4byte	.LVL199-1
 9334 094a 10000000 		.4byte	.LVL200
 9335 094e 0100     		.2byte	0x1
 9336 0950 54       		.byte	0x54
 9337 0951 10000000 		.4byte	.LVL200
 9338 0955 20000000 		.4byte	.LFE25
 9339 0959 0400     		.2byte	0x4
 9340 095b F3       		.byte	0xf3
 9341 095c 01       		.uleb128 0x1
 9342 095d 50       		.byte	0x50
 9343 095e 9F       		.byte	0x9f
 9344 095f 00000000 		.4byte	0
 9345 0963 00000000 		.4byte	0
 9346              	.LLST63:
 9347 0967 00000000 		.4byte	.LVL205
 9348 096b 07000000 		.4byte	.LVL206-1
 9349 096f 0100     		.2byte	0x1
 9350 0971 50       		.byte	0x50
 9351 0972 07000000 		.4byte	.LVL206-1
 9352 0976 10000000 		.4byte	.LVL207
 9353 097a 0100     		.2byte	0x1
 9354 097c 54       		.byte	0x54
 9355 097d 00000000 		.4byte	0
 9356 0981 00000000 		.4byte	0
 9357              	.LLST64:
 9358 0985 10000000 		.4byte	.LVL207
 9359 0989 A2000000 		.4byte	.LVL220
 9360 098d 0100     		.2byte	0x1
 9361 098f 54       		.byte	0x54
 9362 0990 00000000 		.4byte	0
 9363 0994 00000000 		.4byte	0
 9364              	.LLST65:
 9365 0998 2C000000 		.4byte	.LVL210
 9366 099c 30000000 		.4byte	.LVL211
 9367 09a0 0200     		.2byte	0x2
 9368 09a2 30       		.byte	0x30
 9369 09a3 9F       		.byte	0x9f
 9370 09a4 30000000 		.4byte	.LVL211
 9371 09a8 4D000000 		.4byte	.LVL213-1
 9372 09ac 0100     		.2byte	0x1
 9373 09ae 53       		.byte	0x53
 9374 09af 00000000 		.4byte	0
 9375 09b3 00000000 		.4byte	0
 9376              	.LLST66:
 9377 09b7 00000000 		.4byte	.LVL221
 9378 09bb 0F000000 		.4byte	.LVL223-1
 9379 09bf 0100     		.2byte	0x1
 9380 09c1 50       		.byte	0x50
 9381 09c2 0F000000 		.4byte	.LVL223-1
 9382 09c6 20000000 		.4byte	.LFE28
 9383 09ca 0400     		.2byte	0x4
 9384 09cc F3       		.byte	0xf3
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 273


 9385 09cd 01       		.uleb128 0x1
 9386 09ce 50       		.byte	0x50
 9387 09cf 9F       		.byte	0x9f
 9388 09d0 00000000 		.4byte	0
 9389 09d4 00000000 		.4byte	0
 9390              	.LLST67:
 9391 09d8 00000000 		.4byte	.LVL221
 9392 09dc 0A000000 		.4byte	.LVL222
 9393 09e0 0100     		.2byte	0x1
 9394 09e2 51       		.byte	0x51
 9395 09e3 0A000000 		.4byte	.LVL222
 9396 09e7 1A000000 		.4byte	.LVL225
 9397 09eb 0100     		.2byte	0x1
 9398 09ed 54       		.byte	0x54
 9399 09ee 1A000000 		.4byte	.LVL225
 9400 09f2 20000000 		.4byte	.LFE28
 9401 09f6 0400     		.2byte	0x4
 9402 09f8 F3       		.byte	0xf3
 9403 09f9 01       		.uleb128 0x1
 9404 09fa 51       		.byte	0x51
 9405 09fb 9F       		.byte	0x9f
 9406 09fc 00000000 		.4byte	0
 9407 0a00 00000000 		.4byte	0
 9408              	.LLST68:
 9409 0a04 00000000 		.4byte	.LVL226
 9410 0a08 19000000 		.4byte	.LVL229-1
 9411 0a0c 0100     		.2byte	0x1
 9412 0a0e 50       		.byte	0x50
 9413 0a0f 19000000 		.4byte	.LVL229-1
 9414 0a13 28000000 		.4byte	.LFE29
 9415 0a17 0400     		.2byte	0x4
 9416 0a19 F3       		.byte	0xf3
 9417 0a1a 01       		.uleb128 0x1
 9418 0a1b 50       		.byte	0x50
 9419 0a1c 9F       		.byte	0x9f
 9420 0a1d 00000000 		.4byte	0
 9421 0a21 00000000 		.4byte	0
 9422              	.LLST69:
 9423 0a25 00000000 		.4byte	.LVL226
 9424 0a29 0E000000 		.4byte	.LVL228
 9425 0a2d 0100     		.2byte	0x1
 9426 0a2f 51       		.byte	0x51
 9427 0a30 0E000000 		.4byte	.LVL228
 9428 0a34 28000000 		.4byte	.LFE29
 9429 0a38 0400     		.2byte	0x4
 9430 0a3a F3       		.byte	0xf3
 9431 0a3b 01       		.uleb128 0x1
 9432 0a3c 51       		.byte	0x51
 9433 0a3d 9F       		.byte	0x9f
 9434 0a3e 00000000 		.4byte	0
 9435 0a42 00000000 		.4byte	0
 9436              	.LLST70:
 9437 0a46 00000000 		.4byte	.LVL226
 9438 0a4a 0A000000 		.4byte	.LVL227
 9439 0a4e 0100     		.2byte	0x1
 9440 0a50 52       		.byte	0x52
 9441 0a51 0A000000 		.4byte	.LVL227
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 274


 9442 0a55 24000000 		.4byte	.LVL231
 9443 0a59 0100     		.2byte	0x1
 9444 0a5b 54       		.byte	0x54
 9445 0a5c 24000000 		.4byte	.LVL231
 9446 0a60 28000000 		.4byte	.LFE29
 9447 0a64 0400     		.2byte	0x4
 9448 0a66 F3       		.byte	0xf3
 9449 0a67 01       		.uleb128 0x1
 9450 0a68 52       		.byte	0x52
 9451 0a69 9F       		.byte	0x9f
 9452 0a6a 00000000 		.4byte	0
 9453 0a6e 00000000 		.4byte	0
 9454              	.LLST71:
 9455 0a72 00000000 		.4byte	.LVL232
 9456 0a76 11000000 		.4byte	.LVL234-1
 9457 0a7a 0100     		.2byte	0x1
 9458 0a7c 50       		.byte	0x50
 9459 0a7d 11000000 		.4byte	.LVL234-1
 9460 0a81 28000000 		.4byte	.LFE30
 9461 0a85 0400     		.2byte	0x4
 9462 0a87 F3       		.byte	0xf3
 9463 0a88 01       		.uleb128 0x1
 9464 0a89 50       		.byte	0x50
 9465 0a8a 9F       		.byte	0x9f
 9466 0a8b 00000000 		.4byte	0
 9467 0a8f 00000000 		.4byte	0
 9468              	.LLST72:
 9469 0a93 00000000 		.4byte	.LVL232
 9470 0a97 0C000000 		.4byte	.LVL233
 9471 0a9b 0100     		.2byte	0x1
 9472 0a9d 51       		.byte	0x51
 9473 0a9e 0C000000 		.4byte	.LVL233
 9474 0aa2 22000000 		.4byte	.LVL237
 9475 0aa6 0100     		.2byte	0x1
 9476 0aa8 55       		.byte	0x55
 9477 0aa9 00000000 		.4byte	0
 9478 0aad 00000000 		.4byte	0
 9479              	.LLST73:
 9480 0ab1 00000000 		.4byte	.LVL232
 9481 0ab5 11000000 		.4byte	.LVL234-1
 9482 0ab9 0100     		.2byte	0x1
 9483 0abb 52       		.byte	0x52
 9484 0abc 11000000 		.4byte	.LVL234-1
 9485 0ac0 22000000 		.4byte	.LVL237
 9486 0ac4 0100     		.2byte	0x1
 9487 0ac6 54       		.byte	0x54
 9488 0ac7 22000000 		.4byte	.LVL237
 9489 0acb 28000000 		.4byte	.LFE30
 9490 0acf 0400     		.2byte	0x4
 9491 0ad1 F3       		.byte	0xf3
 9492 0ad2 01       		.uleb128 0x1
 9493 0ad3 52       		.byte	0x52
 9494 0ad4 9F       		.byte	0x9f
 9495 0ad5 00000000 		.4byte	0
 9496 0ad9 00000000 		.4byte	0
 9497              	.LLST74:
 9498 0add 00000000 		.4byte	.LVL238
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 275


 9499 0ae1 0C000000 		.4byte	.LVL240
 9500 0ae5 0100     		.2byte	0x1
 9501 0ae7 50       		.byte	0x50
 9502 0ae8 0C000000 		.4byte	.LVL240
 9503 0aec 74000000 		.4byte	.LFE31
 9504 0af0 0400     		.2byte	0x4
 9505 0af2 F3       		.byte	0xf3
 9506 0af3 01       		.uleb128 0x1
 9507 0af4 50       		.byte	0x50
 9508 0af5 9F       		.byte	0x9f
 9509 0af6 00000000 		.4byte	0
 9510 0afa 00000000 		.4byte	0
 9511              	.LLST75:
 9512 0afe 06000000 		.4byte	.LVL239
 9513 0b02 68000000 		.4byte	.LVL248
 9514 0b06 0100     		.2byte	0x1
 9515 0b08 54       		.byte	0x54
 9516 0b09 00000000 		.4byte	0
 9517 0b0d 00000000 		.4byte	0
 9518              	.LLST76:
 9519 0b11 5A000000 		.4byte	.LVL245
 9520 0b15 64000000 		.4byte	.LVL246
 9521 0b19 0200     		.2byte	0x2
 9522 0b1b 31       		.byte	0x31
 9523 0b1c 9F       		.byte	0x9f
 9524 0b1d 66000000 		.4byte	.LVL247
 9525 0b21 74000000 		.4byte	.LFE31
 9526 0b25 0100     		.2byte	0x1
 9527 0b27 50       		.byte	0x50
 9528 0b28 00000000 		.4byte	0
 9529 0b2c 00000000 		.4byte	0
 9530              	.LLST77:
 9531 0b30 00000000 		.4byte	.LVL249
 9532 0b34 0D000000 		.4byte	.LVL252-1
 9533 0b38 0100     		.2byte	0x1
 9534 0b3a 50       		.byte	0x50
 9535 0b3b 0D000000 		.4byte	.LVL252-1
 9536 0b3f 54000000 		.4byte	.LFE32
 9537 0b43 0400     		.2byte	0x4
 9538 0b45 F3       		.byte	0xf3
 9539 0b46 01       		.uleb128 0x1
 9540 0b47 50       		.byte	0x50
 9541 0b48 9F       		.byte	0x9f
 9542 0b49 00000000 		.4byte	0
 9543 0b4d 00000000 		.4byte	0
 9544              	.LLST78:
 9545 0b51 00000000 		.4byte	.LVL249
 9546 0b55 06000000 		.4byte	.LVL250
 9547 0b59 0100     		.2byte	0x1
 9548 0b5b 51       		.byte	0x51
 9549 0b5c 06000000 		.4byte	.LVL250
 9550 0b60 54000000 		.4byte	.LFE32
 9551 0b64 0400     		.2byte	0x4
 9552 0b66 F3       		.byte	0xf3
 9553 0b67 01       		.uleb128 0x1
 9554 0b68 51       		.byte	0x51
 9555 0b69 9F       		.byte	0x9f
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 276


 9556 0b6a 00000000 		.4byte	0
 9557 0b6e 00000000 		.4byte	0
 9558              	.LLST79:
 9559 0b72 0A000000 		.4byte	.LVL251
 9560 0b76 50000000 		.4byte	.LVL255
 9561 0b7a 0100     		.2byte	0x1
 9562 0b7c 54       		.byte	0x54
 9563 0b7d 00000000 		.4byte	0
 9564 0b81 00000000 		.4byte	0
 9565              	.LLST80:
 9566 0b85 00000000 		.4byte	.LVL256
 9567 0b89 07000000 		.4byte	.LVL257-1
 9568 0b8d 0100     		.2byte	0x1
 9569 0b8f 50       		.byte	0x50
 9570 0b90 07000000 		.4byte	.LVL257-1
 9571 0b94 1C000000 		.4byte	.LVL259
 9572 0b98 0100     		.2byte	0x1
 9573 0b9a 54       		.byte	0x54
 9574 0b9b 1C000000 		.4byte	.LVL259
 9575 0b9f 20000000 		.4byte	.LFE33
 9576 0ba3 0400     		.2byte	0x4
 9577 0ba5 F3       		.byte	0xf3
 9578 0ba6 01       		.uleb128 0x1
 9579 0ba7 50       		.byte	0x50
 9580 0ba8 9F       		.byte	0x9f
 9581 0ba9 00000000 		.4byte	0
 9582 0bad 00000000 		.4byte	0
 9583              	.LLST81:
 9584 0bb1 00000000 		.4byte	.LVL261
 9585 0bb5 09000000 		.4byte	.LVL262-1
 9586 0bb9 0100     		.2byte	0x1
 9587 0bbb 50       		.byte	0x50
 9588 0bbc 09000000 		.4byte	.LVL262-1
 9589 0bc0 32000000 		.4byte	.LVL266
 9590 0bc4 0100     		.2byte	0x1
 9591 0bc6 54       		.byte	0x54
 9592 0bc7 32000000 		.4byte	.LVL266
 9593 0bcb 34000000 		.4byte	.LVL267
 9594 0bcf 0400     		.2byte	0x4
 9595 0bd1 F3       		.byte	0xf3
 9596 0bd2 01       		.uleb128 0x1
 9597 0bd3 50       		.byte	0x50
 9598 0bd4 9F       		.byte	0x9f
 9599 0bd5 34000000 		.4byte	.LVL267
 9600 0bd9 44000000 		.4byte	.LVL270
 9601 0bdd 0100     		.2byte	0x1
 9602 0bdf 54       		.byte	0x54
 9603 0be0 44000000 		.4byte	.LVL270
 9604 0be4 46000000 		.4byte	.LVL271
 9605 0be8 0400     		.2byte	0x4
 9606 0bea F3       		.byte	0xf3
 9607 0beb 01       		.uleb128 0x1
 9608 0bec 50       		.byte	0x50
 9609 0bed 9F       		.byte	0x9f
 9610 0bee 46000000 		.4byte	.LVL271
 9611 0bf2 4C000000 		.4byte	.LVL273
 9612 0bf6 0100     		.2byte	0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 277


 9613 0bf8 54       		.byte	0x54
 9614 0bf9 4C000000 		.4byte	.LVL273
 9615 0bfd 4E000000 		.4byte	.LVL274
 9616 0c01 0400     		.2byte	0x4
 9617 0c03 F3       		.byte	0xf3
 9618 0c04 01       		.uleb128 0x1
 9619 0c05 50       		.byte	0x50
 9620 0c06 9F       		.byte	0x9f
 9621 0c07 4E000000 		.4byte	.LVL274
 9622 0c0b 50000000 		.4byte	.LVL275
 9623 0c0f 0100     		.2byte	0x1
 9624 0c11 54       		.byte	0x54
 9625 0c12 50000000 		.4byte	.LVL275
 9626 0c16 5C000000 		.4byte	.LFE35
 9627 0c1a 0400     		.2byte	0x4
 9628 0c1c F3       		.byte	0xf3
 9629 0c1d 01       		.uleb128 0x1
 9630 0c1e 50       		.byte	0x50
 9631 0c1f 9F       		.byte	0x9f
 9632 0c20 00000000 		.4byte	0
 9633 0c24 00000000 		.4byte	0
 9634              	.LLST82:
 9635 0c28 00000000 		.4byte	.LVL261
 9636 0c2c 09000000 		.4byte	.LVL262-1
 9637 0c30 0100     		.2byte	0x1
 9638 0c32 51       		.byte	0x51
 9639 0c33 09000000 		.4byte	.LVL262-1
 9640 0c37 58000000 		.4byte	.LVL277
 9641 0c3b 0100     		.2byte	0x1
 9642 0c3d 55       		.byte	0x55
 9643 0c3e 58000000 		.4byte	.LVL277
 9644 0c42 5C000000 		.4byte	.LFE35
 9645 0c46 0400     		.2byte	0x4
 9646 0c48 F3       		.byte	0xf3
 9647 0c49 01       		.uleb128 0x1
 9648 0c4a 51       		.byte	0x51
 9649 0c4b 9F       		.byte	0x9f
 9650 0c4c 00000000 		.4byte	0
 9651 0c50 00000000 		.4byte	0
 9652              	.LLST83:
 9653 0c54 2C000000 		.4byte	.LVL265
 9654 0c58 34000000 		.4byte	.LVL267
 9655 0c5c 0200     		.2byte	0x2
 9656 0c5e 31       		.byte	0x31
 9657 0c5f 9F       		.byte	0x9f
 9658 0c60 42000000 		.4byte	.LVL269
 9659 0c64 46000000 		.4byte	.LVL271
 9660 0c68 0200     		.2byte	0x2
 9661 0c6a 30       		.byte	0x30
 9662 0c6b 9F       		.byte	0x9f
 9663 0c6c 4A000000 		.4byte	.LVL272
 9664 0c70 4E000000 		.4byte	.LVL274
 9665 0c74 0200     		.2byte	0x2
 9666 0c76 31       		.byte	0x31
 9667 0c77 9F       		.byte	0x9f
 9668 0c78 50000000 		.4byte	.LVL275
 9669 0c7c 58000000 		.4byte	.LVL277
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 278


 9670 0c80 0100     		.2byte	0x1
 9671 0c82 54       		.byte	0x54
 9672 0c83 58000000 		.4byte	.LVL277
 9673 0c87 5C000000 		.4byte	.LFE35
 9674 0c8b 0100     		.2byte	0x1
 9675 0c8d 50       		.byte	0x50
 9676 0c8e 00000000 		.4byte	0
 9677 0c92 00000000 		.4byte	0
 9678              	.LLST84:
 9679 0c96 10000000 		.4byte	.LVL263
 9680 0c9a 41000000 		.4byte	.LVL269-1
 9681 0c9e 0100     		.2byte	0x1
 9682 0ca0 51       		.byte	0x51
 9683 0ca1 46000000 		.4byte	.LVL271
 9684 0ca5 50000000 		.4byte	.LVL275
 9685 0ca9 0100     		.2byte	0x1
 9686 0cab 51       		.byte	0x51
 9687 0cac 00000000 		.4byte	0
 9688 0cb0 00000000 		.4byte	0
 9689              	.LLST85:
 9690 0cb4 14000000 		.4byte	.LVL264
 9691 0cb8 3E000000 		.4byte	.LVL268
 9692 0cbc 0100     		.2byte	0x1
 9693 0cbe 50       		.byte	0x50
 9694 0cbf 3E000000 		.4byte	.LVL268
 9695 0cc3 41000000 		.4byte	.LVL269-1
 9696 0cc7 0600     		.2byte	0x6
 9697 0cc9 71       		.byte	0x71
 9698 0cca 00       		.sleb128 0
 9699 0ccb 72       		.byte	0x72
 9700 0ccc 00       		.sleb128 0
 9701 0ccd 1C       		.byte	0x1c
 9702 0cce 9F       		.byte	0x9f
 9703 0ccf 46000000 		.4byte	.LVL271
 9704 0cd3 50000000 		.4byte	.LVL275
 9705 0cd7 0100     		.2byte	0x1
 9706 0cd9 50       		.byte	0x50
 9707 0cda 00000000 		.4byte	0
 9708 0cde 00000000 		.4byte	0
 9709              	.LLST86:
 9710 0ce2 00000000 		.4byte	.LVL278
 9711 0ce6 0C000000 		.4byte	.LVL279
 9712 0cea 0100     		.2byte	0x1
 9713 0cec 50       		.byte	0x50
 9714 0ced 00000000 		.4byte	0
 9715 0cf1 00000000 		.4byte	0
 9716              	.LLST87:
 9717 0cf5 00000000 		.4byte	.LVL278
 9718 0cf9 0E000000 		.4byte	.LVL280
 9719 0cfd 0100     		.2byte	0x1
 9720 0cff 51       		.byte	0x51
 9721 0d00 0E000000 		.4byte	.LVL280
 9722 0d04 12000000 		.4byte	.LVL281
 9723 0d08 0300     		.2byte	0x3
 9724 0d0a 71       		.byte	0x71
 9725 0d0b 70       		.sleb128 -16
 9726 0d0c 9F       		.byte	0x9f
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 279


 9727 0d0d 12000000 		.4byte	.LVL281
 9728 0d11 1C000000 		.4byte	.LFE38
 9729 0d15 0400     		.2byte	0x4
 9730 0d17 F3       		.byte	0xf3
 9731 0d18 01       		.uleb128 0x1
 9732 0d19 51       		.byte	0x51
 9733 0d1a 9F       		.byte	0x9f
 9734 0d1b 00000000 		.4byte	0
 9735 0d1f 00000000 		.4byte	0
 9736              	.LLST88:
 9737 0d23 0C000000 		.4byte	.LVL279
 9738 0d27 14000000 		.4byte	.LVL282
 9739 0d2b 0100     		.2byte	0x1
 9740 0d2d 50       		.byte	0x50
 9741 0d2e 00000000 		.4byte	0
 9742 0d32 00000000 		.4byte	0
 9743              	.LLST89:
 9744 0d36 00000000 		.4byte	.LVL283
 9745 0d3a 0C000000 		.4byte	.LVL284
 9746 0d3e 0100     		.2byte	0x1
 9747 0d40 50       		.byte	0x50
 9748 0d41 16000000 		.4byte	.LVL288
 9749 0d45 18000000 		.4byte	.LVL289
 9750 0d49 0100     		.2byte	0x1
 9751 0d4b 50       		.byte	0x50
 9752 0d4c 18000000 		.4byte	.LVL289
 9753 0d50 20000000 		.4byte	.LFE39
 9754 0d54 0400     		.2byte	0x4
 9755 0d56 F3       		.byte	0xf3
 9756 0d57 01       		.uleb128 0x1
 9757 0d58 50       		.byte	0x50
 9758 0d59 9F       		.byte	0x9f
 9759 0d5a 00000000 		.4byte	0
 9760 0d5e 00000000 		.4byte	0
 9761              	.LLST90:
 9762 0d62 00000000 		.4byte	.LVL283
 9763 0d66 0E000000 		.4byte	.LVL285
 9764 0d6a 0100     		.2byte	0x1
 9765 0d6c 51       		.byte	0x51
 9766 0d6d 0E000000 		.4byte	.LVL285
 9767 0d71 16000000 		.4byte	.LVL288
 9768 0d75 0300     		.2byte	0x3
 9769 0d77 71       		.byte	0x71
 9770 0d78 70       		.sleb128 -16
 9771 0d79 9F       		.byte	0x9f
 9772 0d7a 16000000 		.4byte	.LVL288
 9773 0d7e 20000000 		.4byte	.LFE39
 9774 0d82 0100     		.2byte	0x1
 9775 0d84 51       		.byte	0x51
 9776 0d85 00000000 		.4byte	0
 9777 0d89 00000000 		.4byte	0
 9778              	.LLST91:
 9779 0d8d 00000000 		.4byte	.LVL283
 9780 0d91 14000000 		.4byte	.LVL287
 9781 0d95 0200     		.2byte	0x2
 9782 0d97 30       		.byte	0x30
 9783 0d98 9F       		.byte	0x9f
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 280


 9784 0d99 14000000 		.4byte	.LVL287
 9785 0d9d 16000000 		.4byte	.LVL288
 9786 0da1 0100     		.2byte	0x1
 9787 0da3 50       		.byte	0x50
 9788 0da4 16000000 		.4byte	.LVL288
 9789 0da8 18000000 		.4byte	.LVL289
 9790 0dac 0200     		.2byte	0x2
 9791 0dae 30       		.byte	0x30
 9792 0daf 9F       		.byte	0x9f
 9793 0db0 18000000 		.4byte	.LVL289
 9794 0db4 20000000 		.4byte	.LFE39
 9795 0db8 0100     		.2byte	0x1
 9796 0dba 50       		.byte	0x50
 9797 0dbb 00000000 		.4byte	0
 9798 0dbf 00000000 		.4byte	0
 9799              	.LLST92:
 9800 0dc3 0C000000 		.4byte	.LVL284
 9801 0dc7 12000000 		.4byte	.LVL286
 9802 0dcb 0100     		.2byte	0x1
 9803 0dcd 50       		.byte	0x50
 9804 0dce 00000000 		.4byte	0
 9805 0dd2 00000000 		.4byte	0
 9806              	.LLST93:
 9807 0dd6 00000000 		.4byte	.LVL293
 9808 0dda 0B000000 		.4byte	.LVL294-1
 9809 0dde 0100     		.2byte	0x1
 9810 0de0 50       		.byte	0x50
 9811 0de1 0B000000 		.4byte	.LVL294-1
 9812 0de5 88000000 		.4byte	.LVL299
 9813 0de9 0100     		.2byte	0x1
 9814 0deb 54       		.byte	0x54
 9815 0dec 88000000 		.4byte	.LVL299
 9816 0df0 A0000000 		.4byte	.LFE47
 9817 0df4 0400     		.2byte	0x4
 9818 0df6 F3       		.byte	0xf3
 9819 0df7 01       		.uleb128 0x1
 9820 0df8 50       		.byte	0x50
 9821 0df9 9F       		.byte	0x9f
 9822 0dfa 00000000 		.4byte	0
 9823 0dfe 00000000 		.4byte	0
 9824              	.LLST94:
 9825 0e02 00000000 		.4byte	.LVL293
 9826 0e06 0B000000 		.4byte	.LVL294-1
 9827 0e0a 0100     		.2byte	0x1
 9828 0e0c 51       		.byte	0x51
 9829 0e0d 0B000000 		.4byte	.LVL294-1
 9830 0e11 96000000 		.4byte	.LVL301
 9831 0e15 0100     		.2byte	0x1
 9832 0e17 56       		.byte	0x56
 9833 0e18 96000000 		.4byte	.LVL301
 9834 0e1c A0000000 		.4byte	.LFE47
 9835 0e20 0400     		.2byte	0x4
 9836 0e22 F3       		.byte	0xf3
 9837 0e23 01       		.uleb128 0x1
 9838 0e24 51       		.byte	0x51
 9839 0e25 9F       		.byte	0x9f
 9840 0e26 00000000 		.4byte	0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 281


 9841 0e2a 00000000 		.4byte	0
 9842              	.LLST95:
 9843 0e2e 00000000 		.4byte	.LVL293
 9844 0e32 0B000000 		.4byte	.LVL294-1
 9845 0e36 0100     		.2byte	0x1
 9846 0e38 52       		.byte	0x52
 9847 0e39 0B000000 		.4byte	.LVL294-1
 9848 0e3d 5A000000 		.4byte	.LVL298
 9849 0e41 0100     		.2byte	0x1
 9850 0e43 55       		.byte	0x55
 9851 0e44 5A000000 		.4byte	.LVL298
 9852 0e48 A0000000 		.4byte	.LFE47
 9853 0e4c 0400     		.2byte	0x4
 9854 0e4e F3       		.byte	0xf3
 9855 0e4f 01       		.uleb128 0x1
 9856 0e50 52       		.byte	0x52
 9857 0e51 9F       		.byte	0x9f
 9858 0e52 00000000 		.4byte	0
 9859 0e56 00000000 		.4byte	0
 9860              	.LLST96:
 9861 0e5a 5A000000 		.4byte	.LVL298
 9862 0e5e 96000000 		.4byte	.LVL301
 9863 0e62 0100     		.2byte	0x1
 9864 0e64 55       		.byte	0x55
 9865 0e65 96000000 		.4byte	.LVL301
 9866 0e69 A0000000 		.4byte	.LFE47
 9867 0e6d 0100     		.2byte	0x1
 9868 0e6f 50       		.byte	0x50
 9869 0e70 00000000 		.4byte	0
 9870 0e74 00000000 		.4byte	0
 9871              	.LLST97:
 9872 0e78 00000000 		.4byte	.LVL302
 9873 0e7c 0D000000 		.4byte	.LVL303-1
 9874 0e80 0100     		.2byte	0x1
 9875 0e82 50       		.byte	0x50
 9876 0e83 0D000000 		.4byte	.LVL303-1
 9877 0e87 AE000000 		.4byte	.LVL311
 9878 0e8b 0100     		.2byte	0x1
 9879 0e8d 54       		.byte	0x54
 9880 0e8e AE000000 		.4byte	.LVL311
 9881 0e92 C4000000 		.4byte	.LFE48
 9882 0e96 0400     		.2byte	0x4
 9883 0e98 F3       		.byte	0xf3
 9884 0e99 01       		.uleb128 0x1
 9885 0e9a 50       		.byte	0x50
 9886 0e9b 9F       		.byte	0x9f
 9887 0e9c 00000000 		.4byte	0
 9888 0ea0 00000000 		.4byte	0
 9889              	.LLST98:
 9890 0ea4 00000000 		.4byte	.LVL302
 9891 0ea8 0D000000 		.4byte	.LVL303-1
 9892 0eac 0100     		.2byte	0x1
 9893 0eae 51       		.byte	0x51
 9894 0eaf 0D000000 		.4byte	.LVL303-1
 9895 0eb3 BC000000 		.4byte	.LVL313
 9896 0eb7 0100     		.2byte	0x1
 9897 0eb9 57       		.byte	0x57
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 282


 9898 0eba BC000000 		.4byte	.LVL313
 9899 0ebe C4000000 		.4byte	.LFE48
 9900 0ec2 0400     		.2byte	0x4
 9901 0ec4 F3       		.byte	0xf3
 9902 0ec5 01       		.uleb128 0x1
 9903 0ec6 51       		.byte	0x51
 9904 0ec7 9F       		.byte	0x9f
 9905 0ec8 00000000 		.4byte	0
 9906 0ecc 00000000 		.4byte	0
 9907              	.LLST99:
 9908 0ed0 00000000 		.4byte	.LVL302
 9909 0ed4 0D000000 		.4byte	.LVL303-1
 9910 0ed8 0100     		.2byte	0x1
 9911 0eda 52       		.byte	0x52
 9912 0edb 0D000000 		.4byte	.LVL303-1
 9913 0edf 9C000000 		.4byte	.LVL307
 9914 0ee3 0100     		.2byte	0x1
 9915 0ee5 55       		.byte	0x55
 9916 0ee6 9C000000 		.4byte	.LVL307
 9917 0eea A4000000 		.4byte	.LVL309
 9918 0eee 0400     		.2byte	0x4
 9919 0ef0 F3       		.byte	0xf3
 9920 0ef1 01       		.uleb128 0x1
 9921 0ef2 52       		.byte	0x52
 9922 0ef3 9F       		.byte	0x9f
 9923 0ef4 A4000000 		.4byte	.LVL309
 9924 0ef8 A6000000 		.4byte	.LVL310
 9925 0efc 0100     		.2byte	0x1
 9926 0efe 55       		.byte	0x55
 9927 0eff A6000000 		.4byte	.LVL310
 9928 0f03 C4000000 		.4byte	.LFE48
 9929 0f07 0400     		.2byte	0x4
 9930 0f09 F3       		.byte	0xf3
 9931 0f0a 01       		.uleb128 0x1
 9932 0f0b 52       		.byte	0x52
 9933 0f0c 9F       		.byte	0x9f
 9934 0f0d 00000000 		.4byte	0
 9935 0f11 00000000 		.4byte	0
 9936              	.LLST100:
 9937 0f15 00000000 		.4byte	.LVL302
 9938 0f19 0D000000 		.4byte	.LVL303-1
 9939 0f1d 0100     		.2byte	0x1
 9940 0f1f 53       		.byte	0x53
 9941 0f20 0D000000 		.4byte	.LVL303-1
 9942 0f24 BC000000 		.4byte	.LVL313
 9943 0f28 0100     		.2byte	0x1
 9944 0f2a 56       		.byte	0x56
 9945 0f2b BC000000 		.4byte	.LVL313
 9946 0f2f C4000000 		.4byte	.LFE48
 9947 0f33 0400     		.2byte	0x4
 9948 0f35 F3       		.byte	0xf3
 9949 0f36 01       		.uleb128 0x1
 9950 0f37 53       		.byte	0x53
 9951 0f38 9F       		.byte	0x9f
 9952 0f39 00000000 		.4byte	0
 9953 0f3d 00000000 		.4byte	0
 9954              	.LLST101:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 283


 9955 0f41 00000000 		.4byte	.LVL302
 9956 0f45 BC000000 		.4byte	.LVL313
 9957 0f49 0200     		.2byte	0x2
 9958 0f4b 91       		.byte	0x91
 9959 0f4c 00       		.sleb128 0
 9960 0f4d BC000000 		.4byte	.LVL313
 9961 0f51 C4000000 		.4byte	.LFE48
 9962 0f55 0200     		.2byte	0x2
 9963 0f57 7D       		.byte	0x7d
 9964 0f58 00       		.sleb128 0
 9965 0f59 00000000 		.4byte	0
 9966 0f5d 00000000 		.4byte	0
 9967              	.LLST102:
 9968 0f61 A0000000 		.4byte	.LVL308
 9969 0f65 A4000000 		.4byte	.LVL309
 9970 0f69 0200     		.2byte	0x2
 9971 0f6b 31       		.byte	0x31
 9972 0f6c 9F       		.byte	0x9f
 9973 0f6d A6000000 		.4byte	.LVL310
 9974 0f71 BC000000 		.4byte	.LVL313
 9975 0f75 0100     		.2byte	0x1
 9976 0f77 55       		.byte	0x55
 9977 0f78 BC000000 		.4byte	.LVL313
 9978 0f7c C4000000 		.4byte	.LFE48
 9979 0f80 0100     		.2byte	0x1
 9980 0f82 50       		.byte	0x50
 9981 0f83 00000000 		.4byte	0
 9982 0f87 00000000 		.4byte	0
 9983              	.LLST103:
 9984 0f8b 00000000 		.4byte	.LVL314
 9985 0f8f 13000000 		.4byte	.LVL316-1
 9986 0f93 0100     		.2byte	0x1
 9987 0f95 50       		.byte	0x50
 9988 0f96 13000000 		.4byte	.LVL316-1
 9989 0f9a D8000000 		.4byte	.LVL337
 9990 0f9e 0100     		.2byte	0x1
 9991 0fa0 56       		.byte	0x56
 9992 0fa1 D8000000 		.4byte	.LVL337
 9993 0fa5 E0000000 		.4byte	.LFE49
 9994 0fa9 0400     		.2byte	0x4
 9995 0fab F3       		.byte	0xf3
 9996 0fac 01       		.uleb128 0x1
 9997 0fad 50       		.byte	0x50
 9998 0fae 9F       		.byte	0x9f
 9999 0faf 00000000 		.4byte	0
 10000 0fb3 00000000 		.4byte	0
 10001              	.LLST104:
 10002 0fb7 00000000 		.4byte	.LVL314
 10003 0fbb 13000000 		.4byte	.LVL316-1
 10004 0fbf 0100     		.2byte	0x1
 10005 0fc1 51       		.byte	0x51
 10006 0fc2 13000000 		.4byte	.LVL316-1
 10007 0fc6 44000000 		.4byte	.LVL318
 10008 0fca 0100     		.2byte	0x1
 10009 0fcc 54       		.byte	0x54
 10010 0fcd 44000000 		.4byte	.LVL318
 10011 0fd1 50000000 		.4byte	.LVL320
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 284


 10012 0fd5 0300     		.2byte	0x3
 10013 0fd7 74       		.byte	0x74
 10014 0fd8 6A       		.sleb128 -22
 10015 0fd9 9F       		.byte	0x9f
 10016 0fda 50000000 		.4byte	.LVL320
 10017 0fde 52000000 		.4byte	.LVL321
 10018 0fe2 0400     		.2byte	0x4
 10019 0fe4 F3       		.byte	0xf3
 10020 0fe5 01       		.uleb128 0x1
 10021 0fe6 51       		.byte	0x51
 10022 0fe7 9F       		.byte	0x9f
 10023 0fe8 52000000 		.4byte	.LVL321
 10024 0fec 54000000 		.4byte	.LVL322
 10025 0ff0 0100     		.2byte	0x1
 10026 0ff2 54       		.byte	0x54
 10027 0ff3 54000000 		.4byte	.LVL322
 10028 0ff7 60000000 		.4byte	.LVL323
 10029 0ffb 0300     		.2byte	0x3
 10030 0ffd 74       		.byte	0x74
 10031 0ffe 6A       		.sleb128 -22
 10032 0fff 9F       		.byte	0x9f
 10033 1000 60000000 		.4byte	.LVL323
 10034 1004 62000000 		.4byte	.LVL324
 10035 1008 0400     		.2byte	0x4
 10036 100a F3       		.byte	0xf3
 10037 100b 01       		.uleb128 0x1
 10038 100c 51       		.byte	0x51
 10039 100d 9F       		.byte	0x9f
 10040 100e 62000000 		.4byte	.LVL324
 10041 1012 64000000 		.4byte	.LVL325
 10042 1016 0100     		.2byte	0x1
 10043 1018 54       		.byte	0x54
 10044 1019 64000000 		.4byte	.LVL325
 10045 101d 6A000000 		.4byte	.LVL326
 10046 1021 0300     		.2byte	0x3
 10047 1023 74       		.byte	0x74
 10048 1024 6A       		.sleb128 -22
 10049 1025 9F       		.byte	0x9f
 10050 1026 6A000000 		.4byte	.LVL326
 10051 102a 6C000000 		.4byte	.LVL327
 10052 102e 0400     		.2byte	0x4
 10053 1030 F3       		.byte	0xf3
 10054 1031 01       		.uleb128 0x1
 10055 1032 51       		.byte	0x51
 10056 1033 9F       		.byte	0x9f
 10057 1034 6C000000 		.4byte	.LVL327
 10058 1038 72000000 		.4byte	.LVL328
 10059 103c 0100     		.2byte	0x1
 10060 103e 54       		.byte	0x54
 10061 103f 72000000 		.4byte	.LVL328
 10062 1043 78000000 		.4byte	.LVL329
 10063 1047 0300     		.2byte	0x3
 10064 1049 74       		.byte	0x74
 10065 104a 6A       		.sleb128 -22
 10066 104b 9F       		.byte	0x9f
 10067 104c 78000000 		.4byte	.LVL329
 10068 1050 7A000000 		.4byte	.LVL330
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 285


 10069 1054 0400     		.2byte	0x4
 10070 1056 F3       		.byte	0xf3
 10071 1057 01       		.uleb128 0x1
 10072 1058 51       		.byte	0x51
 10073 1059 9F       		.byte	0x9f
 10074 105a 7A000000 		.4byte	.LVL330
 10075 105e 7C000000 		.4byte	.LVL331
 10076 1062 0100     		.2byte	0x1
 10077 1064 54       		.byte	0x54
 10078 1065 7C000000 		.4byte	.LVL331
 10079 1069 7E000000 		.4byte	.LVL332
 10080 106d 0400     		.2byte	0x4
 10081 106f F3       		.byte	0xf3
 10082 1070 01       		.uleb128 0x1
 10083 1071 51       		.byte	0x51
 10084 1072 9F       		.byte	0x9f
 10085 1073 7E000000 		.4byte	.LVL332
 10086 1077 80000000 		.4byte	.LVL333
 10087 107b 0100     		.2byte	0x1
 10088 107d 54       		.byte	0x54
 10089 107e 80000000 		.4byte	.LVL333
 10090 1082 E0000000 		.4byte	.LFE49
 10091 1086 0400     		.2byte	0x4
 10092 1088 F3       		.byte	0xf3
 10093 1089 01       		.uleb128 0x1
 10094 108a 51       		.byte	0x51
 10095 108b 9F       		.byte	0x9f
 10096 108c 00000000 		.4byte	0
 10097 1090 00000000 		.4byte	0
 10098              	.LLST105:
 10099 1094 00000000 		.4byte	.LVL314
 10100 1098 13000000 		.4byte	.LVL316-1
 10101 109c 0100     		.2byte	0x1
 10102 109e 52       		.byte	0x52
 10103 109f 13000000 		.4byte	.LVL316-1
 10104 10a3 4A000000 		.4byte	.LVL319
 10105 10a7 0100     		.2byte	0x1
 10106 10a9 57       		.byte	0x57
 10107 10aa 4A000000 		.4byte	.LVL319
 10108 10ae 52000000 		.4byte	.LVL321
 10109 10b2 0400     		.2byte	0x4
 10110 10b4 F3       		.byte	0xf3
 10111 10b5 01       		.uleb128 0x1
 10112 10b6 52       		.byte	0x52
 10113 10b7 9F       		.byte	0x9f
 10114 10b8 52000000 		.4byte	.LVL321
 10115 10bc 80000000 		.4byte	.LVL333
 10116 10c0 0100     		.2byte	0x1
 10117 10c2 57       		.byte	0x57
 10118 10c3 80000000 		.4byte	.LVL333
 10119 10c7 E0000000 		.4byte	.LFE49
 10120 10cb 0400     		.2byte	0x4
 10121 10cd F3       		.byte	0xf3
 10122 10ce 01       		.uleb128 0x1
 10123 10cf 52       		.byte	0x52
 10124 10d0 9F       		.byte	0x9f
 10125 10d1 00000000 		.4byte	0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 286


 10126 10d5 00000000 		.4byte	0
 10127              	.LLST106:
 10128 10d9 00000000 		.4byte	.LVL314
 10129 10dd 13000000 		.4byte	.LVL316-1
 10130 10e1 0100     		.2byte	0x1
 10131 10e3 53       		.byte	0x53
 10132 10e4 13000000 		.4byte	.LVL316-1
 10133 10e8 E0000000 		.4byte	.LFE49
 10134 10ec 0400     		.2byte	0x4
 10135 10ee F3       		.byte	0xf3
 10136 10ef 01       		.uleb128 0x1
 10137 10f0 53       		.byte	0x53
 10138 10f1 9F       		.byte	0x9f
 10139 10f2 00000000 		.4byte	0
 10140 10f6 00000000 		.4byte	0
 10141              	.LLST107:
 10142 10fa 00000000 		.4byte	.LVL314
 10143 10fe D8000000 		.4byte	.LVL337
 10144 1102 0200     		.2byte	0x2
 10145 1104 91       		.byte	0x91
 10146 1105 00       		.sleb128 0
 10147 1106 D8000000 		.4byte	.LVL337
 10148 110a E0000000 		.4byte	.LFE49
 10149 110e 0200     		.2byte	0x2
 10150 1110 7D       		.byte	0x7d
 10151 1111 00       		.sleb128 0
 10152 1112 00000000 		.4byte	0
 10153 1116 00000000 		.4byte	0
 10154              	.LLST108:
 10155 111a 10000000 		.4byte	.LVL315
 10156 111e 13000000 		.4byte	.LVL316-1
 10157 1122 0100     		.2byte	0x1
 10158 1124 50       		.byte	0x50
 10159 1125 13000000 		.4byte	.LVL316-1
 10160 1129 D8000000 		.4byte	.LVL337
 10161 112d 0100     		.2byte	0x1
 10162 112f 56       		.byte	0x56
 10163 1130 D8000000 		.4byte	.LVL337
 10164 1134 E0000000 		.4byte	.LFE49
 10165 1138 0400     		.2byte	0x4
 10166 113a F3       		.byte	0xf3
 10167 113b 01       		.uleb128 0x1
 10168 113c 50       		.byte	0x50
 10169 113d 9F       		.byte	0x9f
 10170 113e 00000000 		.4byte	0
 10171 1142 00000000 		.4byte	0
 10172              	.LLST109:
 10173 1146 10000000 		.4byte	.LVL315
 10174 114a 80000000 		.4byte	.LVL333
 10175 114e 0200     		.2byte	0x2
 10176 1150 31       		.byte	0x31
 10177 1151 9F       		.byte	0x9f
 10178 1152 80000000 		.4byte	.LVL333
 10179 1156 D8000000 		.4byte	.LVL337
 10180 115a 0100     		.2byte	0x1
 10181 115c 54       		.byte	0x54
 10182 115d D8000000 		.4byte	.LVL337
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 287


 10183 1161 E0000000 		.4byte	.LFE49
 10184 1165 0100     		.2byte	0x1
 10185 1167 50       		.byte	0x50
 10186 1168 00000000 		.4byte	0
 10187 116c 00000000 		.4byte	0
 10188              	.LLST110:
 10189 1170 2E000000 		.4byte	.LVL317
 10190 1174 8B000000 		.4byte	.LVL334-1
 10191 1178 0100     		.2byte	0x1
 10192 117a 51       		.byte	0x51
 10193 117b 00000000 		.4byte	0
 10194 117f 00000000 		.4byte	0
 10195              	.LLST111:
 10196 1183 00000000 		.4byte	.LVL338
 10197 1187 90000000 		.4byte	.LVL353
 10198 118b 0100     		.2byte	0x1
 10199 118d 50       		.byte	0x50
 10200 118e 90000000 		.4byte	.LVL353
 10201 1192 B8000000 		.4byte	.LVL356
 10202 1196 0100     		.2byte	0x1
 10203 1198 54       		.byte	0x54
 10204 1199 B8000000 		.4byte	.LVL356
 10205 119d BE000000 		.4byte	.LVL357
 10206 11a1 0100     		.2byte	0x1
 10207 11a3 50       		.byte	0x50
 10208 11a4 BE000000 		.4byte	.LVL357
 10209 11a8 E2000000 		.4byte	.LVL359
 10210 11ac 0100     		.2byte	0x1
 10211 11ae 54       		.byte	0x54
 10212 11af E2000000 		.4byte	.LVL359
 10213 11b3 F8000000 		.4byte	.LFE50
 10214 11b7 0400     		.2byte	0x4
 10215 11b9 F3       		.byte	0xf3
 10216 11ba 01       		.uleb128 0x1
 10217 11bb 50       		.byte	0x50
 10218 11bc 9F       		.byte	0x9f
 10219 11bd 00000000 		.4byte	0
 10220 11c1 00000000 		.4byte	0
 10221              	.LLST112:
 10222 11c5 00000000 		.4byte	.LVL338
 10223 11c9 42000000 		.4byte	.LVL342
 10224 11cd 0100     		.2byte	0x1
 10225 11cf 51       		.byte	0x51
 10226 11d0 42000000 		.4byte	.LVL342
 10227 11d4 50000000 		.4byte	.LVL344
 10228 11d8 0300     		.2byte	0x3
 10229 11da 71       		.byte	0x71
 10230 11db 6A       		.sleb128 -22
 10231 11dc 9F       		.byte	0x9f
 10232 11dd 50000000 		.4byte	.LVL344
 10233 11e1 52000000 		.4byte	.LVL345
 10234 11e5 0100     		.2byte	0x1
 10235 11e7 51       		.byte	0x51
 10236 11e8 52000000 		.4byte	.LVL345
 10237 11ec 60000000 		.4byte	.LVL346
 10238 11f0 0300     		.2byte	0x3
 10239 11f2 71       		.byte	0x71
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 288


 10240 11f3 6A       		.sleb128 -22
 10241 11f4 9F       		.byte	0x9f
 10242 11f5 60000000 		.4byte	.LVL346
 10243 11f9 62000000 		.4byte	.LVL347
 10244 11fd 0100     		.2byte	0x1
 10245 11ff 51       		.byte	0x51
 10246 1200 62000000 		.4byte	.LVL347
 10247 1204 6A000000 		.4byte	.LVL348
 10248 1208 0300     		.2byte	0x3
 10249 120a 71       		.byte	0x71
 10250 120b 6A       		.sleb128 -22
 10251 120c 9F       		.byte	0x9f
 10252 120d 6A000000 		.4byte	.LVL348
 10253 1211 70000000 		.4byte	.LVL349
 10254 1215 0100     		.2byte	0x1
 10255 1217 51       		.byte	0x51
 10256 1218 70000000 		.4byte	.LVL349
 10257 121c 78000000 		.4byte	.LVL350
 10258 1220 0300     		.2byte	0x3
 10259 1222 71       		.byte	0x71
 10260 1223 6A       		.sleb128 -22
 10261 1224 9F       		.byte	0x9f
 10262 1225 78000000 		.4byte	.LVL350
 10263 1229 7E000000 		.4byte	.LVL351
 10264 122d 0100     		.2byte	0x1
 10265 122f 51       		.byte	0x51
 10266 1230 7E000000 		.4byte	.LVL351
 10267 1234 F8000000 		.4byte	.LFE50
 10268 1238 0400     		.2byte	0x4
 10269 123a F3       		.byte	0xf3
 10270 123b 01       		.uleb128 0x1
 10271 123c 51       		.byte	0x51
 10272 123d 9F       		.byte	0x9f
 10273 123e 00000000 		.4byte	0
 10274 1242 00000000 		.4byte	0
 10275              	.LLST113:
 10276 1246 00000000 		.4byte	.LVL338
 10277 124a 48000000 		.4byte	.LVL343
 10278 124e 0100     		.2byte	0x1
 10279 1250 52       		.byte	0x52
 10280 1251 48000000 		.4byte	.LVL343
 10281 1255 50000000 		.4byte	.LVL344
 10282 1259 0400     		.2byte	0x4
 10283 125b F3       		.byte	0xf3
 10284 125c 01       		.uleb128 0x1
 10285 125d 52       		.byte	0x52
 10286 125e 9F       		.byte	0x9f
 10287 125f 50000000 		.4byte	.LVL344
 10288 1263 7E000000 		.4byte	.LVL351
 10289 1267 0100     		.2byte	0x1
 10290 1269 52       		.byte	0x52
 10291 126a 7E000000 		.4byte	.LVL351
 10292 126e F8000000 		.4byte	.LFE50
 10293 1272 0400     		.2byte	0x4
 10294 1274 F3       		.byte	0xf3
 10295 1275 01       		.uleb128 0x1
 10296 1276 52       		.byte	0x52
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 289


 10297 1277 9F       		.byte	0x9f
 10298 1278 00000000 		.4byte	0
 10299 127c 00000000 		.4byte	0
 10300              	.LLST114:
 10301 1280 00000000 		.4byte	.LVL338
 10302 1284 34000000 		.4byte	.LVL341
 10303 1288 0100     		.2byte	0x1
 10304 128a 53       		.byte	0x53
 10305 128b 34000000 		.4byte	.LVL341
 10306 128f F8000000 		.4byte	.LFE50
 10307 1293 0400     		.2byte	0x4
 10308 1295 F3       		.byte	0xf3
 10309 1296 01       		.uleb128 0x1
 10310 1297 53       		.byte	0x53
 10311 1298 9F       		.byte	0x9f
 10312 1299 00000000 		.4byte	0
 10313 129d 00000000 		.4byte	0
 10314              	.LLST115:
 10315 12a1 00000000 		.4byte	.LVL338
 10316 12a5 EA000000 		.4byte	.LVL361
 10317 12a9 0200     		.2byte	0x2
 10318 12ab 91       		.byte	0x91
 10319 12ac 00       		.sleb128 0
 10320 12ad EA000000 		.4byte	.LVL361
 10321 12b1 F8000000 		.4byte	.LFE50
 10322 12b5 0200     		.2byte	0x2
 10323 12b7 7D       		.byte	0x7d
 10324 12b8 00       		.sleb128 0
 10325 12b9 00000000 		.4byte	0
 10326 12bd 00000000 		.4byte	0
 10327              	.LLST116:
 10328 12c1 00000000 		.4byte	.LVL338
 10329 12c5 EA000000 		.4byte	.LVL361
 10330 12c9 0200     		.2byte	0x2
 10331 12cb 91       		.byte	0x91
 10332 12cc 04       		.sleb128 4
 10333 12cd EA000000 		.4byte	.LVL361
 10334 12d1 F8000000 		.4byte	.LFE50
 10335 12d5 0200     		.2byte	0x2
 10336 12d7 7D       		.byte	0x7d
 10337 12d8 04       		.sleb128 4
 10338 12d9 00000000 		.4byte	0
 10339 12dd 00000000 		.4byte	0
 10340              	.LLST117:
 10341 12e1 04000000 		.4byte	.LVL339
 10342 12e5 90000000 		.4byte	.LVL353
 10343 12e9 0100     		.2byte	0x1
 10344 12eb 50       		.byte	0x50
 10345 12ec 90000000 		.4byte	.LVL353
 10346 12f0 B8000000 		.4byte	.LVL356
 10347 12f4 0100     		.2byte	0x1
 10348 12f6 54       		.byte	0x54
 10349 12f7 B8000000 		.4byte	.LVL356
 10350 12fb BE000000 		.4byte	.LVL357
 10351 12ff 0100     		.2byte	0x1
 10352 1301 50       		.byte	0x50
 10353 1302 BE000000 		.4byte	.LVL357
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 290


 10354 1306 E2000000 		.4byte	.LVL359
 10355 130a 0100     		.2byte	0x1
 10356 130c 54       		.byte	0x54
 10357 130d E2000000 		.4byte	.LVL359
 10358 1311 F8000000 		.4byte	.LFE50
 10359 1315 0400     		.2byte	0x4
 10360 1317 F3       		.byte	0xf3
 10361 1318 01       		.uleb128 0x1
 10362 1319 50       		.byte	0x50
 10363 131a 9F       		.byte	0x9f
 10364 131b 00000000 		.4byte	0
 10365 131f 00000000 		.4byte	0
 10366              	.LLST118:
 10367 1323 2C000000 		.4byte	.LVL340
 10368 1327 84000000 		.4byte	.LVL352
 10369 132b 0100     		.2byte	0x1
 10370 132d 54       		.byte	0x54
 10371 132e 00000000 		.4byte	0
 10372 1332 00000000 		.4byte	0
 10373              	.LLST119:
 10374 1336 04000000 		.4byte	.LVL339
 10375 133a 7E000000 		.4byte	.LVL351
 10376 133e 0200     		.2byte	0x2
 10377 1340 31       		.byte	0x31
 10378 1341 9F       		.byte	0x9f
 10379 1342 7E000000 		.4byte	.LVL351
 10380 1346 EA000000 		.4byte	.LVL361
 10381 134a 0100     		.2byte	0x1
 10382 134c 55       		.byte	0x55
 10383 134d EA000000 		.4byte	.LVL361
 10384 1351 F8000000 		.4byte	.LFE50
 10385 1355 0100     		.2byte	0x1
 10386 1357 50       		.byte	0x50
 10387 1358 00000000 		.4byte	0
 10388 135c 00000000 		.4byte	0
 10389              	.LLST120:
 10390 1360 E2000000 		.4byte	.LVL359
 10391 1364 E6000000 		.4byte	.LVL360
 10392 1368 0100     		.2byte	0x1
 10393 136a 56       		.byte	0x56
 10394 136b 00000000 		.4byte	0
 10395 136f 00000000 		.4byte	0
 10396              	.LLST121:
 10397 1373 00000000 		.4byte	.LVL362
 10398 1377 44000000 		.4byte	.LVL367
 10399 137b 0100     		.2byte	0x1
 10400 137d 50       		.byte	0x50
 10401 137e 44000000 		.4byte	.LVL367
 10402 1382 6C000000 		.4byte	.LVL370
 10403 1386 0100     		.2byte	0x1
 10404 1388 56       		.byte	0x56
 10405 1389 6C000000 		.4byte	.LVL370
 10406 138d 72000000 		.4byte	.LVL371
 10407 1391 0100     		.2byte	0x1
 10408 1393 50       		.byte	0x50
 10409 1394 72000000 		.4byte	.LVL371
 10410 1398 92000000 		.4byte	.LVL373
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 291


 10411 139c 0100     		.2byte	0x1
 10412 139e 56       		.byte	0x56
 10413 139f 92000000 		.4byte	.LVL373
 10414 13a3 A4000000 		.4byte	.LFE51
 10415 13a7 0400     		.2byte	0x4
 10416 13a9 F3       		.byte	0xf3
 10417 13aa 01       		.uleb128 0x1
 10418 13ab 50       		.byte	0x50
 10419 13ac 9F       		.byte	0x9f
 10420 13ad 00000000 		.4byte	0
 10421 13b1 00000000 		.4byte	0
 10422              	.LLST122:
 10423 13b5 00000000 		.4byte	.LVL362
 10424 13b9 26000000 		.4byte	.LVL365
 10425 13bd 0100     		.2byte	0x1
 10426 13bf 51       		.byte	0x51
 10427 13c0 26000000 		.4byte	.LVL365
 10428 13c4 47000000 		.4byte	.LVL368-1
 10429 13c8 0300     		.2byte	0x3
 10430 13ca 71       		.byte	0x71
 10431 13cb 6A       		.sleb128 -22
 10432 13cc 9F       		.byte	0x9f
 10433 13cd 47000000 		.4byte	.LVL368-1
 10434 13d1 A4000000 		.4byte	.LFE51
 10435 13d5 0400     		.2byte	0x4
 10436 13d7 F3       		.byte	0xf3
 10437 13d8 01       		.uleb128 0x1
 10438 13d9 51       		.byte	0x51
 10439 13da 9F       		.byte	0x9f
 10440 13db 00000000 		.4byte	0
 10441 13df 00000000 		.4byte	0
 10442              	.LLST123:
 10443 13e3 00000000 		.4byte	.LVL362
 10444 13e7 47000000 		.4byte	.LVL368-1
 10445 13eb 0100     		.2byte	0x1
 10446 13ed 52       		.byte	0x52
 10447 13ee 47000000 		.4byte	.LVL368-1
 10448 13f2 6C000000 		.4byte	.LVL370
 10449 13f6 0100     		.2byte	0x1
 10450 13f8 54       		.byte	0x54
 10451 13f9 6C000000 		.4byte	.LVL370
 10452 13fd 75000000 		.4byte	.LVL372-1
 10453 1401 0100     		.2byte	0x1
 10454 1403 52       		.byte	0x52
 10455 1404 75000000 		.4byte	.LVL372-1
 10456 1408 92000000 		.4byte	.LVL373
 10457 140c 0100     		.2byte	0x1
 10458 140e 54       		.byte	0x54
 10459 140f 92000000 		.4byte	.LVL373
 10460 1413 A4000000 		.4byte	.LFE51
 10461 1417 0400     		.2byte	0x4
 10462 1419 F3       		.byte	0xf3
 10463 141a 01       		.uleb128 0x1
 10464 141b 52       		.byte	0x52
 10465 141c 9F       		.byte	0x9f
 10466 141d 00000000 		.4byte	0
 10467 1421 00000000 		.4byte	0
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 292


 10468              	.LLST124:
 10469 1425 02000000 		.4byte	.LVL363
 10470 1429 44000000 		.4byte	.LVL367
 10471 142d 0100     		.2byte	0x1
 10472 142f 50       		.byte	0x50
 10473 1430 44000000 		.4byte	.LVL367
 10474 1434 6C000000 		.4byte	.LVL370
 10475 1438 0100     		.2byte	0x1
 10476 143a 56       		.byte	0x56
 10477 143b 6C000000 		.4byte	.LVL370
 10478 143f 72000000 		.4byte	.LVL371
 10479 1443 0100     		.2byte	0x1
 10480 1445 50       		.byte	0x50
 10481 1446 72000000 		.4byte	.LVL371
 10482 144a 92000000 		.4byte	.LVL373
 10483 144e 0100     		.2byte	0x1
 10484 1450 56       		.byte	0x56
 10485 1451 92000000 		.4byte	.LVL373
 10486 1455 A4000000 		.4byte	.LFE51
 10487 1459 0400     		.2byte	0x4
 10488 145b F3       		.byte	0xf3
 10489 145c 01       		.uleb128 0x1
 10490 145d 50       		.byte	0x50
 10491 145e 9F       		.byte	0x9f
 10492 145f 00000000 		.4byte	0
 10493 1463 00000000 		.4byte	0
 10494              	.LLST125:
 10495 1467 1E000000 		.4byte	.LVL364
 10496 146b 3A000000 		.4byte	.LVL366
 10497 146f 0100     		.2byte	0x1
 10498 1471 53       		.byte	0x53
 10499 1472 00000000 		.4byte	0
 10500 1476 00000000 		.4byte	0
 10501              	.LLST126:
 10502 147a 92000000 		.4byte	.LVL373
 10503 147e 96000000 		.4byte	.LVL374
 10504 1482 0100     		.2byte	0x1
 10505 1484 55       		.byte	0x55
 10506 1485 00000000 		.4byte	0
 10507 1489 00000000 		.4byte	0
 10508              	.LLST127:
 10509 148d 00000000 		.4byte	.LVL375
 10510 1491 0E000000 		.4byte	.LVL376
 10511 1495 0100     		.2byte	0x1
 10512 1497 50       		.byte	0x50
 10513 1498 00000000 		.4byte	0
 10514 149c 00000000 		.4byte	0
 10515              	.LLST128:
 10516 14a0 00000000 		.4byte	.LVL375
 10517 14a4 11000000 		.4byte	.LVL377-1
 10518 14a8 0100     		.2byte	0x1
 10519 14aa 51       		.byte	0x51
 10520 14ab 11000000 		.4byte	.LVL377-1
 10521 14af 20000000 		.4byte	.LVL378
 10522 14b3 0100     		.2byte	0x1
 10523 14b5 54       		.byte	0x54
 10524 14b6 20000000 		.4byte	.LVL378
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 293


 10525 14ba 2A000000 		.4byte	.LVL380
 10526 14be 0400     		.2byte	0x4
 10527 14c0 F3       		.byte	0xf3
 10528 14c1 01       		.uleb128 0x1
 10529 14c2 51       		.byte	0x51
 10530 14c3 9F       		.byte	0x9f
 10531 14c4 2A000000 		.4byte	.LVL380
 10532 14c8 2C000000 		.4byte	.LVL381
 10533 14cc 0100     		.2byte	0x1
 10534 14ce 54       		.byte	0x54
 10535 14cf 2C000000 		.4byte	.LVL381
 10536 14d3 38000000 		.4byte	.LFE52
 10537 14d7 0400     		.2byte	0x4
 10538 14d9 F3       		.byte	0xf3
 10539 14da 01       		.uleb128 0x1
 10540 14db 51       		.byte	0x51
 10541 14dc 9F       		.byte	0x9f
 10542 14dd 00000000 		.4byte	0
 10543 14e1 00000000 		.4byte	0
 10544              	.LLST129:
 10545 14e5 0E000000 		.4byte	.LVL376
 10546 14e9 34000000 		.4byte	.LVL383
 10547 14ed 0100     		.2byte	0x1
 10548 14ef 55       		.byte	0x55
 10549 14f0 00000000 		.4byte	0
 10550 14f4 00000000 		.4byte	0
 10551              	.LLST130:
 10552 14f8 26000000 		.4byte	.LVL379
 10553 14fc 2A000000 		.4byte	.LVL380
 10554 1500 0200     		.2byte	0x2
 10555 1502 31       		.byte	0x31
 10556 1503 9F       		.byte	0x9f
 10557 1504 2C000000 		.4byte	.LVL381
 10558 1508 34000000 		.4byte	.LVL383
 10559 150c 0100     		.2byte	0x1
 10560 150e 54       		.byte	0x54
 10561 150f 34000000 		.4byte	.LVL383
 10562 1513 38000000 		.4byte	.LFE52
 10563 1517 0100     		.2byte	0x1
 10564 1519 50       		.byte	0x50
 10565 151a 00000000 		.4byte	0
 10566 151e 00000000 		.4byte	0
 10567              	.LLST131:
 10568 1522 00000000 		.4byte	.LVL384
 10569 1526 10000000 		.4byte	.LVL385
 10570 152a 0100     		.2byte	0x1
 10571 152c 50       		.byte	0x50
 10572 152d 00000000 		.4byte	0
 10573 1531 00000000 		.4byte	0
 10574              	.LLST132:
 10575 1535 00000000 		.4byte	.LVL384
 10576 1539 13000000 		.4byte	.LVL386-1
 10577 153d 0100     		.2byte	0x1
 10578 153f 51       		.byte	0x51
 10579 1540 13000000 		.4byte	.LVL386-1
 10580 1544 1C000000 		.4byte	.LVL387
 10581 1548 0100     		.2byte	0x1
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 294


 10582 154a 54       		.byte	0x54
 10583 154b 1C000000 		.4byte	.LVL387
 10584 154f 2B000000 		.4byte	.LVL388-1
 10585 1553 0300     		.2byte	0x3
 10586 1555 71       		.byte	0x71
 10587 1556 6A       		.sleb128 -22
 10588 1557 9F       		.byte	0x9f
 10589 1558 2B000000 		.4byte	.LVL388-1
 10590 155c 34000000 		.4byte	.LFE53
 10591 1560 0400     		.2byte	0x4
 10592 1562 F3       		.byte	0xf3
 10593 1563 01       		.uleb128 0x1
 10594 1564 51       		.byte	0x51
 10595 1565 9F       		.byte	0x9f
 10596 1566 00000000 		.4byte	0
 10597 156a 00000000 		.4byte	0
 10598              	.LLST133:
 10599 156e 00000000 		.4byte	.LVL384
 10600 1572 13000000 		.4byte	.LVL386-1
 10601 1576 0100     		.2byte	0x1
 10602 1578 52       		.byte	0x52
 10603 1579 13000000 		.4byte	.LVL386-1
 10604 157d 30000000 		.4byte	.LVL389
 10605 1581 0100     		.2byte	0x1
 10606 1583 56       		.byte	0x56
 10607 1584 30000000 		.4byte	.LVL389
 10608 1588 34000000 		.4byte	.LFE53
 10609 158c 0400     		.2byte	0x4
 10610 158e F3       		.byte	0xf3
 10611 158f 01       		.uleb128 0x1
 10612 1590 52       		.byte	0x52
 10613 1591 9F       		.byte	0x9f
 10614 1592 00000000 		.4byte	0
 10615 1596 00000000 		.4byte	0
 10616              	.LLST134:
 10617 159a 10000000 		.4byte	.LVL385
 10618 159e 30000000 		.4byte	.LVL389
 10619 15a2 0100     		.2byte	0x1
 10620 15a4 55       		.byte	0x55
 10621 15a5 00000000 		.4byte	0
 10622 15a9 00000000 		.4byte	0
 10623              	.LLST135:
 10624 15ad 1C000000 		.4byte	.LVL387
 10625 15b1 30000000 		.4byte	.LVL389
 10626 15b5 0100     		.2byte	0x1
 10627 15b7 54       		.byte	0x54
 10628 15b8 30000000 		.4byte	.LVL389
 10629 15bc 34000000 		.4byte	.LFE53
 10630 15c0 0100     		.2byte	0x1
 10631 15c2 50       		.byte	0x50
 10632 15c3 00000000 		.4byte	0
 10633 15c7 00000000 		.4byte	0
 10634              		.section	.debug_aranges,"",%progbits
 10635 0000 AC010000 		.4byte	0x1ac
 10636 0004 0200     		.2byte	0x2
 10637 0006 00000000 		.4byte	.Ldebug_info0
 10638 000a 04       		.byte	0x4
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 295


 10639 000b 00       		.byte	0
 10640 000c 0000     		.2byte	0
 10641 000e 0000     		.2byte	0
 10642 0010 00000000 		.4byte	.LFB14
 10643 0014 2C000000 		.4byte	.LFE14-.LFB14
 10644 0018 00000000 		.4byte	.LFB43
 10645 001c 24000000 		.4byte	.LFE43-.LFB43
 10646 0020 00000000 		.4byte	.LFB42
 10647 0024 12000000 		.4byte	.LFE42-.LFB42
 10648 0028 00000000 		.4byte	.LFB5
 10649 002c 8E000000 		.4byte	.LFE5-.LFB5
 10650 0030 00000000 		.4byte	.LFB40
 10651 0034 58000000 		.4byte	.LFE40-.LFB40
 10652 0038 00000000 		.4byte	.LFB6
 10653 003c AC000000 		.4byte	.LFE6-.LFB6
 10654 0040 00000000 		.4byte	.LFB41
 10655 0044 44000000 		.4byte	.LFE41-.LFB41
 10656 0048 00000000 		.4byte	.LFB37
 10657 004c 28000000 		.4byte	.LFE37-.LFB37
 10658 0050 00000000 		.4byte	.LFB54
 10659 0054 68000000 		.4byte	.LFE54-.LFB54
 10660 0058 00000000 		.4byte	.LFB4
 10661 005c 62000000 		.4byte	.LFE4-.LFB4
 10662 0060 00000000 		.4byte	.LFB7
 10663 0064 98000000 		.4byte	.LFE7-.LFB7
 10664 0068 00000000 		.4byte	.LFB10
 10665 006c 20000000 		.4byte	.LFE10-.LFB10
 10666 0070 00000000 		.4byte	.LFB11
 10667 0074 28000000 		.4byte	.LFE11-.LFB11
 10668 0078 00000000 		.4byte	.LFB12
 10669 007c C0000000 		.4byte	.LFE12-.LFB12
 10670 0080 00000000 		.4byte	.LFB15
 10671 0084 78000000 		.4byte	.LFE15-.LFB15
 10672 0088 00000000 		.4byte	.LFB16
 10673 008c 8C000000 		.4byte	.LFE16-.LFB16
 10674 0090 00000000 		.4byte	.LFB17
 10675 0094 60000000 		.4byte	.LFE17-.LFB17
 10676 0098 00000000 		.4byte	.LFB18
 10677 009c 24000000 		.4byte	.LFE18-.LFB18
 10678 00a0 00000000 		.4byte	.LFB19
 10679 00a4 14000000 		.4byte	.LFE19-.LFB19
 10680 00a8 00000000 		.4byte	.LFB21
 10681 00ac 0C000000 		.4byte	.LFE21-.LFB21
 10682 00b0 00000000 		.4byte	.LFB22
 10683 00b4 0C000000 		.4byte	.LFE22-.LFB22
 10684 00b8 00000000 		.4byte	.LFB23
 10685 00bc 0C000000 		.4byte	.LFE23-.LFB23
 10686 00c0 00000000 		.4byte	.LFB24
 10687 00c4 14000000 		.4byte	.LFE24-.LFB24
 10688 00c8 00000000 		.4byte	.LFB26
 10689 00cc E8000000 		.4byte	.LFE26-.LFB26
 10690 00d0 00000000 		.4byte	.LFB20
 10691 00d4 D8000000 		.4byte	.LFE20-.LFB20
 10692 00d8 00000000 		.4byte	.LFB8
 10693 00dc 6C000000 		.4byte	.LFE8-.LFB8
 10694 00e0 00000000 		.4byte	.LFB9
 10695 00e4 34000000 		.4byte	.LFE9-.LFB9
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 296


 10696 00e8 00000000 		.4byte	.LFB25
 10697 00ec 20000000 		.4byte	.LFE25-.LFB25
 10698 00f0 00000000 		.4byte	.LFB27
 10699 00f4 80000000 		.4byte	.LFE27-.LFB27
 10700 00f8 00000000 		.4byte	.LFB13
 10701 00fc AC000000 		.4byte	.LFE13-.LFB13
 10702 0100 00000000 		.4byte	.LFB28
 10703 0104 20000000 		.4byte	.LFE28-.LFB28
 10704 0108 00000000 		.4byte	.LFB29
 10705 010c 28000000 		.4byte	.LFE29-.LFB29
 10706 0110 00000000 		.4byte	.LFB30
 10707 0114 28000000 		.4byte	.LFE30-.LFB30
 10708 0118 00000000 		.4byte	.LFB31
 10709 011c 74000000 		.4byte	.LFE31-.LFB31
 10710 0120 00000000 		.4byte	.LFB32
 10711 0124 54000000 		.4byte	.LFE32-.LFB32
 10712 0128 00000000 		.4byte	.LFB33
 10713 012c 20000000 		.4byte	.LFE33-.LFB33
 10714 0130 00000000 		.4byte	.LFB34
 10715 0134 14000000 		.4byte	.LFE34-.LFB34
 10716 0138 00000000 		.4byte	.LFB35
 10717 013c 5C000000 		.4byte	.LFE35-.LFB35
 10718 0140 00000000 		.4byte	.LFB36
 10719 0144 10000000 		.4byte	.LFE36-.LFB36
 10720 0148 00000000 		.4byte	.LFB38
 10721 014c 1C000000 		.4byte	.LFE38-.LFB38
 10722 0150 00000000 		.4byte	.LFB39
 10723 0154 20000000 		.4byte	.LFE39-.LFB39
 10724 0158 00000000 		.4byte	.LFB44
 10725 015c 0C000000 		.4byte	.LFE44-.LFB44
 10726 0160 00000000 		.4byte	.LFB45
 10727 0164 20000000 		.4byte	.LFE45-.LFB45
 10728 0168 00000000 		.4byte	.LFB46
 10729 016c 20000000 		.4byte	.LFE46-.LFB46
 10730 0170 00000000 		.4byte	.LFB47
 10731 0174 A0000000 		.4byte	.LFE47-.LFB47
 10732 0178 00000000 		.4byte	.LFB48
 10733 017c C4000000 		.4byte	.LFE48-.LFB48
 10734 0180 00000000 		.4byte	.LFB49
 10735 0184 E0000000 		.4byte	.LFE49-.LFB49
 10736 0188 00000000 		.4byte	.LFB50
 10737 018c F8000000 		.4byte	.LFE50-.LFB50
 10738 0190 00000000 		.4byte	.LFB51
 10739 0194 A4000000 		.4byte	.LFE51-.LFB51
 10740 0198 00000000 		.4byte	.LFB52
 10741 019c 38000000 		.4byte	.LFE52-.LFB52
 10742 01a0 00000000 		.4byte	.LFB53
 10743 01a4 34000000 		.4byte	.LFE53-.LFB53
 10744 01a8 00000000 		.4byte	0
 10745 01ac 00000000 		.4byte	0
 10746              		.section	.debug_ranges,"",%progbits
 10747              	.Ldebug_ranges0:
 10748 0000 0E000000 		.4byte	.LBB36
 10749 0004 3E000000 		.4byte	.LBE36
 10750 0008 44000000 		.4byte	.LBB38
 10751 000c C6000000 		.4byte	.LBE38
 10752 0010 D8000000 		.4byte	.LBB39
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 297


 10753 0014 DC000000 		.4byte	.LBE39
 10754 0018 00000000 		.4byte	0
 10755 001c 00000000 		.4byte	0
 10756 0020 0A000000 		.4byte	.LBB41
 10757 0024 20000000 		.4byte	.LBE41
 10758 0028 24000000 		.4byte	.LBB42
 10759 002c 2C000000 		.4byte	.LBE42
 10760 0030 34000000 		.4byte	.LBB43
 10761 0034 4A000000 		.4byte	.LBE43
 10762 0038 00000000 		.4byte	0
 10763 003c 00000000 		.4byte	0
 10764 0040 1A000000 		.4byte	.LBB44
 10765 0044 32000000 		.4byte	.LBE44
 10766 0048 34000000 		.4byte	.LBB46
 10767 004c 78000000 		.4byte	.LBE46
 10768 0050 00000000 		.4byte	0
 10769 0054 00000000 		.4byte	0
 10770 0058 00000000 		.4byte	.LFB14
 10771 005c 2C000000 		.4byte	.LFE14
 10772 0060 00000000 		.4byte	.LFB43
 10773 0064 24000000 		.4byte	.LFE43
 10774 0068 00000000 		.4byte	.LFB42
 10775 006c 12000000 		.4byte	.LFE42
 10776 0070 00000000 		.4byte	.LFB5
 10777 0074 8E000000 		.4byte	.LFE5
 10778 0078 00000000 		.4byte	.LFB40
 10779 007c 58000000 		.4byte	.LFE40
 10780 0080 00000000 		.4byte	.LFB6
 10781 0084 AC000000 		.4byte	.LFE6
 10782 0088 00000000 		.4byte	.LFB41
 10783 008c 44000000 		.4byte	.LFE41
 10784 0090 00000000 		.4byte	.LFB37
 10785 0094 28000000 		.4byte	.LFE37
 10786 0098 00000000 		.4byte	.LFB54
 10787 009c 68000000 		.4byte	.LFE54
 10788 00a0 00000000 		.4byte	.LFB4
 10789 00a4 62000000 		.4byte	.LFE4
 10790 00a8 00000000 		.4byte	.LFB7
 10791 00ac 98000000 		.4byte	.LFE7
 10792 00b0 00000000 		.4byte	.LFB10
 10793 00b4 20000000 		.4byte	.LFE10
 10794 00b8 00000000 		.4byte	.LFB11
 10795 00bc 28000000 		.4byte	.LFE11
 10796 00c0 00000000 		.4byte	.LFB12
 10797 00c4 C0000000 		.4byte	.LFE12
 10798 00c8 00000000 		.4byte	.LFB15
 10799 00cc 78000000 		.4byte	.LFE15
 10800 00d0 00000000 		.4byte	.LFB16
 10801 00d4 8C000000 		.4byte	.LFE16
 10802 00d8 00000000 		.4byte	.LFB17
 10803 00dc 60000000 		.4byte	.LFE17
 10804 00e0 00000000 		.4byte	.LFB18
 10805 00e4 24000000 		.4byte	.LFE18
 10806 00e8 00000000 		.4byte	.LFB19
 10807 00ec 14000000 		.4byte	.LFE19
 10808 00f0 00000000 		.4byte	.LFB21
 10809 00f4 0C000000 		.4byte	.LFE21
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 298


 10810 00f8 00000000 		.4byte	.LFB22
 10811 00fc 0C000000 		.4byte	.LFE22
 10812 0100 00000000 		.4byte	.LFB23
 10813 0104 0C000000 		.4byte	.LFE23
 10814 0108 00000000 		.4byte	.LFB24
 10815 010c 14000000 		.4byte	.LFE24
 10816 0110 00000000 		.4byte	.LFB26
 10817 0114 E8000000 		.4byte	.LFE26
 10818 0118 00000000 		.4byte	.LFB20
 10819 011c D8000000 		.4byte	.LFE20
 10820 0120 00000000 		.4byte	.LFB8
 10821 0124 6C000000 		.4byte	.LFE8
 10822 0128 00000000 		.4byte	.LFB9
 10823 012c 34000000 		.4byte	.LFE9
 10824 0130 00000000 		.4byte	.LFB25
 10825 0134 20000000 		.4byte	.LFE25
 10826 0138 00000000 		.4byte	.LFB27
 10827 013c 80000000 		.4byte	.LFE27
 10828 0140 00000000 		.4byte	.LFB13
 10829 0144 AC000000 		.4byte	.LFE13
 10830 0148 00000000 		.4byte	.LFB28
 10831 014c 20000000 		.4byte	.LFE28
 10832 0150 00000000 		.4byte	.LFB29
 10833 0154 28000000 		.4byte	.LFE29
 10834 0158 00000000 		.4byte	.LFB30
 10835 015c 28000000 		.4byte	.LFE30
 10836 0160 00000000 		.4byte	.LFB31
 10837 0164 74000000 		.4byte	.LFE31
 10838 0168 00000000 		.4byte	.LFB32
 10839 016c 54000000 		.4byte	.LFE32
 10840 0170 00000000 		.4byte	.LFB33
 10841 0174 20000000 		.4byte	.LFE33
 10842 0178 00000000 		.4byte	.LFB34
 10843 017c 14000000 		.4byte	.LFE34
 10844 0180 00000000 		.4byte	.LFB35
 10845 0184 5C000000 		.4byte	.LFE35
 10846 0188 00000000 		.4byte	.LFB36
 10847 018c 10000000 		.4byte	.LFE36
 10848 0190 00000000 		.4byte	.LFB38
 10849 0194 1C000000 		.4byte	.LFE38
 10850 0198 00000000 		.4byte	.LFB39
 10851 019c 20000000 		.4byte	.LFE39
 10852 01a0 00000000 		.4byte	.LFB44
 10853 01a4 0C000000 		.4byte	.LFE44
 10854 01a8 00000000 		.4byte	.LFB45
 10855 01ac 20000000 		.4byte	.LFE45
 10856 01b0 00000000 		.4byte	.LFB46
 10857 01b4 20000000 		.4byte	.LFE46
 10858 01b8 00000000 		.4byte	.LFB47
 10859 01bc A0000000 		.4byte	.LFE47
 10860 01c0 00000000 		.4byte	.LFB48
 10861 01c4 C4000000 		.4byte	.LFE48
 10862 01c8 00000000 		.4byte	.LFB49
 10863 01cc E0000000 		.4byte	.LFE49
 10864 01d0 00000000 		.4byte	.LFB50
 10865 01d4 F8000000 		.4byte	.LFE50
 10866 01d8 00000000 		.4byte	.LFB51
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 299


 10867 01dc A4000000 		.4byte	.LFE51
 10868 01e0 00000000 		.4byte	.LFB52
 10869 01e4 38000000 		.4byte	.LFE52
 10870 01e8 00000000 		.4byte	.LFB53
 10871 01ec 34000000 		.4byte	.LFE53
 10872 01f0 00000000 		.4byte	0
 10873 01f4 00000000 		.4byte	0
 10874              		.section	.debug_line,"",%progbits
 10875              	.Ldebug_line0:
 10876 0000 A20A0000 		.section	.debug_str,"MS",%progbits,1
 10876      02008302 
 10876      00000201 
 10876      FB0E0D00 
 10876      01010101 
 10877              	.LASF45:
 10878 0000 70635461 		.ascii	"pcTaskName\000"
 10878      736B4E61 
 10878      6D6500
 10879              	.LASF31:
 10880 000b 75784E75 		.ascii	"uxNumberOfItems\000"
 10880      6D626572 
 10880      4F664974 
 10880      656D7300 
 10881              	.LASF210:
 10882 001b 76506F72 		.ascii	"vPortExitCritical\000"
 10882      74457869 
 10882      74437269 
 10882      74696361 
 10882      6C00
 10883              	.LASF215:
 10884 002d 78506F72 		.ascii	"xPortStartScheduler\000"
 10884      74537461 
 10884      72745363 
 10884      68656475 
 10884      6C657200 
 10885              	.LASF43:
 10886 0041 75785072 		.ascii	"uxPriority\000"
 10886      696F7269 
 10886      747900
 10887              	.LASF133:
 10888 004c 7078436F 		.ascii	"pxConstList\000"
 10888      6E73744C 
 10888      69737400 
 10889              	.LASF39:
 10890 0058 74736B54 		.ascii	"tskTaskControlBlock\000"
 10890      61736B43 
 10890      6F6E7472 
 10890      6F6C426C 
 10890      6F636B00 
 10891              	.LASF153:
 10892 006c 76546173 		.ascii	"vTaskSetThreadLocalStoragePointer\000"
 10892      6B536574 
 10892      54687265 
 10892      61644C6F 
 10892      63616C53 
 10893              	.LASF168:
 10894 008e 756C4269 		.ascii	"ulBitsToClearOnExit\000"
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 300


 10894      7473546F 
 10894      436C6561 
 10894      724F6E45 
 10894      78697400 
 10895              	.LASF74:
 10896 00a2 70727649 		.ascii	"prvInitialiseNewTask\000"
 10896      6E697469 
 10896      616C6973 
 10896      654E6577 
 10896      5461736B 
 10897              	.LASF160:
 10898 00b7 78546173 		.ascii	"xTaskGetSchedulerState\000"
 10898      6B476574 
 10898      53636865 
 10898      64756C65 
 10898      72537461 
 10899              	.LASF178:
 10900 00ce 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 10900      67686572 
 10900      5072696F 
 10900      72697479 
 10900      5461736B 
 10901              	.LASF49:
 10902 00e8 654E6F41 		.ascii	"eNoAction\000"
 10902      6374696F 
 10902      6E00
 10903              	.LASF195:
 10904 00f2 7578546F 		.ascii	"uxTopReadyPriority\000"
 10904      70526561 
 10904      64795072 
 10904      696F7269 
 10904      747900
 10905              	.LASF0:
 10906 0105 756E7369 		.ascii	"unsigned int\000"
 10906      676E6564 
 10906      20696E74 
 10906      00
 10907              	.LASF137:
 10908 0112 70784576 		.ascii	"pxEventList\000"
 10908      656E744C 
 10908      69737400 
 10909              	.LASF196:
 10910 011e 78536368 		.ascii	"xSchedulerRunning\000"
 10910      6564756C 
 10910      65725275 
 10910      6E6E696E 
 10910      6700
 10911              	.LASF32:
 10912 0130 7078496E 		.ascii	"pxIndex\000"
 10912      64657800 
 10913              	.LASF20:
 10914 0138 53746163 		.ascii	"StackType_t\000"
 10914      6B547970 
 10914      655F7400 
 10915              	.LASF55:
 10916 0144 7854494D 		.ascii	"xTIME_OUT\000"
 10916      455F4F55 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 301


 10916      5400
 10917              	.LASF183:
 10918 014e 756C4269 		.ascii	"ulBitsToClear\000"
 10918      7473546F 
 10918      436C6561 
 10918      7200
 10919              	.LASF191:
 10920 015c 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 10920      6C657465 
 10920      64546173 
 10920      6B735761 
 10920      6974696E 
 10921              	.LASF121:
 10922 0179 7850656E 		.ascii	"xPendedCounts\000"
 10922      64656443 
 10922      6F756E74 
 10922      7300
 10923              	.LASF29:
 10924 0187 784C4953 		.ascii	"xLIST_ITEM\000"
 10924      545F4954 
 10924      454D00
 10925              	.LASF184:
 10926 0192 70785265 		.ascii	"pxReadyTasksLists\000"
 10926      61647954 
 10926      61736B73 
 10926      4C697374 
 10926      7300
 10927              	.LASF140:
 10928 01a4 78576169 		.ascii	"xWaitIndefinitely\000"
 10928      74496E64 
 10928      6566696E 
 10928      6974656C 
 10928      7900
 10929              	.LASF145:
 10930 01b6 76546173 		.ascii	"vTaskSetTimeOutState\000"
 10930      6B536574 
 10930      54696D65 
 10930      4F757453 
 10930      74617465 
 10931              	.LASF177:
 10932 01cb 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 10932      6B47656E 
 10932      65726963 
 10932      4E6F7469 
 10932      66794672 
 10933              	.LASF116:
 10934 01e5 78546173 		.ascii	"xTaskIncrementTick\000"
 10934      6B496E63 
 10934      72656D65 
 10934      6E745469 
 10934      636B00
 10935              	.LASF185:
 10936 01f8 7844656C 		.ascii	"xDelayedTaskList1\000"
 10936      61796564 
 10936      5461736B 
 10936      4C697374 
 10936      3100
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 302


 10937              	.LASF186:
 10938 020a 7844656C 		.ascii	"xDelayedTaskList2\000"
 10938      61796564 
 10938      5461736B 
 10938      4C697374 
 10938      3200
 10939              	.LASF56:
 10940 021c 784F7665 		.ascii	"xOverflowCount\000"
 10940      72666C6F 
 10940      77436F75 
 10940      6E7400
 10941              	.LASF208:
 10942 022b 76506F72 		.ascii	"vPortEnterCritical\000"
 10942      74456E74 
 10942      65724372 
 10942      69746963 
 10942      616C00
 10943              	.LASF128:
 10944 023e 78546173 		.ascii	"xTaskCatchUpTicks\000"
 10944      6B436174 
 10944      63685570 
 10944      5469636B 
 10944      7300
 10945              	.LASF62:
 10946 0250 756C5061 		.ascii	"ulParameters\000"
 10946      72616D65 
 10946      74657273 
 10946      00
 10947              	.LASF106:
 10948 025d 78546173 		.ascii	"xTaskToResume\000"
 10948      6B546F52 
 10948      6573756D 
 10948      6500
 10949              	.LASF96:
 10950 026b 75785265 		.ascii	"uxReturn\000"
 10950      7475726E 
 10950      00
 10951              	.LASF223:
 10952 0274 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 10952      736B4765 
 10952      744E756D 
 10952      6265724F 
 10952      66546173 
 10953              	.LASF214:
 10954 028b 7854696D 		.ascii	"xTimerCreateTimerTask\000"
 10954      65724372 
 10954      65617465 
 10954      54696D65 
 10954      72546173 
 10955              	.LASF76:
 10956 02a1 70634E61 		.ascii	"pcName\000"
 10956      6D6500
 10957              	.LASF64:
 10958 02a8 74736B54 		.ascii	"tskTCB\000"
 10958      434200
 10959              	.LASF108:
 10960 02af 75785361 		.ascii	"uxSavedInterruptStatus\000"
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 303


 10960      76656449 
 10960      6E746572 
 10960      72757074 
 10960      53746174 
 10961              	.LASF18:
 10962 02c6 75696E74 		.ascii	"uint32_t\000"
 10962      33325F74 
 10962      00
 10963              	.LASF48:
 10964 02cf 75634E6F 		.ascii	"ucNotifyState\000"
 10964      74696679 
 10964      53746174 
 10964      6500
 10965              	.LASF211:
 10966 02dd 75784C69 		.ascii	"uxListRemove\000"
 10966      73745265 
 10966      6D6F7665 
 10966      00
 10967              	.LASF104:
 10968 02ea 78596965 		.ascii	"xYieldRequired\000"
 10968      6C645265 
 10968      71756972 
 10968      656400
 10969              	.LASF66:
 10970 02f9 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 10970      6967696E 
 10970      616C4241 
 10970      53455052 
 10970      4900
 10971              	.LASF170:
 10972 030b 78546173 		.ascii	"xTaskGenericNotify\000"
 10972      6B47656E 
 10972      65726963 
 10972      4E6F7469 
 10972      667900
 10973              	.LASF142:
 10974 031e 7078556E 		.ascii	"pxUnblockedTCB\000"
 10974      626C6F63 
 10974      6B656454 
 10974      434200
 10975              	.LASF92:
 10976 032d 75735374 		.ascii	"usStackDepth\000"
 10976      61636B44 
 10976      65707468 
 10976      00
 10977              	.LASF164:
 10978 033a 78436C65 		.ascii	"xClearCountOnExit\000"
 10978      6172436F 
 10978      756E744F 
 10978      6E457869 
 10978      7400
 10979              	.LASF150:
 10980 034c 78456C61 		.ascii	"xElapsedTime\000"
 10980      70736564 
 10980      54696D65 
 10980      00
 10981              	.LASF52:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 304


 10982 0359 65536574 		.ascii	"eSetValueWithOverwrite\000"
 10982      56616C75 
 10982      65576974 
 10982      684F7665 
 10982      72777269 
 10983              	.LASF13:
 10984 0370 6C6F6E67 		.ascii	"long long unsigned int\000"
 10984      206C6F6E 
 10984      6720756E 
 10984      7369676E 
 10984      65642069 
 10985              	.LASF113:
 10986 0387 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 10986      6B476574 
 10986      5469636B 
 10986      436F756E 
 10986      7446726F 
 10987              	.LASF98:
 10988 03a0 75785361 		.ascii	"uxSavedInterruptState\000"
 10988      76656449 
 10988      6E746572 
 10988      72757074 
 10988      53746174 
 10989              	.LASF167:
 10990 03b6 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 10990      7473546F 
 10990      436C6561 
 10990      724F6E45 
 10990      6E747279 
 10991              	.LASF189:
 10992 03cb 7850656E 		.ascii	"xPendingReadyList\000"
 10992      64696E67 
 10992      52656164 
 10992      794C6973 
 10992      7400
 10993              	.LASF26:
 10994 03dd 70785072 		.ascii	"pxPrevious\000"
 10994      6576696F 
 10994      757300
 10995              	.LASF8:
 10996 03e8 5F5F7569 		.ascii	"__uint16_t\000"
 10996      6E743136 
 10996      5F7400
 10997              	.LASF158:
 10998 03f3 70765265 		.ascii	"pvReturn\000"
 10998      7475726E 
 10998      00
 10999              	.LASF107:
 11000 03fc 78546173 		.ascii	"xTaskResumeFromISR\000"
 11000      6B526573 
 11000      756D6546 
 11000      726F6D49 
 11000      535200
 11001              	.LASF213:
 11002 040f 7076506F 		.ascii	"pvPortMalloc\000"
 11002      72744D61 
 11002      6C6C6F63 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 305


 11002      00
 11003              	.LASF151:
 11004 041c 76546173 		.ascii	"vTaskSuspendAll\000"
 11004      6B537573 
 11004      70656E64 
 11004      416C6C00 
 11005              	.LASF46:
 11006 042c 70765468 		.ascii	"pvThreadLocalStoragePointers\000"
 11006      72656164 
 11006      4C6F6361 
 11006      6C53746F 
 11006      72616765 
 11007              	.LASF217:
 11008 0449 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 11008      43313120 
 11008      352E342E 
 11008      31203230 
 11008      31363036 
 11009 047c 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 11009      20726576 
 11009      6973696F 
 11009      6E203233 
 11009      37373135 
 11010 04af 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 11010      66756E63 
 11010      74696F6E 
 11010      2D736563 
 11010      74696F6E 
 11011              	.LASF218:
 11012 04d7 2E2E5C2E 		.ascii	"..\\..\\..\\..\\..\\..\\FreeRTOS\\FreeRTOS\\FreeRTO"
 11012      2E5C2E2E 
 11012      5C2E2E5C 
 11012      2E2E5C2E 
 11012      2E5C4672 
 11013 0502 535C536F 		.ascii	"S\\Source\\tasks.c\000"
 11013      75726365 
 11013      5C746173 
 11013      6B732E63 
 11013      00
 11014              	.LASF54:
 11015 0513 654E6F74 		.ascii	"eNotifyAction\000"
 11015      69667941 
 11015      6374696F 
 11015      6E00
 11016              	.LASF4:
 11017 0521 73697A65 		.ascii	"size_t\000"
 11017      5F7400
 11018              	.LASF51:
 11019 0528 65496E63 		.ascii	"eIncrement\000"
 11019      72656D65 
 11019      6E7400
 11020              	.LASF35:
 11021 0533 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 11021      495F4C49 
 11021      53545F49 
 11021      54454D00 
 11022              	.LASF194:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 306


 11023 0543 78546963 		.ascii	"xTickCount\000"
 11023      6B436F75 
 11023      6E7400
 11024              	.LASF30:
 11025 054e 784C4953 		.ascii	"xLIST\000"
 11025      5400
 11026              	.LASF110:
 11027 0554 76546173 		.ascii	"vTaskEndScheduler\000"
 11027      6B456E64 
 11027      53636865 
 11027      64756C65 
 11027      7200
 11028              	.LASF95:
 11029 0566 75785461 		.ascii	"uxTaskPriorityGet\000"
 11029      736B5072 
 11029      696F7269 
 11029      74794765 
 11029      7400
 11030              	.LASF91:
 11031 0578 78436F6E 		.ascii	"xConstTickCount\000"
 11031      73745469 
 11031      636B436F 
 11031      756E7400 
 11032              	.LASF209:
 11033 0588 764C6973 		.ascii	"vListInsertEnd\000"
 11033      74496E73 
 11033      65727445 
 11033      6E6400
 11034              	.LASF192:
 11035 0597 78537573 		.ascii	"xSuspendedTaskList\000"
 11035      70656E64 
 11035      65645461 
 11035      736B4C69 
 11035      737400
 11036              	.LASF219:
 11037 05aa 433A5C44 		.ascii	"C:\\DATA\\software\\embedded_controllers\\Cypress\\"
 11037      4154415C 
 11037      736F6674 
 11037      77617265 
 11037      5C656D62 
 11038 05d8 55434C4C 		.ascii	"UCLL_Koen_lib\\UCLL_Koen_lib.cylib\000"
 11038      5F4B6F65 
 11038      6E5F6C69 
 11038      625C5543 
 11038      4C4C5F4B 
 11039              	.LASF68:
 11040 05fa 76506F72 		.ascii	"vPortSetBASEPRI\000"
 11040      74536574 
 11040      42415345 
 11040      50524900 
 11041              	.LASF154:
 11042 060a 78546173 		.ascii	"xTaskToSet\000"
 11042      6B546F53 
 11042      657400
 11043              	.LASF188:
 11044 0615 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 11044      6572666C 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 307


 11044      6F774465 
 11044      6C617965 
 11044      64546173 
 11045              	.LASF136:
 11046 062f 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 11046      6B506C61 
 11046      63654F6E 
 11046      4576656E 
 11046      744C6973 
 11047              	.LASF126:
 11048 0645 76546173 		.ascii	"vTaskDelay\000"
 11048      6B44656C 
 11048      617900
 11049              	.LASF47:
 11050 0650 756C4E6F 		.ascii	"ulNotifiedValue\000"
 11050      74696669 
 11050      65645661 
 11050      6C756500 
 11051              	.LASF143:
 11052 0660 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
 11052      6B52656D 
 11052      6F766546 
 11052      726F6D55 
 11052      6E6F7264 
 11053              	.LASF190:
 11054 0682 78546173 		.ascii	"xTasksWaitingTermination\000"
 11054      6B735761 
 11054      6974696E 
 11054      67546572 
 11054      6D696E61 
 11055              	.LASF141:
 11056 069b 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 11056      6B52656D 
 11056      6F766546 
 11056      726F6D45 
 11056      76656E74 
 11057              	.LASF15:
 11058 06b4 63686172 		.ascii	"char\000"
 11058      00
 11059              	.LASF34:
 11060 06b9 4C697374 		.ascii	"ListItem_t\000"
 11060      4974656D 
 11060      5F7400
 11061              	.LASF53:
 11062 06c4 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 11062      56616C75 
 11062      65576974 
 11062      686F7574 
 11062      4F766572 
 11063              	.LASF67:
 11064 06de 756C4E65 		.ascii	"ulNewBASEPRI\000"
 11064      77424153 
 11064      45505249 
 11064      00
 11065              	.LASF22:
 11066 06eb 55426173 		.ascii	"UBaseType_t\000"
 11066      65547970 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 308


 11066      655F7400 
 11067              	.LASF77:
 11068 06f7 756C5374 		.ascii	"ulStackDepth\000"
 11068      61636B44 
 11068      65707468 
 11068      00
 11069              	.LASF166:
 11070 0704 78546173 		.ascii	"xTaskGenericNotifyWait\000"
 11070      6B47656E 
 11070      65726963 
 11070      4E6F7469 
 11070      66795761 
 11071              	.LASF60:
 11072 071b 70764261 		.ascii	"pvBaseAddress\000"
 11072      73654164 
 11072      64726573 
 11072      7300
 11073              	.LASF181:
 11074 0729 7578496E 		.ascii	"uxIndexToClear\000"
 11074      64657854 
 11074      6F436C65 
 11074      617200
 11075              	.LASF125:
 11076 0738 7853686F 		.ascii	"xShouldDelay\000"
 11076      756C6444 
 11076      656C6179 
 11076      00
 11077              	.LASF86:
 11078 0745 70727649 		.ascii	"prvIdleTask\000"
 11078      646C6554 
 11078      61736B00 
 11079              	.LASF33:
 11080 0751 784C6973 		.ascii	"xListEnd\000"
 11080      74456E64 
 11080      00
 11081              	.LASF162:
 11082 075a 756C5461 		.ascii	"ulTaskGenericNotifyTake\000"
 11082      736B4765 
 11082      6E657269 
 11082      634E6F74 
 11082      69667954 
 11083              	.LASF139:
 11084 0772 76546173 		.ascii	"vTaskPlaceOnEventListRestricted\000"
 11084      6B506C61 
 11084      63654F6E 
 11084      4576656E 
 11084      744C6973 
 11085              	.LASF36:
 11086 0792 4D696E69 		.ascii	"MiniListItem_t\000"
 11086      4C697374 
 11086      4974656D 
 11086      5F7400
 11087              	.LASF94:
 11088 07a1 78546173 		.ascii	"xTaskCreate\000"
 11088      6B437265 
 11088      61746500 
 11089              	.LASF83:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 309


 11090 07ad 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 11090      64644E65 
 11090      77546173 
 11090      6B546F52 
 11090      65616479 
 11091              	.LASF16:
 11092 07c6 75696E74 		.ascii	"uint8_t\000"
 11092      385F7400 
 11093              	.LASF80:
 11094 07ce 70784E65 		.ascii	"pxNewTCB\000"
 11094      77544342 
 11094      00
 11095              	.LASF75:
 11096 07d7 70785461 		.ascii	"pxTaskCode\000"
 11096      736B436F 
 11096      646500
 11097              	.LASF130:
 11098 07e2 78596965 		.ascii	"xYieldOccurred\000"
 11098      6C644F63 
 11098      63757272 
 11098      656400
 11099              	.LASF63:
 11100 07f1 4D656D6F 		.ascii	"MemoryRegion_t\000"
 11100      72795265 
 11100      67696F6E 
 11100      5F7400
 11101              	.LASF201:
 11102 0800 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 11102      74546173 
 11102      6B556E62 
 11102      6C6F636B 
 11102      54696D65 
 11103              	.LASF220:
 11104 0815 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 11104      72745261 
 11104      69736542 
 11104      41534550 
 11104      524900
 11105              	.LASF206:
 11106 0828 7078506F 		.ascii	"pxPortInitialiseStack\000"
 11106      7274496E 
 11106      69746961 
 11106      6C697365 
 11106      53746163 
 11107              	.LASF1:
 11108 083e 6C6F6E67 		.ascii	"long long int\000"
 11108      206C6F6E 
 11108      6720696E 
 11108      7400
 11109              	.LASF165:
 11110 084c 756C5265 		.ascii	"ulReturn\000"
 11110      7475726E 
 11110      00
 11111              	.LASF182:
 11112 0855 756C5461 		.ascii	"ulTaskGenericNotifyValueClear\000"
 11112      736B4765 
 11112      6E657269 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 310


 11112      634E6F74 
 11112      69667956 
 11113              	.LASF61:
 11114 0873 756C4C65 		.ascii	"ulLengthInBytes\000"
 11114      6E677468 
 11114      496E4279 
 11114      74657300 
 11115              	.LASF21:
 11116 0883 42617365 		.ascii	"BaseType_t\000"
 11116      54797065 
 11116      5F7400
 11117              	.LASF222:
 11118 088e 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 11118      65736574 
 11118      4E657874 
 11118      5461736B 
 11118      556E626C 
 11119              	.LASF57:
 11120 08aa 7854696D 		.ascii	"xTimeOnEntering\000"
 11120      654F6E45 
 11120      6E746572 
 11120      696E6700 
 11121              	.LASF101:
 11122 08ba 75784E65 		.ascii	"uxNewPriority\000"
 11122      77507269 
 11122      6F726974 
 11122      7900
 11123              	.LASF19:
 11124 08c8 5461736B 		.ascii	"TaskFunction_t\000"
 11124      46756E63 
 11124      74696F6E 
 11124      5F7400
 11125              	.LASF25:
 11126 08d7 70784E65 		.ascii	"pxNext\000"
 11126      787400
 11127              	.LASF175:
 11128 08de 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 11128      72657669 
 11128      6F75734E 
 11128      6F746966 
 11128      69636174 
 11129              	.LASF146:
 11130 08fb 70785469 		.ascii	"pxTimeOut\000"
 11130      6D654F75 
 11130      7400
 11131              	.LASF127:
 11132 0905 78546963 		.ascii	"xTicksToDelay\000"
 11132      6B73546F 
 11132      44656C61 
 11132      7900
 11133              	.LASF97:
 11134 0913 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 11134      736B5072 
 11134      696F7269 
 11134      74794765 
 11134      7446726F 
 11135              	.LASF111:
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 311


 11136 092c 78546173 		.ascii	"xTaskGetTickCount\000"
 11136      6B476574 
 11136      5469636B 
 11136      436F756E 
 11136      7400
 11137              	.LASF58:
 11138 093e 54696D65 		.ascii	"TimeOut_t\000"
 11138      4F75745F 
 11138      7400
 11139              	.LASF147:
 11140 0948 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 11140      6B496E74 
 11140      65726E61 
 11140      6C536574 
 11140      54696D65 
 11141              	.LASF200:
 11142 0965 75785461 		.ascii	"uxTaskNumber\000"
 11142      736B4E75 
 11142      6D626572 
 11142      00
 11143              	.LASF38:
 11144 0972 5461736B 		.ascii	"TaskHandle_t\000"
 11144      48616E64 
 11144      6C655F74 
 11144      00
 11145              	.LASF174:
 11146 097f 65416374 		.ascii	"eAction\000"
 11146      696F6E00 
 11147              	.LASF221:
 11148 0987 756C4E65 		.ascii	"ulNewMaskValue\000"
 11148      774D6173 
 11148      6B56616C 
 11148      756500
 11149              	.LASF161:
 11150 0996 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 11150      736B5265 
 11150      73657445 
 11150      76656E74 
 11150      4974656D 
 11151              	.LASF100:
 11152 09b0 76546173 		.ascii	"vTaskPrioritySet\000"
 11152      6B507269 
 11152      6F726974 
 11152      79536574 
 11152      00
 11153              	.LASF37:
 11154 09c1 4C697374 		.ascii	"List_t\000"
 11154      5F7400
 11155              	.LASF115:
 11156 09c8 78546173 		.ascii	"xTaskToQuery\000"
 11156      6B546F51 
 11156      75657279 
 11156      00
 11157              	.LASF23:
 11158 09d5 5469636B 		.ascii	"TickType_t\000"
 11158      54797065 
 11158      5F7400
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 312


 11159              	.LASF171:
 11160 09e0 78546173 		.ascii	"xTaskToNotify\000"
 11160      6B546F4E 
 11160      6F746966 
 11160      7900
 11161              	.LASF72:
 11162 09ee 78546173 		.ascii	"xTask\000"
 11162      6B00
 11163              	.LASF50:
 11164 09f4 65536574 		.ascii	"eSetBits\000"
 11164      42697473 
 11164      00
 11165              	.LASF2:
 11166 09fd 6C6F6E67 		.ascii	"long double\000"
 11166      20646F75 
 11166      626C6500 
 11167              	.LASF176:
 11168 0a09 75634F72 		.ascii	"ucOriginalNotifyState\000"
 11168      6967696E 
 11168      616C4E6F 
 11168      74696679 
 11168      53746174 
 11169              	.LASF59:
 11170 0a1f 784D454D 		.ascii	"xMEMORY_REGION\000"
 11170      4F52595F 
 11170      52454749 
 11170      4F4E00
 11171              	.LASF17:
 11172 0a2e 75696E74 		.ascii	"uint16_t\000"
 11172      31365F74 
 11172      00
 11173              	.LASF99:
 11174 0a37 76546173 		.ascii	"vTaskDelete\000"
 11174      6B44656C 
 11174      65746500 
 11175              	.LASF131:
 11176 0a43 76546173 		.ascii	"vTaskSwitchContext\000"
 11176      6B537769 
 11176      74636843 
 11176      6F6E7465 
 11176      787400
 11177              	.LASF199:
 11178 0a56 784E756D 		.ascii	"xNumOfOverflows\000"
 11178      4F664F76 
 11178      6572666C 
 11178      6F777300 
 11179              	.LASF202:
 11180 0a66 7849646C 		.ascii	"xIdleTaskHandle\000"
 11180      65546173 
 11180      6B48616E 
 11180      646C6500 
 11181              	.LASF7:
 11182 0a76 73686F72 		.ascii	"short int\000"
 11182      7420696E 
 11182      7400
 11183              	.LASF205:
 11184 0a80 764C6973 		.ascii	"vListInitialiseItem\000"
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 313


 11184      74496E69 
 11184      7469616C 
 11184      69736549 
 11184      74656D00 
 11185              	.LASF78:
 11186 0a94 70765061 		.ascii	"pvParameters\000"
 11186      72616D65 
 11186      74657273 
 11186      00
 11187              	.LASF24:
 11188 0aa1 78497465 		.ascii	"xItemValue\000"
 11188      6D56616C 
 11188      756500
 11189              	.LASF10:
 11190 0aac 6C6F6E67 		.ascii	"long int\000"
 11190      20696E74 
 11190      00
 11191              	.LASF119:
 11192 0ab5 78546173 		.ascii	"xTaskResumeAll\000"
 11192      6B526573 
 11192      756D6541 
 11192      6C6C00
 11193              	.LASF187:
 11194 0ac4 70784465 		.ascii	"pxDelayedTaskList\000"
 11194      6C617965 
 11194      64546173 
 11194      6B4C6973 
 11194      7400
 11195              	.LASF85:
 11196 0ad6 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 11196      61736B49 
 11196      73546173 
 11196      6B537573 
 11196      70656E64 
 11197              	.LASF117:
 11198 0aed 78537769 		.ascii	"xSwitchRequired\000"
 11198      74636852 
 11198      65717569 
 11198      72656400 
 11199              	.LASF44:
 11200 0afd 70785374 		.ascii	"pxStack\000"
 11200      61636B00 
 11201              	.LASF93:
 11202 0b05 78546173 		.ascii	"xTaskToDelete\000"
 11202      6B546F44 
 11202      656C6574 
 11202      6500
 11203              	.LASF173:
 11204 0b13 756C5661 		.ascii	"ulValue\000"
 11204      6C756500 
 11205              	.LASF135:
 11206 0b1b 78546173 		.ascii	"xTaskToSuspend\000"
 11206      6B546F53 
 11206      75737065 
 11206      6E6400
 11207              	.LASF148:
 11208 0b2a 78546173 		.ascii	"xTaskCheckForTimeOut\000"
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 314


 11208      6B436865 
 11208      636B466F 
 11208      7254696D 
 11208      654F7574 
 11209              	.LASF216:
 11210 0b3f 76506F72 		.ascii	"vPortEndScheduler\000"
 11210      74456E64 
 11210      53636865 
 11210      64756C65 
 11210      7200
 11211              	.LASF204:
 11212 0b51 76506F72 		.ascii	"vPortFree\000"
 11212      74467265 
 11212      6500
 11213              	.LASF123:
 11214 0b5b 70785072 		.ascii	"pxPreviousWakeTime\000"
 11214      6576696F 
 11214      75735761 
 11214      6B655469 
 11214      6D6500
 11215              	.LASF5:
 11216 0b6e 5F5F7569 		.ascii	"__uint8_t\000"
 11216      6E74385F 
 11216      7400
 11217              	.LASF155:
 11218 0b78 78496E64 		.ascii	"xIndex\000"
 11218      657800
 11219              	.LASF169:
 11220 0b7f 70756C4E 		.ascii	"pulNotificationValue\000"
 11220      6F746966 
 11220      69636174 
 11220      696F6E56 
 11220      616C7565 
 11221              	.LASF70:
 11222 0b94 78526574 		.ascii	"xReturn\000"
 11222      75726E00 
 11223              	.LASF14:
 11224 0b9c 73697A65 		.ascii	"sizetype\000"
 11224      74797065 
 11224      00
 11225              	.LASF152:
 11226 0ba5 76546173 		.ascii	"vTaskMissedYield\000"
 11226      6B4D6973 
 11226      73656459 
 11226      69656C64 
 11226      00
 11227              	.LASF12:
 11228 0bb6 6C6F6E67 		.ascii	"long unsigned int\000"
 11228      20756E73 
 11228      69676E65 
 11228      6420696E 
 11228      7400
 11229              	.LASF69:
 11230 0bc8 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 11230      74526169 
 11230      73654241 
 11230      53455052 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 315


 11230      4900
 11231              	.LASF114:
 11232 0bda 70635461 		.ascii	"pcTaskGetName\000"
 11232      736B4765 
 11232      744E616D 
 11232      6500
 11233              	.LASF112:
 11234 0be8 78546963 		.ascii	"xTicks\000"
 11234      6B7300
 11235              	.LASF109:
 11236 0bef 76546173 		.ascii	"vTaskStartScheduler\000"
 11236      6B537461 
 11236      72745363 
 11236      68656475 
 11236      6C657200 
 11237              	.LASF89:
 11238 0c03 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 11238      426C6F63 
 11238      6B496E64 
 11238      6566696E 
 11238      6974656C 
 11239              	.LASF157:
 11240 0c19 70765461 		.ascii	"pvTaskGetThreadLocalStoragePointer\000"
 11240      736B4765 
 11240      74546872 
 11240      6561644C 
 11240      6F63616C 
 11241              	.LASF28:
 11242 0c3c 7078436F 		.ascii	"pxContainer\000"
 11242      6E746169 
 11242      6E657200 
 11243              	.LASF118:
 11244 0c48 70785465 		.ascii	"pxTemp\000"
 11244      6D7000
 11245              	.LASF179:
 11246 0c4f 76546173 		.ascii	"vTaskGenericNotifyGiveFromISR\000"
 11246      6B47656E 
 11246      65726963 
 11246      4E6F7469 
 11246      66794769 
 11247              	.LASF6:
 11248 0c6d 756E7369 		.ascii	"unsigned char\000"
 11248      676E6564 
 11248      20636861 
 11248      7200
 11249              	.LASF138:
 11250 0c7b 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 11250      6B506C61 
 11250      63654F6E 
 11250      556E6F72 
 11250      64657265 
 11251              	.LASF11:
 11252 0c9a 5F5F7569 		.ascii	"__uint32_t\000"
 11252      6E743332 
 11252      5F7400
 11253              	.LASF207:
 11254 0ca5 764C6973 		.ascii	"vListInitialise\000"
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 316


 11254      74496E69 
 11254      7469616C 
 11254      69736500 
 11255              	.LASF163:
 11256 0cb5 7578496E 		.ascii	"uxIndexToWait\000"
 11256      64657854 
 11256      6F576169 
 11256      7400
 11257              	.LASF149:
 11258 0cc3 70785469 		.ascii	"pxTicksToWait\000"
 11258      636B7354 
 11258      6F576169 
 11258      7400
 11259              	.LASF212:
 11260 0cd1 764C6973 		.ascii	"vListInsert\000"
 11260      74496E73 
 11260      65727400 
 11261              	.LASF132:
 11262 0cdd 7578546F 		.ascii	"uxTopPriority\000"
 11262      70507269 
 11262      6F726974 
 11262      7900
 11263              	.LASF122:
 11264 0ceb 76546173 		.ascii	"vTaskDelayUntil\000"
 11264      6B44656C 
 11264      6179556E 
 11264      74696C00 
 11265              	.LASF42:
 11266 0cfb 78457665 		.ascii	"xEventListItem\000"
 11266      6E744C69 
 11266      73744974 
 11266      656D00
 11267              	.LASF103:
 11268 0d0a 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 11268      696F7269 
 11268      74795573 
 11268      65644F6E 
 11268      456E7472 
 11269              	.LASF65:
 11270 0d20 5443425F 		.ascii	"TCB_t\000"
 11270      7400
 11271              	.LASF172:
 11272 0d26 7578496E 		.ascii	"uxIndexToNotify\000"
 11272      64657854 
 11272      6F4E6F74 
 11272      69667900 
 11273              	.LASF88:
 11274 0d36 78546963 		.ascii	"xTicksToWait\000"
 11274      6B73546F 
 11274      57616974 
 11274      00
 11275              	.LASF27:
 11276 0d43 70764F77 		.ascii	"pvOwner\000"
 11276      6E657200 
 11277              	.LASF73:
 11278 0d4b 70727644 		.ascii	"prvDeleteTCB\000"
 11278      656C6574 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 317


 11278      65544342 
 11278      00
 11279              	.LASF134:
 11280 0d58 76546173 		.ascii	"vTaskSuspend\000"
 11280      6B537573 
 11280      70656E64 
 11280      00
 11281              	.LASF120:
 11282 0d65 78416C72 		.ascii	"xAlreadyYielded\000"
 11282      65616479 
 11282      5969656C 
 11282      64656400 
 11283              	.LASF159:
 11284 0d75 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 11284      6B476574 
 11284      43757272 
 11284      656E7454 
 11284      61736B48 
 11285              	.LASF197:
 11286 0d8f 7850656E 		.ascii	"xPendedTicks\000"
 11286      64656454 
 11286      69636B73 
 11286      00
 11287              	.LASF129:
 11288 0d9c 78546963 		.ascii	"xTicksToCatchUp\000"
 11288      6B73546F 
 11288      43617463 
 11288      68557000 
 11289              	.LASF81:
 11290 0dac 78526567 		.ascii	"xRegions\000"
 11290      696F6E73 
 11290      00
 11291              	.LASF87:
 11292 0db5 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 11292      64644375 
 11292      7272656E 
 11292      74546173 
 11292      6B546F44 
 11293              	.LASF224:
 11294 0dd4 70784375 		.ascii	"pxCurrentTCB\000"
 11294      7272656E 
 11294      74544342 
 11294      00
 11295              	.LASF193:
 11296 0de1 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 11296      7272656E 
 11296      744E756D 
 11296      6265724F 
 11296      66546173 
 11297              	.LASF124:
 11298 0df8 7854696D 		.ascii	"xTimeIncrement\000"
 11298      65496E63 
 11298      72656D65 
 11298      6E7400
 11299              	.LASF3:
 11300 0e07 7369676E 		.ascii	"signed char\000"
 11300      65642063 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 318


 11300      68617200 
 11301              	.LASF9:
 11302 0e13 73686F72 		.ascii	"short unsigned int\000"
 11302      7420756E 
 11302      7369676E 
 11302      65642069 
 11302      6E7400
 11303              	.LASF90:
 11304 0e26 7854696D 		.ascii	"xTimeToWake\000"
 11304      65546F57 
 11304      616B6500 
 11305              	.LASF41:
 11306 0e32 78537461 		.ascii	"xStateListItem\000"
 11306      74654C69 
 11306      73744974 
 11306      656D00
 11307              	.LASF71:
 11308 0e41 70785443 		.ascii	"pxTCB\000"
 11308      4200
 11309              	.LASF180:
 11310 0e47 78546173 		.ascii	"xTaskGenericNotifyStateClear\000"
 11310      6B47656E 
 11310      65726963 
 11310      4E6F7469 
 11310      66795374 
 11311              	.LASF203:
 11312 0e64 75785363 		.ascii	"uxSchedulerSuspended\000"
 11312      68656475 
 11312      6C657253 
 11312      75737065 
 11312      6E646564 
 11313              	.LASF40:
 11314 0e79 7078546F 		.ascii	"pxTopOfStack\000"
 11314      704F6653 
 11314      7461636B 
 11314      00
 11315              	.LASF105:
 11316 0e86 76546173 		.ascii	"vTaskResume\000"
 11316      6B526573 
 11316      756D6500 
 11317              	.LASF82:
 11318 0e92 70727649 		.ascii	"prvInitialiseTaskLists\000"
 11318      6E697469 
 11318      616C6973 
 11318      65546173 
 11318      6B4C6973 
 11319              	.LASF144:
 11320 0ea9 70784576 		.ascii	"pxEventListItem\000"
 11320      656E744C 
 11320      69737449 
 11320      74656D00 
 11321              	.LASF156:
 11322 0eb9 70765661 		.ascii	"pvValue\000"
 11322      6C756500 
 11323              	.LASF79:
 11324 0ec1 70784372 		.ascii	"pxCreatedTask\000"
 11324      65617465 
ARM GAS  C:\Users\u0036181\AppData\Local\Temp\ccwtaoPf.s 			page 319


 11324      64546173 
 11324      6B00
 11325              	.LASF84:
 11326 0ecf 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 11326      6865636B 
 11326      5461736B 
 11326      73576169 
 11326      74696E67 
 11327              	.LASF102:
 11328 0eef 75784375 		.ascii	"uxCurrentBasePriority\000"
 11328      7272656E 
 11328      74426173 
 11328      65507269 
 11328      6F726974 
 11329              	.LASF198:
 11330 0f05 78596965 		.ascii	"xYieldPending\000"
 11330      6C645065 
 11330      6E64696E 
 11330      6700
 11331              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
