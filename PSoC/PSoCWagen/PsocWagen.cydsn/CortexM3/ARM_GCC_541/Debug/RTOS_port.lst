ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"RTOS_port.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskExitError,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	prvTaskExitError, %function
  24              	prvTaskExitError:
  25              	.LFB68:
  26              		.file 1 "Generated_Source\\PSoC5\\RTOS_port.c"
   1:Generated_Source\PSoC5/RTOS_port.c **** /*
   2:Generated_Source\PSoC5/RTOS_port.c ****  * FreeRTOS Kernel V10.4.0
   3:Generated_Source\PSoC5/RTOS_port.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Generated_Source\PSoC5/RTOS_port.c ****  *
   5:Generated_Source\PSoC5/RTOS_port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Generated_Source\PSoC5/RTOS_port.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Generated_Source\PSoC5/RTOS_port.c ****  * the Software without restriction, including without limitation the rights to
   8:Generated_Source\PSoC5/RTOS_port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Generated_Source\PSoC5/RTOS_port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Generated_Source\PSoC5/RTOS_port.c ****  * subject to the following conditions:
  11:Generated_Source\PSoC5/RTOS_port.c ****  *
  12:Generated_Source\PSoC5/RTOS_port.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Generated_Source\PSoC5/RTOS_port.c ****  * copies or substantial portions of the Software.
  14:Generated_Source\PSoC5/RTOS_port.c ****  *
  15:Generated_Source\PSoC5/RTOS_port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Generated_Source\PSoC5/RTOS_port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Generated_Source\PSoC5/RTOS_port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Generated_Source\PSoC5/RTOS_port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Generated_Source\PSoC5/RTOS_port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Generated_Source\PSoC5/RTOS_port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Generated_Source\PSoC5/RTOS_port.c ****  *
  22:Generated_Source\PSoC5/RTOS_port.c ****  * https://www.FreeRTOS.org
  23:Generated_Source\PSoC5/RTOS_port.c ****  * https://github.com/FreeRTOS
  24:Generated_Source\PSoC5/RTOS_port.c ****  *
  25:Generated_Source\PSoC5/RTOS_port.c ****  */
  26:Generated_Source\PSoC5/RTOS_port.c **** 
  27:Generated_Source\PSoC5/RTOS_port.c **** /*-----------------------------------------------------------
  28:Generated_Source\PSoC5/RTOS_port.c **** * Implementation of functions defined in portable.h for the ARM CM3 port.
  29:Generated_Source\PSoC5/RTOS_port.c **** *----------------------------------------------------------*/
  30:Generated_Source\PSoC5/RTOS_port.c **** 
  31:Generated_Source\PSoC5/RTOS_port.c **** /* Scheduler includes. */
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 2


  32:Generated_Source\PSoC5/RTOS_port.c **** #include "RTOS_FreeRTOS.h"
  33:Generated_Source\PSoC5/RTOS_port.c **** 
  34:Generated_Source\PSoC5/RTOS_port.c **** #include "task.h"
  35:Generated_Source\PSoC5/RTOS_port.c **** 
  36:Generated_Source\PSoC5/RTOS_port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  37:Generated_Source\PSoC5/RTOS_port.c ****  * defined.  The value should also ensure backward compatibility.
  38:Generated_Source\PSoC5/RTOS_port.c ****  * FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  39:Generated_Source\PSoC5/RTOS_port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  40:Generated_Source\PSoC5/RTOS_port.c ****     #define configKERNEL_INTERRUPT_PRIORITY    255
  41:Generated_Source\PSoC5/RTOS_port.c **** #endif
  42:Generated_Source\PSoC5/RTOS_port.c **** 
  43:Generated_Source\PSoC5/RTOS_port.c **** #ifndef configSYSTICK_CLOCK_HZ
  44:Generated_Source\PSoC5/RTOS_port.c ****     #define configSYSTICK_CLOCK_HZ      configCPU_CLOCK_HZ
  45:Generated_Source\PSoC5/RTOS_port.c ****     /* Ensure the SysTick is clocked at the same frequency as the core. */
  46:Generated_Source\PSoC5/RTOS_port.c ****     #define portNVIC_SYSTICK_CLK_BIT    ( 1UL << 2UL )
  47:Generated_Source\PSoC5/RTOS_port.c **** #else
  48:Generated_Source\PSoC5/RTOS_port.c **** 
  49:Generated_Source\PSoC5/RTOS_port.c **** /* The way the SysTick is clocked is not modified in case it is not the same
  50:Generated_Source\PSoC5/RTOS_port.c ****  * as the core. */
  51:Generated_Source\PSoC5/RTOS_port.c ****     #define portNVIC_SYSTICK_CLK_BIT    ( 0 )
  52:Generated_Source\PSoC5/RTOS_port.c **** #endif
  53:Generated_Source\PSoC5/RTOS_port.c **** 
  54:Generated_Source\PSoC5/RTOS_port.c **** /* Constants required to manipulate the core.  Registers first... */
  55:Generated_Source\PSoC5/RTOS_port.c **** #define portNVIC_SYSTICK_CTRL_REG             ( *( ( volatile uint32_t * ) 0xe000e010 ) )
  56:Generated_Source\PSoC5/RTOS_port.c **** #define portNVIC_SYSTICK_LOAD_REG             ( *( ( volatile uint32_t * ) 0xe000e014 ) )
  57:Generated_Source\PSoC5/RTOS_port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG    ( *( ( volatile uint32_t * ) 0xe000e018 ) )
  58:Generated_Source\PSoC5/RTOS_port.c **** #define portNVIC_SHPR3_REG                    ( *( ( volatile uint32_t * ) 0xe000ed20 ) )
  59:Generated_Source\PSoC5/RTOS_port.c **** /* ...then bits in the registers. */
  60:Generated_Source\PSoC5/RTOS_port.c **** #define portNVIC_SYSTICK_INT_BIT              ( 1UL << 1UL )
  61:Generated_Source\PSoC5/RTOS_port.c **** #define portNVIC_SYSTICK_ENABLE_BIT           ( 1UL << 0UL )
  62:Generated_Source\PSoC5/RTOS_port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT       ( 1UL << 16UL )
  63:Generated_Source\PSoC5/RTOS_port.c **** #define portNVIC_PENDSVCLEAR_BIT              ( 1UL << 27UL )
  64:Generated_Source\PSoC5/RTOS_port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT       ( 1UL << 25UL )
  65:Generated_Source\PSoC5/RTOS_port.c **** 
  66:Generated_Source\PSoC5/RTOS_port.c **** #define portNVIC_PENDSV_PRI                   ( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) <<
  67:Generated_Source\PSoC5/RTOS_port.c **** #define portNVIC_SYSTICK_PRI                  ( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) <<
  68:Generated_Source\PSoC5/RTOS_port.c **** 
  69:Generated_Source\PSoC5/RTOS_port.c **** /* Constants required to check the validity of an interrupt priority. */
  70:Generated_Source\PSoC5/RTOS_port.c **** #define portFIRST_USER_INTERRUPT_NUMBER       ( 16 )
  71:Generated_Source\PSoC5/RTOS_port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16       ( 0xE000E3F0 )
  72:Generated_Source\PSoC5/RTOS_port.c **** #define portAIRCR_REG                         ( *( ( volatile uint32_t * ) 0xE000ED0C ) )
  73:Generated_Source\PSoC5/RTOS_port.c **** #define portMAX_8_BIT_VALUE                   ( ( uint8_t ) 0xff )
  74:Generated_Source\PSoC5/RTOS_port.c **** #define portTOP_BIT_OF_BYTE                   ( ( uint8_t ) 0x80 )
  75:Generated_Source\PSoC5/RTOS_port.c **** #define portMAX_PRIGROUP_BITS                 ( ( uint8_t ) 7 )
  76:Generated_Source\PSoC5/RTOS_port.c **** #define portPRIORITY_GROUP_MASK               ( 0x07UL << 8UL )
  77:Generated_Source\PSoC5/RTOS_port.c **** #define portPRIGROUP_SHIFT                    ( 8UL )
  78:Generated_Source\PSoC5/RTOS_port.c **** 
  79:Generated_Source\PSoC5/RTOS_port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  80:Generated_Source\PSoC5/RTOS_port.c **** #define portVECTACTIVE_MASK                   ( 0xFFUL )
  81:Generated_Source\PSoC5/RTOS_port.c **** 
  82:Generated_Source\PSoC5/RTOS_port.c **** /* Constants required to set up the initial stack. */
  83:Generated_Source\PSoC5/RTOS_port.c **** #define portINITIAL_XPSR                      ( 0x01000000UL )
  84:Generated_Source\PSoC5/RTOS_port.c **** 
  85:Generated_Source\PSoC5/RTOS_port.c **** /* The systick is a 24-bit counter. */
  86:Generated_Source\PSoC5/RTOS_port.c **** #define portMAX_24_BIT_NUMBER                 ( 0xffffffUL )
  87:Generated_Source\PSoC5/RTOS_port.c **** 
  88:Generated_Source\PSoC5/RTOS_port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 3


  89:Generated_Source\PSoC5/RTOS_port.c ****  * occurred while the SysTick counter is stopped during tickless idle
  90:Generated_Source\PSoC5/RTOS_port.c ****  * calculations. */
  91:Generated_Source\PSoC5/RTOS_port.c **** #define portMISSED_COUNTS_FACTOR              ( 45UL )
  92:Generated_Source\PSoC5/RTOS_port.c **** 
  93:Generated_Source\PSoC5/RTOS_port.c **** /* For strict compliance with the Cortex-M spec the task start address should
  94:Generated_Source\PSoC5/RTOS_port.c ****  * have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
  95:Generated_Source\PSoC5/RTOS_port.c **** #define portSTART_ADDRESS_MASK                ( ( StackType_t ) 0xfffffffeUL )
  96:Generated_Source\PSoC5/RTOS_port.c **** 
  97:Generated_Source\PSoC5/RTOS_port.c **** /* Let the user override the pre-loading of the initial LR with the address of
  98:Generated_Source\PSoC5/RTOS_port.c ****  * prvTaskExitError() in case it messes up unwinding of the stack in the
  99:Generated_Source\PSoC5/RTOS_port.c ****  * debugger. */
 100:Generated_Source\PSoC5/RTOS_port.c **** #ifdef configTASK_RETURN_ADDRESS
 101:Generated_Source\PSoC5/RTOS_port.c ****     #define portTASK_RETURN_ADDRESS    configTASK_RETURN_ADDRESS
 102:Generated_Source\PSoC5/RTOS_port.c **** #else
 103:Generated_Source\PSoC5/RTOS_port.c ****     #define portTASK_RETURN_ADDRESS    prvTaskExitError
 104:Generated_Source\PSoC5/RTOS_port.c **** #endif
 105:Generated_Source\PSoC5/RTOS_port.c **** 
 106:Generated_Source\PSoC5/RTOS_port.c **** /*
 107:Generated_Source\PSoC5/RTOS_port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 108:Generated_Source\PSoC5/RTOS_port.c ****  * file is weak to allow application writers to change the timer used to
 109:Generated_Source\PSoC5/RTOS_port.c ****  * generate the tick interrupt.
 110:Generated_Source\PSoC5/RTOS_port.c ****  */
 111:Generated_Source\PSoC5/RTOS_port.c **** void vPortSetupTimerInterrupt( void );
 112:Generated_Source\PSoC5/RTOS_port.c **** 
 113:Generated_Source\PSoC5/RTOS_port.c **** /*
 114:Generated_Source\PSoC5/RTOS_port.c ****  * Exception handlers.
 115:Generated_Source\PSoC5/RTOS_port.c ****  */
 116:Generated_Source\PSoC5/RTOS_port.c **** void xPortPendSVHandler( void ) __attribute__( ( naked ) );
 117:Generated_Source\PSoC5/RTOS_port.c **** void xPortSysTickHandler( void );
 118:Generated_Source\PSoC5/RTOS_port.c **** void vPortSVCHandler( void ) __attribute__( ( naked ) );
 119:Generated_Source\PSoC5/RTOS_port.c **** 
 120:Generated_Source\PSoC5/RTOS_port.c **** /*
 121:Generated_Source\PSoC5/RTOS_port.c ****  * Start first task is a separate function so it can be tested in isolation.
 122:Generated_Source\PSoC5/RTOS_port.c ****  */
 123:Generated_Source\PSoC5/RTOS_port.c **** static void prvPortStartFirstTask( void ) __attribute__( ( naked ) );
 124:Generated_Source\PSoC5/RTOS_port.c **** 
 125:Generated_Source\PSoC5/RTOS_port.c **** /*
 126:Generated_Source\PSoC5/RTOS_port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 127:Generated_Source\PSoC5/RTOS_port.c ****  */
 128:Generated_Source\PSoC5/RTOS_port.c **** static void prvTaskExitError( void );
 129:Generated_Source\PSoC5/RTOS_port.c **** 
 130:Generated_Source\PSoC5/RTOS_port.c **** /*-----------------------------------------------------------*/
 131:Generated_Source\PSoC5/RTOS_port.c **** 
 132:Generated_Source\PSoC5/RTOS_port.c **** /* Each task maintains its own interrupt status in the critical nesting
 133:Generated_Source\PSoC5/RTOS_port.c ****  * variable. */
 134:Generated_Source\PSoC5/RTOS_port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 135:Generated_Source\PSoC5/RTOS_port.c **** 
 136:Generated_Source\PSoC5/RTOS_port.c **** /*
 137:Generated_Source\PSoC5/RTOS_port.c ****  * The number of SysTick increments that make up one tick period.
 138:Generated_Source\PSoC5/RTOS_port.c ****  */
 139:Generated_Source\PSoC5/RTOS_port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 140:Generated_Source\PSoC5/RTOS_port.c ****     static uint32_t ulTimerCountsForOneTick = 0;
 141:Generated_Source\PSoC5/RTOS_port.c **** #endif /* configUSE_TICKLESS_IDLE */
 142:Generated_Source\PSoC5/RTOS_port.c **** 
 143:Generated_Source\PSoC5/RTOS_port.c **** /*
 144:Generated_Source\PSoC5/RTOS_port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 145:Generated_Source\PSoC5/RTOS_port.c ****  * 24 bit resolution of the SysTick timer.
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 4


 146:Generated_Source\PSoC5/RTOS_port.c ****  */
 147:Generated_Source\PSoC5/RTOS_port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 148:Generated_Source\PSoC5/RTOS_port.c ****     static uint32_t xMaximumPossibleSuppressedTicks = 0;
 149:Generated_Source\PSoC5/RTOS_port.c **** #endif /* configUSE_TICKLESS_IDLE */
 150:Generated_Source\PSoC5/RTOS_port.c **** 
 151:Generated_Source\PSoC5/RTOS_port.c **** /*
 152:Generated_Source\PSoC5/RTOS_port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 153:Generated_Source\PSoC5/RTOS_port.c ****  * power functionality only.
 154:Generated_Source\PSoC5/RTOS_port.c ****  */
 155:Generated_Source\PSoC5/RTOS_port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 156:Generated_Source\PSoC5/RTOS_port.c ****     static uint32_t ulStoppedTimerCompensation = 0;
 157:Generated_Source\PSoC5/RTOS_port.c **** #endif /* configUSE_TICKLESS_IDLE */
 158:Generated_Source\PSoC5/RTOS_port.c **** 
 159:Generated_Source\PSoC5/RTOS_port.c **** /*
 160:Generated_Source\PSoC5/RTOS_port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 161:Generated_Source\PSoC5/RTOS_port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 162:Generated_Source\PSoC5/RTOS_port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 163:Generated_Source\PSoC5/RTOS_port.c ****  */
 164:Generated_Source\PSoC5/RTOS_port.c **** #if ( configASSERT_DEFINED == 1 )
 165:Generated_Source\PSoC5/RTOS_port.c ****     static uint8_t ucMaxSysCallPriority = 0;
 166:Generated_Source\PSoC5/RTOS_port.c ****     static uint32_t ulMaxPRIGROUPValue = 0;
 167:Generated_Source\PSoC5/RTOS_port.c ****     static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t *
 168:Generated_Source\PSoC5/RTOS_port.c **** #endif /* configASSERT_DEFINED */
 169:Generated_Source\PSoC5/RTOS_port.c **** 
 170:Generated_Source\PSoC5/RTOS_port.c **** /*-----------------------------------------------------------*/
 171:Generated_Source\PSoC5/RTOS_port.c **** 
 172:Generated_Source\PSoC5/RTOS_port.c **** /*
 173:Generated_Source\PSoC5/RTOS_port.c ****  * See header file for description.
 174:Generated_Source\PSoC5/RTOS_port.c ****  */
 175:Generated_Source\PSoC5/RTOS_port.c **** StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
 176:Generated_Source\PSoC5/RTOS_port.c ****                                      TaskFunction_t pxCode,
 177:Generated_Source\PSoC5/RTOS_port.c ****                                      void * pvParameters )
 178:Generated_Source\PSoC5/RTOS_port.c **** {
 179:Generated_Source\PSoC5/RTOS_port.c ****     /* Simulate the stack frame as it would be created by a context switch
 180:Generated_Source\PSoC5/RTOS_port.c ****      * interrupt. */
 181:Generated_Source\PSoC5/RTOS_port.c ****     pxTopOfStack--;                                                      /* Offset added to account
 182:Generated_Source\PSoC5/RTOS_port.c ****     *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 183:Generated_Source\PSoC5/RTOS_port.c ****     pxTopOfStack--;
 184:Generated_Source\PSoC5/RTOS_port.c ****     *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 185:Generated_Source\PSoC5/RTOS_port.c ****     pxTopOfStack--;
 186:Generated_Source\PSoC5/RTOS_port.c ****     *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 187:Generated_Source\PSoC5/RTOS_port.c ****     pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 188:Generated_Source\PSoC5/RTOS_port.c ****     *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 189:Generated_Source\PSoC5/RTOS_port.c ****     pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R
 190:Generated_Source\PSoC5/RTOS_port.c **** 
 191:Generated_Source\PSoC5/RTOS_port.c ****     return pxTopOfStack;
 192:Generated_Source\PSoC5/RTOS_port.c **** }
 193:Generated_Source\PSoC5/RTOS_port.c **** /*-----------------------------------------------------------*/
 194:Generated_Source\PSoC5/RTOS_port.c **** 
 195:Generated_Source\PSoC5/RTOS_port.c **** static void prvTaskExitError( void )
 196:Generated_Source\PSoC5/RTOS_port.c **** {
  27              		.loc 1 196 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 5


  33              		.cfi_def_cfa_offset 8
 197:Generated_Source\PSoC5/RTOS_port.c ****     volatile uint32_t ulDummy = 0UL;
  34              		.loc 1 197 0
  35 0002 0023     		movs	r3, #0
  36 0004 0193     		str	r3, [sp, #4]
  37              	.LBB12:
  38              	.LBB13:
  39              		.file 2 "g:\\project\\psocwagen\\psoc\\ucll_koen_lib.cylib\\myfreertos\\source\\portable\\gcc\\arm
   1:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /*
   2:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * FreeRTOS Kernel V10.4.0
   3:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  *
   5:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * subject to the following conditions:
  11:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  *
  12:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * copies or substantial portions of the Software.
  14:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  *
  15:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  *
  22:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * https://www.FreeRTOS.org
  23:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * https://github.com/FreeRTOS
  24:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  *
  25:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * 1 tab == 4 spaces!
  26:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  */
  27:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
  28:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
  29:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** #ifndef PORTMACRO_H
  30:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define PORTMACRO_H
  31:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
  32:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #ifdef __cplusplus
  33:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         extern "C" {
  34:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #endif
  35:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
  36:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /*-----------------------------------------------------------
  37:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * Port specific definitions.
  38:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  *
  39:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * given hardware and compiler.
  41:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  *
  42:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * These settings should not be altered.
  43:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  *-----------------------------------------------------------
  44:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  */
  45:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
  46:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /* Type definitions. */
  47:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portCHAR          char
  48:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portFLOAT         float
  49:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portDOUBLE        double
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 6


  50:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portLONG          long
  51:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portSHORT         short
  52:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portSTACK_TYPE    uint32_t
  53:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portBASE_TYPE     long
  54:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
  55:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  56:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     typedef long             BaseType_t;
  57:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     typedef unsigned long    UBaseType_t;
  58:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
  59:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  60:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         typedef uint16_t     TickType_t;
  61:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  62:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #else
  63:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         typedef uint32_t     TickType_t;
  64:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  65:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
  66:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * not need to be guarded with a critical section. */
  68:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  69:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #endif
  70:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /*-----------------------------------------------------------*/
  71:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
  72:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /* Architecture specifics. */
  73:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  74:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portBYTE_ALIGNMENT    8
  76:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  77:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /*-----------------------------------------------------------*/
  78:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
  79:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /* Scheduler utilities. */
  80:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portYIELD()                                 \
  81:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     {                                                   \
  82:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  83:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  84:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****                                                         \
  85:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  86:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****          * within the specified behaviour for the architecture. */ \
  87:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  88:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         __asm volatile ( "isb" );                                  \
  89:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     }
  90:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
  91:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  92:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  93:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    if( xSwitchRequired != pdFALSE ) portYIELD(
  94:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  95:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /*-----------------------------------------------------------*/
  96:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
  97:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /* Critical section management. */
  98:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     extern void vPortEnterCritical( void );
  99:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     extern void vPortExitCritical( void );
 100:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 101:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 102:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 103:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 104:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 105:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 106:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 7


 107:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /*-----------------------------------------------------------*/
 108:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 109:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 110:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 111:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****  * (which build with all the ports) will build. */
 112:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 113:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 114:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /*-----------------------------------------------------------*/
 115:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 116:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /* Tickless idle/low power functionality. */
 117:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 118:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 119:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 120:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #endif
 121:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /*-----------------------------------------------------------*/
 122:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 123:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /* Architecture specific optimisations. */
 124:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 125:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 126:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #endif
 127:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 128:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 129:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 130:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /* Generic helper function. */
 131:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 132:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         {
 133:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****             uint8_t ucReturn;
 134:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 135:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 136:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 137:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****             return ucReturn;
 138:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         }
 139:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 140:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /* Check the configuration. */
 141:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 142:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 143:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         #endif
 144:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 145:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 146:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 147:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 148:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 149:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /*-----------------------------------------------------------*/
 150:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 151:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 152:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 153:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 154:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 155:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /*-----------------------------------------------------------*/
 156:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 157:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #ifdef configASSERT
 158:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         void vPortValidateInterruptPriority( void );
 159:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 160:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #endif
 161:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 162:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /* portNOP() is not required by this port. */
 163:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portNOP()
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 8


 164:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 165:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #define portINLINE              __inline
 166:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 167:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #ifndef portFORCE_INLINE
 168:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 169:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     #endif
 170:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 171:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /*-----------------------------------------------------------*/
 172:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 173:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 174:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     {
 175:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         uint32_t ulCurrentInterrupt;
 176:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         BaseType_t xReturn;
 177:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 178:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 179:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 180:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 181:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         if( ulCurrentInterrupt == 0 )
 182:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         {
 183:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****             xReturn = pdFALSE;
 184:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         }
 185:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         else
 186:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         {
 187:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****             xReturn = pdTRUE;
 188:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         }
 189:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 190:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         return xReturn;
 191:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     }
 192:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 193:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /*-----------------------------------------------------------*/
 194:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 195:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 196:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     {
 197:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         uint32_t ulNewBASEPRI;
 198:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 199:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         __asm volatile
  40              		.loc 2 199 0
  41              		.syntax unified
  42              	@ 199 "g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmac
  43 0006 4FF00403 			mov r3, #4												
  44 000a 83F31188 		msr basepri, r3											
  45 000e BFF36F8F 		isb														
  46 0012 BFF34F8F 		dsb														
  47              	
  48              	@ 0 "" 2
  49              	.LVL0:
  50              		.thumb
  51              		.syntax unified
  52              	.L2:
  53              	.LBE13:
  54              	.LBE12:
 198:Generated_Source\PSoC5/RTOS_port.c **** 
 199:Generated_Source\PSoC5/RTOS_port.c ****     /* A function that implements a task must not exit or attempt to return to
 200:Generated_Source\PSoC5/RTOS_port.c ****      * its caller as there is nothing to return to.  If a task wants to exit it
 201:Generated_Source\PSoC5/RTOS_port.c ****      * should instead call vTaskDelete( NULL ).
 202:Generated_Source\PSoC5/RTOS_port.c ****      *
 203:Generated_Source\PSoC5/RTOS_port.c ****      * Artificially force an assert() to be triggered if configASSERT() is
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 9


 204:Generated_Source\PSoC5/RTOS_port.c ****      * defined, then stop here so application writers can catch the error. */
 205:Generated_Source\PSoC5/RTOS_port.c ****     configASSERT( uxCriticalNesting == ~0UL );
 206:Generated_Source\PSoC5/RTOS_port.c ****     portDISABLE_INTERRUPTS();
 207:Generated_Source\PSoC5/RTOS_port.c **** 
 208:Generated_Source\PSoC5/RTOS_port.c ****     while( ulDummy == 0 )
  55              		.loc 1 208 0 discriminator 1
  56 0016 019B     		ldr	r3, [sp, #4]
  57 0018 002B     		cmp	r3, #0
  58 001a FCD0     		beq	.L2
 209:Generated_Source\PSoC5/RTOS_port.c ****     {
 210:Generated_Source\PSoC5/RTOS_port.c ****         /* This file calls prvTaskExitError() after the scheduler has been
 211:Generated_Source\PSoC5/RTOS_port.c ****          * started to remove a compiler warning about the function being defined
 212:Generated_Source\PSoC5/RTOS_port.c ****          * but never called.  ulDummy is used purely to quieten other warnings
 213:Generated_Source\PSoC5/RTOS_port.c ****          * about code appearing after this function is called - making ulDummy
 214:Generated_Source\PSoC5/RTOS_port.c ****          * volatile makes the compiler think the function could return and
 215:Generated_Source\PSoC5/RTOS_port.c ****          * therefore not output an 'unreachable code' warning for code that appears
 216:Generated_Source\PSoC5/RTOS_port.c ****          * after it. */
 217:Generated_Source\PSoC5/RTOS_port.c ****     }
 218:Generated_Source\PSoC5/RTOS_port.c **** }
  59              		.loc 1 218 0
  60 001c 02B0     		add	sp, sp, #8
  61              		.cfi_def_cfa_offset 0
  62              		@ sp needed
  63 001e 7047     		bx	lr
  64              		.cfi_endproc
  65              	.LFE68:
  66              		.size	prvTaskExitError, .-prvTaskExitError
  67              		.section	.text.prvPortStartFirstTask,"ax",%progbits
  68              		.align	2
  69              		.thumb
  70              		.thumb_func
  71              		.type	prvPortStartFirstTask, %function
  72              	prvPortStartFirstTask:
  73              	.LFB70:
 219:Generated_Source\PSoC5/RTOS_port.c **** /*-----------------------------------------------------------*/
 220:Generated_Source\PSoC5/RTOS_port.c **** 
 221:Generated_Source\PSoC5/RTOS_port.c **** void vPortSVCHandler( void )
 222:Generated_Source\PSoC5/RTOS_port.c **** {
 223:Generated_Source\PSoC5/RTOS_port.c ****     __asm volatile (
 224:Generated_Source\PSoC5/RTOS_port.c ****         "	ldr	r3, pxCurrentTCBConst2		\n"/* Restore the context. */
 225:Generated_Source\PSoC5/RTOS_port.c ****         "	ldr r1, [r3]					\n"/* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 226:Generated_Source\PSoC5/RTOS_port.c ****         "	ldr r0, [r1]					\n"/* The first item in pxCurrentTCB is the task top of stack. */
 227:Generated_Source\PSoC5/RTOS_port.c ****         "	ldmia r0!, {r4-r11}				\n"/* Pop the registers that are not automatically saved on except
 228:Generated_Source\PSoC5/RTOS_port.c ****         "	msr psp, r0						\n"/* Restore the task stack pointer. */
 229:Generated_Source\PSoC5/RTOS_port.c ****         "	isb								\n"
 230:Generated_Source\PSoC5/RTOS_port.c ****         "	mov r0, #0 						\n"
 231:Generated_Source\PSoC5/RTOS_port.c ****         "	msr	basepri, r0					\n"
 232:Generated_Source\PSoC5/RTOS_port.c ****         "	orr r14, #0xd					\n"
 233:Generated_Source\PSoC5/RTOS_port.c ****         "	bx r14							\n"
 234:Generated_Source\PSoC5/RTOS_port.c ****         "									\n"
 235:Generated_Source\PSoC5/RTOS_port.c ****         "	.align 4						\n"
 236:Generated_Source\PSoC5/RTOS_port.c ****         "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 237:Generated_Source\PSoC5/RTOS_port.c ****         );
 238:Generated_Source\PSoC5/RTOS_port.c **** }
 239:Generated_Source\PSoC5/RTOS_port.c **** /*-----------------------------------------------------------*/
 240:Generated_Source\PSoC5/RTOS_port.c **** 
 241:Generated_Source\PSoC5/RTOS_port.c **** static void prvPortStartFirstTask( void )
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 10


 242:Generated_Source\PSoC5/RTOS_port.c **** {
  74              		.loc 1 242 0
  75              		.cfi_startproc
  76              		@ Naked Function: prologue and epilogue provided by programmer.
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
 243:Generated_Source\PSoC5/RTOS_port.c ****     __asm volatile (
  79              		.loc 1 243 0
  80              		.syntax unified
  81              	@ 243 "Generated_Source\PSoC5\RTOS_port.c" 1
  82 0000 0648     		 ldr r0, =0xE000ED08 	
  83 0002 0068     	 ldr r0, [r0] 			
  84 0004 0068     	 ldr r0, [r0] 			
  85 0006 80F30888 	 msr msp, r0			
  86 000a 62B6     	 cpsie i				
  87 000c 61B6     	 cpsie f				
  88 000e BFF34F8F 	 dsb					
  89 0012 BFF36F8F 	 isb					
  90 0016 00DF     	 svc 0					
  91 0018 00BF     	 nop					
  92 001a 000008ED 	 .ltorg				
  92      00E0
  93              	
  94              	@ 0 "" 2
 244:Generated_Source\PSoC5/RTOS_port.c ****         " ldr r0, =0xE000ED08 	\n"/* Use the NVIC offset register to locate the stack. */
 245:Generated_Source\PSoC5/RTOS_port.c ****         " ldr r0, [r0] 			\n"
 246:Generated_Source\PSoC5/RTOS_port.c ****         " ldr r0, [r0] 			\n"
 247:Generated_Source\PSoC5/RTOS_port.c ****         " msr msp, r0			\n"/* Set the msp back to the start of the stack. */
 248:Generated_Source\PSoC5/RTOS_port.c ****         " cpsie i				\n"/* Globally enable interrupts. */
 249:Generated_Source\PSoC5/RTOS_port.c ****         " cpsie f				\n"
 250:Generated_Source\PSoC5/RTOS_port.c ****         " dsb					\n"
 251:Generated_Source\PSoC5/RTOS_port.c ****         " isb					\n"
 252:Generated_Source\PSoC5/RTOS_port.c ****         " svc 0					\n"/* System call to start first task. */
 253:Generated_Source\PSoC5/RTOS_port.c ****         " nop					\n"
 254:Generated_Source\PSoC5/RTOS_port.c ****         " .ltorg				\n"
 255:Generated_Source\PSoC5/RTOS_port.c ****         );
 256:Generated_Source\PSoC5/RTOS_port.c **** }
  95              		.loc 1 256 0
  96              		.thumb
  97              		.syntax unified
  98              		.cfi_endproc
  99              	.LFE70:
 100              		.size	prvPortStartFirstTask, .-prvPortStartFirstTask
 101              		.section	.text.pxPortInitialiseStack,"ax",%progbits
 102              		.align	2
 103              		.global	pxPortInitialiseStack
 104              		.thumb
 105              		.thumb_func
 106              		.type	pxPortInitialiseStack, %function
 107              	pxPortInitialiseStack:
 108              	.LFB67:
 178:Generated_Source\PSoC5/RTOS_port.c ****     /* Simulate the stack frame as it would be created by a context switch
 109              		.loc 1 178 0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              		@ link register save eliminated.
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 11


 114              	.LVL1:
 182:Generated_Source\PSoC5/RTOS_port.c ****     pxTopOfStack--;
 115              		.loc 1 182 0
 116 0000 4FF08073 		mov	r3, #16777216
 117 0004 40F8043C 		str	r3, [r0, #-4]
 118              	.LVL2:
 184:Generated_Source\PSoC5/RTOS_port.c ****     pxTopOfStack--;
 119              		.loc 1 184 0
 120 0008 21F00101 		bic	r1, r1, #1
 121              	.LVL3:
 122 000c 40F8081C 		str	r1, [r0, #-8]
 123              	.LVL4:
 186:Generated_Source\PSoC5/RTOS_port.c ****     pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 124              		.loc 1 186 0
 125 0010 034B     		ldr	r3, .L6
 126 0012 40F80C3C 		str	r3, [r0, #-12]
 127              	.LVL5:
 188:Generated_Source\PSoC5/RTOS_port.c ****     pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R
 128              		.loc 1 188 0
 129 0016 40F8202C 		str	r2, [r0, #-32]
 130              	.LVL6:
 192:Generated_Source\PSoC5/RTOS_port.c **** /*-----------------------------------------------------------*/
 131              		.loc 1 192 0
 132 001a 4038     		subs	r0, r0, #64
 133              	.LVL7:
 134 001c 7047     		bx	lr
 135              	.L7:
 136 001e 00BF     		.align	2
 137              	.L6:
 138 0020 00000000 		.word	prvTaskExitError
 139              		.cfi_endproc
 140              	.LFE67:
 141              		.size	pxPortInitialiseStack, .-pxPortInitialiseStack
 142              		.section	.text.vPortSVCHandler,"ax",%progbits
 143              		.align	2
 144              		.global	vPortSVCHandler
 145              		.thumb
 146              		.thumb_func
 147              		.type	vPortSVCHandler, %function
 148              	vPortSVCHandler:
 149              	.LFB69:
 222:Generated_Source\PSoC5/RTOS_port.c ****     __asm volatile (
 150              		.loc 1 222 0
 151              		.cfi_startproc
 152              		@ Naked Function: prologue and epilogue provided by programmer.
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 223:Generated_Source\PSoC5/RTOS_port.c ****         "	ldr	r3, pxCurrentTCBConst2		\n"/* Restore the context. */
 155              		.loc 1 223 0
 156              		.syntax unified
 157              	@ 223 "Generated_Source\PSoC5\RTOS_port.c" 1
 158 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 159 0002 1968     		ldr r1, [r3]					
 160 0004 0868     		ldr r0, [r1]					
 161 0006 B0E8F00F 		ldmia r0!, {r4-r11}				
 162 000a 80F30988 		msr psp, r0						
 163 000e BFF36F8F 		isb								
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 12


 164 0012 4FF00000 		mov r0, #0 						
 165 0016 80F31188 		msr	basepri, r0					
 166 001a 4EF00D0E 		orr r14, #0xd					
 167 001e 7047     		bx r14							
 168              										
 169              		.align 4						
 170 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 171              	
 172              	@ 0 "" 2
 238:Generated_Source\PSoC5/RTOS_port.c **** /*-----------------------------------------------------------*/
 173              		.loc 1 238 0
 174              		.thumb
 175              		.syntax unified
 176              		.cfi_endproc
 177              	.LFE69:
 178              		.size	vPortSVCHandler, .-vPortSVCHandler
 179              		.section	.text.vPortEndScheduler,"ax",%progbits
 180              		.align	2
 181              		.global	vPortEndScheduler
 182              		.thumb
 183              		.thumb_func
 184              		.type	vPortEndScheduler, %function
 185              	vPortEndScheduler:
 186              	.LFB72:
 257:Generated_Source\PSoC5/RTOS_port.c **** /*-----------------------------------------------------------*/
 258:Generated_Source\PSoC5/RTOS_port.c **** 
 259:Generated_Source\PSoC5/RTOS_port.c **** /*
 260:Generated_Source\PSoC5/RTOS_port.c ****  * See header file for description.
 261:Generated_Source\PSoC5/RTOS_port.c ****  */
 262:Generated_Source\PSoC5/RTOS_port.c **** BaseType_t xPortStartScheduler( void )
 263:Generated_Source\PSoC5/RTOS_port.c **** {
 264:Generated_Source\PSoC5/RTOS_port.c ****     /* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 265:Generated_Source\PSoC5/RTOS_port.c ****      * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 266:Generated_Source\PSoC5/RTOS_port.c ****     configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 267:Generated_Source\PSoC5/RTOS_port.c **** 
 268:Generated_Source\PSoC5/RTOS_port.c ****     #if ( configASSERT_DEFINED == 1 )
 269:Generated_Source\PSoC5/RTOS_port.c ****         {
 270:Generated_Source\PSoC5/RTOS_port.c ****             volatile uint32_t ulOriginalPriority;
 271:Generated_Source\PSoC5/RTOS_port.c ****             volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( 
 272:Generated_Source\PSoC5/RTOS_port.c ****             volatile uint8_t ucMaxPriorityValue;
 273:Generated_Source\PSoC5/RTOS_port.c **** 
 274:Generated_Source\PSoC5/RTOS_port.c ****             /* Determine the maximum priority from which ISR safe FreeRTOS API
 275:Generated_Source\PSoC5/RTOS_port.c ****              * functions can be called.  ISR safe functions are those that end in
 276:Generated_Source\PSoC5/RTOS_port.c ****              * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 277:Generated_Source\PSoC5/RTOS_port.c ****              * ensure interrupt entry is as fast and simple as possible.
 278:Generated_Source\PSoC5/RTOS_port.c ****              *
 279:Generated_Source\PSoC5/RTOS_port.c ****              * Save the interrupt priority value that is about to be clobbered. */
 280:Generated_Source\PSoC5/RTOS_port.c ****             ulOriginalPriority = *pucFirstUserPriorityRegister;
 281:Generated_Source\PSoC5/RTOS_port.c **** 
 282:Generated_Source\PSoC5/RTOS_port.c ****             /* Determine the number of priority bits available.  First write to all
 283:Generated_Source\PSoC5/RTOS_port.c ****              * possible bits. */
 284:Generated_Source\PSoC5/RTOS_port.c ****             *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 285:Generated_Source\PSoC5/RTOS_port.c **** 
 286:Generated_Source\PSoC5/RTOS_port.c ****             /* Read the value back to see how many bits stuck. */
 287:Generated_Source\PSoC5/RTOS_port.c ****             ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 288:Generated_Source\PSoC5/RTOS_port.c **** 
 289:Generated_Source\PSoC5/RTOS_port.c ****             /* Use the same mask on the maximum system call priority. */
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 13


 290:Generated_Source\PSoC5/RTOS_port.c ****             ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 291:Generated_Source\PSoC5/RTOS_port.c **** 
 292:Generated_Source\PSoC5/RTOS_port.c ****             /* Calculate the maximum acceptable priority group value for the number
 293:Generated_Source\PSoC5/RTOS_port.c ****              * of bits read back. */
 294:Generated_Source\PSoC5/RTOS_port.c ****             ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 295:Generated_Source\PSoC5/RTOS_port.c **** 
 296:Generated_Source\PSoC5/RTOS_port.c ****             while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 297:Generated_Source\PSoC5/RTOS_port.c ****             {
 298:Generated_Source\PSoC5/RTOS_port.c ****                 ulMaxPRIGROUPValue--;
 299:Generated_Source\PSoC5/RTOS_port.c ****                 ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 300:Generated_Source\PSoC5/RTOS_port.c ****             }
 301:Generated_Source\PSoC5/RTOS_port.c **** 
 302:Generated_Source\PSoC5/RTOS_port.c ****             #ifdef __NVIC_PRIO_BITS
 303:Generated_Source\PSoC5/RTOS_port.c ****                 {
 304:Generated_Source\PSoC5/RTOS_port.c ****                     /* Check the CMSIS configuration that defines the number of
 305:Generated_Source\PSoC5/RTOS_port.c ****                      * priority bits matches the number of priority bits actually queried
 306:Generated_Source\PSoC5/RTOS_port.c ****                      * from the hardware. */
 307:Generated_Source\PSoC5/RTOS_port.c ****                     configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BIT
 308:Generated_Source\PSoC5/RTOS_port.c ****                 }
 309:Generated_Source\PSoC5/RTOS_port.c ****             #endif
 310:Generated_Source\PSoC5/RTOS_port.c **** 
 311:Generated_Source\PSoC5/RTOS_port.c ****             #ifdef configPRIO_BITS
 312:Generated_Source\PSoC5/RTOS_port.c ****                 {
 313:Generated_Source\PSoC5/RTOS_port.c ****                     /* Check the FreeRTOS configuration that defines the number of
 314:Generated_Source\PSoC5/RTOS_port.c ****                      * priority bits matches the number of priority bits actually queried
 315:Generated_Source\PSoC5/RTOS_port.c ****                      * from the hardware. */
 316:Generated_Source\PSoC5/RTOS_port.c ****                     configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS
 317:Generated_Source\PSoC5/RTOS_port.c ****                 }
 318:Generated_Source\PSoC5/RTOS_port.c ****             #endif
 319:Generated_Source\PSoC5/RTOS_port.c **** 
 320:Generated_Source\PSoC5/RTOS_port.c ****             /* Shift the priority group value back to its position within the AIRCR
 321:Generated_Source\PSoC5/RTOS_port.c ****              * register. */
 322:Generated_Source\PSoC5/RTOS_port.c ****             ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 323:Generated_Source\PSoC5/RTOS_port.c ****             ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 324:Generated_Source\PSoC5/RTOS_port.c **** 
 325:Generated_Source\PSoC5/RTOS_port.c ****             /* Restore the clobbered interrupt priority register to its original
 326:Generated_Source\PSoC5/RTOS_port.c ****              * value. */
 327:Generated_Source\PSoC5/RTOS_port.c ****             *pucFirstUserPriorityRegister = ulOriginalPriority;
 328:Generated_Source\PSoC5/RTOS_port.c ****         }
 329:Generated_Source\PSoC5/RTOS_port.c ****     #endif /* conifgASSERT_DEFINED */
 330:Generated_Source\PSoC5/RTOS_port.c **** 
 331:Generated_Source\PSoC5/RTOS_port.c ****     /* Make PendSV and SysTick the lowest priority interrupts. */
 332:Generated_Source\PSoC5/RTOS_port.c ****     portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 333:Generated_Source\PSoC5/RTOS_port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 334:Generated_Source\PSoC5/RTOS_port.c **** 
 335:Generated_Source\PSoC5/RTOS_port.c ****     /* Start the timer that generates the tick ISR.  Interrupts are disabled
 336:Generated_Source\PSoC5/RTOS_port.c ****      * here already. */
 337:Generated_Source\PSoC5/RTOS_port.c ****     vPortSetupTimerInterrupt();
 338:Generated_Source\PSoC5/RTOS_port.c **** 
 339:Generated_Source\PSoC5/RTOS_port.c ****     /* Initialise the critical nesting count ready for the first task. */
 340:Generated_Source\PSoC5/RTOS_port.c ****     uxCriticalNesting = 0;
 341:Generated_Source\PSoC5/RTOS_port.c **** 
 342:Generated_Source\PSoC5/RTOS_port.c ****     /* Start the first task. */
 343:Generated_Source\PSoC5/RTOS_port.c ****     prvPortStartFirstTask();
 344:Generated_Source\PSoC5/RTOS_port.c **** 
 345:Generated_Source\PSoC5/RTOS_port.c ****     /* Should never get here as the tasks will now be executing!  Call the task
 346:Generated_Source\PSoC5/RTOS_port.c ****      * exit error function to prevent compiler warnings about a static function
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 14


 347:Generated_Source\PSoC5/RTOS_port.c ****      * not being called in the case that the application writer overrides this
 348:Generated_Source\PSoC5/RTOS_port.c ****      * functionality by defining configTASK_RETURN_ADDRESS.  Call
 349:Generated_Source\PSoC5/RTOS_port.c ****      * vTaskSwitchContext() so link time optimisation does not remove the
 350:Generated_Source\PSoC5/RTOS_port.c ****      * symbol. */
 351:Generated_Source\PSoC5/RTOS_port.c ****     vTaskSwitchContext();
 352:Generated_Source\PSoC5/RTOS_port.c ****     prvTaskExitError();
 353:Generated_Source\PSoC5/RTOS_port.c **** 
 354:Generated_Source\PSoC5/RTOS_port.c ****     /* Should not get here! */
 355:Generated_Source\PSoC5/RTOS_port.c ****     return 0;
 356:Generated_Source\PSoC5/RTOS_port.c **** }
 357:Generated_Source\PSoC5/RTOS_port.c **** /*-----------------------------------------------------------*/
 358:Generated_Source\PSoC5/RTOS_port.c **** 
 359:Generated_Source\PSoC5/RTOS_port.c **** void vPortEndScheduler( void )
 360:Generated_Source\PSoC5/RTOS_port.c **** {
 187              		.loc 1 360 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
 192 0000 7047     		bx	lr
 193              		.cfi_endproc
 194              	.LFE72:
 195              		.size	vPortEndScheduler, .-vPortEndScheduler
 196 0002 00BF     		.section	.text.vPortEnterCritical,"ax",%progbits
 197              		.align	2
 198              		.global	vPortEnterCritical
 199              		.thumb
 200              		.thumb_func
 201              		.type	vPortEnterCritical, %function
 202              	vPortEnterCritical:
 203              	.LFB73:
 361:Generated_Source\PSoC5/RTOS_port.c ****     /* Not implemented in ports where there is nothing to return to.
 362:Generated_Source\PSoC5/RTOS_port.c ****      * Artificially force an assert. */
 363:Generated_Source\PSoC5/RTOS_port.c ****     configASSERT( uxCriticalNesting == 1000UL );
 364:Generated_Source\PSoC5/RTOS_port.c **** }
 365:Generated_Source\PSoC5/RTOS_port.c **** /*-----------------------------------------------------------*/
 366:Generated_Source\PSoC5/RTOS_port.c **** 
 367:Generated_Source\PSoC5/RTOS_port.c **** void vPortEnterCritical( void )
 368:Generated_Source\PSoC5/RTOS_port.c **** {
 204              		.loc 1 368 0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 0
 207              		@ frame_needed = 0, uses_anonymous_args = 0
 208              		@ link register save eliminated.
 209              	.LBB14:
 210              	.LBB15:
 211              		.loc 2 199 0
 212              		.syntax unified
 213              	@ 199 "g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmac
 214 0000 4FF00403 			mov r3, #4												
 215 0004 83F31188 		msr basepri, r3											
 216 0008 BFF36F8F 		isb														
 217 000c BFF34F8F 		dsb														
 218              	
 219              	@ 0 "" 2
 220              		.thumb
 221              		.syntax unified
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 15


 222              	.LBE15:
 223              	.LBE14:
 369:Generated_Source\PSoC5/RTOS_port.c ****     portDISABLE_INTERRUPTS();
 370:Generated_Source\PSoC5/RTOS_port.c ****     uxCriticalNesting++;
 224              		.loc 1 370 0
 225 0010 024A     		ldr	r2, .L11
 226 0012 1368     		ldr	r3, [r2]
 227 0014 0133     		adds	r3, r3, #1
 228 0016 1360     		str	r3, [r2]
 229 0018 7047     		bx	lr
 230              	.L12:
 231 001a 00BF     		.align	2
 232              	.L11:
 233 001c 00000000 		.word	.LANCHOR0
 234              		.cfi_endproc
 235              	.LFE73:
 236              		.size	vPortEnterCritical, .-vPortEnterCritical
 237              		.section	.text.vPortExitCritical,"ax",%progbits
 238              		.align	2
 239              		.global	vPortExitCritical
 240              		.thumb
 241              		.thumb_func
 242              		.type	vPortExitCritical, %function
 243              	vPortExitCritical:
 244              	.LFB74:
 371:Generated_Source\PSoC5/RTOS_port.c **** 
 372:Generated_Source\PSoC5/RTOS_port.c ****     /* This is not the interrupt safe version of the enter critical function so
 373:Generated_Source\PSoC5/RTOS_port.c ****      * assert() if it is being called from an interrupt context.  Only API
 374:Generated_Source\PSoC5/RTOS_port.c ****      * functions that end in "FromISR" can be used in an interrupt.  Only assert if
 375:Generated_Source\PSoC5/RTOS_port.c ****      * the critical nesting count is 1 to protect against recursive calls if the
 376:Generated_Source\PSoC5/RTOS_port.c ****      * assert function also uses a critical section. */
 377:Generated_Source\PSoC5/RTOS_port.c ****     if( uxCriticalNesting == 1 )
 378:Generated_Source\PSoC5/RTOS_port.c ****     {
 379:Generated_Source\PSoC5/RTOS_port.c ****         configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 380:Generated_Source\PSoC5/RTOS_port.c ****     }
 381:Generated_Source\PSoC5/RTOS_port.c **** }
 382:Generated_Source\PSoC5/RTOS_port.c **** /*-----------------------------------------------------------*/
 383:Generated_Source\PSoC5/RTOS_port.c **** 
 384:Generated_Source\PSoC5/RTOS_port.c **** void vPortExitCritical( void )
 385:Generated_Source\PSoC5/RTOS_port.c **** {
 245              		.loc 1 385 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 0
 248              		@ frame_needed = 0, uses_anonymous_args = 0
 249              		@ link register save eliminated.
 386:Generated_Source\PSoC5/RTOS_port.c ****     configASSERT( uxCriticalNesting );
 387:Generated_Source\PSoC5/RTOS_port.c ****     uxCriticalNesting--;
 250              		.loc 1 387 0
 251 0000 034A     		ldr	r2, .L15
 252 0002 1368     		ldr	r3, [r2]
 253 0004 013B     		subs	r3, r3, #1
 254 0006 1360     		str	r3, [r2]
 388:Generated_Source\PSoC5/RTOS_port.c **** 
 389:Generated_Source\PSoC5/RTOS_port.c ****     if( uxCriticalNesting == 0 )
 255              		.loc 1 389 0
 256 0008 0BB9     		cbnz	r3, .L13
 257              	.LVL8:
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 16


 258              	.LBB16:
 259              	.LBB17:
 200:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         (
 201:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****             "	mov %0, %1												\n"\
 202:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****             "	msr basepri, %0											\n"\
 203:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****             "	isb														\n"\
 204:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****             "	dsb														\n"\
 205:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 206:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         );
 207:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     }
 208:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 209:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /*-----------------------------------------------------------*/
 210:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 211:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 212:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     {
 213:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 214:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 215:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         __asm volatile
 216:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         (
 217:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****             "	mrs %0, basepri											\n"\
 218:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****             "	mov %1, %2												\n"\
 219:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****             "	msr basepri, %1											\n"\
 220:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****             "	isb														\n"\
 221:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****             "	dsb														\n"\
 222:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 223:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         );
 224:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 225:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 226:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****          * warnings. */
 227:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         return ulOriginalBASEPRI;
 228:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     }
 229:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** /*-----------------------------------------------------------*/
 230:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h **** 
 231:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 232:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****     {
 233:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         __asm volatile
 260              		.loc 2 233 0
 261              		.syntax unified
 262              	@ 233 "g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmac
 263 000a 83F31188 			msr basepri, r3	
 264              	@ 0 "" 2
 265              	.LVL9:
 266              		.thumb
 267              		.syntax unified
 268              	.L13:
 269 000e 7047     		bx	lr
 270              	.L16:
 271              		.align	2
 272              	.L15:
 273 0010 00000000 		.word	.LANCHOR0
 274              	.LBE17:
 275              	.LBE16:
 276              		.cfi_endproc
 277              	.LFE74:
 278              		.size	vPortExitCritical, .-vPortExitCritical
 279              		.section	.text.xPortPendSVHandler,"ax",%progbits
 280              		.align	2
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 17


 281              		.global	xPortPendSVHandler
 282              		.thumb
 283              		.thumb_func
 284              		.type	xPortPendSVHandler, %function
 285              	xPortPendSVHandler:
 286              	.LFB75:
 390:Generated_Source\PSoC5/RTOS_port.c ****     {
 391:Generated_Source\PSoC5/RTOS_port.c ****         portENABLE_INTERRUPTS();
 392:Generated_Source\PSoC5/RTOS_port.c ****     }
 393:Generated_Source\PSoC5/RTOS_port.c **** }
 394:Generated_Source\PSoC5/RTOS_port.c **** /*-----------------------------------------------------------*/
 395:Generated_Source\PSoC5/RTOS_port.c **** 
 396:Generated_Source\PSoC5/RTOS_port.c **** void xPortPendSVHandler( void )
 397:Generated_Source\PSoC5/RTOS_port.c **** {
 287              		.loc 1 397 0
 288              		.cfi_startproc
 289              		@ Naked Function: prologue and epilogue provided by programmer.
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 398:Generated_Source\PSoC5/RTOS_port.c ****     /* This is a naked function. */
 399:Generated_Source\PSoC5/RTOS_port.c **** 
 400:Generated_Source\PSoC5/RTOS_port.c ****     __asm volatile
 292              		.loc 1 400 0
 293              		.syntax unified
 294              	@ 400 "Generated_Source\PSoC5\RTOS_port.c" 1
 295 0000 EFF30980 			mrs r0, psp							
 296 0004 BFF36F8F 		isb									
 297              											
 298 0008 0D4B     		ldr	r3, pxCurrentTCBConst			
 299 000a 1A68     		ldr	r2, [r3]						
 300              											
 301 000c 20E9F00F 		stmdb r0!, {r4-r11}					
 302 0010 1060     		str r0, [r2]						
 303              											
 304 0012 2DE90840 		stmdb sp!, {r3, r14}				
 305 0016 4FF00400 		mov r0, #4							
 306 001a 80F31188 		msr basepri, r0						
 307 001e FFF7FEFF 		bl vTaskSwitchContext				
 308 0022 4FF00000 		mov r0, #0							
 309 0026 80F31188 		msr basepri, r0						
 310 002a BDE80840 		ldmia sp!, {r3, r14}				
 311              											
 312 002e 1968     		ldr r1, [r3]						
 313 0030 0868     		ldr r0, [r1]						
 314 0032 B0E8F00F 		ldmia r0!, {r4-r11}					
 315 0036 80F30988 		msr psp, r0							
 316 003a BFF36F8F 		isb									
 317 003e 7047     		bx r14								
 318              											
 319              		.align 4							
 320 0040 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 321              	
 322              	@ 0 "" 2
 401:Generated_Source\PSoC5/RTOS_port.c ****     (
 402:Generated_Source\PSoC5/RTOS_port.c ****         "	mrs r0, psp							\n"
 403:Generated_Source\PSoC5/RTOS_port.c ****         "	isb									\n"
 404:Generated_Source\PSoC5/RTOS_port.c ****         "										\n"
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 18


 405:Generated_Source\PSoC5/RTOS_port.c ****         "	ldr	r3, pxCurrentTCBConst			\n"/* Get the location of the current TCB. */
 406:Generated_Source\PSoC5/RTOS_port.c ****         "	ldr	r2, [r3]						\n"
 407:Generated_Source\PSoC5/RTOS_port.c ****         "										\n"
 408:Generated_Source\PSoC5/RTOS_port.c ****         "	stmdb r0!, {r4-r11}					\n"/* Save the remaining registers. */
 409:Generated_Source\PSoC5/RTOS_port.c ****         "	str r0, [r2]						\n"/* Save the new top of stack into the first member of the TCB. */
 410:Generated_Source\PSoC5/RTOS_port.c ****         "										\n"
 411:Generated_Source\PSoC5/RTOS_port.c ****         "	stmdb sp!, {r3, r14}				\n"
 412:Generated_Source\PSoC5/RTOS_port.c ****         "	mov r0, %0							\n"
 413:Generated_Source\PSoC5/RTOS_port.c ****         "	msr basepri, r0						\n"
 414:Generated_Source\PSoC5/RTOS_port.c ****         "	bl vTaskSwitchContext				\n"
 415:Generated_Source\PSoC5/RTOS_port.c ****         "	mov r0, #0							\n"
 416:Generated_Source\PSoC5/RTOS_port.c ****         "	msr basepri, r0						\n"
 417:Generated_Source\PSoC5/RTOS_port.c ****         "	ldmia sp!, {r3, r14}				\n"
 418:Generated_Source\PSoC5/RTOS_port.c ****         "										\n"/* Restore the context, including the critical nesting count. */
 419:Generated_Source\PSoC5/RTOS_port.c ****         "	ldr r1, [r3]						\n"
 420:Generated_Source\PSoC5/RTOS_port.c ****         "	ldr r0, [r1]						\n"/* The first item in pxCurrentTCB is the task top of stack. */
 421:Generated_Source\PSoC5/RTOS_port.c ****         "	ldmia r0!, {r4-r11}					\n"/* Pop the registers. */
 422:Generated_Source\PSoC5/RTOS_port.c ****         "	msr psp, r0							\n"
 423:Generated_Source\PSoC5/RTOS_port.c ****         "	isb									\n"
 424:Generated_Source\PSoC5/RTOS_port.c ****         "	bx r14								\n"
 425:Generated_Source\PSoC5/RTOS_port.c ****         "										\n"
 426:Generated_Source\PSoC5/RTOS_port.c ****         "	.align 4							\n"
 427:Generated_Source\PSoC5/RTOS_port.c ****         "pxCurrentTCBConst: .word pxCurrentTCB	\n"
 428:Generated_Source\PSoC5/RTOS_port.c ****         ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 429:Generated_Source\PSoC5/RTOS_port.c ****     );
 430:Generated_Source\PSoC5/RTOS_port.c **** }
 323              		.loc 1 430 0
 324              		.thumb
 325              		.syntax unified
 326              		.cfi_endproc
 327              	.LFE75:
 328              		.size	xPortPendSVHandler, .-xPortPendSVHandler
 329              		.section	.text.xPortSysTickHandler,"ax",%progbits
 330              		.align	2
 331              		.global	xPortSysTickHandler
 332              		.thumb
 333              		.thumb_func
 334              		.type	xPortSysTickHandler, %function
 335              	xPortSysTickHandler:
 336              	.LFB76:
 431:Generated_Source\PSoC5/RTOS_port.c **** /*-----------------------------------------------------------*/
 432:Generated_Source\PSoC5/RTOS_port.c **** 
 433:Generated_Source\PSoC5/RTOS_port.c **** void xPortSysTickHandler( void )
 434:Generated_Source\PSoC5/RTOS_port.c **** {
 337              		.loc 1 434 0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 0
 340              		@ frame_needed = 0, uses_anonymous_args = 0
 341 0000 08B5     		push	{r3, lr}
 342              		.cfi_def_cfa_offset 8
 343              		.cfi_offset 3, -8
 344              		.cfi_offset 14, -4
 345              	.LBB18:
 346              	.LBB19:
 199:g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmacro.h ****         (
 347              		.loc 2 199 0
 348              		.syntax unified
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 19


 349              	@ 199 "g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmac
 350 0002 4FF00403 			mov r3, #4												
 351 0006 83F31188 		msr basepri, r3											
 352 000a BFF36F8F 		isb														
 353 000e BFF34F8F 		dsb														
 354              	
 355              	@ 0 "" 2
 356              		.thumb
 357              		.syntax unified
 358              	.LBE19:
 359              	.LBE18:
 435:Generated_Source\PSoC5/RTOS_port.c ****     /* The SysTick runs at the lowest interrupt priority, so when this interrupt
 436:Generated_Source\PSoC5/RTOS_port.c ****      * executes all interrupts must be unmasked.  There is therefore no need to
 437:Generated_Source\PSoC5/RTOS_port.c ****      * save and then restore the interrupt mask value as its value is already
 438:Generated_Source\PSoC5/RTOS_port.c ****      * known. */
 439:Generated_Source\PSoC5/RTOS_port.c ****     portDISABLE_INTERRUPTS();
 440:Generated_Source\PSoC5/RTOS_port.c ****     {
 441:Generated_Source\PSoC5/RTOS_port.c ****         /* Increment the RTOS tick. */
 442:Generated_Source\PSoC5/RTOS_port.c ****         if( xTaskIncrementTick() != pdFALSE )
 360              		.loc 1 442 0
 361 0012 FFF7FEFF 		bl	xTaskIncrementTick
 362              	.LVL10:
 363 0016 18B1     		cbz	r0, .L19
 443:Generated_Source\PSoC5/RTOS_port.c ****         {
 444:Generated_Source\PSoC5/RTOS_port.c ****             /* A context switch is required.  Context switching is performed in
 445:Generated_Source\PSoC5/RTOS_port.c ****              * the PendSV interrupt.  Pend the PendSV interrupt. */
 446:Generated_Source\PSoC5/RTOS_port.c ****             portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 364              		.loc 1 446 0
 365 0018 4FF08052 		mov	r2, #268435456
 366 001c 024B     		ldr	r3, .L21
 367 001e 1A60     		str	r2, [r3]
 368              	.L19:
 369              	.LVL11:
 370              	.LBB20:
 371              	.LBB21:
 372              		.loc 2 233 0
 373 0020 0023     		movs	r3, #0
 374              		.syntax unified
 375              	@ 233 "g:\project\psocwagen\psoc\ucll_koen_lib.cylib\myfreertos\source\portable\gcc\arm_cm3\portmac
 376 0022 83F31188 			msr basepri, r3	
 377              	@ 0 "" 2
 378              	.LVL12:
 379              		.thumb
 380              		.syntax unified
 381 0026 08BD     		pop	{r3, pc}
 382              	.L22:
 383              		.align	2
 384              	.L21:
 385 0028 04ED00E0 		.word	-536810236
 386              	.LBE21:
 387              	.LBE20:
 388              		.cfi_endproc
 389              	.LFE76:
 390              		.size	xPortSysTickHandler, .-xPortSysTickHandler
 391              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 392              		.align	2
 393              		.weak	vPortSetupTimerInterrupt
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 20


 394              		.thumb
 395              		.thumb_func
 396              		.type	vPortSetupTimerInterrupt, %function
 397              	vPortSetupTimerInterrupt:
 398              	.LFB77:
 447:Generated_Source\PSoC5/RTOS_port.c ****         }
 448:Generated_Source\PSoC5/RTOS_port.c ****     }
 449:Generated_Source\PSoC5/RTOS_port.c ****     portENABLE_INTERRUPTS();
 450:Generated_Source\PSoC5/RTOS_port.c **** }
 451:Generated_Source\PSoC5/RTOS_port.c **** /*-----------------------------------------------------------*/
 452:Generated_Source\PSoC5/RTOS_port.c **** 
 453:Generated_Source\PSoC5/RTOS_port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 454:Generated_Source\PSoC5/RTOS_port.c **** 
 455:Generated_Source\PSoC5/RTOS_port.c ****     __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 456:Generated_Source\PSoC5/RTOS_port.c ****     {
 457:Generated_Source\PSoC5/RTOS_port.c ****         uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 458:Generated_Source\PSoC5/RTOS_port.c ****         TickType_t xModifiableIdleTime;
 459:Generated_Source\PSoC5/RTOS_port.c **** 
 460:Generated_Source\PSoC5/RTOS_port.c ****         /* Make sure the SysTick reload value does not overflow the counter. */
 461:Generated_Source\PSoC5/RTOS_port.c ****         if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 462:Generated_Source\PSoC5/RTOS_port.c ****         {
 463:Generated_Source\PSoC5/RTOS_port.c ****             xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 464:Generated_Source\PSoC5/RTOS_port.c ****         }
 465:Generated_Source\PSoC5/RTOS_port.c **** 
 466:Generated_Source\PSoC5/RTOS_port.c ****         /* Stop the SysTick momentarily.  The time the SysTick is stopped for
 467:Generated_Source\PSoC5/RTOS_port.c ****          * is accounted for as best it can be, but using the tickless mode will
 468:Generated_Source\PSoC5/RTOS_port.c ****          * inevitably result in some tiny drift of the time maintained by the
 469:Generated_Source\PSoC5/RTOS_port.c ****          * kernel with respect to calendar time. */
 470:Generated_Source\PSoC5/RTOS_port.c ****         portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 471:Generated_Source\PSoC5/RTOS_port.c **** 
 472:Generated_Source\PSoC5/RTOS_port.c ****         /* Calculate the reload value required to wait xExpectedIdleTime
 473:Generated_Source\PSoC5/RTOS_port.c ****          * tick periods.  -1 is used because this code will execute part way
 474:Generated_Source\PSoC5/RTOS_port.c ****          * through one of the tick periods. */
 475:Generated_Source\PSoC5/RTOS_port.c ****         ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpecte
 476:Generated_Source\PSoC5/RTOS_port.c **** 
 477:Generated_Source\PSoC5/RTOS_port.c ****         if( ulReloadValue > ulStoppedTimerCompensation )
 478:Generated_Source\PSoC5/RTOS_port.c ****         {
 479:Generated_Source\PSoC5/RTOS_port.c ****             ulReloadValue -= ulStoppedTimerCompensation;
 480:Generated_Source\PSoC5/RTOS_port.c ****         }
 481:Generated_Source\PSoC5/RTOS_port.c **** 
 482:Generated_Source\PSoC5/RTOS_port.c ****         /* Enter a critical section but don't use the taskENTER_CRITICAL()
 483:Generated_Source\PSoC5/RTOS_port.c ****          * method as that will mask interrupts that should exit sleep mode. */
 484:Generated_Source\PSoC5/RTOS_port.c ****         __asm volatile ( "cpsid i" ::: "memory" );
 485:Generated_Source\PSoC5/RTOS_port.c ****         __asm volatile ( "dsb" );
 486:Generated_Source\PSoC5/RTOS_port.c ****         __asm volatile ( "isb" );
 487:Generated_Source\PSoC5/RTOS_port.c **** 
 488:Generated_Source\PSoC5/RTOS_port.c ****         /* If a context switch is pending or a task is waiting for the scheduler
 489:Generated_Source\PSoC5/RTOS_port.c ****          * to be unsuspended then abandon the low power entry. */
 490:Generated_Source\PSoC5/RTOS_port.c ****         if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 491:Generated_Source\PSoC5/RTOS_port.c ****         {
 492:Generated_Source\PSoC5/RTOS_port.c ****             /* Restart from whatever is left in the count register to complete
 493:Generated_Source\PSoC5/RTOS_port.c ****              * this tick period. */
 494:Generated_Source\PSoC5/RTOS_port.c ****             portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 495:Generated_Source\PSoC5/RTOS_port.c **** 
 496:Generated_Source\PSoC5/RTOS_port.c ****             /* Restart SysTick. */
 497:Generated_Source\PSoC5/RTOS_port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 498:Generated_Source\PSoC5/RTOS_port.c **** 
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 21


 499:Generated_Source\PSoC5/RTOS_port.c ****             /* Reset the reload register to the value required for normal tick
 500:Generated_Source\PSoC5/RTOS_port.c ****              * periods. */
 501:Generated_Source\PSoC5/RTOS_port.c ****             portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 502:Generated_Source\PSoC5/RTOS_port.c **** 
 503:Generated_Source\PSoC5/RTOS_port.c ****             /* Re-enable interrupts - see comments above the cpsid instruction()
 504:Generated_Source\PSoC5/RTOS_port.c ****              * above. */
 505:Generated_Source\PSoC5/RTOS_port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 506:Generated_Source\PSoC5/RTOS_port.c ****         }
 507:Generated_Source\PSoC5/RTOS_port.c ****         else
 508:Generated_Source\PSoC5/RTOS_port.c ****         {
 509:Generated_Source\PSoC5/RTOS_port.c ****             /* Set the new reload value. */
 510:Generated_Source\PSoC5/RTOS_port.c ****             portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 511:Generated_Source\PSoC5/RTOS_port.c **** 
 512:Generated_Source\PSoC5/RTOS_port.c ****             /* Clear the SysTick count flag and set the count value back to
 513:Generated_Source\PSoC5/RTOS_port.c ****              * zero. */
 514:Generated_Source\PSoC5/RTOS_port.c ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 515:Generated_Source\PSoC5/RTOS_port.c **** 
 516:Generated_Source\PSoC5/RTOS_port.c ****             /* Restart SysTick. */
 517:Generated_Source\PSoC5/RTOS_port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 518:Generated_Source\PSoC5/RTOS_port.c **** 
 519:Generated_Source\PSoC5/RTOS_port.c ****             /* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 520:Generated_Source\PSoC5/RTOS_port.c ****              * set its parameter to 0 to indicate that its implementation contains
 521:Generated_Source\PSoC5/RTOS_port.c ****              * its own wait for interrupt or wait for event instruction, and so wfi
 522:Generated_Source\PSoC5/RTOS_port.c ****              * should not be executed again.  However, the original expected idle
 523:Generated_Source\PSoC5/RTOS_port.c ****              * time variable must remain unmodified, so a copy is taken. */
 524:Generated_Source\PSoC5/RTOS_port.c ****             xModifiableIdleTime = xExpectedIdleTime;
 525:Generated_Source\PSoC5/RTOS_port.c ****             configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 526:Generated_Source\PSoC5/RTOS_port.c **** 
 527:Generated_Source\PSoC5/RTOS_port.c ****             if( xModifiableIdleTime > 0 )
 528:Generated_Source\PSoC5/RTOS_port.c ****             {
 529:Generated_Source\PSoC5/RTOS_port.c ****                 __asm volatile ( "dsb" ::: "memory" );
 530:Generated_Source\PSoC5/RTOS_port.c ****                 __asm volatile ( "wfi" );
 531:Generated_Source\PSoC5/RTOS_port.c ****                 __asm volatile ( "isb" );
 532:Generated_Source\PSoC5/RTOS_port.c ****             }
 533:Generated_Source\PSoC5/RTOS_port.c **** 
 534:Generated_Source\PSoC5/RTOS_port.c ****             configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 535:Generated_Source\PSoC5/RTOS_port.c **** 
 536:Generated_Source\PSoC5/RTOS_port.c ****             /* Re-enable interrupts to allow the interrupt that brought the MCU
 537:Generated_Source\PSoC5/RTOS_port.c ****              * out of sleep mode to execute immediately.  see comments above
 538:Generated_Source\PSoC5/RTOS_port.c ****              * __disable_interrupt() call above. */
 539:Generated_Source\PSoC5/RTOS_port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 540:Generated_Source\PSoC5/RTOS_port.c ****             __asm volatile ( "dsb" );
 541:Generated_Source\PSoC5/RTOS_port.c ****             __asm volatile ( "isb" );
 542:Generated_Source\PSoC5/RTOS_port.c **** 
 543:Generated_Source\PSoC5/RTOS_port.c ****             /* Disable interrupts again because the clock is about to be stopped
 544:Generated_Source\PSoC5/RTOS_port.c ****              * and interrupts that execute while the clock is stopped will increase
 545:Generated_Source\PSoC5/RTOS_port.c ****              * any slippage between the time maintained by the RTOS and calendar
 546:Generated_Source\PSoC5/RTOS_port.c ****              * time. */
 547:Generated_Source\PSoC5/RTOS_port.c ****             __asm volatile ( "cpsid i" ::: "memory" );
 548:Generated_Source\PSoC5/RTOS_port.c ****             __asm volatile ( "dsb" );
 549:Generated_Source\PSoC5/RTOS_port.c ****             __asm volatile ( "isb" );
 550:Generated_Source\PSoC5/RTOS_port.c **** 
 551:Generated_Source\PSoC5/RTOS_port.c ****             /* Disable the SysTick clock without reading the
 552:Generated_Source\PSoC5/RTOS_port.c ****              * portNVIC_SYSTICK_CTRL_REG register to ensure the
 553:Generated_Source\PSoC5/RTOS_port.c ****              * portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 554:Generated_Source\PSoC5/RTOS_port.c ****              * the time the SysTick is stopped for is accounted for as best it can
 555:Generated_Source\PSoC5/RTOS_port.c ****              * be, but using the tickless mode will inevitably result in some tiny
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 22


 556:Generated_Source\PSoC5/RTOS_port.c ****              * drift of the time maintained by the kernel with respect to calendar
 557:Generated_Source\PSoC5/RTOS_port.c ****              * time*/
 558:Generated_Source\PSoC5/RTOS_port.c ****             portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 559:Generated_Source\PSoC5/RTOS_port.c **** 
 560:Generated_Source\PSoC5/RTOS_port.c ****             /* Determine if the SysTick clock has already counted to zero and
 561:Generated_Source\PSoC5/RTOS_port.c ****              * been set back to the current reload value (the reload back being
 562:Generated_Source\PSoC5/RTOS_port.c ****              * correct for the entire expected idle time) or if the SysTick is yet
 563:Generated_Source\PSoC5/RTOS_port.c ****              * to count to zero (in which case an interrupt other than the SysTick
 564:Generated_Source\PSoC5/RTOS_port.c ****              * must have brought the system out of sleep mode). */
 565:Generated_Source\PSoC5/RTOS_port.c ****             if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 566:Generated_Source\PSoC5/RTOS_port.c ****             {
 567:Generated_Source\PSoC5/RTOS_port.c ****                 uint32_t ulCalculatedLoadValue;
 568:Generated_Source\PSoC5/RTOS_port.c **** 
 569:Generated_Source\PSoC5/RTOS_port.c ****                 /* The tick interrupt is already pending, and the SysTick count
 570:Generated_Source\PSoC5/RTOS_port.c ****                  * reloaded with ulReloadValue.  Reset the
 571:Generated_Source\PSoC5/RTOS_port.c ****                  * portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 572:Generated_Source\PSoC5/RTOS_port.c ****                  * period. */
 573:Generated_Source\PSoC5/RTOS_port.c ****                 ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portN
 574:Generated_Source\PSoC5/RTOS_port.c **** 
 575:Generated_Source\PSoC5/RTOS_port.c ****                 /* Don't allow a tiny value, or values that have somehow
 576:Generated_Source\PSoC5/RTOS_port.c ****                  * underflowed because the post sleep hook did something
 577:Generated_Source\PSoC5/RTOS_port.c ****                  * that took too long. */
 578:Generated_Source\PSoC5/RTOS_port.c ****                 if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadVal
 579:Generated_Source\PSoC5/RTOS_port.c ****                 {
 580:Generated_Source\PSoC5/RTOS_port.c ****                     ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 581:Generated_Source\PSoC5/RTOS_port.c ****                 }
 582:Generated_Source\PSoC5/RTOS_port.c **** 
 583:Generated_Source\PSoC5/RTOS_port.c ****                 portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 584:Generated_Source\PSoC5/RTOS_port.c **** 
 585:Generated_Source\PSoC5/RTOS_port.c ****                 /* As the pending tick will be processed as soon as this
 586:Generated_Source\PSoC5/RTOS_port.c ****                  * function exits, the tick value maintained by the tick is stepped
 587:Generated_Source\PSoC5/RTOS_port.c ****                  * forward by one less than the time spent waiting. */
 588:Generated_Source\PSoC5/RTOS_port.c ****                 ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 589:Generated_Source\PSoC5/RTOS_port.c ****             }
 590:Generated_Source\PSoC5/RTOS_port.c ****             else
 591:Generated_Source\PSoC5/RTOS_port.c ****             {
 592:Generated_Source\PSoC5/RTOS_port.c ****                 /* Something other than the tick interrupt ended the sleep.
 593:Generated_Source\PSoC5/RTOS_port.c ****                  * Work out how long the sleep lasted rounded to complete tick
 594:Generated_Source\PSoC5/RTOS_port.c ****                  * periods (not the ulReload value which accounted for part
 595:Generated_Source\PSoC5/RTOS_port.c ****                  * ticks). */
 596:Generated_Source\PSoC5/RTOS_port.c ****                 ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - po
 597:Generated_Source\PSoC5/RTOS_port.c **** 
 598:Generated_Source\PSoC5/RTOS_port.c ****                 /* How many complete tick periods passed while the processor
 599:Generated_Source\PSoC5/RTOS_port.c ****                  * was waiting? */
 600:Generated_Source\PSoC5/RTOS_port.c ****                 ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 601:Generated_Source\PSoC5/RTOS_port.c **** 
 602:Generated_Source\PSoC5/RTOS_port.c ****                 /* The reload value is set to whatever fraction of a single tick
 603:Generated_Source\PSoC5/RTOS_port.c ****                  * period remains. */
 604:Generated_Source\PSoC5/RTOS_port.c ****                 portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOne
 605:Generated_Source\PSoC5/RTOS_port.c ****             }
 606:Generated_Source\PSoC5/RTOS_port.c **** 
 607:Generated_Source\PSoC5/RTOS_port.c ****             /* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 608:Generated_Source\PSoC5/RTOS_port.c ****              * again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 609:Generated_Source\PSoC5/RTOS_port.c ****              * value. */
 610:Generated_Source\PSoC5/RTOS_port.c ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 611:Generated_Source\PSoC5/RTOS_port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 612:Generated_Source\PSoC5/RTOS_port.c ****             vTaskStepTick( ulCompleteTickPeriods );
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 23


 613:Generated_Source\PSoC5/RTOS_port.c ****             portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 614:Generated_Source\PSoC5/RTOS_port.c **** 
 615:Generated_Source\PSoC5/RTOS_port.c ****             /* Exit with interrupts enabled. */
 616:Generated_Source\PSoC5/RTOS_port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 617:Generated_Source\PSoC5/RTOS_port.c ****         }
 618:Generated_Source\PSoC5/RTOS_port.c ****     }
 619:Generated_Source\PSoC5/RTOS_port.c **** 
 620:Generated_Source\PSoC5/RTOS_port.c **** #endif /* configUSE_TICKLESS_IDLE */
 621:Generated_Source\PSoC5/RTOS_port.c **** /*-----------------------------------------------------------*/
 622:Generated_Source\PSoC5/RTOS_port.c **** 
 623:Generated_Source\PSoC5/RTOS_port.c **** /*
 624:Generated_Source\PSoC5/RTOS_port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 625:Generated_Source\PSoC5/RTOS_port.c ****  * frequency.
 626:Generated_Source\PSoC5/RTOS_port.c ****  */
 627:Generated_Source\PSoC5/RTOS_port.c **** __attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
 628:Generated_Source\PSoC5/RTOS_port.c **** {
 399              		.loc 1 628 0
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 0
 402              		@ frame_needed = 0, uses_anonymous_args = 0
 403              		@ link register save eliminated.
 629:Generated_Source\PSoC5/RTOS_port.c ****     /* Calculate the constants required to configure the tick interrupt. */
 630:Generated_Source\PSoC5/RTOS_port.c ****     #if ( configUSE_TICKLESS_IDLE == 1 )
 631:Generated_Source\PSoC5/RTOS_port.c ****         {
 632:Generated_Source\PSoC5/RTOS_port.c ****             ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 633:Generated_Source\PSoC5/RTOS_port.c ****             xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 634:Generated_Source\PSoC5/RTOS_port.c ****             ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSY
 635:Generated_Source\PSoC5/RTOS_port.c ****         }
 636:Generated_Source\PSoC5/RTOS_port.c ****     #endif /* configUSE_TICKLESS_IDLE */
 637:Generated_Source\PSoC5/RTOS_port.c **** 
 638:Generated_Source\PSoC5/RTOS_port.c ****     /* Stop and clear the SysTick. */
 639:Generated_Source\PSoC5/RTOS_port.c ****     portNVIC_SYSTICK_CTRL_REG = 0UL;
 404              		.loc 1 639 0
 405 0000 054B     		ldr	r3, .L24
 406 0002 0022     		movs	r2, #0
 407 0004 1A60     		str	r2, [r3]
 640:Generated_Source\PSoC5/RTOS_port.c ****     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 408              		.loc 1 640 0
 409 0006 0549     		ldr	r1, .L24+4
 410 0008 0A60     		str	r2, [r1]
 641:Generated_Source\PSoC5/RTOS_port.c **** 
 642:Generated_Source\PSoC5/RTOS_port.c ****     /* Configure SysTick to interrupt at the requested rate. */
 643:Generated_Source\PSoC5/RTOS_port.c ****     portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 411              		.loc 1 643 0
 412 000a 45F6BF51 		movw	r1, #23999
 413 000e 044A     		ldr	r2, .L24+8
 414 0010 1160     		str	r1, [r2]
 644:Generated_Source\PSoC5/RTOS_port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SY
 415              		.loc 1 644 0
 416 0012 0722     		movs	r2, #7
 417 0014 1A60     		str	r2, [r3]
 418 0016 7047     		bx	lr
 419              	.L25:
 420              		.align	2
 421              	.L24:
 422 0018 10E000E0 		.word	-536813552
 423 001c 18E000E0 		.word	-536813544
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 24


 424 0020 14E000E0 		.word	-536813548
 425              		.cfi_endproc
 426              	.LFE77:
 427              		.size	vPortSetupTimerInterrupt, .-vPortSetupTimerInterrupt
 428              		.section	.text.xPortStartScheduler,"ax",%progbits
 429              		.align	2
 430              		.global	xPortStartScheduler
 431              		.thumb
 432              		.thumb_func
 433              		.type	xPortStartScheduler, %function
 434              	xPortStartScheduler:
 435              	.LFB71:
 263:Generated_Source\PSoC5/RTOS_port.c ****     /* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 436              		.loc 1 263 0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 0
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440 0000 10B5     		push	{r4, lr}
 441              		.cfi_def_cfa_offset 8
 442              		.cfi_offset 4, -8
 443              		.cfi_offset 14, -4
 332:Generated_Source\PSoC5/RTOS_port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 444              		.loc 1 332 0
 445 0002 094B     		ldr	r3, .L28
 446 0004 1A68     		ldr	r2, [r3]
 447 0006 1A60     		str	r2, [r3]
 333:Generated_Source\PSoC5/RTOS_port.c **** 
 448              		.loc 1 333 0
 449 0008 1A68     		ldr	r2, [r3]
 450 000a 1A60     		str	r2, [r3]
 337:Generated_Source\PSoC5/RTOS_port.c **** 
 451              		.loc 1 337 0
 452 000c FFF7FEFF 		bl	vPortSetupTimerInterrupt
 453              	.LVL13:
 340:Generated_Source\PSoC5/RTOS_port.c **** 
 454              		.loc 1 340 0
 455 0010 0024     		movs	r4, #0
 456 0012 064B     		ldr	r3, .L28+4
 457 0014 1C60     		str	r4, [r3]
 343:Generated_Source\PSoC5/RTOS_port.c **** 
 458              		.loc 1 343 0
 459 0016 FFF7FEFF 		bl	prvPortStartFirstTask
 460              	.LVL14:
 351:Generated_Source\PSoC5/RTOS_port.c ****     prvTaskExitError();
 461              		.loc 1 351 0
 462 001a FFF7FEFF 		bl	vTaskSwitchContext
 463              	.LVL15:
 352:Generated_Source\PSoC5/RTOS_port.c **** 
 464              		.loc 1 352 0
 465 001e FFF7FEFF 		bl	prvTaskExitError
 466              	.LVL16:
 356:Generated_Source\PSoC5/RTOS_port.c **** /*-----------------------------------------------------------*/
 467              		.loc 1 356 0
 468 0022 2046     		mov	r0, r4
 469 0024 10BD     		pop	{r4, pc}
 470              	.L29:
 471 0026 00BF     		.align	2
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 25


 472              	.L28:
 473 0028 20ED00E0 		.word	-536810208
 474 002c 00000000 		.word	.LANCHOR0
 475              		.cfi_endproc
 476              	.LFE71:
 477              		.size	xPortStartScheduler, .-xPortStartScheduler
 478              		.data
 479              		.align	2
 480              		.set	.LANCHOR0,. + 0
 481              		.type	uxCriticalNesting, %object
 482              		.size	uxCriticalNesting, 4
 483              	uxCriticalNesting:
 484 0000 AAAAAAAA 		.word	-1431655766
 485              		.text
 486              	.Letext0:
 487              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 488              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 489              		.file 5 "..\\..\\UCLL_Koen_lib.cylib\\myFreeRTOS\\Source\\include/projdefs.h"
 490              		.file 6 "..\\..\\UCLL_Koen_lib.cylib\\myFreeRTOS\\Source\\include/task.h"
 491              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 492              		.section	.debug_info,"",%progbits
 493              	.Ldebug_info0:
 494 0000 54030000 		.4byte	0x354
 495 0004 0400     		.2byte	0x4
 496 0006 00000000 		.4byte	.Ldebug_abbrev0
 497 000a 04       		.byte	0x4
 498 000b 01       		.uleb128 0x1
 499 000c AA000000 		.4byte	.LASF40
 500 0010 0C       		.byte	0xc
 501 0011 A9010000 		.4byte	.LASF41
 502 0015 95020000 		.4byte	.LASF42
 503 0019 00000000 		.4byte	.Ldebug_ranges0+0
 504 001d 00000000 		.4byte	0
 505 0021 00000000 		.4byte	.Ldebug_line0
 506 0025 02       		.uleb128 0x2
 507 0026 04       		.byte	0x4
 508 0027 05       		.byte	0x5
 509 0028 696E7400 		.ascii	"int\000"
 510 002c 03       		.uleb128 0x3
 511 002d 04       		.byte	0x4
 512 002e 07       		.byte	0x7
 513 002f F0010000 		.4byte	.LASF0
 514 0033 03       		.uleb128 0x3
 515 0034 08       		.byte	0x8
 516 0035 05       		.byte	0x5
 517 0036 66020000 		.4byte	.LASF1
 518 003a 03       		.uleb128 0x3
 519 003b 08       		.byte	0x8
 520 003c 04       		.byte	0x4
 521 003d 1E030000 		.4byte	.LASF2
 522 0041 03       		.uleb128 0x3
 523 0042 01       		.byte	0x1
 524 0043 06       		.byte	0x6
 525 0044 2A030000 		.4byte	.LASF3
 526 0048 03       		.uleb128 0x3
 527 0049 01       		.byte	0x1
 528 004a 08       		.byte	0x8
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 26


 529 004b 9C000000 		.4byte	.LASF4
 530 004f 03       		.uleb128 0x3
 531 0050 02       		.byte	0x2
 532 0051 05       		.byte	0x5
 533 0052 C9020000 		.4byte	.LASF5
 534 0056 03       		.uleb128 0x3
 535 0057 02       		.byte	0x2
 536 0058 07       		.byte	0x7
 537 0059 55010000 		.4byte	.LASF6
 538 005d 04       		.uleb128 0x4
 539 005e 3E000000 		.4byte	.LASF8
 540 0062 03       		.byte	0x3
 541 0063 3F       		.byte	0x3f
 542 0064 68000000 		.4byte	0x68
 543 0068 03       		.uleb128 0x3
 544 0069 04       		.byte	0x4
 545 006a 05       		.byte	0x5
 546 006b 48000000 		.4byte	.LASF7
 547 006f 04       		.uleb128 0x4
 548 0070 38010000 		.4byte	.LASF9
 549 0074 03       		.byte	0x3
 550 0075 41       		.byte	0x41
 551 0076 7A000000 		.4byte	0x7a
 552 007a 03       		.uleb128 0x3
 553 007b 04       		.byte	0x4
 554 007c 07       		.byte	0x7
 555 007d 43010000 		.4byte	.LASF10
 556 0081 03       		.uleb128 0x3
 557 0082 08       		.byte	0x8
 558 0083 07       		.byte	0x7
 559 0084 0A020000 		.4byte	.LASF11
 560 0088 04       		.uleb128 0x4
 561 0089 73000000 		.4byte	.LASF12
 562 008d 04       		.byte	0x4
 563 008e 2C       		.byte	0x2c
 564 008f 5D000000 		.4byte	0x5d
 565 0093 04       		.uleb128 0x4
 566 0094 E5020000 		.4byte	.LASF13
 567 0098 04       		.byte	0x4
 568 0099 30       		.byte	0x30
 569 009a 6F000000 		.4byte	0x6f
 570 009e 03       		.uleb128 0x3
 571 009f 04       		.byte	0x4
 572 00a0 04       		.byte	0x4
 573 00a1 7B000000 		.4byte	.LASF14
 574 00a5 03       		.uleb128 0x3
 575 00a6 08       		.byte	0x8
 576 00a7 04       		.byte	0x4
 577 00a8 75010000 		.4byte	.LASF15
 578 00ac 03       		.uleb128 0x3
 579 00ad 01       		.byte	0x1
 580 00ae 08       		.byte	0x8
 581 00af 74020000 		.4byte	.LASF16
 582 00b3 03       		.uleb128 0x3
 583 00b4 04       		.byte	0x4
 584 00b5 07       		.byte	0x7
 585 00b6 5D020000 		.4byte	.LASF17
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 27


 586 00ba 05       		.uleb128 0x5
 587 00bb 04       		.byte	0x4
 588 00bc 06       		.uleb128 0x6
 589 00bd 93000000 		.4byte	0x93
 590 00c1 04       		.uleb128 0x4
 591 00c2 64000000 		.4byte	.LASF18
 592 00c6 05       		.byte	0x5
 593 00c7 22       		.byte	0x22
 594 00c8 CC000000 		.4byte	0xcc
 595 00cc 07       		.uleb128 0x7
 596 00cd 04       		.byte	0x4
 597 00ce D2000000 		.4byte	0xd2
 598 00d2 08       		.uleb128 0x8
 599 00d3 DD000000 		.4byte	0xdd
 600 00d7 09       		.uleb128 0x9
 601 00d8 BA000000 		.4byte	0xba
 602 00dc 00       		.byte	0
 603 00dd 04       		.uleb128 0x4
 604 00de 79020000 		.4byte	.LASF19
 605 00e2 02       		.byte	0x2
 606 00e3 37       		.byte	0x37
 607 00e4 93000000 		.4byte	0x93
 608 00e8 04       		.uleb128 0x4
 609 00e9 FD020000 		.4byte	.LASF20
 610 00ed 02       		.byte	0x2
 611 00ee 38       		.byte	0x38
 612 00ef 68000000 		.4byte	0x68
 613 00f3 04       		.uleb128 0x4
 614 00f4 4A030000 		.4byte	.LASF21
 615 00f8 02       		.byte	0x2
 616 00f9 39       		.byte	0x39
 617 00fa 7A000000 		.4byte	0x7a
 618 00fe 07       		.uleb128 0x7
 619 00ff 04       		.byte	0x4
 620 0100 DD000000 		.4byte	0xdd
 621 0104 0A       		.uleb128 0xa
 622 0105 21020000 		.4byte	.LASF22
 623 0109 02       		.byte	0x2
 624 010a C3       		.byte	0xc3
 625 010b 03       		.byte	0x3
 626 010c 1C010000 		.4byte	0x11c
 627 0110 0B       		.uleb128 0xb
 628 0111 7C010000 		.4byte	.LASF43
 629 0115 02       		.byte	0x2
 630 0116 C5       		.byte	0xc5
 631 0117 93000000 		.4byte	0x93
 632 011b 00       		.byte	0
 633 011c 0A       		.uleb128 0xa
 634 011d CC010000 		.4byte	.LASF23
 635 0121 02       		.byte	0x2
 636 0122 E7       		.byte	0xe7
 637 0123 03       		.byte	0x3
 638 0124 34010000 		.4byte	0x134
 639 0128 0C       		.uleb128 0xc
 640 0129 EE020000 		.4byte	.LASF44
 641 012d 02       		.byte	0x2
 642 012e E7       		.byte	0xe7
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 28


 643 012f 93000000 		.4byte	0x93
 644 0133 00       		.byte	0
 645 0134 0D       		.uleb128 0xd
 646 0135 33020000 		.4byte	.LASF45
 647 0139 01       		.byte	0x1
 648 013a C3       		.byte	0xc3
 649 013b 00000000 		.4byte	.LFB68
 650 013f 20000000 		.4byte	.LFE68-.LFB68
 651 0143 01       		.uleb128 0x1
 652 0144 9C       		.byte	0x9c
 653 0145 77010000 		.4byte	0x177
 654 0149 0E       		.uleb128 0xe
 655 014a 94000000 		.4byte	.LASF36
 656 014e 01       		.byte	0x1
 657 014f C5       		.byte	0xc5
 658 0150 BC000000 		.4byte	0xbc
 659 0154 02       		.uleb128 0x2
 660 0155 91       		.byte	0x91
 661 0156 7C       		.sleb128 -4
 662 0157 0F       		.uleb128 0xf
 663 0158 04010000 		.4byte	0x104
 664 015c 06000000 		.4byte	.LBB12
 665 0160 10000000 		.4byte	.LBE12-.LBB12
 666 0164 01       		.byte	0x1
 667 0165 CE       		.byte	0xce
 668 0166 10       		.uleb128 0x10
 669 0167 06000000 		.4byte	.LBB13
 670 016b 10000000 		.4byte	.LBE13-.LBB13
 671 016f 11       		.uleb128 0x11
 672 0170 10010000 		.4byte	0x110
 673 0174 00       		.byte	0
 674 0175 00       		.byte	0
 675 0176 00       		.byte	0
 676 0177 12       		.uleb128 0x12
 677 0178 08030000 		.4byte	.LASF46
 678 017c 01       		.byte	0x1
 679 017d F1       		.byte	0xf1
 680 017e 00000000 		.4byte	.LFB70
 681 0182 20000000 		.4byte	.LFE70-.LFB70
 682 0186 01       		.uleb128 0x1
 683 0187 9C       		.byte	0x9c
 684 0188 13       		.uleb128 0x13
 685 0189 56030000 		.4byte	.LASF34
 686 018d 01       		.byte	0x1
 687 018e AF       		.byte	0xaf
 688 018f FE000000 		.4byte	0xfe
 689 0193 00000000 		.4byte	.LFB67
 690 0197 24000000 		.4byte	.LFE67-.LFB67
 691 019b 01       		.uleb128 0x1
 692 019c 9C       		.byte	0x9c
 693 019d CD010000 		.4byte	0x1cd
 694 01a1 14       		.uleb128 0x14
 695 01a2 FD010000 		.4byte	.LASF24
 696 01a6 01       		.byte	0x1
 697 01a7 AF       		.byte	0xaf
 698 01a8 FE000000 		.4byte	0xfe
 699 01ac 00000000 		.4byte	.LLST0
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 29


 700 01b0 14       		.uleb128 0x14
 701 01b1 25000000 		.4byte	.LASF25
 702 01b5 01       		.byte	0x1
 703 01b6 B0       		.byte	0xb0
 704 01b7 C1000000 		.4byte	0xc1
 705 01bb 5F000000 		.4byte	.LLST1
 706 01bf 15       		.uleb128 0x15
 707 01c0 89010000 		.4byte	.LASF26
 708 01c4 01       		.byte	0x1
 709 01c5 B1       		.byte	0xb1
 710 01c6 BA000000 		.4byte	0xba
 711 01ca 01       		.uleb128 0x1
 712 01cb 52       		.byte	0x52
 713 01cc 00       		.byte	0
 714 01cd 16       		.uleb128 0x16
 715 01ce 85020000 		.4byte	.LASF27
 716 01d2 01       		.byte	0x1
 717 01d3 DD       		.byte	0xdd
 718 01d4 00000000 		.4byte	.LFB69
 719 01d8 24000000 		.4byte	.LFE69-.LFB69
 720 01dc 01       		.uleb128 0x1
 721 01dd 9C       		.byte	0x9c
 722 01de 17       		.uleb128 0x17
 723 01df 2C000000 		.4byte	.LASF28
 724 01e3 01       		.byte	0x1
 725 01e4 6701     		.2byte	0x167
 726 01e6 00000000 		.4byte	.LFB72
 727 01ea 02000000 		.4byte	.LFE72-.LFB72
 728 01ee 01       		.uleb128 0x1
 729 01ef 9C       		.byte	0x9c
 730 01f0 18       		.uleb128 0x18
 731 01f1 12000000 		.4byte	.LASF29
 732 01f5 01       		.byte	0x1
 733 01f6 6F01     		.2byte	0x16f
 734 01f8 00000000 		.4byte	.LFB73
 735 01fc 20000000 		.4byte	.LFE73-.LFB73
 736 0200 01       		.uleb128 0x1
 737 0201 9C       		.byte	0x9c
 738 0202 27020000 		.4byte	0x227
 739 0206 19       		.uleb128 0x19
 740 0207 04010000 		.4byte	0x104
 741 020b 00000000 		.4byte	.LBB14
 742 020f 10000000 		.4byte	.LBE14-.LBB14
 743 0213 01       		.byte	0x1
 744 0214 7101     		.2byte	0x171
 745 0216 10       		.uleb128 0x10
 746 0217 00000000 		.4byte	.LBB15
 747 021b 10000000 		.4byte	.LBE15-.LBB15
 748 021f 11       		.uleb128 0x11
 749 0220 10010000 		.4byte	0x110
 750 0224 00       		.byte	0
 751 0225 00       		.byte	0
 752 0226 00       		.byte	0
 753 0227 18       		.uleb128 0x18
 754 0228 D3020000 		.4byte	.LASF30
 755 022c 01       		.byte	0x1
 756 022d 8001     		.2byte	0x180
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 30


 757 022f 00000000 		.4byte	.LFB74
 758 0233 14000000 		.4byte	.LFE74-.LFB74
 759 0237 01       		.uleb128 0x1
 760 0238 9C       		.byte	0x9c
 761 0239 58020000 		.4byte	0x258
 762 023d 19       		.uleb128 0x19
 763 023e 1C010000 		.4byte	0x11c
 764 0242 0A000000 		.4byte	.LBB16
 765 0246 0A000000 		.4byte	.LBE16-.LBB16
 766 024a 01       		.byte	0x1
 767 024b 8701     		.2byte	0x187
 768 024d 1A       		.uleb128 0x1a
 769 024e 28010000 		.4byte	0x128
 770 0252 80000000 		.4byte	.LLST2
 771 0256 00       		.byte	0
 772 0257 00       		.byte	0
 773 0258 17       		.uleb128 0x17
 774 0259 51000000 		.4byte	.LASF31
 775 025d 01       		.byte	0x1
 776 025e 8C01     		.2byte	0x18c
 777 0260 00000000 		.4byte	.LFB75
 778 0264 44000000 		.4byte	.LFE75-.LFB75
 779 0268 01       		.uleb128 0x1
 780 0269 9C       		.byte	0x9c
 781 026a 18       		.uleb128 0x18
 782 026b DC010000 		.4byte	.LASF32
 783 026f 01       		.byte	0x1
 784 0270 B101     		.2byte	0x1b1
 785 0272 00000000 		.4byte	.LFB76
 786 0276 2C000000 		.4byte	.LFE76-.LFB76
 787 027a 01       		.uleb128 0x1
 788 027b 9C       		.byte	0x9c
 789 027c CC020000 		.4byte	0x2cc
 790 0280 1B       		.uleb128 0x1b
 791 0281 04010000 		.4byte	0x104
 792 0285 02000000 		.4byte	.LBB18
 793 0289 10000000 		.4byte	.LBE18-.LBB18
 794 028d 01       		.byte	0x1
 795 028e B701     		.2byte	0x1b7
 796 0290 A4020000 		.4byte	0x2a4
 797 0294 10       		.uleb128 0x10
 798 0295 02000000 		.4byte	.LBB19
 799 0299 10000000 		.4byte	.LBE19-.LBB19
 800 029d 11       		.uleb128 0x11
 801 029e 10010000 		.4byte	0x110
 802 02a2 00       		.byte	0
 803 02a3 00       		.byte	0
 804 02a4 1B       		.uleb128 0x1b
 805 02a5 1C010000 		.4byte	0x11c
 806 02a9 20000000 		.4byte	.LBB20
 807 02ad 0C000000 		.4byte	.LBE20-.LBB20
 808 02b1 01       		.byte	0x1
 809 02b2 C101     		.2byte	0x1c1
 810 02b4 C2020000 		.4byte	0x2c2
 811 02b8 1A       		.uleb128 0x1a
 812 02b9 28010000 		.4byte	0x128
 813 02bd 94000000 		.4byte	.LLST3
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 31


 814 02c1 00       		.byte	0
 815 02c2 1C       		.uleb128 0x1c
 816 02c3 16000000 		.4byte	.LVL10
 817 02c7 3F030000 		.4byte	0x33f
 818 02cb 00       		.byte	0
 819 02cc 17       		.uleb128 0x17
 820 02cd 44020000 		.4byte	.LASF33
 821 02d1 01       		.byte	0x1
 822 02d2 7302     		.2byte	0x273
 823 02d4 00000000 		.4byte	.LFB77
 824 02d8 24000000 		.4byte	.LFE77-.LFB77
 825 02dc 01       		.uleb128 0x1
 826 02dd 9C       		.byte	0x9c
 827 02de 1D       		.uleb128 0x1d
 828 02df 36030000 		.4byte	.LASF35
 829 02e3 01       		.byte	0x1
 830 02e4 0601     		.2byte	0x106
 831 02e6 E8000000 		.4byte	0xe8
 832 02ea 00000000 		.4byte	.LFB71
 833 02ee 30000000 		.4byte	.LFE71-.LFB71
 834 02f2 01       		.uleb128 0x1
 835 02f3 9C       		.byte	0x9c
 836 02f4 1D030000 		.4byte	0x31d
 837 02f8 1C       		.uleb128 0x1c
 838 02f9 10000000 		.4byte	.LVL13
 839 02fd CC020000 		.4byte	0x2cc
 840 0301 1C       		.uleb128 0x1c
 841 0302 1A000000 		.4byte	.LVL14
 842 0306 77010000 		.4byte	0x177
 843 030a 1C       		.uleb128 0x1c
 844 030b 1E000000 		.4byte	.LVL15
 845 030f 4B030000 		.4byte	0x34b
 846 0313 1C       		.uleb128 0x1c
 847 0314 22000000 		.4byte	.LVL16
 848 0318 34010000 		.4byte	0x134
 849 031c 00       		.byte	0
 850 031d 0E       		.uleb128 0xe
 851 031e 00000000 		.4byte	.LASF37
 852 0322 01       		.byte	0x1
 853 0323 86       		.byte	0x86
 854 0324 F3000000 		.4byte	0xf3
 855 0328 05       		.uleb128 0x5
 856 0329 03       		.byte	0x3
 857 032a 00000000 		.4byte	uxCriticalNesting
 858 032e 1E       		.uleb128 0x1e
 859 032f 68010000 		.4byte	.LASF47
 860 0333 07       		.byte	0x7
 861 0334 1207     		.2byte	0x712
 862 0336 3A030000 		.4byte	0x33a
 863 033a 06       		.uleb128 0x6
 864 033b 88000000 		.4byte	0x88
 865 033f 1F       		.uleb128 0x1f
 866 0340 96010000 		.4byte	.LASF38
 867 0344 96010000 		.4byte	.LASF38
 868 0348 06       		.byte	0x6
 869 0349 1B0B     		.2byte	0xb1b
 870 034b 1F       		.uleb128 0x1f
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 32


 871 034c 81000000 		.4byte	.LASF39
 872 0350 81000000 		.4byte	.LASF39
 873 0354 06       		.byte	0x6
 874 0355 750B     		.2byte	0xb75
 875 0357 00       		.byte	0
 876              		.section	.debug_abbrev,"",%progbits
 877              	.Ldebug_abbrev0:
 878 0000 01       		.uleb128 0x1
 879 0001 11       		.uleb128 0x11
 880 0002 01       		.byte	0x1
 881 0003 25       		.uleb128 0x25
 882 0004 0E       		.uleb128 0xe
 883 0005 13       		.uleb128 0x13
 884 0006 0B       		.uleb128 0xb
 885 0007 03       		.uleb128 0x3
 886 0008 0E       		.uleb128 0xe
 887 0009 1B       		.uleb128 0x1b
 888 000a 0E       		.uleb128 0xe
 889 000b 55       		.uleb128 0x55
 890 000c 17       		.uleb128 0x17
 891 000d 11       		.uleb128 0x11
 892 000e 01       		.uleb128 0x1
 893 000f 10       		.uleb128 0x10
 894 0010 17       		.uleb128 0x17
 895 0011 00       		.byte	0
 896 0012 00       		.byte	0
 897 0013 02       		.uleb128 0x2
 898 0014 24       		.uleb128 0x24
 899 0015 00       		.byte	0
 900 0016 0B       		.uleb128 0xb
 901 0017 0B       		.uleb128 0xb
 902 0018 3E       		.uleb128 0x3e
 903 0019 0B       		.uleb128 0xb
 904 001a 03       		.uleb128 0x3
 905 001b 08       		.uleb128 0x8
 906 001c 00       		.byte	0
 907 001d 00       		.byte	0
 908 001e 03       		.uleb128 0x3
 909 001f 24       		.uleb128 0x24
 910 0020 00       		.byte	0
 911 0021 0B       		.uleb128 0xb
 912 0022 0B       		.uleb128 0xb
 913 0023 3E       		.uleb128 0x3e
 914 0024 0B       		.uleb128 0xb
 915 0025 03       		.uleb128 0x3
 916 0026 0E       		.uleb128 0xe
 917 0027 00       		.byte	0
 918 0028 00       		.byte	0
 919 0029 04       		.uleb128 0x4
 920 002a 16       		.uleb128 0x16
 921 002b 00       		.byte	0
 922 002c 03       		.uleb128 0x3
 923 002d 0E       		.uleb128 0xe
 924 002e 3A       		.uleb128 0x3a
 925 002f 0B       		.uleb128 0xb
 926 0030 3B       		.uleb128 0x3b
 927 0031 0B       		.uleb128 0xb
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 33


 928 0032 49       		.uleb128 0x49
 929 0033 13       		.uleb128 0x13
 930 0034 00       		.byte	0
 931 0035 00       		.byte	0
 932 0036 05       		.uleb128 0x5
 933 0037 0F       		.uleb128 0xf
 934 0038 00       		.byte	0
 935 0039 0B       		.uleb128 0xb
 936 003a 0B       		.uleb128 0xb
 937 003b 00       		.byte	0
 938 003c 00       		.byte	0
 939 003d 06       		.uleb128 0x6
 940 003e 35       		.uleb128 0x35
 941 003f 00       		.byte	0
 942 0040 49       		.uleb128 0x49
 943 0041 13       		.uleb128 0x13
 944 0042 00       		.byte	0
 945 0043 00       		.byte	0
 946 0044 07       		.uleb128 0x7
 947 0045 0F       		.uleb128 0xf
 948 0046 00       		.byte	0
 949 0047 0B       		.uleb128 0xb
 950 0048 0B       		.uleb128 0xb
 951 0049 49       		.uleb128 0x49
 952 004a 13       		.uleb128 0x13
 953 004b 00       		.byte	0
 954 004c 00       		.byte	0
 955 004d 08       		.uleb128 0x8
 956 004e 15       		.uleb128 0x15
 957 004f 01       		.byte	0x1
 958 0050 27       		.uleb128 0x27
 959 0051 19       		.uleb128 0x19
 960 0052 01       		.uleb128 0x1
 961 0053 13       		.uleb128 0x13
 962 0054 00       		.byte	0
 963 0055 00       		.byte	0
 964 0056 09       		.uleb128 0x9
 965 0057 05       		.uleb128 0x5
 966 0058 00       		.byte	0
 967 0059 49       		.uleb128 0x49
 968 005a 13       		.uleb128 0x13
 969 005b 00       		.byte	0
 970 005c 00       		.byte	0
 971 005d 0A       		.uleb128 0xa
 972 005e 2E       		.uleb128 0x2e
 973 005f 01       		.byte	0x1
 974 0060 03       		.uleb128 0x3
 975 0061 0E       		.uleb128 0xe
 976 0062 3A       		.uleb128 0x3a
 977 0063 0B       		.uleb128 0xb
 978 0064 3B       		.uleb128 0x3b
 979 0065 0B       		.uleb128 0xb
 980 0066 27       		.uleb128 0x27
 981 0067 19       		.uleb128 0x19
 982 0068 20       		.uleb128 0x20
 983 0069 0B       		.uleb128 0xb
 984 006a 01       		.uleb128 0x1
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 34


 985 006b 13       		.uleb128 0x13
 986 006c 00       		.byte	0
 987 006d 00       		.byte	0
 988 006e 0B       		.uleb128 0xb
 989 006f 34       		.uleb128 0x34
 990 0070 00       		.byte	0
 991 0071 03       		.uleb128 0x3
 992 0072 0E       		.uleb128 0xe
 993 0073 3A       		.uleb128 0x3a
 994 0074 0B       		.uleb128 0xb
 995 0075 3B       		.uleb128 0x3b
 996 0076 0B       		.uleb128 0xb
 997 0077 49       		.uleb128 0x49
 998 0078 13       		.uleb128 0x13
 999 0079 00       		.byte	0
 1000 007a 00       		.byte	0
 1001 007b 0C       		.uleb128 0xc
 1002 007c 05       		.uleb128 0x5
 1003 007d 00       		.byte	0
 1004 007e 03       		.uleb128 0x3
 1005 007f 0E       		.uleb128 0xe
 1006 0080 3A       		.uleb128 0x3a
 1007 0081 0B       		.uleb128 0xb
 1008 0082 3B       		.uleb128 0x3b
 1009 0083 0B       		.uleb128 0xb
 1010 0084 49       		.uleb128 0x49
 1011 0085 13       		.uleb128 0x13
 1012 0086 00       		.byte	0
 1013 0087 00       		.byte	0
 1014 0088 0D       		.uleb128 0xd
 1015 0089 2E       		.uleb128 0x2e
 1016 008a 01       		.byte	0x1
 1017 008b 03       		.uleb128 0x3
 1018 008c 0E       		.uleb128 0xe
 1019 008d 3A       		.uleb128 0x3a
 1020 008e 0B       		.uleb128 0xb
 1021 008f 3B       		.uleb128 0x3b
 1022 0090 0B       		.uleb128 0xb
 1023 0091 27       		.uleb128 0x27
 1024 0092 19       		.uleb128 0x19
 1025 0093 11       		.uleb128 0x11
 1026 0094 01       		.uleb128 0x1
 1027 0095 12       		.uleb128 0x12
 1028 0096 06       		.uleb128 0x6
 1029 0097 40       		.uleb128 0x40
 1030 0098 18       		.uleb128 0x18
 1031 0099 9742     		.uleb128 0x2117
 1032 009b 19       		.uleb128 0x19
 1033 009c 01       		.uleb128 0x1
 1034 009d 13       		.uleb128 0x13
 1035 009e 00       		.byte	0
 1036 009f 00       		.byte	0
 1037 00a0 0E       		.uleb128 0xe
 1038 00a1 34       		.uleb128 0x34
 1039 00a2 00       		.byte	0
 1040 00a3 03       		.uleb128 0x3
 1041 00a4 0E       		.uleb128 0xe
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 35


 1042 00a5 3A       		.uleb128 0x3a
 1043 00a6 0B       		.uleb128 0xb
 1044 00a7 3B       		.uleb128 0x3b
 1045 00a8 0B       		.uleb128 0xb
 1046 00a9 49       		.uleb128 0x49
 1047 00aa 13       		.uleb128 0x13
 1048 00ab 02       		.uleb128 0x2
 1049 00ac 18       		.uleb128 0x18
 1050 00ad 00       		.byte	0
 1051 00ae 00       		.byte	0
 1052 00af 0F       		.uleb128 0xf
 1053 00b0 1D       		.uleb128 0x1d
 1054 00b1 01       		.byte	0x1
 1055 00b2 31       		.uleb128 0x31
 1056 00b3 13       		.uleb128 0x13
 1057 00b4 11       		.uleb128 0x11
 1058 00b5 01       		.uleb128 0x1
 1059 00b6 12       		.uleb128 0x12
 1060 00b7 06       		.uleb128 0x6
 1061 00b8 58       		.uleb128 0x58
 1062 00b9 0B       		.uleb128 0xb
 1063 00ba 59       		.uleb128 0x59
 1064 00bb 0B       		.uleb128 0xb
 1065 00bc 00       		.byte	0
 1066 00bd 00       		.byte	0
 1067 00be 10       		.uleb128 0x10
 1068 00bf 0B       		.uleb128 0xb
 1069 00c0 01       		.byte	0x1
 1070 00c1 11       		.uleb128 0x11
 1071 00c2 01       		.uleb128 0x1
 1072 00c3 12       		.uleb128 0x12
 1073 00c4 06       		.uleb128 0x6
 1074 00c5 00       		.byte	0
 1075 00c6 00       		.byte	0
 1076 00c7 11       		.uleb128 0x11
 1077 00c8 34       		.uleb128 0x34
 1078 00c9 00       		.byte	0
 1079 00ca 31       		.uleb128 0x31
 1080 00cb 13       		.uleb128 0x13
 1081 00cc 00       		.byte	0
 1082 00cd 00       		.byte	0
 1083 00ce 12       		.uleb128 0x12
 1084 00cf 2E       		.uleb128 0x2e
 1085 00d0 00       		.byte	0
 1086 00d1 03       		.uleb128 0x3
 1087 00d2 0E       		.uleb128 0xe
 1088 00d3 3A       		.uleb128 0x3a
 1089 00d4 0B       		.uleb128 0xb
 1090 00d5 3B       		.uleb128 0x3b
 1091 00d6 0B       		.uleb128 0xb
 1092 00d7 27       		.uleb128 0x27
 1093 00d8 19       		.uleb128 0x19
 1094 00d9 11       		.uleb128 0x11
 1095 00da 01       		.uleb128 0x1
 1096 00db 12       		.uleb128 0x12
 1097 00dc 06       		.uleb128 0x6
 1098 00dd 40       		.uleb128 0x40
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 36


 1099 00de 18       		.uleb128 0x18
 1100 00df 9742     		.uleb128 0x2117
 1101 00e1 19       		.uleb128 0x19
 1102 00e2 00       		.byte	0
 1103 00e3 00       		.byte	0
 1104 00e4 13       		.uleb128 0x13
 1105 00e5 2E       		.uleb128 0x2e
 1106 00e6 01       		.byte	0x1
 1107 00e7 3F       		.uleb128 0x3f
 1108 00e8 19       		.uleb128 0x19
 1109 00e9 03       		.uleb128 0x3
 1110 00ea 0E       		.uleb128 0xe
 1111 00eb 3A       		.uleb128 0x3a
 1112 00ec 0B       		.uleb128 0xb
 1113 00ed 3B       		.uleb128 0x3b
 1114 00ee 0B       		.uleb128 0xb
 1115 00ef 27       		.uleb128 0x27
 1116 00f0 19       		.uleb128 0x19
 1117 00f1 49       		.uleb128 0x49
 1118 00f2 13       		.uleb128 0x13
 1119 00f3 11       		.uleb128 0x11
 1120 00f4 01       		.uleb128 0x1
 1121 00f5 12       		.uleb128 0x12
 1122 00f6 06       		.uleb128 0x6
 1123 00f7 40       		.uleb128 0x40
 1124 00f8 18       		.uleb128 0x18
 1125 00f9 9742     		.uleb128 0x2117
 1126 00fb 19       		.uleb128 0x19
 1127 00fc 01       		.uleb128 0x1
 1128 00fd 13       		.uleb128 0x13
 1129 00fe 00       		.byte	0
 1130 00ff 00       		.byte	0
 1131 0100 14       		.uleb128 0x14
 1132 0101 05       		.uleb128 0x5
 1133 0102 00       		.byte	0
 1134 0103 03       		.uleb128 0x3
 1135 0104 0E       		.uleb128 0xe
 1136 0105 3A       		.uleb128 0x3a
 1137 0106 0B       		.uleb128 0xb
 1138 0107 3B       		.uleb128 0x3b
 1139 0108 0B       		.uleb128 0xb
 1140 0109 49       		.uleb128 0x49
 1141 010a 13       		.uleb128 0x13
 1142 010b 02       		.uleb128 0x2
 1143 010c 17       		.uleb128 0x17
 1144 010d 00       		.byte	0
 1145 010e 00       		.byte	0
 1146 010f 15       		.uleb128 0x15
 1147 0110 05       		.uleb128 0x5
 1148 0111 00       		.byte	0
 1149 0112 03       		.uleb128 0x3
 1150 0113 0E       		.uleb128 0xe
 1151 0114 3A       		.uleb128 0x3a
 1152 0115 0B       		.uleb128 0xb
 1153 0116 3B       		.uleb128 0x3b
 1154 0117 0B       		.uleb128 0xb
 1155 0118 49       		.uleb128 0x49
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 37


 1156 0119 13       		.uleb128 0x13
 1157 011a 02       		.uleb128 0x2
 1158 011b 18       		.uleb128 0x18
 1159 011c 00       		.byte	0
 1160 011d 00       		.byte	0
 1161 011e 16       		.uleb128 0x16
 1162 011f 2E       		.uleb128 0x2e
 1163 0120 00       		.byte	0
 1164 0121 3F       		.uleb128 0x3f
 1165 0122 19       		.uleb128 0x19
 1166 0123 03       		.uleb128 0x3
 1167 0124 0E       		.uleb128 0xe
 1168 0125 3A       		.uleb128 0x3a
 1169 0126 0B       		.uleb128 0xb
 1170 0127 3B       		.uleb128 0x3b
 1171 0128 0B       		.uleb128 0xb
 1172 0129 27       		.uleb128 0x27
 1173 012a 19       		.uleb128 0x19
 1174 012b 11       		.uleb128 0x11
 1175 012c 01       		.uleb128 0x1
 1176 012d 12       		.uleb128 0x12
 1177 012e 06       		.uleb128 0x6
 1178 012f 40       		.uleb128 0x40
 1179 0130 18       		.uleb128 0x18
 1180 0131 9742     		.uleb128 0x2117
 1181 0133 19       		.uleb128 0x19
 1182 0134 00       		.byte	0
 1183 0135 00       		.byte	0
 1184 0136 17       		.uleb128 0x17
 1185 0137 2E       		.uleb128 0x2e
 1186 0138 00       		.byte	0
 1187 0139 3F       		.uleb128 0x3f
 1188 013a 19       		.uleb128 0x19
 1189 013b 03       		.uleb128 0x3
 1190 013c 0E       		.uleb128 0xe
 1191 013d 3A       		.uleb128 0x3a
 1192 013e 0B       		.uleb128 0xb
 1193 013f 3B       		.uleb128 0x3b
 1194 0140 05       		.uleb128 0x5
 1195 0141 27       		.uleb128 0x27
 1196 0142 19       		.uleb128 0x19
 1197 0143 11       		.uleb128 0x11
 1198 0144 01       		.uleb128 0x1
 1199 0145 12       		.uleb128 0x12
 1200 0146 06       		.uleb128 0x6
 1201 0147 40       		.uleb128 0x40
 1202 0148 18       		.uleb128 0x18
 1203 0149 9742     		.uleb128 0x2117
 1204 014b 19       		.uleb128 0x19
 1205 014c 00       		.byte	0
 1206 014d 00       		.byte	0
 1207 014e 18       		.uleb128 0x18
 1208 014f 2E       		.uleb128 0x2e
 1209 0150 01       		.byte	0x1
 1210 0151 3F       		.uleb128 0x3f
 1211 0152 19       		.uleb128 0x19
 1212 0153 03       		.uleb128 0x3
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 38


 1213 0154 0E       		.uleb128 0xe
 1214 0155 3A       		.uleb128 0x3a
 1215 0156 0B       		.uleb128 0xb
 1216 0157 3B       		.uleb128 0x3b
 1217 0158 05       		.uleb128 0x5
 1218 0159 27       		.uleb128 0x27
 1219 015a 19       		.uleb128 0x19
 1220 015b 11       		.uleb128 0x11
 1221 015c 01       		.uleb128 0x1
 1222 015d 12       		.uleb128 0x12
 1223 015e 06       		.uleb128 0x6
 1224 015f 40       		.uleb128 0x40
 1225 0160 18       		.uleb128 0x18
 1226 0161 9742     		.uleb128 0x2117
 1227 0163 19       		.uleb128 0x19
 1228 0164 01       		.uleb128 0x1
 1229 0165 13       		.uleb128 0x13
 1230 0166 00       		.byte	0
 1231 0167 00       		.byte	0
 1232 0168 19       		.uleb128 0x19
 1233 0169 1D       		.uleb128 0x1d
 1234 016a 01       		.byte	0x1
 1235 016b 31       		.uleb128 0x31
 1236 016c 13       		.uleb128 0x13
 1237 016d 11       		.uleb128 0x11
 1238 016e 01       		.uleb128 0x1
 1239 016f 12       		.uleb128 0x12
 1240 0170 06       		.uleb128 0x6
 1241 0171 58       		.uleb128 0x58
 1242 0172 0B       		.uleb128 0xb
 1243 0173 59       		.uleb128 0x59
 1244 0174 05       		.uleb128 0x5
 1245 0175 00       		.byte	0
 1246 0176 00       		.byte	0
 1247 0177 1A       		.uleb128 0x1a
 1248 0178 05       		.uleb128 0x5
 1249 0179 00       		.byte	0
 1250 017a 31       		.uleb128 0x31
 1251 017b 13       		.uleb128 0x13
 1252 017c 02       		.uleb128 0x2
 1253 017d 17       		.uleb128 0x17
 1254 017e 00       		.byte	0
 1255 017f 00       		.byte	0
 1256 0180 1B       		.uleb128 0x1b
 1257 0181 1D       		.uleb128 0x1d
 1258 0182 01       		.byte	0x1
 1259 0183 31       		.uleb128 0x31
 1260 0184 13       		.uleb128 0x13
 1261 0185 11       		.uleb128 0x11
 1262 0186 01       		.uleb128 0x1
 1263 0187 12       		.uleb128 0x12
 1264 0188 06       		.uleb128 0x6
 1265 0189 58       		.uleb128 0x58
 1266 018a 0B       		.uleb128 0xb
 1267 018b 59       		.uleb128 0x59
 1268 018c 05       		.uleb128 0x5
 1269 018d 01       		.uleb128 0x1
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 39


 1270 018e 13       		.uleb128 0x13
 1271 018f 00       		.byte	0
 1272 0190 00       		.byte	0
 1273 0191 1C       		.uleb128 0x1c
 1274 0192 898201   		.uleb128 0x4109
 1275 0195 00       		.byte	0
 1276 0196 11       		.uleb128 0x11
 1277 0197 01       		.uleb128 0x1
 1278 0198 31       		.uleb128 0x31
 1279 0199 13       		.uleb128 0x13
 1280 019a 00       		.byte	0
 1281 019b 00       		.byte	0
 1282 019c 1D       		.uleb128 0x1d
 1283 019d 2E       		.uleb128 0x2e
 1284 019e 01       		.byte	0x1
 1285 019f 3F       		.uleb128 0x3f
 1286 01a0 19       		.uleb128 0x19
 1287 01a1 03       		.uleb128 0x3
 1288 01a2 0E       		.uleb128 0xe
 1289 01a3 3A       		.uleb128 0x3a
 1290 01a4 0B       		.uleb128 0xb
 1291 01a5 3B       		.uleb128 0x3b
 1292 01a6 05       		.uleb128 0x5
 1293 01a7 27       		.uleb128 0x27
 1294 01a8 19       		.uleb128 0x19
 1295 01a9 49       		.uleb128 0x49
 1296 01aa 13       		.uleb128 0x13
 1297 01ab 11       		.uleb128 0x11
 1298 01ac 01       		.uleb128 0x1
 1299 01ad 12       		.uleb128 0x12
 1300 01ae 06       		.uleb128 0x6
 1301 01af 40       		.uleb128 0x40
 1302 01b0 18       		.uleb128 0x18
 1303 01b1 9742     		.uleb128 0x2117
 1304 01b3 19       		.uleb128 0x19
 1305 01b4 01       		.uleb128 0x1
 1306 01b5 13       		.uleb128 0x13
 1307 01b6 00       		.byte	0
 1308 01b7 00       		.byte	0
 1309 01b8 1E       		.uleb128 0x1e
 1310 01b9 34       		.uleb128 0x34
 1311 01ba 00       		.byte	0
 1312 01bb 03       		.uleb128 0x3
 1313 01bc 0E       		.uleb128 0xe
 1314 01bd 3A       		.uleb128 0x3a
 1315 01be 0B       		.uleb128 0xb
 1316 01bf 3B       		.uleb128 0x3b
 1317 01c0 05       		.uleb128 0x5
 1318 01c1 49       		.uleb128 0x49
 1319 01c2 13       		.uleb128 0x13
 1320 01c3 3F       		.uleb128 0x3f
 1321 01c4 19       		.uleb128 0x19
 1322 01c5 3C       		.uleb128 0x3c
 1323 01c6 19       		.uleb128 0x19
 1324 01c7 00       		.byte	0
 1325 01c8 00       		.byte	0
 1326 01c9 1F       		.uleb128 0x1f
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 40


 1327 01ca 2E       		.uleb128 0x2e
 1328 01cb 00       		.byte	0
 1329 01cc 3F       		.uleb128 0x3f
 1330 01cd 19       		.uleb128 0x19
 1331 01ce 3C       		.uleb128 0x3c
 1332 01cf 19       		.uleb128 0x19
 1333 01d0 6E       		.uleb128 0x6e
 1334 01d1 0E       		.uleb128 0xe
 1335 01d2 03       		.uleb128 0x3
 1336 01d3 0E       		.uleb128 0xe
 1337 01d4 3A       		.uleb128 0x3a
 1338 01d5 0B       		.uleb128 0xb
 1339 01d6 3B       		.uleb128 0x3b
 1340 01d7 05       		.uleb128 0x5
 1341 01d8 00       		.byte	0
 1342 01d9 00       		.byte	0
 1343 01da 00       		.byte	0
 1344              		.section	.debug_loc,"",%progbits
 1345              	.Ldebug_loc0:
 1346              	.LLST0:
 1347 0000 00000000 		.4byte	.LVL1
 1348 0004 00000000 		.4byte	.LVL1
 1349 0008 0100     		.2byte	0x1
 1350 000a 50       		.byte	0x50
 1351 000b 00000000 		.4byte	.LVL1
 1352 000f 08000000 		.4byte	.LVL2
 1353 0013 0300     		.2byte	0x3
 1354 0015 70       		.byte	0x70
 1355 0016 7C       		.sleb128 -4
 1356 0017 9F       		.byte	0x9f
 1357 0018 08000000 		.4byte	.LVL2
 1358 001c 10000000 		.4byte	.LVL4
 1359 0020 0300     		.2byte	0x3
 1360 0022 70       		.byte	0x70
 1361 0023 78       		.sleb128 -8
 1362 0024 9F       		.byte	0x9f
 1363 0025 10000000 		.4byte	.LVL4
 1364 0029 16000000 		.4byte	.LVL5
 1365 002d 0300     		.2byte	0x3
 1366 002f 70       		.byte	0x70
 1367 0030 74       		.sleb128 -12
 1368 0031 9F       		.byte	0x9f
 1369 0032 16000000 		.4byte	.LVL5
 1370 0036 1A000000 		.4byte	.LVL6
 1371 003a 0300     		.2byte	0x3
 1372 003c 70       		.byte	0x70
 1373 003d 60       		.sleb128 -32
 1374 003e 9F       		.byte	0x9f
 1375 003f 1A000000 		.4byte	.LVL6
 1376 0043 1C000000 		.4byte	.LVL7
 1377 0047 0300     		.2byte	0x3
 1378 0049 70       		.byte	0x70
 1379 004a 40       		.sleb128 -64
 1380 004b 9F       		.byte	0x9f
 1381 004c 1C000000 		.4byte	.LVL7
 1382 0050 24000000 		.4byte	.LFE67
 1383 0054 0100     		.2byte	0x1
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 41


 1384 0056 50       		.byte	0x50
 1385 0057 00000000 		.4byte	0
 1386 005b 00000000 		.4byte	0
 1387              	.LLST1:
 1388 005f 00000000 		.4byte	.LVL1
 1389 0063 0C000000 		.4byte	.LVL3
 1390 0067 0100     		.2byte	0x1
 1391 0069 51       		.byte	0x51
 1392 006a 0C000000 		.4byte	.LVL3
 1393 006e 24000000 		.4byte	.LFE67
 1394 0072 0400     		.2byte	0x4
 1395 0074 F3       		.byte	0xf3
 1396 0075 01       		.uleb128 0x1
 1397 0076 51       		.byte	0x51
 1398 0077 9F       		.byte	0x9f
 1399 0078 00000000 		.4byte	0
 1400 007c 00000000 		.4byte	0
 1401              	.LLST2:
 1402 0080 0A000000 		.4byte	.LVL8
 1403 0084 0E000000 		.4byte	.LVL9
 1404 0088 0200     		.2byte	0x2
 1405 008a 30       		.byte	0x30
 1406 008b 9F       		.byte	0x9f
 1407 008c 00000000 		.4byte	0
 1408 0090 00000000 		.4byte	0
 1409              	.LLST3:
 1410 0094 20000000 		.4byte	.LVL11
 1411 0098 26000000 		.4byte	.LVL12
 1412 009c 0200     		.2byte	0x2
 1413 009e 30       		.byte	0x30
 1414 009f 9F       		.byte	0x9f
 1415 00a0 00000000 		.4byte	0
 1416 00a4 00000000 		.4byte	0
 1417              		.section	.debug_aranges,"",%progbits
 1418 0000 6C000000 		.4byte	0x6c
 1419 0004 0200     		.2byte	0x2
 1420 0006 00000000 		.4byte	.Ldebug_info0
 1421 000a 04       		.byte	0x4
 1422 000b 00       		.byte	0
 1423 000c 0000     		.2byte	0
 1424 000e 0000     		.2byte	0
 1425 0010 00000000 		.4byte	.LFB68
 1426 0014 20000000 		.4byte	.LFE68-.LFB68
 1427 0018 00000000 		.4byte	.LFB70
 1428 001c 20000000 		.4byte	.LFE70-.LFB70
 1429 0020 00000000 		.4byte	.LFB67
 1430 0024 24000000 		.4byte	.LFE67-.LFB67
 1431 0028 00000000 		.4byte	.LFB69
 1432 002c 24000000 		.4byte	.LFE69-.LFB69
 1433 0030 00000000 		.4byte	.LFB72
 1434 0034 02000000 		.4byte	.LFE72-.LFB72
 1435 0038 00000000 		.4byte	.LFB73
 1436 003c 20000000 		.4byte	.LFE73-.LFB73
 1437 0040 00000000 		.4byte	.LFB74
 1438 0044 14000000 		.4byte	.LFE74-.LFB74
 1439 0048 00000000 		.4byte	.LFB75
 1440 004c 44000000 		.4byte	.LFE75-.LFB75
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 42


 1441 0050 00000000 		.4byte	.LFB76
 1442 0054 2C000000 		.4byte	.LFE76-.LFB76
 1443 0058 00000000 		.4byte	.LFB77
 1444 005c 24000000 		.4byte	.LFE77-.LFB77
 1445 0060 00000000 		.4byte	.LFB71
 1446 0064 30000000 		.4byte	.LFE71-.LFB71
 1447 0068 00000000 		.4byte	0
 1448 006c 00000000 		.4byte	0
 1449              		.section	.debug_ranges,"",%progbits
 1450              	.Ldebug_ranges0:
 1451 0000 00000000 		.4byte	.LFB68
 1452 0004 20000000 		.4byte	.LFE68
 1453 0008 00000000 		.4byte	.LFB70
 1454 000c 20000000 		.4byte	.LFE70
 1455 0010 00000000 		.4byte	.LFB67
 1456 0014 24000000 		.4byte	.LFE67
 1457 0018 00000000 		.4byte	.LFB69
 1458 001c 24000000 		.4byte	.LFE69
 1459 0020 00000000 		.4byte	.LFB72
 1460 0024 02000000 		.4byte	.LFE72
 1461 0028 00000000 		.4byte	.LFB73
 1462 002c 20000000 		.4byte	.LFE73
 1463 0030 00000000 		.4byte	.LFB74
 1464 0034 14000000 		.4byte	.LFE74
 1465 0038 00000000 		.4byte	.LFB75
 1466 003c 44000000 		.4byte	.LFE75
 1467 0040 00000000 		.4byte	.LFB76
 1468 0044 2C000000 		.4byte	.LFE76
 1469 0048 00000000 		.4byte	.LFB77
 1470 004c 24000000 		.4byte	.LFE77
 1471 0050 00000000 		.4byte	.LFB71
 1472 0054 30000000 		.4byte	.LFE71
 1473 0058 00000000 		.4byte	0
 1474 005c 00000000 		.4byte	0
 1475              		.section	.debug_line,"",%progbits
 1476              	.Ldebug_line0:
 1477 0000 03030000 		.section	.debug_str,"MS",%progbits,1
 1477      0200F401 
 1477      00000201 
 1477      FB0E0D00 
 1477      01010101 
 1478              	.LASF37:
 1479 0000 75784372 		.ascii	"uxCriticalNesting\000"
 1479      69746963 
 1479      616C4E65 
 1479      7374696E 
 1479      6700
 1480              	.LASF29:
 1481 0012 76506F72 		.ascii	"vPortEnterCritical\000"
 1481      74456E74 
 1481      65724372 
 1481      69746963 
 1481      616C00
 1482              	.LASF25:
 1483 0025 7078436F 		.ascii	"pxCode\000"
 1483      646500
 1484              	.LASF28:
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 43


 1485 002c 76506F72 		.ascii	"vPortEndScheduler\000"
 1485      74456E64 
 1485      53636865 
 1485      64756C65 
 1485      7200
 1486              	.LASF8:
 1487 003e 5F5F696E 		.ascii	"__int32_t\000"
 1487      7433325F 
 1487      7400
 1488              	.LASF7:
 1489 0048 6C6F6E67 		.ascii	"long int\000"
 1489      20696E74 
 1489      00
 1490              	.LASF31:
 1491 0051 78506F72 		.ascii	"xPortPendSVHandler\000"
 1491      7450656E 
 1491      64535648 
 1491      616E646C 
 1491      657200
 1492              	.LASF18:
 1493 0064 5461736B 		.ascii	"TaskFunction_t\000"
 1493      46756E63 
 1493      74696F6E 
 1493      5F7400
 1494              	.LASF12:
 1495 0073 696E7433 		.ascii	"int32_t\000"
 1495      325F7400 
 1496              	.LASF14:
 1497 007b 666C6F61 		.ascii	"float\000"
 1497      7400
 1498              	.LASF39:
 1499 0081 76546173 		.ascii	"vTaskSwitchContext\000"
 1499      6B537769 
 1499      74636843 
 1499      6F6E7465 
 1499      787400
 1500              	.LASF36:
 1501 0094 756C4475 		.ascii	"ulDummy\000"
 1501      6D6D7900 
 1502              	.LASF4:
 1503 009c 756E7369 		.ascii	"unsigned char\000"
 1503      676E6564 
 1503      20636861 
 1503      7200
 1504              	.LASF40:
 1505 00aa 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1505      43313120 
 1505      352E342E 
 1505      31203230 
 1505      31363036 
 1506 00dd 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1506      20726576 
 1506      6973696F 
 1506      6E203233 
 1506      37373135 
 1507 0110 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1507      66756E63 
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 44


 1507      74696F6E 
 1507      2D736563 
 1507      74696F6E 
 1508              	.LASF9:
 1509 0138 5F5F7569 		.ascii	"__uint32_t\000"
 1509      6E743332 
 1509      5F7400
 1510              	.LASF10:
 1511 0143 6C6F6E67 		.ascii	"long unsigned int\000"
 1511      20756E73 
 1511      69676E65 
 1511      6420696E 
 1511      7400
 1512              	.LASF6:
 1513 0155 73686F72 		.ascii	"short unsigned int\000"
 1513      7420756E 
 1513      7369676E 
 1513      65642069 
 1513      6E7400
 1514              	.LASF47:
 1515 0168 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1515      52784275 
 1515      66666572 
 1515      00
 1516              	.LASF15:
 1517 0175 646F7562 		.ascii	"double\000"
 1517      6C6500
 1518              	.LASF43:
 1519 017c 756C4E65 		.ascii	"ulNewBASEPRI\000"
 1519      77424153 
 1519      45505249 
 1519      00
 1520              	.LASF26:
 1521 0189 70765061 		.ascii	"pvParameters\000"
 1521      72616D65 
 1521      74657273 
 1521      00
 1522              	.LASF38:
 1523 0196 78546173 		.ascii	"xTaskIncrementTick\000"
 1523      6B496E63 
 1523      72656D65 
 1523      6E745469 
 1523      636B00
 1524              	.LASF41:
 1525 01a9 47656E65 		.ascii	"Generated_Source\\PSoC5\\RTOS_port.c\000"
 1525      72617465 
 1525      645F536F 
 1525      75726365 
 1525      5C50536F 
 1526              	.LASF23:
 1527 01cc 76506F72 		.ascii	"vPortSetBASEPRI\000"
 1527      74536574 
 1527      42415345 
 1527      50524900 
 1528              	.LASF32:
 1529 01dc 78506F72 		.ascii	"xPortSysTickHandler\000"
 1529      74537973 
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 45


 1529      5469636B 
 1529      48616E64 
 1529      6C657200 
 1530              	.LASF0:
 1531 01f0 756E7369 		.ascii	"unsigned int\000"
 1531      676E6564 
 1531      20696E74 
 1531      00
 1532              	.LASF24:
 1533 01fd 7078546F 		.ascii	"pxTopOfStack\000"
 1533      704F6653 
 1533      7461636B 
 1533      00
 1534              	.LASF11:
 1535 020a 6C6F6E67 		.ascii	"long long unsigned int\000"
 1535      206C6F6E 
 1535      6720756E 
 1535      7369676E 
 1535      65642069 
 1536              	.LASF22:
 1537 0221 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 1537      74526169 
 1537      73654241 
 1537      53455052 
 1537      4900
 1538              	.LASF45:
 1539 0233 70727654 		.ascii	"prvTaskExitError\000"
 1539      61736B45 
 1539      78697445 
 1539      72726F72 
 1539      00
 1540              	.LASF33:
 1541 0244 76506F72 		.ascii	"vPortSetupTimerInterrupt\000"
 1541      74536574 
 1541      75705469 
 1541      6D657249 
 1541      6E746572 
 1542              	.LASF17:
 1543 025d 73697A65 		.ascii	"sizetype\000"
 1543      74797065 
 1543      00
 1544              	.LASF1:
 1545 0266 6C6F6E67 		.ascii	"long long int\000"
 1545      206C6F6E 
 1545      6720696E 
 1545      7400
 1546              	.LASF16:
 1547 0274 63686172 		.ascii	"char\000"
 1547      00
 1548              	.LASF19:
 1549 0279 53746163 		.ascii	"StackType_t\000"
 1549      6B547970 
 1549      655F7400 
 1550              	.LASF27:
 1551 0285 76506F72 		.ascii	"vPortSVCHandler\000"
 1551      74535643 
 1551      48616E64 
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 46


 1551      6C657200 
 1552              	.LASF42:
 1553 0295 473A5C70 		.ascii	"G:\\project\\PsocWagen\\PSoC\\PSoCWagen\\PsocWagen."
 1553      726F6A65 
 1553      63745C50 
 1553      736F6357 
 1553      6167656E 
 1554 02c3 63796473 		.ascii	"cydsn\000"
 1554      6E00
 1555              	.LASF5:
 1556 02c9 73686F72 		.ascii	"short int\000"
 1556      7420696E 
 1556      7400
 1557              	.LASF30:
 1558 02d3 76506F72 		.ascii	"vPortExitCritical\000"
 1558      74457869 
 1558      74437269 
 1558      74696361 
 1558      6C00
 1559              	.LASF13:
 1560 02e5 75696E74 		.ascii	"uint32_t\000"
 1560      33325F74 
 1560      00
 1561              	.LASF44:
 1562 02ee 756C4E65 		.ascii	"ulNewMaskValue\000"
 1562      774D6173 
 1562      6B56616C 
 1562      756500
 1563              	.LASF20:
 1564 02fd 42617365 		.ascii	"BaseType_t\000"
 1564      54797065 
 1564      5F7400
 1565              	.LASF46:
 1566 0308 70727650 		.ascii	"prvPortStartFirstTask\000"
 1566      6F727453 
 1566      74617274 
 1566      46697273 
 1566      74546173 
 1567              	.LASF2:
 1568 031e 6C6F6E67 		.ascii	"long double\000"
 1568      20646F75 
 1568      626C6500 
 1569              	.LASF3:
 1570 032a 7369676E 		.ascii	"signed char\000"
 1570      65642063 
 1570      68617200 
 1571              	.LASF35:
 1572 0336 78506F72 		.ascii	"xPortStartScheduler\000"
 1572      74537461 
 1572      72745363 
 1572      68656475 
 1572      6C657200 
 1573              	.LASF21:
 1574 034a 55426173 		.ascii	"UBaseType_t\000"
 1574      65547970 
 1574      655F7400 
 1575              	.LASF34:
ARM GAS  C:\Users\df16\AppData\Local\Temp\ccmNEiZf.s 			page 47


 1576 0356 7078506F 		.ascii	"pxPortInitialiseStack\000"
 1576      7274496E 
 1576      69746961 
 1576      6C697365 
 1576      53746163 
 1577              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
